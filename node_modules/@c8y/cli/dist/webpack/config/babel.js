"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const webpack_merge_1 = require("webpack-merge");
const defaultPreset = require("@babel/preset-env");
const babelNgAnnotate = require("babel-plugin-angularjs-annotate");
const babelTransformAsync = require("@babel/plugin-transform-async-to-generator");
const babelOptionalChaining = require("@babel/plugin-proposal-optional-chaining");
// this is not great, but i couldn't solve this with webpack merge
// TODO: Find a better solution for this
Object.defineProperty(config, 'mergeFn', {
    value: (finalConfig, babelConfig) => {
        const tsRuleFinder = ({ test }) => String(test).match(/\.ts\)?\$\/$/);
        const productionTsRule = babelConfig.module.rules.find(tsRuleFinder);
        const finalTsRule = finalConfig.module.rules.find(tsRuleFinder);
        if (productionTsRule && finalTsRule) {
            finalTsRule.use = [...productionTsRule.use, ...finalTsRule.use];
            babelConfig.module.rules = babelConfig.module.rules.filter(rule => rule !== productionTsRule);
        }
        return (0, webpack_merge_1.merge)(finalConfig, babelConfig);
    }
});
function config(env) {
    let presets = [];
    let plugins = [babelTransformAsync, babelOptionalChaining];
    if (env.mode === 'production' || env.forceBabel) {
        presets = [defaultPreset];
        plugins = [babelNgAnnotate, babelTransformAsync, babelOptionalChaining];
    }
    const jsRules = {
        test: /\.js$/,
        exclude: [/node_modules.(?!@c8y.ngx-components)/, /packages.client/, /app-bootstrap/],
        resolve: {
            fullySpecified: false
        },
        use: [
            {
                loader: 'babel-loader',
                options: {
                    babelrc: false,
                    plugins,
                    presets
                }
            }
        ]
    };
    const tsRules = {
        test: /\.ts$/,
        exclude: [/app-bootstrap/],
        use: [
            {
                loader: 'babel-loader',
                options: { plugins, babelrc: false, presets }
            }
        ]
    };
    const mjsRules = {
        test: /\.mjs$/,
        exclude: [/node_modules.(?!@c8y.ngx-components)/, /packages.client/, /app-bootstrap/],
        resolve: {
            fullySpecified: false
        },
        use: [
            {
                loader: 'babel-loader',
                options: { plugins, babelrc: false, presets }
            }
        ]
    };
    return {
        module: {
            rules: [jsRules, tsRules, mjsRules]
        }
    };
}
exports.config = config;
//# sourceMappingURL=babel.js.map
import { importProvidersFrom, Injectable, InjectionToken, Injector } from '@angular/core';
import { Router, ROUTES } from '@angular/router';
import { ViewContext } from './router.model';
import { ContextRouteService } from './context-route.service';
import { distinctUntilChanged, filter, shareReplay, take } from 'rxjs/operators';
import { fromTriggerOnce, hookGeneric, getInjectedHooks, InjectionType, ExtensionPointWithoutStateForPlugins } from '../common/extension-hooks';
import { PluginsResolveService } from '../plugins';
import { flatten } from 'lodash';
import { OptionsService } from '../common/options.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-route.service";
import * as i3 from "../plugins";
import * as i4 from "../common/options.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookRoute` function instead.
 */
export const HOOK_ROUTE = new InjectionToken('HOOK_ROUTE');
/**
 * You can either provide a single `Route` as parameter:
 * ```typescript
 *  hookRoute(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookRoute([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<Route>`
 * ```typescript
 *  export class MyRouteFactory implements ExtensionFactory<Route> {...}
 *  ...
 *  hookRoute(MyRouteFactory)
 * ```
 * A typed alternative to `HOOK_ROUTE`.
 * @param route The `Route`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookRoute(route, options) {
    return hookGeneric(route, HOOK_ROUTE, options);
}
/**
 * A service which defines routes for the application. You can use
 * HOOK_ROUTES or pass
 */
export class RouterService extends ExtensionPointWithoutStateForPlugins {
    constructor(rootInjector, router, contextRouteService, plugins, options) {
        super(rootInjector, plugins);
        this.router = router;
        this.contextRouteService = contextRouteService;
        this.state = new Map();
        this.items$ = this.setupItemsObservable();
        // We are doing a self subscription to add the new routes
        // to the router configuration.
        this.items$.subscribe((routes) => {
            const toAddRoutes = routes.filter((route) => {
                const path = `${route.context || ''}${route.path}`;
                const isAlreadyAdded = this.state.has(path);
                if (!isAlreadyAdded) {
                    this.state.set(path, route);
                }
                return !isAlreadyAdded;
            });
            this.addRoute(toAddRoutes);
        });
        plugins.pluginDetails$.subscribe(({ moduleRef, remoteNgModule }) => {
            this.resolveRouterForChildRoutes(moduleRef, remoteNgModule);
        });
        // only needed in case of pure angular application
        // otherwise handled by bridge service
        if (!options.upgrade) {
            plugins.allPluginsLoaded$
                .pipe(filter(tmp => !!tmp), take(1))
                .subscribe(() => {
                this.router.initialNavigation();
            });
        }
    }
    /**
     * Refresh the current context
     */
    refresh() {
        super.refresh();
        this.contextRouteService.refreshContext();
    }
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    }
    /**
     * Determines if the given MO is an group or an device and returns
     * the correct href to link correctly to that MO.
     * @param groupOrDevice The MO of a group or the device.
     * @param prefix How should the link be prefixed.
     */
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}${ViewContext.Group.replace(':id', groupOrDevice.id)}`;
        }
        return `${prefix}${ViewContext.Device.replace(':id', groupOrDevice.id)}`;
    }
    setupItemsObservable() {
        return fromTriggerOnce(this.router, this.refresh$, [
            getInjectedHooks(HOOK_ROUTE, this.injectors, InjectionType.ROUTE),
            () => this.factories
        ]).pipe(distinctUntilChanged(), shareReplay(1));
    }
    addRoutes(routes) {
        // Empty route needs to be last as of navigation to angularjs routes
        // if ** route hit, the angularjs routes are loaded.
        const emptyRoute = this.router.config.find(r => r.path === '**');
        this.router.resetConfig([
            ...this.router.config.filter(r => r.path !== '**'),
            ...routes.map((r) => this.convertRoute(this.router.config, r)),
            emptyRoute
        ].filter(Boolean));
    }
    convertRoute(initialConfig, route) {
        if (route.context) {
            initialConfig.forEach((r) => {
                if (r.data && r.data.context === route.context) {
                    r.children = [route, ...(r.children || [])];
                }
            });
            return;
        }
        return route;
    }
    resolveRouterForChildRoutes(moduleRef, remoteNgModule) {
        // NOTE: stolen from lazy loaded routes from Angular itself.
        // https://github.com/angular/angular/blob/da58801f95c66c201e332189af25702bdd722f3f/packages/router/src/router_config_loader.ts#L103-L108
        const rawRoutes = flatten(moduleRef.injector.get(ROUTES, [], { self: true, optional: true }));
        if (rawRoutes.length > 0) {
            const routeWithInjector = rawRoutes.map(route => {
                route.providers = [importProvidersFrom(remoteNgModule)];
                return route;
            });
            this.addRoute(routeWithInjector);
        }
    }
}
RouterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.ContextRouteService }, { token: i3.PluginsResolveService }, { token: i4.OptionsService }], target: i0.ɵɵFactoryTarget.Injectable });
RouterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.ContextRouteService }, { type: i3.PluginsResolveService }, { type: i4.OptionsService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable, Injector } from '@angular/core';
import { InventoryService } from '@c8y/ngx-components/api';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
import * as i0 from "@angular/core";
export class ContextRouteGuard {
    constructor(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    canActivate(route) {
        const id = route.paramMap.get('id');
        const service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(contextData => {
            Object.keys(route.data.contextData).forEach(key => delete route.data.contextData[key]);
            Object.assign(route.data.contextData, contextData);
        }), map(() => true), catchError(() => of(false)));
    }
    service(route) {
        const serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    }
    detailCached(service, id) {
        if (id === 'new') {
            return of(undefined);
        }
        const cache = this.getCache(service);
        let cached = cache[id];
        if (!cached) {
            const params = service instanceof InventoryService ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(({ data }) => data), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    }
    clearDetailCached(service, id) {
        const cache = this.getCache(service);
        delete cache[id];
    }
    getCache(service) {
        let cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    }
}
ContextRouteGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ContextRouteGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteGuard, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteGuard, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL2NvbnRleHQtcm91dGUuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUs3RCxNQUFNLE9BQU8saUJBQWlCO0lBRTVCLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFEOUIsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDYyxDQUFDO0lBRTFDLFdBQVcsQ0FBQyxLQUE2QjtRQUN2QyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3hDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNmLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBNkI7UUFDM0MsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDOUIsSUFBSSxFQUFFLEtBQUssS0FBSyxFQUFFO1lBQ2hCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sTUFBTSxHQUFHLE9BQU8sWUFBWSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN6RixNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDdkIsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7WUFDRixLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ25DLE1BQU0sS0FBSyxHQUFrQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTyxRQUFRLENBQUMsT0FBTztRQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7OEdBcERVLGlCQUFpQjtrSEFBakIsaUJBQWlCLGNBRmhCLE1BQU07MkZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hcGknO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc2hhcmVSZXBsYXksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFZpZXdDb250ZXh0U2VydmljZXMgfSBmcm9tICcuL3ZpZXctY29udGV4dC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dFJvdXRlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgY2FjaGVzID0gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGlkID0gcm91dGUucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2Uocm91dGUpO1xuICAgIHRoaXMuY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpO1xuICAgIHJldHVybiB0aGlzLmRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkucGlwZShcbiAgICAgIHRhcChjb250ZXh0RGF0YSA9PiB7XG4gICAgICAgIE9iamVjdC5rZXlzKHJvdXRlLmRhdGEuY29udGV4dERhdGEpLmZvckVhY2goa2V5ID0+IGRlbGV0ZSByb3V0ZS5kYXRhLmNvbnRleHREYXRhW2tleV0pO1xuICAgICAgICBPYmplY3QuYXNzaWduKHJvdXRlLmRhdGEuY29udGV4dERhdGEsIGNvbnRleHREYXRhKTtcbiAgICAgIH0pLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiBvZihmYWxzZSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2VydmljZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IHNlcnZpY2VJbnN0YW5jZSA9IFZpZXdDb250ZXh0U2VydmljZXMuY29udGV4dFRvU2VydmljZShyb3V0ZS5kYXRhLmNvbnRleHQpO1xuICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldChzZXJ2aWNlSW5zdGFuY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmIChpZCA9PT0gJ25ldycpIHtcbiAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0Q2FjaGUoc2VydmljZSk7XG4gICAgbGV0IGNhY2hlZCA9IGNhY2hlW2lkXTtcbiAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc2VydmljZSBpbnN0YW5jZW9mIEludmVudG9yeVNlcnZpY2UgPyB7IHdpdGhDaGlsZHJlbjogZmFsc2UgfSA6IHVuZGVmaW5lZDtcbiAgICAgIGNhY2hlZCA9IGZyb20oc2VydmljZS5kZXRhaWwoaWQsIHBhcmFtcykpLnBpcGUoXG4gICAgICAgIG1hcCgoeyBkYXRhIH0pID0+IGRhdGEpLFxuICAgICAgICBzaGFyZVJlcGxheSgxKVxuICAgICAgKTtcbiAgICAgIGNhY2hlW2lkXSA9IGNhY2hlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpIHtcbiAgICBjb25zdCBjYWNoZTogTWFwPGFueSwgYW55PiA9IHRoaXMuZ2V0Q2FjaGUoc2VydmljZSk7XG4gICAgZGVsZXRlIGNhY2hlW2lkXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2FjaGUoc2VydmljZSkge1xuICAgIGxldCBjYWNoZSA9IHRoaXMuY2FjaGVzLmdldChzZXJ2aWNlKTtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICBjYWNoZSA9IHt9O1xuICAgICAgdGhpcy5jYWNoZXMuc2V0KHNlcnZpY2UsIGNhY2hlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG59XG4iXX0=
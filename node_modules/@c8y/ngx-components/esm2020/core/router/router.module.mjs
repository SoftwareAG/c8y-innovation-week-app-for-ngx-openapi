import { NgModule } from '@angular/core';
import { RouterModule as NgRouterModule } from '@angular/router';
import { RouterService } from './router.service';
import { ContextRouteComponent } from './context-route.component';
import { HeaderModule } from '../header/header.module';
import { CommonModule } from '../common/common.module';
import { ContextRouteGuard } from './context-route.guard';
import { ViewContext } from './router.model';
import { RouterTabsResolver } from './router-tabs.resolver';
import { EmptyComponent } from './empty.component';
import * as i0 from "@angular/core";
import * as i1 from "./router.service";
export const extraRoutes = [
    {
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }
];
// tslint:disable-next-line: forin
for (const key in ViewContext) {
    const context = ViewContext[key];
    extraRoutes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver
            // contextData: ContextRouteGuard
        }
    });
}
/**
 * A C8Y router implementation. It implements some default routes needed
 * as well as context routes. Context routes are useful, if you want to
 * use context data on a certain view (e.g. a device), then this routes
 * automatically resolve the associated managed object.
 *
 * You can use this in combination of the Angular default RouterModule
 * or use only this module. Context routes can only be added via the
 * HOOK_ROUTES hook.
 */
export class RouterModule {
    /**
     * Same interface as @angular/router module.
     * Sets `initialNavigation` always to `disabled` and `useHash` always to `true`.
     * @param routes The configured routes.
     * @param config The router default configuration.
     * @returns The module and providers.
     */
    static forRoot(routes = [], config) {
        if (!config) {
            config = {};
        }
        // initialNavigation disabled by default because of MTM-44047 (routes triggered before the actual login)
        config.initialNavigation = config.initialNavigation ?? 'disabled';
        config.useHash = config.useHash ?? true;
        const ngRouterModule = NgRouterModule.forRoot([...routes, ...extraRoutes], config);
        return {
            ngModule: RouterModule,
            providers: [...ngRouterModule.providers]
        };
    }
    constructor(
    // Declared but never used is intended: to always have a instance of RouterService.
    routerService) {
        this.routerService = routerService;
    }
}
RouterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterModule, deps: [{ token: i1.RouterService }], target: i0.ɵɵFactoryTarget.NgModule });
RouterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: RouterModule, declarations: [ContextRouteComponent, EmptyComponent], imports: [NgRouterModule, HeaderModule, CommonModule] });
RouterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterModule, imports: [NgRouterModule, HeaderModule, CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RouterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContextRouteComponent, EmptyComponent],
                    imports: [NgRouterModule, HeaderModule, CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.RouterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFnQixZQUFZLElBQUksY0FBYyxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDdkYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBUyxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBRW5ELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBWTtJQUNsQztRQUNFLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxjQUFjO0tBQzFCO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsYUFBYTtRQUNuQixTQUFTLEVBQUUsY0FBYztLQUMxQjtDQUNGLENBQUM7QUFDRixrQ0FBa0M7QUFDbEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUU7SUFDN0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDZixJQUFJLEVBQUUsT0FBTztRQUNiLFNBQVMsRUFBRSxxQkFBcUI7UUFDaEMsV0FBVyxFQUFFLENBQUMsaUJBQWlCLENBQUM7UUFDaEMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7UUFDbEMsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixpQ0FBaUM7U0FDbEM7S0FDRixDQUFDLENBQUM7Q0FDSjtBQUVEOzs7Ozs7Ozs7R0FTRztBQUtILE1BQU0sT0FBTyxZQUFZO0lBQ3ZCOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUIsRUFBRSxFQUFFLE1BQXFCO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2I7UUFDRCx3R0FBd0c7UUFDeEcsTUFBTSxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLENBQUM7UUFDbEUsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztRQUV4QyxNQUFNLGNBQWMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxXQUFXLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVuRixPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDO1NBQ3pDLENBQUM7SUFDSixDQUFDO0lBRUQ7SUFDRSxtRkFBbUY7SUFDM0UsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDbkMsQ0FBQzs7eUdBM0JPLFlBQVk7MEdBQVosWUFBWSxpQkFIUixxQkFBcUIsRUFBRSxjQUFjLGFBQzFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsWUFBWTswR0FFekMsWUFBWSxZQUZiLGNBQWMsRUFBRSxZQUFZLEVBQUUsWUFBWTsyRkFFekMsWUFBWTtrQkFKeEIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxjQUFjLENBQUM7b0JBQ3JELE9BQU8sRUFBRSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDO2lCQUN0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHRyYU9wdGlvbnMsIFJvdXRlck1vZHVsZSBhcyBOZ1JvdXRlck1vZHVsZSwgUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJvdXRlclNlcnZpY2UgfSBmcm9tICcuL3JvdXRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRleHRSb3V0ZUNvbXBvbmVudCB9IGZyb20gJy4vY29udGV4dC1yb3V0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGVhZGVyTW9kdWxlIH0gZnJvbSAnLi4vaGVhZGVyL2hlYWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ29udGV4dFJvdXRlR3VhcmQgfSBmcm9tICcuL2NvbnRleHQtcm91dGUuZ3VhcmQnO1xuaW1wb3J0IHsgVmlld0NvbnRleHQsIFJvdXRlIH0gZnJvbSAnLi9yb3V0ZXIubW9kZWwnO1xuaW1wb3J0IHsgUm91dGVyVGFic1Jlc29sdmVyIH0gZnJvbSAnLi9yb3V0ZXItdGFicy5yZXNvbHZlcic7XG5pbXBvcnQgeyBFbXB0eUNvbXBvbmVudCB9IGZyb20gJy4vZW1wdHkuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IGV4dHJhUm91dGVzOiBSb3V0ZVtdID0gW1xuICB7XG4gICAgcGF0aDogJ3VzZXJzL25ldycsXG4gICAgY29tcG9uZW50OiBFbXB0eUNvbXBvbmVudFxuICB9LFxuICB7XG4gICAgcGF0aDogJ3RlbmFudHMvbmV3JyxcbiAgICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50XG4gIH1cbl07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXG5mb3IgKGNvbnN0IGtleSBpbiBWaWV3Q29udGV4dCkge1xuICBjb25zdCBjb250ZXh0ID0gVmlld0NvbnRleHRba2V5XTtcbiAgZXh0cmFSb3V0ZXMucHVzaCh7XG4gICAgcGF0aDogY29udGV4dCxcbiAgICBjb21wb25lbnQ6IENvbnRleHRSb3V0ZUNvbXBvbmVudCxcbiAgICBjYW5BY3RpdmF0ZTogW0NvbnRleHRSb3V0ZUd1YXJkXSxcbiAgICBkYXRhOiB7IGNvbnRleHQsIGNvbnRleHREYXRhOiB7fSB9LFxuICAgIHJlc29sdmU6IHtcbiAgICAgIHRhYnM6IFJvdXRlclRhYnNSZXNvbHZlclxuICAgICAgLy8gY29udGV4dERhdGE6IENvbnRleHRSb3V0ZUd1YXJkXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIEM4WSByb3V0ZXIgaW1wbGVtZW50YXRpb24uIEl0IGltcGxlbWVudHMgc29tZSBkZWZhdWx0IHJvdXRlcyBuZWVkZWRcbiAqIGFzIHdlbGwgYXMgY29udGV4dCByb3V0ZXMuIENvbnRleHQgcm91dGVzIGFyZSB1c2VmdWwsIGlmIHlvdSB3YW50IHRvXG4gKiB1c2UgY29udGV4dCBkYXRhIG9uIGEgY2VydGFpbiB2aWV3IChlLmcuIGEgZGV2aWNlKSwgdGhlbiB0aGlzIHJvdXRlc1xuICogYXV0b21hdGljYWxseSByZXNvbHZlIHRoZSBhc3NvY2lhdGVkIG1hbmFnZWQgb2JqZWN0LlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoaXMgaW4gY29tYmluYXRpb24gb2YgdGhlIEFuZ3VsYXIgZGVmYXVsdCBSb3V0ZXJNb2R1bGVcbiAqIG9yIHVzZSBvbmx5IHRoaXMgbW9kdWxlLiBDb250ZXh0IHJvdXRlcyBjYW4gb25seSBiZSBhZGRlZCB2aWEgdGhlXG4gKiBIT09LX1JPVVRFUyBob29rLlxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtDb250ZXh0Um91dGVDb21wb25lbnQsIEVtcHR5Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW05nUm91dGVyTW9kdWxlLCBIZWFkZXJNb2R1bGUsIENvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgUm91dGVyTW9kdWxlIHtcbiAgLyoqXG4gICAqIFNhbWUgaW50ZXJmYWNlIGFzIEBhbmd1bGFyL3JvdXRlciBtb2R1bGUuXG4gICAqIFNldHMgYGluaXRpYWxOYXZpZ2F0aW9uYCBhbHdheXMgdG8gYGRpc2FibGVkYCBhbmQgYHVzZUhhc2hgIGFsd2F5cyB0byBgdHJ1ZWAuXG4gICAqIEBwYXJhbSByb3V0ZXMgVGhlIGNvbmZpZ3VyZWQgcm91dGVzLlxuICAgKiBAcGFyYW0gY29uZmlnIFRoZSByb3V0ZXIgZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJucyBUaGUgbW9kdWxlIGFuZCBwcm92aWRlcnMuXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChyb3V0ZXM6IFJvdXRlcyA9IFtdLCBjb25maWc/OiBFeHRyYU9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJvdXRlck1vZHVsZT4ge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICBjb25maWcgPSB7fTtcbiAgICB9XG4gICAgLy8gaW5pdGlhbE5hdmlnYXRpb24gZGlzYWJsZWQgYnkgZGVmYXVsdCBiZWNhdXNlIG9mIE1UTS00NDA0NyAocm91dGVzIHRyaWdnZXJlZCBiZWZvcmUgdGhlIGFjdHVhbCBsb2dpbilcbiAgICBjb25maWcuaW5pdGlhbE5hdmlnYXRpb24gPSBjb25maWcuaW5pdGlhbE5hdmlnYXRpb24gPz8gJ2Rpc2FibGVkJztcbiAgICBjb25maWcudXNlSGFzaCA9IGNvbmZpZy51c2VIYXNoID8/IHRydWU7XG5cbiAgICBjb25zdCBuZ1JvdXRlck1vZHVsZSA9IE5nUm91dGVyTW9kdWxlLmZvclJvb3QoWy4uLnJvdXRlcywgLi4uZXh0cmFSb3V0ZXNdLCBjb25maWcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFsuLi5uZ1JvdXRlck1vZHVsZS5wcm92aWRlcnNdXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIERlY2xhcmVkIGJ1dCBuZXZlciB1c2VkIGlzIGludGVuZGVkOiB0byBhbHdheXMgaGF2ZSBhIGluc3RhbmNlIG9mIFJvdXRlclNlcnZpY2UuXG4gICAgcHJpdmF0ZSByb3V0ZXJTZXJ2aWNlOiBSb3V0ZXJTZXJ2aWNlXG4gICkge31cbn1cbiJdfQ==
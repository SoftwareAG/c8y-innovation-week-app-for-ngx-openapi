import { Injectable, Injector } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { ApiService } from '@c8y/ngx-components/api';
import { NEVER, Subject } from 'rxjs';
import { filter, merge, switchMap } from 'rxjs/operators';
import { TabsService } from '../tabs/tabs.service';
import { RouterTabsResolver } from './router-tabs.resolver';
import { ViewContext } from './router.model';
import { ViewContextServices } from './view-context.service';
import * as i0 from "@angular/core";
import * as i1 from "./router-tabs.resolver";
import * as i2 from "../tabs/tabs.service";
import * as i3 from "@angular/router";
import * as i4 from "@c8y/ngx-components/api";
export class ContextRouteService {
    constructor(tabsResolver, tabsService, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
        this.ID_REGEX = /([0-9]+)/;
    }
    /**
     * Resolves the current context data. If no context was found, null is returned.
     *
     * @param activatedRoute The current activated route.
     */
    getContextData(activatedRoute) {
        const data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        if (data.context) {
            return data;
        }
        return null;
    }
    init(route) {
        this.routerSubscription = this.router.events
            .pipe(filter(e => e instanceof NavigationEnd))
            .subscribe(() => this.redirectToFirstTab());
        this.dataSubscription = route.data
            .pipe(merge(this.updatedContext(route), this.refreshTrigger), switchMap(() => this.tabsResolver.resolve(route.snapshot)))
            .subscribe(tabs => this.updateTabs(tabs));
    }
    destroy() {
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
    }
    refreshContext() {
        this.refreshTrigger.next();
    }
    /**
     * Sets a new contextData in the ActivatedRoute.
     * @param activatedRoute The current activated route.
     * @param contextData New contextData.
     */
    setContext(activatedRoute, contextData) {
        const data = !activatedRoute.snapshot.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        if (!data) {
            return;
        }
        data.contextData = { ...contextData };
    }
    updatedContext(route) {
        const { data } = route.snapshot;
        const serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            const service = this.injector.get(serviceInstance);
            const detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
            const contextRegex = new RegExp(detailsUrlRegex, 'i');
            const childrenRegex = new RegExp(`${detailsUrlRegex}/child`, 'i');
            const filterResponse = ({ url, method }) => {
                const contextChanged = contextRegex.test(url) && ['POST', 'PUT'].includes(method);
                const childrenAffected = childrenRegex.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    }
    updateTabs(tabs = []) {
        this.lastAddedTabs.forEach(t => this.tabsService.remove(t));
        this.lastAddedTabs = tabs;
        tabs.forEach(t => this.tabsService.add(t));
        this.redirectToFirstTab();
    }
    redirectToFirstTab() {
        const currentContextId = (this.router.url.match(this.ID_REGEX) || []).shift();
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.pipe(filter((tab) => !!tab?.path)).subscribe((tab) => {
                const tabPathId = (tab.path.match(this.ID_REGEX) || []).shift();
                if (currentContextId === tabPathId) {
                    this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    }
    needsRedirect() {
        const tree = this.router.parseUrl(this.router.url);
        const groups = tree.root.children[PRIMARY_OUTLET];
        const context = this.getMatchingContextRoute(this.router.url);
        if (!context) {
            return groups.segments.length === 2;
        }
        else {
            return context.split('/').length === groups.segments.length;
        }
    }
    getMatchingContextRoute(url) {
        const viewContexts = Object.values(ViewContext);
        const urlWithoutId = url.replace(/\d(.*)/g, '');
        const id = viewContexts.findIndex(context => `/${context.replace(':id', '')}` === urlWithoutId);
        return viewContexts[id];
    }
}
ContextRouteService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteService, deps: [{ token: i1.RouterTabsResolver }, { token: i2.TabsService }, { token: i3.Router }, { token: i4.ApiService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ContextRouteService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextRouteService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.RouterTabsResolver }, { type: i2.TabsService }, { type: i3.Router }, { type: i4.ApiService }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9yb3V0ZXIvY29udGV4dC1yb3V0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFFTCxhQUFhLEVBQ2IsY0FBYyxFQUNkLE1BQU0sRUFHUCxNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxVQUFVLEVBQVcsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsS0FBSyxFQUFjLE9BQU8sRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7O0FBTTdELE1BQU0sT0FBTyxtQkFBbUI7SUFPOUIsWUFDVSxZQUFnQyxFQUNoQyxXQUF3QixFQUN4QixNQUFjLEVBQ2QsVUFBc0IsRUFDdEIsUUFBa0I7UUFKbEIsaUJBQVksR0FBWixZQUFZLENBQW9CO1FBQ2hDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFUcEIsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFDbkIsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLGFBQVEsR0FBRyxV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LEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDN0Q7SUFDSCxDQUFDO0lBRU8sdUJBQXVCLENBQUMsR0FBRztRQUNqQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWhELE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssWUFBWSxDQUFDLENBQUM7UUFDaEcsT0FBTyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Z0hBL0hVLG1CQUFtQjtvSEFBbkIsbUJBQW1CLGNBRmxCLE1BQU07MkZBRVAsbUJBQW1CO2tCQUgvQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBY3RpdmF0ZWRSb3V0ZSxcbiAgTmF2aWdhdGlvbkVuZCxcbiAgUFJJTUFSWV9PVVRMRVQsXG4gIFJvdXRlcixcbiAgVXJsU2VnbWVudEdyb3VwLFxuICBVcmxUcmVlXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBcGlTZXJ2aWNlLCBBcGlDYWxsIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hcGknO1xuaW1wb3J0IHsgTkVWRVIsIE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtZXJnZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udGV4dERhdGEgfSBmcm9tICcuL3JvdXRlci5tb2RlbCc7XG5pbXBvcnQgeyBUYWIgfSBmcm9tICcuLi90YWJzL3RhYi5tb2RlbCc7XG5pbXBvcnQgeyBUYWJzU2VydmljZSB9IGZyb20gJy4uL3RhYnMvdGFicy5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRlclRhYnNSZXNvbHZlciB9IGZyb20gJy4vcm91dGVyLXRhYnMucmVzb2x2ZXInO1xuaW1wb3J0IHsgVmlld0NvbnRleHQgfSBmcm9tICcuL3JvdXRlci5tb2RlbCc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dFNlcnZpY2VzIH0gZnJvbSAnLi92aWV3LWNvbnRleHQuc2VydmljZSc7XG5pbXBvcnQgeyBJSWRlbnRpZmllZCB9IGZyb20gJ0BjOHkvY2xpZW50JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dFJvdXRlU2VydmljZSB7XG4gIHByaXZhdGUgZGF0YVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHJvdXRlclN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGxhc3RBZGRlZFRhYnMgPSBbXTtcbiAgcHJpdmF0ZSByZWZyZXNoVHJpZ2dlciA9IG5ldyBTdWJqZWN0KCk7XG4gIHByaXZhdGUgSURfUkVHRVggPSAvKFswLTldKykvO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGFic1Jlc29sdmVyOiBSb3V0ZXJUYWJzUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSB0YWJzU2VydmljZTogVGFic1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGUgY3VycmVudCBjb250ZXh0IGRhdGEuIElmIG5vIGNvbnRleHQgd2FzIGZvdW5kLCBudWxsIGlzIHJldHVybmVkLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aXZhdGVkUm91dGUgVGhlIGN1cnJlbnQgYWN0aXZhdGVkIHJvdXRlLlxuICAgKi9cbiAgZ2V0Q29udGV4dERhdGEoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKTogQ29udGV4dERhdGEge1xuICAgIGNvbnN0IGRhdGEgPVxuICAgICAgIWFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LnBhcmVudCB8fCBhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZhdGVkUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG4gICAgaWYgKGRhdGEuY29udGV4dCkge1xuICAgICAgcmV0dXJuIGRhdGEgYXMgQ29udGV4dERhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaW5pdChyb3V0ZTogQWN0aXZhdGVkUm91dGUpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlclN1YnNjcmlwdGlvbiA9IHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoZmlsdGVyKGUgPT4gZSBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZGlyZWN0VG9GaXJzdFRhYigpKTtcblxuICAgIHRoaXMuZGF0YVN1YnNjcmlwdGlvbiA9IHJvdXRlLmRhdGFcbiAgICAgIC5waXBlKFxuICAgICAgICBtZXJnZSh0aGlzLnVwZGF0ZWRDb250ZXh0KHJvdXRlKSwgdGhpcy5yZWZyZXNoVHJpZ2dlciksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLnRhYnNSZXNvbHZlci5yZXNvbHZlKHJvdXRlLnNuYXBzaG90KSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodGFicyA9PiB0aGlzLnVwZGF0ZVRhYnModGFicykpO1xuICB9XG5cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGFTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnJvdXRlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMubGFzdEFkZGVkVGFicy5mb3JFYWNoKHQgPT4gdGhpcy50YWJzU2VydmljZS5yZW1vdmUodCkpO1xuICB9XG5cbiAgcmVmcmVzaENvbnRleHQoKSB7XG4gICAgdGhpcy5yZWZyZXNoVHJpZ2dlci5uZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIG5ldyBjb250ZXh0RGF0YSBpbiB0aGUgQWN0aXZhdGVkUm91dGUuXG4gICAqIEBwYXJhbSBhY3RpdmF0ZWRSb3V0ZSBUaGUgY3VycmVudCBhY3RpdmF0ZWQgcm91dGUuXG4gICAqIEBwYXJhbSBjb250ZXh0RGF0YSBOZXcgY29udGV4dERhdGEuXG4gICAqL1xuICBzZXRDb250ZXh0KGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgY29udGV4dERhdGE6IElJZGVudGlmaWVkKTogdm9pZCB7XG4gICAgY29uc3QgZGF0YSA9XG4gICAgICAhYWN0aXZhdGVkUm91dGUuc25hcHNob3QucGFyZW50IHx8IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmF0ZWRSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcblxuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLmNvbnRleHREYXRhID0geyAuLi5jb250ZXh0RGF0YSB9O1xuICB9XG5cbiAgdXBkYXRlZENvbnRleHQocm91dGU6IEFjdGl2YXRlZFJvdXRlKTogT2JzZXJ2YWJsZTxBcGlDYWxsPiB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSByb3V0ZS5zbmFwc2hvdDtcbiAgICBjb25zdCBzZXJ2aWNlSW5zdGFuY2UgPSBWaWV3Q29udGV4dFNlcnZpY2VzLmNvbnRleHRUb1NlcnZpY2UoZGF0YS5jb250ZXh0KTtcbiAgICBpZiAoc2VydmljZUluc3RhbmNlKSB7XG4gICAgICBjb25zdCBzZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoc2VydmljZUluc3RhbmNlKTtcbiAgICAgIGNvbnN0IGRldGFpbHNVcmxSZWdleCA9IHNlcnZpY2UuZ2V0RGV0YWlsVXJsKGRhdGEuY29udGV4dERhdGEpLnJlcGxhY2UoL1xcZCsvZywgJz9cXFxcZConKTtcbiAgICAgIGNvbnN0IGNvbnRleHRSZWdleCA9IG5ldyBSZWdFeHAoZGV0YWlsc1VybFJlZ2V4LCAnaScpO1xuICAgICAgY29uc3QgY2hpbGRyZW5SZWdleCA9IG5ldyBSZWdFeHAoYCR7ZGV0YWlsc1VybFJlZ2V4fS9jaGlsZGAsICdpJyk7XG4gICAgICBjb25zdCBmaWx0ZXJSZXNwb25zZSA9ICh7IHVybCwgbWV0aG9kIH0pID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dENoYW5nZWQgPSBjb250ZXh0UmVnZXgudGVzdCh1cmwpICYmIFsnUE9TVCcsICdQVVQnXS5pbmNsdWRlcyhtZXRob2QpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbkFmZmVjdGVkID0gY2hpbGRyZW5SZWdleC50ZXN0KHVybCkgJiYgWydQT1NUJywgJ0RFTEVURSddLmluY2x1ZGVzKG1ldGhvZCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0Q2hhbmdlZCB8fCBjaGlsZHJlbkFmZmVjdGVkO1xuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuaG9va1Jlc3BvbnNlKGZpbHRlclJlc3BvbnNlKTtcbiAgICB9XG4gICAgcmV0dXJuIE5FVkVSO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVUYWJzKHRhYnMgPSBbXSkge1xuICAgIHRoaXMubGFzdEFkZGVkVGFicy5mb3JFYWNoKHQgPT4gdGhpcy50YWJzU2VydmljZS5yZW1vdmUodCkpO1xuICAgIHRoaXMubGFzdEFkZGVkVGFicyA9IHRhYnM7XG4gICAgdGFicy5mb3JFYWNoKHQgPT4gdGhpcy50YWJzU2VydmljZS5hZGQodCkpO1xuICAgIHRoaXMucmVkaXJlY3RUb0ZpcnN0VGFiKCk7XG4gIH1cblxuICBwcml2YXRlIHJlZGlyZWN0VG9GaXJzdFRhYigpIHtcbiAgICBjb25zdCBjdXJyZW50Q29udGV4dElkID0gKHRoaXMucm91dGVyLnVybC5tYXRjaCh0aGlzLklEX1JFR0VYKSB8fCBbXSkuc2hpZnQoKTtcblxuICAgIGlmICh0aGlzLm5lZWRzUmVkaXJlY3QoKSkge1xuICAgICAgdGhpcy50YWJzU2VydmljZS5maXJzdFRhYiQucGlwZShmaWx0ZXIoKHRhYjogVGFiKSA9PiAhIXRhYj8ucGF0aCkpLnN1YnNjcmliZSgodGFiOiBUYWIpID0+IHtcbiAgICAgICAgY29uc3QgdGFiUGF0aElkID0gKHRhYi5wYXRoLm1hdGNoKHRoaXMuSURfUkVHRVgpIHx8IFtdKS5zaGlmdCgpO1xuICAgICAgICBpZiAoY3VycmVudENvbnRleHRJZCA9PT0gdGFiUGF0aElkKSB7XG4gICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh0YWIucGF0aCwgeyByZXBsYWNlVXJsOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG5lZWRzUmVkaXJlY3QoKSB7XG4gICAgY29uc3QgdHJlZTogVXJsVHJlZSA9IHRoaXMucm91dGVyLnBhcnNlVXJsKHRoaXMucm91dGVyLnVybCk7XG4gICAgY29uc3QgZ3JvdXBzOiBVcmxTZWdtZW50R3JvdXAgPSB0cmVlLnJvb3QuY2hpbGRyZW5bUFJJTUFSWV9PVVRMRVRdO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0TWF0Y2hpbmdDb250ZXh0Um91dGUodGhpcy5yb3V0ZXIudXJsKTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cHMuc2VnbWVudHMubGVuZ3RoID09PSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29udGV4dC5zcGxpdCgnLycpLmxlbmd0aCA9PT0gZ3JvdXBzLnNlZ21lbnRzLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldE1hdGNoaW5nQ29udGV4dFJvdXRlKHVybCkge1xuICAgIGNvbnN0IHZpZXdDb250ZXh0cyA9IE9iamVjdC52YWx1ZXMoVmlld0NvbnRleHQpO1xuXG4gICAgY29uc3QgdXJsV2l0aG91dElkID0gdXJsLnJlcGxhY2UoL1xcZCguKikvZywgJycpO1xuICAgIGNvbnN0IGlkID0gdmlld0NvbnRleHRzLmZpbmRJbmRleChjb250ZXh0ID0+IGAvJHtjb250ZXh0LnJlcGxhY2UoJzppZCcsICcnKX1gID09PSB1cmxXaXRob3V0SWQpO1xuICAgIHJldHVybiB2aWV3Q29udGV4dHNbaWRdO1xuICB9XG59XG4iXX0=
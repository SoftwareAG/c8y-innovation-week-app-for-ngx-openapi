import { NgModule } from '@angular/core';
import { FormsModule as NgFormsModule, ReactiveFormsModule } from '@angular/forms';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { CommonModule } from '../common/common.module';
import { DefaultValidationDirective } from './default-validation.directive';
import { EmailsValidatorDirective } from './emails-validator.directive';
import { FilterInputComponent } from './filter-input.component';
import { FormGroupComponent } from './form-group.component';
import { InputGroupListContainerDirective } from './input-group-list-container.directive';
import { InputGroupListComponent } from './input-group-list.component';
import { IpRangeInputListComponent } from './ip-range-input-list.component';
import { JsonValidationPrettifierDirective } from './json-validation-prettifier.directive';
import { MaxValidationDirective } from './max-validation.directive';
import { MessageDirective } from './message.directive';
import { MessagesComponent } from './messages.component';
import { MinValidationDirective } from './min-validation.directive';
import { PhoneValidationDirective } from './phone-validation.directive';
import { RangeComponent } from './range.component';
import { RangeDirective } from './range.directive';
import { RequiredInputPlaceholderDirective } from './required-input-placeholder.directive';
import { SimpleJsonPathValidatorDirective } from './simple-json-path-validator.directive';
import { TextAreaRowHeightDirective } from './text-area-row-height.directive';
import { UniqueInCollectionByPathValidationDirective } from './unique-in-collection-by-path-validation.directive';
import { ExtractArrayValidationErrorsPipe } from './extract-array-validation-errors.pipe';
import { HumanizeValidationMessagePipe } from './humanize-validation-message.pipe';
import { FilterNonArrayValidationErrorsPipe } from './filter-non-array-validation-errors.pipe';
import * as i0 from "@angular/core";
/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 * @exports RangeComponent A component that allows to display a styled range slider.
 */
export class FormsModule {
}
FormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: FormsModule, declarations: [PhoneValidationDirective,
        DefaultValidationDirective,
        MinValidationDirective,
        MaxValidationDirective,
        FormGroupComponent,
        MessageDirective,
        MessagesComponent,
        InputGroupListComponent,
        InputGroupListContainerDirective,
        JsonValidationPrettifierDirective,
        TextAreaRowHeightDirective,
        RequiredInputPlaceholderDirective,
        IpRangeInputListComponent,
        FilterInputComponent,
        EmailsValidatorDirective,
        RangeDirective,
        RangeComponent,
        SimpleJsonPathValidatorDirective,
        UniqueInCollectionByPathValidationDirective,
        ExtractArrayValidationErrorsPipe,
        FilterNonArrayValidationErrorsPipe,
        HumanizeValidationMessagePipe], imports: [CommonModule, NgFormsModule, ReactiveFormsModule, PopoverModule], exports: [PhoneValidationDirective,
        DefaultValidationDirective,
        MinValidationDirective,
        MaxValidationDirective,
        NgFormsModule,
        FormGroupComponent,
        MessageDirective,
        MessagesComponent,
        InputGroupListComponent,
        InputGroupListContainerDirective,
        JsonValidationPrettifierDirective,
        TextAreaRowHeightDirective,
        RequiredInputPlaceholderDirective,
        IpRangeInputListComponent,
        FilterInputComponent,
        EmailsValidatorDirective,
        RangeDirective,
        RangeComponent,
        SimpleJsonPathValidatorDirective,
        UniqueInCollectionByPathValidationDirective,
        ExtractArrayValidationErrorsPipe,
        FilterNonArrayValidationErrorsPipe,
        HumanizeValidationMessagePipe] });
FormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FormsModule, imports: [CommonModule, NgFormsModule, ReactiveFormsModule, PopoverModule, NgFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FormsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgFormsModule, ReactiveFormsModule, PopoverModule],
                    exports: [
                        PhoneValidationDirective,
                        DefaultValidationDirective,
                        MinValidationDirective,
                        MaxValidationDirective,
                        NgFormsModule,
                        FormGroupComponent,
                        MessageDirective,
                        MessagesComponent,
                        InputGroupListComponent,
                        InputGroupListContainerDirective,
                        JsonValidationPrettifierDirective,
                        TextAreaRowHeightDirective,
                        RequiredInputPlaceholderDirective,
                        IpRangeInputListComponent,
                        FilterInputComponent,
                        EmailsValidatorDirective,
                        RangeDirective,
                        RangeComponent,
                        SimpleJsonPathValidatorDirective,
                        UniqueInCollectionByPathValidationDirective,
                        ExtractArrayValidationErrorsPipe,
                        FilterNonArrayValidationErrorsPipe,
                        HumanizeValidationMessagePipe
                    ],
                    declarations: [
                        PhoneValidationDirective,
                        DefaultValidationDirective,
                        MinValidationDirective,
                        MaxValidationDirective,
                        FormGroupComponent,
                        MessageDirective,
                        MessagesComponent,
                        InputGroupListComponent,
                        InputGroupListContainerDirective,
                        JsonValidationPrettifierDirective,
                        TextAreaRowHeightDirective,
                        RequiredInputPlaceholderDirective,
                        IpRangeInputListComponent,
                        FilterInputComponent,
                        EmailsValidatorDirective,
                        RangeDirective,
                        RangeComponent,
                        SimpleJsonPathValidatorDirective,
                        UniqueInCollectionByPathValidationDirective,
                        ExtractArrayValidationErrorsPipe,
                        FilterNonArrayValidationErrorsPipe,
                        HumanizeValidationMessagePipe
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { MessageDirective } from './message.directive';
import { ValidationPattern } from './validation-pattern';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "../i18n/c8y-translate.pipe";
export class MessagesComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    ngAfterContentInit() {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce((messages, directive) => {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    }
    changeVisibility(show) {
        this.show = show;
        this.ngOnChanges();
    }
    ngOnChanges() {
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map(key => this.toMessage(key, this.show[key]))
                // if an null message is returned, it will not be displayed
                .filter(message => message !== null);
        }
        else {
            this.messages = [];
        }
    }
    toMessage(key, value) {
        let message = this.messageMap[key];
        if ((!message || message === ValidationPattern.messages.pattern) &&
            key === 'pattern' &&
            typeof value?.requiredPattern === 'string') {
            const pattern = value.requiredPattern.replace(/^\//, '').replace(/\/$/, '');
            const foundPattern = Object.keys(ValidationPattern.rules).find(tmp => ValidationPattern.rules[tmp].pattern?.source === pattern);
            if (foundPattern) {
                key = foundPattern;
                message = this.messageMap[key];
            }
        }
        if (!message) {
            return null;
        }
        return this.translateService.instant(message, value);
    }
}
MessagesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MessagesComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
MessagesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MessagesComponent, selector: "c8y-messages", inputs: { show: "show", defaults: "defaults" }, queries: [{ propertyName: "customMessages", predicate: MessageDirective }], usesOnChanges: true, ngImport: i0, template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MessagesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-messages', template: "<small class=\"form-control-feedback-message\">\n  <div class=\"d-block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { show: [{
                type: Input
            }], defaults: [{
                type: Input
            }], customMessages: [{
                type: ContentChildren,
                args: [MessageDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9tZXNzYWdlcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL21lc3NhZ2VzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBTXZELE1BQU0sT0FBTyxpQkFBaUI7SUFPNUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFON0MsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixhQUFRLEdBQVcsaUJBQWlCLENBQUMsUUFBUSxDQUFDO1FBRXZELGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxlQUFVLEdBQVEsRUFBRSxDQUFDO0lBRW9DLENBQUM7SUFFMUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDN0IsRUFBRSxFQUNGLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDakQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzFDLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQixDQUFDLElBQVk7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ25DLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsMkRBQTJEO2lCQUMxRCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDeEM7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSztRQUMxQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQ0UsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssaUJBQWlCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUM1RCxHQUFHLEtBQUssU0FBUztZQUNqQixPQUFPLEtBQUssRUFBRSxlQUFlLEtBQUssUUFBUSxFQUMxQztZQUNBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVFLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM1RCxHQUFHLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxLQUFLLE9BQU8sQ0FDaEUsQ0FBQztZQUNGLElBQUksWUFBWSxFQUFFO2dCQUNoQixHQUFHLEdBQUcsWUFBWSxDQUFDO2dCQUNuQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQztTQUNGO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7OzhHQXhEVSxpQkFBaUI7a0dBQWpCLGlCQUFpQixtSUFHWCxnQkFBZ0Isa0RDWm5DLHVMQU1BOzJGREdhLGlCQUFpQjtrQkFKN0IsU0FBUzsrQkFDRSxjQUFjO3VHQUlmLElBQUk7c0JBQVosS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUM2QixjQUFjO3NCQUFoRCxlQUFlO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9tZXNzYWdlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUGF0dGVybiB9IGZyb20gJy4vdmFsaWRhdGlvbi1wYXR0ZXJuJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW1lc3NhZ2VzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lc3NhZ2VzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNob3c6IG9iamVjdCA9IHt9O1xuICBASW5wdXQoKSBkZWZhdWx0czogb2JqZWN0ID0gVmFsaWRhdGlvblBhdHRlcm4ubWVzc2FnZXM7XG4gIEBDb250ZW50Q2hpbGRyZW4oTWVzc2FnZURpcmVjdGl2ZSkgY3VzdG9tTWVzc2FnZXM6IFF1ZXJ5TGlzdDxNZXNzYWdlRGlyZWN0aXZlPjtcbiAgbWVzc2FnZXMgPSBbXTtcbiAgbWVzc2FnZU1hcDogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm1lc3NhZ2VNYXAgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLmRlZmF1bHRzLFxuICAgICAgdGhpcy5jdXN0b21NZXNzYWdlcy5yZWR1Y2UoKG1lc3NhZ2VzLCBkaXJlY3RpdmUpID0+IHtcbiAgICAgICAgbWVzc2FnZXNbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlLnRleHQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICAgIH0sIHt9KVxuICAgICk7XG4gIH1cblxuICBjaGFuZ2VWaXNpYmlsaXR5KHNob3c6IG9iamVjdCkge1xuICAgIHRoaXMuc2hvdyA9IHNob3c7XG4gICAgdGhpcy5uZ09uQ2hhbmdlcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuc2hvdykge1xuICAgICAgdGhpcy5tZXNzYWdlcyA9IE9iamVjdC5rZXlzKHRoaXMuc2hvdylcbiAgICAgICAgLm1hcChrZXkgPT4gdGhpcy50b01lc3NhZ2Uoa2V5LCB0aGlzLnNob3dba2V5XSkpXG4gICAgICAgIC8vIGlmIGFuIG51bGwgbWVzc2FnZSBpcyByZXR1cm5lZCwgaXQgd2lsbCBub3QgYmUgZGlzcGxheWVkXG4gICAgICAgIC5maWx0ZXIobWVzc2FnZSA9PiBtZXNzYWdlICE9PSBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9NZXNzYWdlKGtleSwgdmFsdWUpIHtcbiAgICBsZXQgbWVzc2FnZSA9IHRoaXMubWVzc2FnZU1hcFtrZXldO1xuICAgIGlmIChcbiAgICAgICghbWVzc2FnZSB8fCBtZXNzYWdlID09PSBWYWxpZGF0aW9uUGF0dGVybi5tZXNzYWdlcy5wYXR0ZXJuKSAmJlxuICAgICAga2V5ID09PSAncGF0dGVybicgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZT8ucmVxdWlyZWRQYXR0ZXJuID09PSAnc3RyaW5nJ1xuICAgICkge1xuICAgICAgY29uc3QgcGF0dGVybiA9IHZhbHVlLnJlcXVpcmVkUGF0dGVybi5yZXBsYWNlKC9eXFwvLywgJycpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICBjb25zdCBmb3VuZFBhdHRlcm4gPSBPYmplY3Qua2V5cyhWYWxpZGF0aW9uUGF0dGVybi5ydWxlcykuZmluZChcbiAgICAgICAgdG1wID0+IFZhbGlkYXRpb25QYXR0ZXJuLnJ1bGVzW3RtcF0ucGF0dGVybj8uc291cmNlID09PSBwYXR0ZXJuXG4gICAgICApO1xuICAgICAgaWYgKGZvdW5kUGF0dGVybikge1xuICAgICAgICBrZXkgPSBmb3VuZFBhdHRlcm47XG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KG1lc3NhZ2UsIHZhbHVlKTtcbiAgfVxufVxuIiwiPHNtYWxsIGNsYXNzPVwiZm9ybS1jb250cm9sLWZlZWRiYWNrLW1lc3NhZ2VcIj5cbiAgPGRpdiBjbGFzcz1cImQtYmxvY2tcIiAqbmdGb3I9XCJsZXQgbXNnIG9mIG1lc3NhZ2VzXCI+XG4gICAge3ttc2cgfCB0cmFuc2xhdGV9fVxuICA8L2Rpdj5cbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9zbWFsbD5cbiJdfQ==
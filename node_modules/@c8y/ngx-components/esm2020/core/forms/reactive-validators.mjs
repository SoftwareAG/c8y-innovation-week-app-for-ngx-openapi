import { FormArray } from '@angular/forms';
import { DatapointLibraryValidationErrors } from './validation-pattern';
import { get } from 'lodash-es';
// @dynamic
export class C8yValidators {
    static minMaxValidator() {
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            // remove previous errors
            this.removeErrors(min, [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]);
            this.removeErrors(max, [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]);
            if (!minDefined || !maxDefined) {
                return null;
            }
            // sets errors
            if (min.value >= max.value) {
                const minError = { [DatapointLibraryValidationErrors.GREATER_THAN_RANGE_MAX]: true };
                const maxError = { [DatapointLibraryValidationErrors.LESS_THAN_RANGE_MIN]: true };
                const errors = Object.assign({}, minError, maxError);
                min.setErrors(Object.assign(minError, min.errors || {}));
                max.setErrors(Object.assign(maxError, max.errors || {}));
                return errors;
            }
            return null;
        };
    }
    static requireBothMinAndMax() {
        const errorAttribute = DatapointLibraryValidationErrors.SHOULD_BE_DEFINED;
        return (control) => {
            const min = control.get(`min`);
            const max = control.get(`max`);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const errors = {};
            if (minDefined && !maxDefined && max) {
                // sets error
                const error = { [errorAttribute]: true };
                max.setErrors(Object.assign({}, max.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(max, [errorAttribute]);
            }
            if (maxDefined && !minDefined && min) {
                // sets error
                const error = { [errorAttribute]: true };
                min.setErrors(Object.assign({}, min.errors || {}, error));
                Object.assign(errors, error);
            }
            else {
                // remove previous error
                this.removeErrors(min, [errorAttribute]);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static withinScale(field) {
        return (control) => {
            if (!field) {
                return null;
            }
            const min = control.get(`range.min`);
            const max = control.get(`range.max`);
            const fieldControl = control.get(field);
            const minDefined = min && min.value !== undefined && min.value !== null;
            const maxDefined = max && max.value !== undefined && max.value !== null;
            const fieldDefined = fieldControl && fieldControl.value !== undefined && fieldControl.value !== null;
            // remove previous errors
            this.removeErrors(fieldControl, [
                DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX,
                DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN
            ]);
            if (!minDefined || !maxDefined || !fieldDefined) {
                return null;
            }
            const errors = {};
            // sets errors
            if (fieldControl.value < min.value) {
                const error = { [DatapointLibraryValidationErrors.LESS_THAN_SCALE_MIN]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            if (fieldControl.value > max.value) {
                const error = { [DatapointLibraryValidationErrors.GREATER_THAN_SCALE_MAX]: true };
                fieldControl.setErrors(Object.assign({}, fieldControl.errors || {}, error));
                Object.assign(errors, error);
            }
            return Object.keys(errors).length ? errors : null;
        };
    }
    static maxActiveCount(maxActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(maxActive) || Number.isNaN(maxActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length <= maxActive) {
                return null;
            }
            return {
                [DatapointLibraryValidationErrors.MAX_ACTIVE_COUNT]: {
                    maxActive,
                    actualLength: filteredActiveEntries.length
                }
            };
        };
    }
    static minActiveCount(minActive, activeAttribute = 'details.__active') {
        return (control) => {
            if (!Number.isInteger(minActive) || Number.isNaN(minActive)) {
                return null;
            }
            if (!(control instanceof FormArray)) {
                return null;
            }
            const formArray = control;
            const value = formArray.value;
            if (!Array.isArray(value)) {
                return null;
            }
            const filteredActiveEntries = value.filter(tmp => tmp && !!get(tmp, activeAttribute));
            if (filteredActiveEntries.length >= minActive) {
                return null;
            }
            return {
                [DatapointLibraryValidationErrors.MIN_ACTIVE_COUNT]: {
                    minActive,
                    actualLength: filteredActiveEntries.length
                }
            };
        };
    }
    static filesValidator(options) {
        return (control) => {
            const files = control.value;
            if (!files) {
                return null;
            }
            for (const fileObj of files) {
                const file = fileObj.file;
                if (options.typePrefix && !file.type.startsWith(options.typePrefix)) {
                    return {
                        wrongFileType: {
                            wrongFileType: file.type
                        }
                    };
                }
                if (options.allowedFileEndings?.length &&
                    !options.allowedFileEndings.some(ending => file.name.endsWith(ending))) {
                    return {
                        wrongFileEnding: {
                            allowedFileEndings: options.allowedFileEndings
                        }
                    };
                }
                if (file.size > options.maximumFileSizeInKb * 1024) {
                    const actualFileSize = file.size / 1024;
                    return {
                        maxFileSizeReached: {
                            maxFileSize: options.maximumFileSizeInKb,
                            actualFileSize: `~${actualFileSize.toFixed(0)}`
                        }
                    };
                }
            }
            return null;
        };
    }
    static removeErrors(control, errors) {
        if (!control || !control.errors) {
            return false;
        }
        let removedError = false;
        for (const error of errors) {
            if (control.errors[error]) {
                removedError = true;
                delete control.errors[error];
            }
        }
        if (removedError) {
            control.setErrors(Object.keys(control.errors).length ? Object.assign({}, control.errors) : null);
        }
        return removedError;
    }
}
//# sourceMappingURL=data:application/json;base64,
import { Directive, Input } from '@angular/core';
import { FormControl, NG_VALIDATORS, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
export class EmailsValidatorDirective {
    constructor() {
        this._enabled = false;
        this.separator = ',';
    }
    /**
     * Tracks changes to the emails attribute bound to this directive.
     */
    set emails(value) {
        this._enabled = value === '' || value === true || value === 'true';
        if (this._onChange) {
            this._onChange();
        }
    }
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    validate(control) {
        if (!this._enabled) {
            return null;
        }
        const value = control.value || '';
        const emails = value.split(this.separator).map(email => email.trim());
        const invalid = emails.some(email => Validators.email(new FormControl(email)));
        return invalid ? { emails: true } : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
}
EmailsValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: EmailsValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
EmailsValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: EmailsValidatorDirective, selector: "[emails][formControlName],[emails][formControl],[emails][ngModel]", inputs: { emails: "emails" }, providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: EmailsValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective, multi: true }]
                }]
        }], propDecorators: { emails: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zvcm1zL2VtYWlscy12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFDTCxXQUFXLEVBRVgsYUFBYSxFQUdiLFVBQVUsRUFDWCxNQUFNLGdCQUFnQixDQUFDOztBQUV4Qjs7Ozs7Ozs7Ozs7R0FXRztBQUtILE1BQU0sT0FBTyx3QkFBd0I7SUFKckM7UUFLVSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGNBQVMsR0FBRyxHQUFHLENBQUM7S0FrQ3pCO0lBaENDOztPQUVHO0lBQ0gsSUFDSSxNQUFNLENBQUMsS0FBdUI7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQztRQUNuRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNILHlCQUF5QixDQUFDLEVBQWM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7cUhBcENVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLDBIQUZ4QixDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDOzJGQUVoRix3QkFBd0I7a0JBSnBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1FQUFtRTtvQkFDN0UsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUM1Rjs4QkFVSyxNQUFNO3NCQURULEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBGb3JtQ29udHJvbCxcbiAgQWJzdHJhY3RDb250cm9sLFxuICBOR19WQUxJREFUT1JTLFxuICBWYWxpZGF0aW9uRXJyb3JzLFxuICBWYWxpZGF0b3IsXG4gIFZhbGlkYXRvcnNcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgYWRkcyB0aGUgYGVtYWlsc2AgdmFsaWRhdG9yIHRvIGNvbnRyb2xzIG1hcmtlZCB3aXRoIHRoZVxuICogYGVtYWlsc2AgYXR0cmlidXRlLiBUaGUgZGlyZWN0aXZlIGlzIHByb3ZpZGVkIHdpdGggdGhlIGBOR19WQUxJREFUT1JTYCBtdWx0aS1wcm92aWRlciBsaXN0LlxuICpcbiAqICoqRXhhbXBsZSoqXG4gKlxuICogYGBgaHRtbFxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgZW1haWxzPlxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgZW1haWxzPVwidHJ1ZVwiPlxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgW2VtYWlsc109XCJ0cnVlXCI+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VtYWlsc11bZm9ybUNvbnRyb2xOYW1lXSxbZW1haWxzXVtmb3JtQ29udHJvbF0sW2VtYWlsc11bbmdNb2RlbF0nLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH1dXG59KVxuZXhwb3J0IGNsYXNzIEVtYWlsc1ZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIHByaXZhdGUgX2VuYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfb25DaGFuZ2U/OiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIHNlcGFyYXRvciA9ICcsJztcblxuICAvKipcbiAgICogVHJhY2tzIGNoYW5nZXMgdG8gdGhlIGVtYWlscyBhdHRyaWJ1dGUgYm91bmQgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgZW1haWxzKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgIGlmICh0aGlzLl9vbkNoYW5nZSkge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRoYXQgdmFsaWRhdGVzIHdoZXRoZXIgZW1haWwgYWRkcmVzc2VzIGFyZSB2YWxpZC5cbiAgICogUmV0dXJucyB0aGUgdmFsaWRhdGlvbiByZXN1bHQgaWYgZW5hYmxlZCwgb3RoZXJ3aXNlIG51bGwuXG4gICAqL1xuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IGNvbnRyb2wudmFsdWUgfHwgJyc7XG4gICAgY29uc3QgZW1haWxzID0gdmFsdWUuc3BsaXQodGhpcy5zZXBhcmF0b3IpLm1hcChlbWFpbCA9PiBlbWFpbC50cmltKCkpO1xuICAgIGNvbnN0IGludmFsaWQgPSBlbWFpbHMuc29tZShlbWFpbCA9PiBWYWxpZGF0b3JzLmVtYWlsKG5ldyBGb3JtQ29udHJvbChlbWFpbCkpKTtcbiAgICByZXR1cm4gaW52YWxpZCA/IHsgZW1haWxzOiB0cnVlIH0gOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgdmFsaWRhdG9yIGlucHV0cyBjaGFuZ2UuXG4gICAqL1xuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxufVxuIl19
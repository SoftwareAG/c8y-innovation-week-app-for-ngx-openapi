import { Directive, ElementRef, Input, HostBinding, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
export class TextAreaRowHeightDirective {
    constructor(elem, renderer) {
        this.elem = elem;
        this.renderer = renderer;
        this.rows = 1;
        this.minHeightPerRow = 20;
    }
    ngAfterViewInit() {
        const convertedValue = Number(this.heightPerRow);
        if (this.heightPerRow && convertedValue && convertedValue > this.minHeightPerRow) {
            this.setHeight(`${this.rows * convertedValue}px`);
        }
        else {
            this.setHeight(`${this.rows * this.minHeightPerRow}px`);
        }
    }
    setHeight(value) {
        this.renderer.setStyle(this.elem.nativeElement, 'height', value);
    }
}
TextAreaRowHeightDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TextAreaRowHeightDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TextAreaRowHeightDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: TextAreaRowHeightDirective, selector: "textarea[heightPerRow]", inputs: { rows: "rows", heightPerRow: "heightPerRow" }, host: { properties: { "rows": "this.rows" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TextAreaRowHeightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'textarea[heightPerRow]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rows: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['rows']
            }], heightPerRow: [{
                type: Input,
                args: ['heightPerRow']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1hcmVhLXJvdy1oZWlnaHQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy90ZXh0LWFyZWEtcm93LWhlaWdodC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBS3JGLE1BQU0sT0FBTywwQkFBMEI7SUFVckMsWUFBb0IsSUFBZ0IsRUFBVSxRQUFtQjtRQUE3QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVBqRSxTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBS0Qsb0JBQWUsR0FBRyxFQUFFLENBQUM7SUFFdUMsQ0FBQztJQUVyRSxlQUFlO1FBQ2IsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksY0FBYyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ2hGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsSUFBSSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOzt1SEF2QlUsMEJBQTBCOzJHQUExQiwwQkFBMEI7MkZBQTFCLDBCQUEwQjtrQkFIdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNuQzt5SEFJQyxJQUFJO3NCQUZILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsTUFBTTtnQkFJbkIsWUFBWTtzQkFEWCxLQUFLO3VCQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0QmluZGluZywgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3RleHRhcmVhW2hlaWdodFBlclJvd10nXG59KVxuZXhwb3J0IGNsYXNzIFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlIHtcbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKCdyb3dzJylcbiAgcm93cyA9IDE7XG5cbiAgQElucHV0KCdoZWlnaHRQZXJSb3cnKVxuICBoZWlnaHRQZXJSb3c6IHN0cmluZztcblxuICBwcml2YXRlIG1pbkhlaWdodFBlclJvdyA9IDIwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbTogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBjb252ZXJ0ZWRWYWx1ZSA9IE51bWJlcih0aGlzLmhlaWdodFBlclJvdyk7XG4gICAgaWYgKHRoaXMuaGVpZ2h0UGVyUm93ICYmIGNvbnZlcnRlZFZhbHVlICYmIGNvbnZlcnRlZFZhbHVlID4gdGhpcy5taW5IZWlnaHRQZXJSb3cpIHtcbiAgICAgIHRoaXMuc2V0SGVpZ2h0KGAke3RoaXMucm93cyAqIGNvbnZlcnRlZFZhbHVlfXB4YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0SGVpZ2h0KGAke3RoaXMucm93cyAqIHRoaXMubWluSGVpZ2h0UGVyUm93fXB4YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRIZWlnaHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCB2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==
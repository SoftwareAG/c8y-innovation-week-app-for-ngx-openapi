import { Component, ContentChild, HostBinding, Input } from '@angular/core';
import { FormControlName, NgModel } from '@angular/forms';
import { BehaviorSubject, merge, Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { MessagesComponent } from './messages.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./messages.component";
/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
export class FormGroupComponent {
    constructor() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.VALIDATION_DEBOUNCE_MS = 100;
        this.destroyed$ = new Subject();
    }
    get error() {
        return this.status === 'error' || this.hasError;
    }
    get warning() {
        return this.status === 'warning' || this.hasWarning;
    }
    get success() {
        return this.status === 'success' || this.hasSuccess;
    }
    ngAfterContentInit() {
        this.initNgModel();
        this.initFormControl();
    }
    initNgModel() {
        if (this.model) {
            this.observeControl(this.model);
        }
    }
    initFormControl() {
        if (this.formControlName) {
            this.observeControl(this.formControlName.control);
        }
    }
    observeControl(control) {
        this.control = control;
        this.controlTouched$ = new BehaviorSubject(control.touched);
        merge(control.valueChanges, control.statusChanges, this.controlTouched$)
            .pipe(filter(() => (control.dirty || control.touched) && !this.novalidation), debounceTime(this.VALIDATION_DEBOUNCE_MS), takeUntil(this.destroyed$))
            .subscribe(() => this.updateErrors(control));
    }
    updateErrors(control) {
        this.hasError = control.touched && control.status === 'INVALID';
        const errors = this.hasError ? control.errors : {};
        if (this.customErrorMessage) {
            this.customErrorMessage.changeVisibility(errors);
        }
        else {
            this.errors = errors;
        }
    }
    ngDoCheck() {
        if (this.controlTouched$) {
            if (this.controlTouched$.value !== this.control.touched) {
                this.controlTouched$.next(this.control.touched);
            }
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
FormGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FormGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FormGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FormGroupComponent, selector: "c8y-form-group", inputs: { hasError: "hasError", hasWarning: "hasWarning", hasSuccess: "hasSuccess", novalidation: "novalidation", status: "status" }, host: { properties: { "class.has-error": "this.error", "class.has-warning": "this.warning", "class.has-success": "this.success" }, classAttribute: "form-group" }, queries: [{ propertyName: "customErrorMessage", first: true, predicate: MessagesComponent, descendants: true }, { propertyName: "model", first: true, predicate: NgModel, descendants: true, static: true }, { propertyName: "formControlName", first: true, predicate: FormControlName, descendants: true, static: true }], ngImport: i0, template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FormGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-form-group', host: {
                        class: 'form-group'
                    }, template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n" }]
        }], propDecorators: { hasError: [{
                type: Input
            }], hasWarning: [{
                type: Input
            }], hasSuccess: [{
                type: Input
            }], novalidation: [{
                type: Input
            }], status: [{
                type: Input
            }], error: [{
                type: HostBinding,
                args: ['class.has-error']
            }], warning: [{
                type: HostBinding,
                args: ['class.has-warning']
            }], success: [{
                type: HostBinding,
                args: ['class.has-success']
            }], customErrorMessage: [{
                type: ContentChild,
                args: [MessagesComponent, { static: false }]
            }], model: [{
                type: ContentChild,
                args: [NgModel, { static: true }]
            }], formControlName: [{
                type: ContentChild,
                args: [FormControlName, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This pipe should be used in pair with {name of method} function - it allows to distribute
 * errors for each position in array, from a object prepared by {name of method}
 *
 * @Example:
 *
 * TS:
 * errors = {
 *  "INNER_ARRAY_ERROR_minlength": {
 *      isArrayError: true, originalKey: 'minlength', entries: [
 *        {index: 0, errorData: {requiredLength: 5, actualLength: 4}},
 *        {index: 2, errorData: {requiredLength: 5, actualLength: 3}},
 *      ]
 *    },
 *  "minlength": {requiredLength: 5, actualLength: 3}}}
 * }
 *
 * HTML:
 * <small *ngFor="let error of errors | extractArrayValidationErrors:index | keyvalue">
 * {{error.key | humanizeValidationMessage | translate: errors.value}}
 * </small>
 *
 */
export class ExtractArrayValidationErrorsPipe {
    transform(validationErrors, index) {
        if (!validationErrors) {
            return null;
        }
        const errorObject = {};
        Object.keys(validationErrors).forEach(key => {
            if (validationErrors[key].isArrayError) {
                const unprefixedKey = validationErrors[key].originalKey;
                const arrayValidationError = validationErrors[key];
                const relatedError = arrayValidationError.entries.find(entry => entry.index === index);
                if (relatedError) {
                    errorObject[unprefixedKey] = relatedError.errorData;
                }
            }
        });
        return Object.keys(errorObject).length ? errorObject : null;
    }
}
ExtractArrayValidationErrorsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ExtractArrayValidationErrorsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ExtractArrayValidationErrorsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ExtractArrayValidationErrorsPipe, name: "extractArrayValidationErrors" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ExtractArrayValidationErrorsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'extractArrayValidationErrors'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdC1hcnJheS12YWxpZGF0aW9uLWVycm9ycy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9mb3Jtcy9leHRyYWN0LWFycmF5LXZhbGlkYXRpb24tZXJyb3JzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBSXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBS0gsTUFBTSxPQUFPLGdDQUFnQztJQUMzQyxTQUFTLENBQ1AsZ0JBQWlFLEVBQ2pFLEtBQWE7UUFFYixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFDLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFO2dCQUN0QyxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUM7Z0JBQ3hELE1BQU0sb0JBQW9CLEdBQThCLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5RSxNQUFNLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDdkYsSUFBSSxZQUFZLEVBQUU7b0JBQ2hCLFdBQVcsQ0FBQyxhQUFhLENBQUMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDO2lCQUNyRDthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM5RCxDQUFDOzs2SEFyQlUsZ0NBQWdDOzJIQUFoQyxnQ0FBZ0M7MkZBQWhDLGdDQUFnQztrQkFINUMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsOEJBQThCO2lCQUNyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBBcnJheVZhbGlkYXRpb25FcnJvcnMsIEFycmF5VmFsaWRhdGlvbkVycm9yVmFsdWUgfSBmcm9tICcuL3ZhbGlkYXRlLWFycmF5LWVsZW1lbnRzJztcblxuLyoqXG4gKiBUaGlzIHBpcGUgc2hvdWxkIGJlIHVzZWQgaW4gcGFpciB3aXRoIHtuYW1lIG9mIG1ldGhvZH0gZnVuY3Rpb24gLSBpdCBhbGxvd3MgdG8gZGlzdHJpYnV0ZVxuICogZXJyb3JzIGZvciBlYWNoIHBvc2l0aW9uIGluIGFycmF5LCBmcm9tIGEgb2JqZWN0IHByZXBhcmVkIGJ5IHtuYW1lIG9mIG1ldGhvZH1cbiAqXG4gKiBARXhhbXBsZTpcbiAqXG4gKiBUUzpcbiAqIGVycm9ycyA9IHtcbiAqICBcIklOTkVSX0FSUkFZX0VSUk9SX21pbmxlbmd0aFwiOiB7XG4gKiAgICAgIGlzQXJyYXlFcnJvcjogdHJ1ZSwgb3JpZ2luYWxLZXk6ICdtaW5sZW5ndGgnLCBlbnRyaWVzOiBbXG4gKiAgICAgICAge2luZGV4OiAwLCBlcnJvckRhdGE6IHtyZXF1aXJlZExlbmd0aDogNSwgYWN0dWFsTGVuZ3RoOiA0fX0sXG4gKiAgICAgICAge2luZGV4OiAyLCBlcnJvckRhdGE6IHtyZXF1aXJlZExlbmd0aDogNSwgYWN0dWFsTGVuZ3RoOiAzfX0sXG4gKiAgICAgIF1cbiAqICAgIH0sXG4gKiAgXCJtaW5sZW5ndGhcIjoge3JlcXVpcmVkTGVuZ3RoOiA1LCBhY3R1YWxMZW5ndGg6IDN9fX1cbiAqIH1cbiAqXG4gKiBIVE1MOlxuICogPHNtYWxsICpuZ0Zvcj1cImxldCBlcnJvciBvZiBlcnJvcnMgfCBleHRyYWN0QXJyYXlWYWxpZGF0aW9uRXJyb3JzOmluZGV4IHwga2V5dmFsdWVcIj5cbiAqIHt7ZXJyb3Iua2V5IHwgaHVtYW5pemVWYWxpZGF0aW9uTWVzc2FnZSB8IHRyYW5zbGF0ZTogZXJyb3JzLnZhbHVlfX1cbiAqIDwvc21hbGw+XG4gKlxuICovXG5cbkBQaXBlKHtcbiAgbmFtZTogJ2V4dHJhY3RBcnJheVZhbGlkYXRpb25FcnJvcnMnXG59KVxuZXhwb3J0IGNsYXNzIEV4dHJhY3RBcnJheVZhbGlkYXRpb25FcnJvcnNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShcbiAgICB2YWxpZGF0aW9uRXJyb3JzOiBBcnJheVZhbGlkYXRpb25FcnJvcnMgfCBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCxcbiAgICBpbmRleDogbnVtYmVyXG4gICk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBpZiAoIXZhbGlkYXRpb25FcnJvcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGVycm9yT2JqZWN0ID0ge307XG4gICAgT2JqZWN0LmtleXModmFsaWRhdGlvbkVycm9ycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnNba2V5XS5pc0FycmF5RXJyb3IpIHtcbiAgICAgICAgY29uc3QgdW5wcmVmaXhlZEtleSA9IHZhbGlkYXRpb25FcnJvcnNba2V5XS5vcmlnaW5hbEtleTtcbiAgICAgICAgY29uc3QgYXJyYXlWYWxpZGF0aW9uRXJyb3I6IEFycmF5VmFsaWRhdGlvbkVycm9yVmFsdWUgPSB2YWxpZGF0aW9uRXJyb3JzW2tleV07XG4gICAgICAgIGNvbnN0IHJlbGF0ZWRFcnJvciA9IGFycmF5VmFsaWRhdGlvbkVycm9yLmVudHJpZXMuZmluZChlbnRyeSA9PiBlbnRyeS5pbmRleCA9PT0gaW5kZXgpO1xuICAgICAgICBpZiAocmVsYXRlZEVycm9yKSB7XG4gICAgICAgICAgZXJyb3JPYmplY3RbdW5wcmVmaXhlZEtleV0gPSByZWxhdGVkRXJyb3IuZXJyb3JEYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVycm9yT2JqZWN0KS5sZW5ndGggPyBlcnJvck9iamVjdCA6IG51bGw7XG4gIH1cbn1cbiJdfQ==
import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { Status } from '../../../common/status.model';
import { gettext } from '../../../i18n/gettext';
import { ConfirmModalComponent } from '../../../modal/modal-confirm.component';
import { CookieBannerService } from '../cookie-banner.service';
import * as i0 from "@angular/core";
import * as i1 from "../cookie-banner.service";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "../../../modal/modal-confirm.component";
import * as i5 from "../../../i18n/c8y-translate.pipe";
import * as i6 from "../../../common/humanize.pipe";
export class CookieBannerPreferencesModalComponent {
    constructor(cookieBannerService) {
        this.cookieBannerService = cookieBannerService;
        this.closeSubject = new Subject();
        this.title = gettext('Cookie preferences');
        this.labels = { ok: gettext('Save settings'), cancel: gettext('Cancel') };
        this.status = Status.INFO;
    }
    ngOnInit() {
        this.configCookiePreferencesList = this.cookieBannerService.transformCookiePreferencesToList(this.configCookiePreferences);
    }
    async ngAfterViewInit() {
        try {
            await this.modalRef.result;
            this.onClose();
        }
        catch (error) {
            this.onDismiss();
        }
    }
    onClose() {
        const cookiePref = this.cookieBannerService.transformCookiePreferencesListToCookiePreferences(this.configCookiePreferencesList);
        this.closeSubject.next(cookiePref);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.next(undefined);
        this.closeSubject.complete();
    }
    getCookieDescription(cookieType) {
        return this.cookieBannerService.getCookieDescription(cookieType);
    }
}
CookieBannerPreferencesModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CookieBannerPreferencesModalComponent, deps: [{ token: i1.CookieBannerService }], target: i0.ɵɵFactoryTarget.Component });
CookieBannerPreferencesModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: CookieBannerPreferencesModalComponent, selector: "c8y-cookie-banner-preferences-modal", viewQueries: [{ propertyName: "modalRef", first: true, predicate: ["modalRef"], descendants: true }], ngImport: i0, template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n", dependencies: [{ kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i4.ConfirmModalComponent, selector: "c8y-confirm-modal", inputs: ["title", "body", "confirmOptions", "status", "labels"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i6.HumanizePipe, name: "humanize" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CookieBannerPreferencesModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-cookie-banner-preferences-modal', template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CookieBannerService }]; }, propDecorators: { modalRef: [{
                type: ViewChild,
                args: ['modalRef', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhbm5lci1wcmVmZXJlbmNlcy1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb3JlL2Jvb3RzdHJhcC9jb29raWUtYmFubmVyL2Nvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwvY29va2llLWJhbm5lci1wcmVmZXJlbmNlcy1tb2RhbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9jb3JlL2Jvb3RzdHJhcC9jb29raWUtYmFubmVyL2Nvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwvY29va2llLWJhbm5lci1wcmVmZXJlbmNlcy1tb2RhbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQWMsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFHL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7O0FBTS9ELE1BQU0sT0FBTyxxQ0FBcUM7SUFTaEQsWUFBb0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFQNUQsaUJBQVksR0FBK0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN6RCxVQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdEMsV0FBTSxHQUFnQixFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ2xGLFdBQU0sR0FBZSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBSThCLENBQUM7SUFFaEUsUUFBUTtRQUNOLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0NBQWdDLENBQzFGLElBQUksQ0FBQyx1QkFBdUIsQ0FDN0IsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsZUFBZTtRQUNuQixJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxVQUFVLEdBQ2QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlEQUFpRCxDQUN4RSxJQUFJLENBQUMsMkJBQTJCLENBQ2pDLENBQUM7UUFFSixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsb0JBQW9CLENBQUMsVUFBbUQ7UUFDdEUsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7a0lBM0NVLHFDQUFxQztzSEFBckMscUNBQXFDLGlMQ2JsRCxreUJBMEJBOzJGRGJhLHFDQUFxQztrQkFKakQsU0FBUzsrQkFDRSxxQ0FBcUM7MEdBSUwsUUFBUTtzQkFBakQsU0FBUzt1QkFBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0YXR1cywgU3RhdHVzVHlwZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9zdGF0dXMubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uLy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBDb25maXJtTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RhbC9tb2RhbC1jb25maXJtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2RhbExhYmVscyB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdC1tb2RhbC9zZWxlY3QtbW9kYWwubW9kZWwnO1xuaW1wb3J0IHsgQ29va2llLCBDb29raWVQcmVmZXJlbmNlcyB9IGZyb20gJy4uL2Nvb2tpZS1iYW5uZXIubW9kZWwnO1xuaW1wb3J0IHsgQ29va2llQmFubmVyU2VydmljZSB9IGZyb20gJy4uL2Nvb2tpZS1iYW5uZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1jb29raWUtYmFubmVyLXByZWZlcmVuY2VzLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENvb2tpZUJhbm5lclByZWZlcmVuY2VzTW9kYWxDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdtb2RhbFJlZicsIHsgc3RhdGljOiBmYWxzZSB9KSBtb2RhbFJlZjogQ29uZmlybU1vZGFsQ29tcG9uZW50O1xuICBjbG9zZVN1YmplY3Q6IFN1YmplY3Q8Q29va2llUHJlZmVyZW5jZXM+ID0gbmV3IFN1YmplY3QoKTtcbiAgdGl0bGUgPSBnZXR0ZXh0KCdDb29raWUgcHJlZmVyZW5jZXMnKTtcbiAgbGFiZWxzOiBNb2RhbExhYmVscyA9IHsgb2s6IGdldHRleHQoJ1NhdmUgc2V0dGluZ3MnKSwgY2FuY2VsOiBnZXR0ZXh0KCdDYW5jZWwnKSB9O1xuICBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTztcbiAgY29uZmlnQ29va2llUHJlZmVyZW5jZXM6IENvb2tpZVByZWZlcmVuY2VzO1xuICBjb25maWdDb29raWVQcmVmZXJlbmNlc0xpc3Q6IENvb2tpZVtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29va2llQmFubmVyU2VydmljZTogQ29va2llQmFubmVyU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNvbmZpZ0Nvb2tpZVByZWZlcmVuY2VzTGlzdCA9IHRoaXMuY29va2llQmFubmVyU2VydmljZS50cmFuc2Zvcm1Db29raWVQcmVmZXJlbmNlc1RvTGlzdChcbiAgICAgIHRoaXMuY29uZmlnQ29va2llUHJlZmVyZW5jZXNcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsUmVmLnJlc3VsdDtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRGlzbWlzcygpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgY29uc3QgY29va2llUHJlZjogQ29va2llUHJlZmVyZW5jZXMgPVxuICAgICAgdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLnRyYW5zZm9ybUNvb2tpZVByZWZlcmVuY2VzTGlzdFRvQ29va2llUHJlZmVyZW5jZXMoXG4gICAgICAgIHRoaXMuY29uZmlnQ29va2llUHJlZmVyZW5jZXNMaXN0XG4gICAgICApO1xuXG4gICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dChjb29raWVQcmVmKTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgb25EaXNtaXNzKCkge1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodW5kZWZpbmVkKTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgZ2V0Q29va2llRGVzY3JpcHRpb24oY29va2llVHlwZTogJ3JlcXVpcmVkJyB8ICdmdW5jdGlvbmFsJyB8ICdtYXJrZXRpbmcnKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmdldENvb2tpZURlc2NyaXB0aW9uKGNvb2tpZVR5cGUpO1xuICB9XG59XG4iLCI8Yzh5LWNvbmZpcm0tbW9kYWwgW3RpdGxlXT1cInRpdGxlXCIgW3N0YXR1c109XCJzdGF0dXNcIiBbbGFiZWxzXT1cImxhYmVsc1wiICNtb2RhbFJlZj5cblxuICA8ZGl2ICpuZ0Zvcj1cImxldCBpdGVtIG9mIGNvbmZpZ0Nvb2tpZVByZWZlcmVuY2VzTGlzdFwiIGNsYXNzPVwicm93IHAtdC04IHAtYi04IHNlcGFyYXRvci10b3BcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhzLTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjOHktc3dpdGNoXCI+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBuYW1lPVwie3sgaXRlbS5uYW1lIH19XCJcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBbKG5nTW9kZWwpXT1cIml0ZW0udmFsdWVcIlxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cIml0ZW0uaXNSZWFkb25seVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8c3Bhbj48L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhzLTEwXCI+XG4gICAgICA8aDQgY2xhc3M9XCJ0ZXh0LW1lZGl1bVwiPlxuICAgICAgICB7eyBpdGVtLm5hbWUgfCB0cmFuc2xhdGUgfCBodW1hbml6ZSB9fVxuICAgICAgPC9oND5cbiAgICAgIDxwPlxuICAgICAgICB7eyBnZXRDb29raWVEZXNjcmlwdGlvbihpdGVtLm5hbWUpIHwgdHJhbnNsYXRlIH19XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9jOHktY29uZmlybS1tb2RhbD5cbiJdfQ==
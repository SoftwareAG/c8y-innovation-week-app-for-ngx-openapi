import { Component } from '@angular/core';
import { Subject, combineLatest, of } from 'rxjs';
import { distinctUntilChanged, map, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { ActionBarService } from '../action-bar/action-bar.service';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { HeaderService } from '../header/header.service';
import { NavigatorService } from '../navigator/navigator.service';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import { SetupService } from '../setup/setup.service';
import { TabsService } from '../tabs/tabs.service';
import { isEmpty } from 'lodash-es';
import { LoginService } from '../login/login.service';
import * as i0 from "@angular/core";
import * as i1 from "../tabs/tabs.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "../navigator/navigator.service";
import * as i4 from "../action-bar/action-bar.service";
import * as i5 from "../header/header.service";
import * as i6 from "../common/options.service";
import * as i7 from "../plugins/plugins-resolve.service";
import * as i8 from "../setup/setup.service";
import * as i9 from "../login/login.service";
import * as i10 from "@angular/common";
import * as i11 from "../header/header-bar/header-bar.component";
import * as i12 from "../login/login.component";
import * as i13 from "@angular/router";
import * as i14 from "../tabs/tabs-outlet.component";
import * as i15 from "../action-bar/action-bar.component";
import * as i16 from "../alert/alert-outlet.component";
import * as i17 from "../setup/setup.component";
import * as i18 from "../drawer/drawer-outlet/drawer-outlet.component";
import * as i19 from "./cookie-banner/cookie-banner.component";
export class BootstrapComponent {
    constructor(tabs, ui, navigator, actionBar, headerService, options, pluginsResolve, setupService, loginService) {
        this.tabs = tabs;
        this.ui = ui;
        this.navigator = navigator;
        this.actionBar = actionBar;
        this.headerService = headerService;
        this.options = options;
        this.pluginsResolve = pluginsResolve;
        this.setupService = setupService;
        this.loginService = loginService;
        this.showPoweredBy = true;
        this.destroy$ = new Subject();
        this.loadedRemotesContextPathCache = new Map();
        this.noAppsMargin$ = this.headerService.map(({ nav }) => !nav.open && nav.hiddenOnStartup);
        this.tabsOrientation = this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        this.ui
            .map(({ lang }) => lang)
            .pipe(takeUntil(this.destroy$), distinctUntilChanged())
            .subscribe(() => {
            this.actionBar.refresh();
        });
        this.showPoweredBy = !this.options.get('hidePowered');
        const noLogin$ = of(this.options.get('noLogin', false));
        this.showLogin$ = combineLatest([noLogin$, this.ui.currentUser]).pipe(map(([noLogin, currentUser]) => !noLogin && !currentUser));
        this.showLoadingIndicator$ = combineLatest([
            noLogin$,
            this.ui.currentUser,
            this.loginService.automaticLoginInProgress$,
            this.pluginsResolve.allPluginsLoaded$
        ]).pipe(map(([noLogin, currentUser, automaticLoginInProgress, allPluginsLoaded]) => (!noLogin && automaticLoginInProgress) || (currentUser && !allPluginsLoaded)), startWith(true));
        this.showMainView$ = noLogin$.pipe(switchMap(noLogin => {
            if (noLogin) {
                return of(true);
            }
            return combineLatest([
                this.ui.currentUser,
                this.setupService.isSetupNeeded$,
                this.pluginsResolve.allPluginsLoaded$
            ]).pipe(map(([currentUser, isSetupNeeded, allPluginsLoaded]) => {
                return currentUser && !isSetupNeeded && allPluginsLoaded;
            }));
        }));
        this.showSetup$ = combineLatest([this.ui.currentUser, this.setupService.isSetupNeeded$]).pipe(map(([currentUser, isSetupNeeded]) => currentUser && isSetupNeeded));
    }
    async ngOnInit() {
        this.subscribeToLoadRemotes();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    getRemotes(config) {
        let remotes;
        if (!!config?.remotes) {
            // Merge plugins config remotes and remotes passed in the URL.
            // Remotes in the URL are used in the development process.
            remotes = this.pluginsResolve.mergeMFRemotes([
                config.remotes,
                this.pluginsResolve.loadUrlRemotes()
            ]);
        }
        else {
            remotes = this.options?.remotes;
        }
        // Block the possibility of loading plugins multiple times.
        Object.keys(remotes || {}).forEach(contextPath => {
            if (this.loadedRemotesContextPathCache.get(contextPath)) {
                delete remotes[contextPath];
            }
        });
        return isEmpty(remotes) ? undefined : remotes;
    }
    async loadRemotes(remotes) {
        if (!remotes) {
            this.ensureWeMarkPluginsAsLoaded();
            return;
        }
        const remoteModules = await this.pluginsResolve.loadRemotes(remotes);
        // Cache loaded remotes.
        Object.keys(remotes).forEach(contextPath => this.loadedRemotesContextPathCache.set(contextPath, true));
        if (remoteModules.length) {
            this.pluginsResolve.resolveRemotePlugins(remoteModules);
        }
    }
    subscribeToLoadRemotes() {
        if (this.options.get('noPlugins', false)) {
            this.ensureWeMarkPluginsAsLoaded();
            return;
        }
        if (this.options.get('noLogin', false)) {
            this.loadRemotes(this.getRemotes(null));
            return;
        }
        this.ui.currentApplicationConfig
            .pipe(takeUntil(this.destroy$))
            .subscribe((config) => this.loadRemotes(this.getRemotes(config)));
    }
    ensureWeMarkPluginsAsLoaded() {
        // ensure we call markPluginsAsLoaded on the DynamicComponentService
        this.pluginsResolve.markPluginsAsLoaded();
    }
}
BootstrapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BootstrapComponent, deps: [{ token: i1.TabsService }, { token: i2.AppStateService }, { token: i3.NavigatorService }, { token: i4.ActionBarService }, { token: i5.HeaderService }, { token: i6.OptionsService }, { token: i7.PluginsResolveService }, { token: i8.SetupService }, { token: i9.LoginService }], target: i0.ɵɵFactoryTarget.Component });
BootstrapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: BootstrapComponent, selector: "c8y-bootstrap", ngImport: i0, template: "<c8y-login *ngIf=\"showLogin$ | async\"></c8y-login>\n\n<div class=\"init-load\" *ngIf=\"showLoadingIndicator$ | async\">\n  <div class=\"spinner-snake\"></div>\n  <div class=\"mainlogo-placeholder mainlogo\"></div>\n</div>\n\n<div\n  *ngIf=\"showMainView$ | async\"\n  [class.head-open]=\"headerService.headerOpen\"\n>\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-drawer-outlet\n    role=\"region\"\n    position=\"left\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n    [tabindex]=\"(headerService.navigatorOpen$ | async) ? '0' : '-1'\"\n  ></c8y-drawer-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n    role=\"navigation\"\n  ></c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent?.isHorizontal\"\n    [items$]=\"actionBar.items$\"\n    role=\"group\"\n  ></c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent?.hidden\n    }\"\n  >\n    <main id=\"main-content\" class=\"container-fluid\" tabindex=\"-1\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </main>\n  </div>\n</div>\n\n<div *ngIf=\"showSetup$ | async\">\n  <c8y-header-bar [simple]=\"true\"></c8y-header-bar>\n  <div class=\"mcontainer\" role=\"main\">\n    <div class=\"container-fluid\">\n      <c8y-setup></c8y-setup>\n    </div>\n  </div>\n</div>\n\n<c8y-cookie-banner></c8y-cookie-banner>\n", dependencies: [{ kind: "directive", type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i11.HeaderBarComponent, selector: "c8y-header-bar", inputs: ["simple"] }, { kind: "component", type: i12.LoginComponent, selector: "c8y-login", inputs: ["name"] }, { kind: "directive", type: i13.RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "component", type: i14.TabsOutletComponent, selector: "c8y-tabs-outlet,c8y-ui-tabs", inputs: ["tabs", "orientation", "navigatorOpen"] }, { kind: "component", type: i15.ActionBarComponent, selector: "c8y-action-bar", inputs: ["navigatorOpen", "hasTabs", "isTabsHorizontal", "items$"] }, { kind: "component", type: i16.AlertOutletComponent, selector: "c8y-alert-outlet" }, { kind: "component", type: i17.SetupComponent, selector: "c8y-setup" }, { kind: "component", type: i18.DrawerOutletComponent, selector: "c8y-drawer-outlet", inputs: ["position", "open"] }, { kind: "component", type: i19.CookieBannerComponent, selector: "c8y-cookie-banner" }, { kind: "pipe", type: i10.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BootstrapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-bootstrap', template: "<c8y-login *ngIf=\"showLogin$ | async\"></c8y-login>\n\n<div class=\"init-load\" *ngIf=\"showLoadingIndicator$ | async\">\n  <div class=\"spinner-snake\"></div>\n  <div class=\"mainlogo-placeholder mainlogo\"></div>\n</div>\n\n<div\n  *ngIf=\"showMainView$ | async\"\n  [class.head-open]=\"headerService.headerOpen\"\n>\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-drawer-outlet\n    role=\"region\"\n    position=\"left\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n    [tabindex]=\"(headerService.navigatorOpen$ | async) ? '0' : '-1'\"\n  ></c8y-drawer-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n    role=\"navigation\"\n  ></c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent?.isHorizontal\"\n    [items$]=\"actionBar.items$\"\n    role=\"group\"\n  ></c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent?.hidden\n    }\"\n  >\n    <main id=\"main-content\" class=\"container-fluid\" tabindex=\"-1\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </main>\n  </div>\n</div>\n\n<div *ngIf=\"showSetup$ | async\">\n  <c8y-header-bar [simple]=\"true\"></c8y-header-bar>\n  <div class=\"mcontainer\" role=\"main\">\n    <div class=\"container-fluid\">\n      <c8y-setup></c8y-setup>\n    </div>\n  </div>\n</div>\n\n<c8y-cookie-banner></c8y-cookie-banner>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TabsService }, { type: i2.AppStateService }, { type: i3.NavigatorService }, { type: i4.ActionBarService }, { type: i5.HeaderService }, { type: i6.OptionsService }, { type: i7.PluginsResolveService }, { type: i8.SetupService }, { type: i9.LoginService }]; } });
//# sourceMappingURL=data:application/json;base64,
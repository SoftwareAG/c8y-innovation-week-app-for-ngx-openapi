import { Injectable, Injector } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { fromTriggerOnce, getInjectedHooks, sortByPriority, StateService, stateToFactory } from '../common';
import { HOOK_VERSION } from './version.model';
import { pick } from 'lodash-es';
import * as i0 from "@angular/core";
export class VersionService extends StateService {
    constructor(rootInjector) {
        super();
        this.rootInjector = rootInjector;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.factories = [];
        this.injectors = [this.rootInjector];
        this.items$ = fromTriggerOnce(undefined, this.refreshTrigger, [
            getInjectedHooks(HOOK_VERSION, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), map(versions => sortByPriority(versions)), shareReplay(1));
        this.nonHiddenItems$ = this.items$.pipe(map(versions => versions.filter(version => !version.hidden)));
    }
    get state() {
        return this.state$.value;
    }
    refresh() {
        this.refreshTrigger.next();
    }
    add(version) {
        this.state.add(version);
        this.emitNewState();
    }
    remove(version) {
        this.state.delete(version);
        this.emitNewState();
    }
    cleanUpVersions(versions) {
        return versions.map(version => pick(version, 'label', 'version', 'type', 'custom'));
    }
}
VersionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
VersionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS92ZXJzaW9uL3ZlcnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hFLE9BQU8sRUFHTCxlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxZQUFZLEVBQ1osY0FBYyxFQUNmLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFBa0IsWUFBWSxFQUFXLE1BQU0saUJBQWlCLENBQUM7QUFDeEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQzs7QUFLakMsTUFBTSxPQUFPLGNBQWUsU0FBUSxZQUFZO0lBUTlDLFlBQW9CLFlBQXNCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBRFUsaUJBQVksR0FBWixZQUFZLENBQVU7UUFMakMsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ3JDLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBZSxJQUFJLEdBQUcsRUFBVyxDQUFDLENBQUM7UUFDeEUsY0FBUyxHQUFnQyxFQUFFLENBQUM7UUFDNUMsY0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBSTlCLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFVLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JFLGdCQUFnQixDQUFVLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3ZELEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQ3BCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzVCLENBQUMsQ0FBQyxJQUFJLENBQ0wsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3pDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1FBRUYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQzdELENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUFnQjtRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFnQjtRQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFtQjtRQUNqQyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7MkdBN0NVLGNBQWM7K0dBQWQsY0FBYyxjQUZiLE1BQU07MkZBRVAsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvbkZhY3RvcnksXG4gIEV4dGVuc2lvblBvaW50LFxuICBmcm9tVHJpZ2dlck9uY2UsXG4gIGdldEluamVjdGVkSG9va3MsXG4gIHNvcnRCeVByaW9yaXR5LFxuICBTdGF0ZVNlcnZpY2UsXG4gIHN0YXRlVG9GYWN0b3J5XG59IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBDbGVhbmVkVmVyc2lvbiwgSE9PS19WRVJTSU9OLCBWZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLm1vZGVsJztcbmltcG9ydCB7IHBpY2sgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uU2VydmljZSBleHRlbmRzIFN0YXRlU2VydmljZSBpbXBsZW1lbnRzIEV4dGVuc2lvblBvaW50PFZlcnNpb24+IHtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPFZlcnNpb25bXT47XG4gIG5vbkhpZGRlbkl0ZW1zJDogT2JzZXJ2YWJsZTxWZXJzaW9uW10+O1xuICByZWFkb25seSByZWZyZXNoVHJpZ2dlciA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHJlYWRvbmx5IHN0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8U2V0PFZlcnNpb24+PihuZXcgU2V0PFZlcnNpb24+KCkpO1xuICBmYWN0b3JpZXM6IEV4dGVuc2lvbkZhY3Rvcnk8VmVyc2lvbj5bXSA9IFtdO1xuICBpbmplY3RvcnMgPSBbdGhpcy5yb290SW5qZWN0b3JdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm9vdEluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pdGVtcyQgPSBmcm9tVHJpZ2dlck9uY2U8VmVyc2lvbj4odW5kZWZpbmVkLCB0aGlzLnJlZnJlc2hUcmlnZ2VyLCBbXG4gICAgICBnZXRJbmplY3RlZEhvb2tzPFZlcnNpb24+KEhPT0tfVkVSU0lPTiwgdGhpcy5pbmplY3RvcnMpLFxuICAgICAgKCkgPT4gdGhpcy5mYWN0b3JpZXMsXG4gICAgICBzdGF0ZVRvRmFjdG9yeSh0aGlzLnN0YXRlJClcbiAgICBdKS5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIG1hcCh2ZXJzaW9ucyA9PiBzb3J0QnlQcmlvcml0eSh2ZXJzaW9ucykpLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuXG4gICAgdGhpcy5ub25IaWRkZW5JdGVtcyQgPSB0aGlzLml0ZW1zJC5waXBlKFxuICAgICAgbWFwKHZlcnNpb25zID0+IHZlcnNpb25zLmZpbHRlcih2ZXJzaW9uID0+ICF2ZXJzaW9uLmhpZGRlbikpXG4gICAgKTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpOiBTZXQ8VmVyc2lvbj4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlJC52YWx1ZTtcbiAgfVxuXG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5yZWZyZXNoVHJpZ2dlci5uZXh0KCk7XG4gIH1cblxuICBhZGQodmVyc2lvbjogVmVyc2lvbikge1xuICAgIHRoaXMuc3RhdGUuYWRkKHZlcnNpb24pO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICByZW1vdmUodmVyc2lvbjogVmVyc2lvbikge1xuICAgIHRoaXMuc3RhdGUuZGVsZXRlKHZlcnNpb24pO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICBjbGVhblVwVmVyc2lvbnModmVyc2lvbnM6IFZlcnNpb25bXSk6IENsZWFuZWRWZXJzaW9uW10ge1xuICAgIHJldHVybiB2ZXJzaW9ucy5tYXAodmVyc2lvbiA9PiBwaWNrKHZlcnNpb24sICdsYWJlbCcsICd2ZXJzaW9uJywgJ3R5cGUnLCAnY3VzdG9tJykpO1xuICB9XG59XG4iXX0=
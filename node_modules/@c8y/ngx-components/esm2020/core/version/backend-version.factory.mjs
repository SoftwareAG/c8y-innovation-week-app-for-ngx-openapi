import { Inject, Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay } from 'rxjs/operators';
import { AppStateService } from '../common';
import { gettext } from '../i18n';
import { VERSION_MODULE_CONFIG } from './version.model';
import * as i0 from "@angular/core";
import * as i1 from "../common";
/**
 * Will provide the backend versions of the tenant.
 * The system option 'system' -> 'version' is used for this.
 */
export class BackendVersionFactory {
    constructor(config, appState) {
        this.config = config;
        this.appState = appState;
        this.backendVersion$ = of([]);
        if (this.config?.disableBackendVersionFactory) {
            return;
        }
        this.backendVersion$ = this.appState.state$.pipe(map(state => state?.versions?.backend), filter(backendVersion => !!backendVersion), distinctUntilChanged(), map(backendVersion => this.buildBackendVersion(backendVersion)), shareReplay(1));
    }
    get() {
        return this.backendVersion$;
    }
    buildBackendVersion(backendVersion) {
        return { label: gettext('Backend'), version: backendVersion, priority: 20, type: 'SYSTEM' };
    }
}
BackendVersionFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BackendVersionFactory, deps: [{ token: VERSION_MODULE_CONFIG, optional: true }, { token: i1.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
BackendVersionFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BackendVersionFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BackendVersionFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [VERSION_MODULE_CONFIG]
                }] }, { type: i1.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC12ZXJzaW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3ZlcnNpb24vYmFja2VuZC12ZXJzaW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBb0IsTUFBTSxXQUFXLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNsQyxPQUFPLEVBQWdDLHFCQUFxQixFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUV0Rjs7O0dBR0c7QUFJSCxNQUFNLE9BQU8scUJBQXFCO0lBRWhDLFlBQ3FELE1BQTJCLEVBQ3RFLFFBQXlCO1FBRGtCLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQ3RFLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBSG5DLG9CQUFlLEdBQW9DLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUt4RCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsNEJBQTRCLEVBQUU7WUFDN0MsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQ3RDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFDMUMsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQy9ELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO0lBQ0osQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVPLG1CQUFtQixDQUFDLGNBQXNCO1FBQ2hELE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDOUYsQ0FBQzs7a0hBeEJVLHFCQUFxQixrQkFHVixxQkFBcUI7c0hBSGhDLHFCQUFxQixjQUZwQixNQUFNOzJGQUVQLHFCQUFxQjtrQkFIakMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQUlJLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UsIEV4dGVuc2lvbkZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4nO1xuaW1wb3J0IHsgVmVyc2lvbiwgVmVyc2lvbk1vZHVsZUNvbmZpZywgVkVSU0lPTl9NT0RVTEVfQ09ORklHIH0gZnJvbSAnLi92ZXJzaW9uLm1vZGVsJztcblxuLyoqXG4gKiBXaWxsIHByb3ZpZGUgdGhlIGJhY2tlbmQgdmVyc2lvbnMgb2YgdGhlIHRlbmFudC5cbiAqIFRoZSBzeXN0ZW0gb3B0aW9uICdzeXN0ZW0nIC0+ICd2ZXJzaW9uJyBpcyB1c2VkIGZvciB0aGlzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBCYWNrZW5kVmVyc2lvbkZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFZlcnNpb24+IHtcbiAgYmFja2VuZFZlcnNpb24kOiBPYnNlcnZhYmxlPFZlcnNpb24gfCBWZXJzaW9uW10+ID0gb2YoW10pO1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFZFUlNJT05fTU9EVUxFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IFZlcnNpb25Nb2R1bGVDb25maWcsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlXG4gICkge1xuICAgIGlmICh0aGlzLmNvbmZpZz8uZGlzYWJsZUJhY2tlbmRWZXJzaW9uRmFjdG9yeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJhY2tlbmRWZXJzaW9uJCA9IHRoaXMuYXBwU3RhdGUuc3RhdGUkLnBpcGUoXG4gICAgICBtYXAoc3RhdGUgPT4gc3RhdGU/LnZlcnNpb25zPy5iYWNrZW5kKSxcbiAgICAgIGZpbHRlcihiYWNrZW5kVmVyc2lvbiA9PiAhIWJhY2tlbmRWZXJzaW9uKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBtYXAoYmFja2VuZFZlcnNpb24gPT4gdGhpcy5idWlsZEJhY2tlbmRWZXJzaW9uKGJhY2tlbmRWZXJzaW9uKSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBnZXQoKTogT2JzZXJ2YWJsZTxWZXJzaW9uIHwgVmVyc2lvbltdPiB7XG4gICAgcmV0dXJuIHRoaXMuYmFja2VuZFZlcnNpb24kO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZEJhY2tlbmRWZXJzaW9uKGJhY2tlbmRWZXJzaW9uOiBzdHJpbmcpOiBWZXJzaW9uIHtcbiAgICByZXR1cm4geyBsYWJlbDogZ2V0dGV4dCgnQmFja2VuZCcpLCB2ZXJzaW9uOiBiYWNrZW5kVmVyc2lvbiwgcHJpb3JpdHk6IDIwLCB0eXBlOiAnU1lTVEVNJyB9O1xuICB9XG59XG4iXX0=
import { Inject, Injectable, Optional } from '@angular/core';
import { AppStateService } from '../common';
import { VERSION_MODULE_CONFIG } from './version.model';
import { of } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { PluginsService } from '../plugins';
import * as i0 from "@angular/core";
import * as i1 from "../common";
import * as i2 from "../plugins";
/**
 * Will provide the version of plugins installed to the current application.
 */
export class WebSDKPluginVersionFactory {
    constructor(config, appState, plugins) {
        this.config = config;
        this.appState = appState;
        this.plugins = plugins;
        this.webSDKPluginVersions$ = of([]);
        if (this.config?.disableWebSDKPluginVersionFactory) {
            return;
        }
        this.webSDKPluginVersions$ = this.appState.currentApplication.pipe(map(app => this.plugins.getMFRemotes(app)), filter(remotes => !!remotes), distinctUntilChanged(), map(remotes => this.getVersionsFromRemotes(remotes)));
    }
    get() {
        return this.webSDKPluginVersions$;
    }
    getVersionsFromRemotes(remotes) {
        const versions = new Array();
        for (const key of Object.keys(remotes)) {
            const modules = remotes[key];
            if (!modules?.length) {
                continue;
            }
            const [contextPath, version] = key.split('@', 2);
            if (!version) {
                continue;
            }
            const versionsBehindKey = modules.map(module => {
                return {
                    label: `${contextPath} => ${module}`,
                    version,
                    type: 'INSTALLED_MF_PLUGINS',
                    hideInRightDrawer: true,
                    custom: {
                        key,
                        contextPath,
                        module
                    }
                };
            });
            versions.push(...versionsBehindKey);
        }
        return versions;
    }
}
WebSDKPluginVersionFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WebSDKPluginVersionFactory, deps: [{ token: VERSION_MODULE_CONFIG, optional: true }, { token: i1.AppStateService }, { token: i2.PluginsService }], target: i0.ɵɵFactoryTarget.Injectable });
WebSDKPluginVersionFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WebSDKPluginVersionFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WebSDKPluginVersionFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [VERSION_MODULE_CONFIG]
                }] }, { type: i1.AppStateService }, { type: i2.PluginsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2RrLXBsdWdpbi12ZXJzaW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3ZlcnNpb24vd2Vic2RrLXBsdWdpbi12ZXJzaW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQW9CLE1BQU0sV0FBVyxDQUFDO0FBQzlELE9BQU8sRUFBZ0MscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQUc1Qzs7R0FFRztBQUlILE1BQU0sT0FBTywwQkFBMEI7SUFHckMsWUFDcUQsTUFBMkIsRUFDdEUsUUFBeUIsRUFDekIsT0FBdUI7UUFGb0IsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDdEUsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFMakMsMEJBQXFCLEdBQTBCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQU9wRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsaUNBQWlDLEVBQUU7WUFDbEQsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUNoRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzVCLG9CQUFvQixFQUFFLEVBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUNyRCxDQUFDO0lBQ0osQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxDQUFDO0lBRUQsc0JBQXNCLENBQUMsT0FBaUM7UUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQVcsQ0FBQztRQUN0QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO2dCQUNwQixTQUFTO2FBQ1Y7WUFDRCxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osU0FBUzthQUNWO1lBRUQsTUFBTSxpQkFBaUIsR0FBYyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN4RCxPQUFPO29CQUNMLEtBQUssRUFBRSxHQUFHLFdBQVcsT0FBTyxNQUFNLEVBQUU7b0JBQ3BDLE9BQU87b0JBQ1AsSUFBSSxFQUFFLHNCQUFzQjtvQkFDNUIsaUJBQWlCLEVBQUUsSUFBSTtvQkFDdkIsTUFBTSxFQUFFO3dCQUNOLEdBQUc7d0JBQ0gsV0FBVzt3QkFDWCxNQUFNO3FCQUNQO2lCQUNGLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQzs7dUhBbkRVLDBCQUEwQixrQkFJZixxQkFBcUI7MkhBSmhDLDBCQUEwQixjQUZ6QixNQUFNOzJGQUVQLDBCQUEwQjtrQkFIdEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQUtJLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlLCBFeHRlbnNpb25GYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IFZlcnNpb24sIFZlcnNpb25Nb2R1bGVDb25maWcsIFZFUlNJT05fTU9EVUxFX0NPTkZJRyB9IGZyb20gJy4vdmVyc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGx1Z2luc1NlcnZpY2UgfSBmcm9tICcuLi9wbHVnaW5zJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVtb3RlUGx1Z2lucyB9IGZyb20gJ0BjOHkvY2xpZW50JztcblxuLyoqXG4gKiBXaWxsIHByb3ZpZGUgdGhlIHZlcnNpb24gb2YgcGx1Z2lucyBpbnN0YWxsZWQgdG8gdGhlIGN1cnJlbnQgYXBwbGljYXRpb24uXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFdlYlNES1BsdWdpblZlcnNpb25GYWN0b3J5IGltcGxlbWVudHMgRXh0ZW5zaW9uRmFjdG9yeTxWZXJzaW9uPiB7XG4gIHdlYlNES1BsdWdpblZlcnNpb25zJDogT2JzZXJ2YWJsZTxWZXJzaW9uW10+ID0gb2YoW10pO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVkVSU0lPTl9NT0RVTEVfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogVmVyc2lvbk1vZHVsZUNvbmZpZyxcbiAgICBwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwbHVnaW5zOiBQbHVnaW5zU2VydmljZVxuICApIHtcbiAgICBpZiAodGhpcy5jb25maWc/LmRpc2FibGVXZWJTREtQbHVnaW5WZXJzaW9uRmFjdG9yeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLndlYlNES1BsdWdpblZlcnNpb25zJCA9IHRoaXMuYXBwU3RhdGUuY3VycmVudEFwcGxpY2F0aW9uLnBpcGUoXG4gICAgICBtYXAoYXBwID0+IHRoaXMucGx1Z2lucy5nZXRNRlJlbW90ZXMoYXBwKSksXG4gICAgICBmaWx0ZXIocmVtb3RlcyA9PiAhIXJlbW90ZXMpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIG1hcChyZW1vdGVzID0+IHRoaXMuZ2V0VmVyc2lvbnNGcm9tUmVtb3RlcyhyZW1vdGVzKSlcbiAgICApO1xuICB9XG5cbiAgZ2V0KCk6IE9ic2VydmFibGU8VmVyc2lvbltdPiB7XG4gICAgcmV0dXJuIHRoaXMud2ViU0RLUGx1Z2luVmVyc2lvbnMkO1xuICB9XG5cbiAgZ2V0VmVyc2lvbnNGcm9tUmVtb3RlcyhyZW1vdGVzOiBBcHBsaWNhdGlvblJlbW90ZVBsdWdpbnMpOiBWZXJzaW9uW10ge1xuICAgIGNvbnN0IHZlcnNpb25zID0gbmV3IEFycmF5PFZlcnNpb24+KCk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVtb3RlcykpIHtcbiAgICAgIGNvbnN0IG1vZHVsZXMgPSByZW1vdGVzW2tleV07XG4gICAgICBpZiAoIW1vZHVsZXM/Lmxlbmd0aCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtjb250ZXh0UGF0aCwgdmVyc2lvbl0gPSBrZXkuc3BsaXQoJ0AnLCAyKTtcbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmVyc2lvbnNCZWhpbmRLZXk6IFZlcnNpb25bXSA9IG1vZHVsZXMubWFwKG1vZHVsZSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGFiZWw6IGAke2NvbnRleHRQYXRofSA9PiAke21vZHVsZX1gLFxuICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgdHlwZTogJ0lOU1RBTExFRF9NRl9QTFVHSU5TJyxcbiAgICAgICAgICBoaWRlSW5SaWdodERyYXdlcjogdHJ1ZSxcbiAgICAgICAgICBjdXN0b206IHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvbnRleHRQYXRoLFxuICAgICAgICAgICAgbW9kdWxlXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB2ZXJzaW9ucy5wdXNoKC4uLnZlcnNpb25zQmVoaW5kS2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHZlcnNpb25zO1xuICB9XG59XG4iXX0=
import { Injectable } from '@angular/core';
import { map, take } from 'rxjs/operators';
import { groupBy } from 'lodash-es';
import { VersionService } from './version.service';
import { AppStateService } from '../common/ui-state.service';
import { ApplicationService, ApplicationType } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "./version.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "@c8y/client";
export class PlatformDetailsService {
    constructor(version, appState, apps) {
        this.version = version;
        this.appState = appState;
        this.apps = apps;
    }
    async getPlatformDetailsObject() {
        const currentUser = this.appState.currentUser.value;
        const userId = currentUser?.id;
        const userPermissions = this.getUserPermissions(currentUser);
        const [hookedVersions, microserviceVersions] = await Promise.all([
            this.getVersions(),
            this.getMicroserviceVersions(userId)
        ]);
        const versions = [...hookedVersions, ...microserviceVersions];
        const groupedVersions = groupBy(versions, 'type');
        const tenantId = this.appState.currentTenant.value?.name;
        const tenantDomainName = this.appState.currentTenant.value?.domainName;
        const applicationKey = this.appState.currentApplication.value?.key;
        const applicationId = this.appState.currentApplication.value?.id;
        const time = new Date().toISOString();
        const url = document.URL;
        const obj = {
            time,
            tenantId,
            tenantDomainName,
            url,
            userId,
            userPermissions,
            applicationId,
            applicationKey,
            versions: groupedVersions
        };
        return obj;
    }
    async getVersions() {
        const versions = await this.version.items$
            .pipe(take(1), map(versions => this.version.cleanUpVersions(versions)))
            .toPromise();
        return versions;
    }
    async getMicroserviceVersions(userId) {
        try {
            const { data: apps } = await this.apps.listByUser(userId, {
                pageSize: 2000,
                dropOverwrittenApps: true,
                noPaging: true
            });
            return apps
                .filter(app => !!app.manifest?.version && app.type === ApplicationType.MICROSERVICE)
                .map(app => {
                return {
                    label: app.name,
                    version: app.manifest.version,
                    type: app.type,
                    custom: {
                        owner: app.owner?.tenant?.id,
                        provider: app.manifest?.provider
                    }
                };
            });
        }
        catch (e) {
            console.warn(e);
            return [];
        }
    }
    getUserPermissions(user) {
        if (!user) {
            return null;
        }
        const userPermissions = this.getDirectPermissionsOfUser(user);
        const groupPermissions = this.getPermissionsOfAssignedGroups(user);
        return { user: userPermissions, groups: groupPermissions };
    }
    getDirectPermissionsOfUser(user) {
        const userChangedType = user;
        const userRoleReferences = userChangedType.roles?.references || [];
        return userRoleReferences.map(ref => ref.role.id);
    }
    getPermissionsOfAssignedGroups(user) {
        const groups = user.groups?.references || [];
        return groups.map(ref => {
            const roleReferences = ref.group?.roles?.references || [];
            const permissions = roleReferences.map(ref => ref.role.id);
            return {
                id: ref.group.id,
                name: ref.group.name,
                permissions
            };
        });
    }
}
PlatformDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PlatformDetailsService, deps: [{ token: i1.VersionService }, { token: i2.AppStateService }, { token: i3.ApplicationService }], target: i0.ɵɵFactoryTarget.Injectable });
PlatformDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PlatformDetailsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PlatformDetailsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.VersionService }, { type: i2.AppStateService }, { type: i3.ApplicationService }]; } });
//# sourceMappingURL=data:application/json;base64,
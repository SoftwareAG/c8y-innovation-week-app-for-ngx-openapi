import { Component } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { ClipboardService } from '../../clipboard/clipboard.service';
import { AppStateService } from '../../common/ui-state.service';
import { HeaderService } from '../../header/header.service';
import { VersionDetailsModalComponent } from '../version-details-modal/version-details-modal.component';
import { VersionService } from '../version.service';
import * as i0 from "@angular/core";
import * as i1 from "../version.service";
import * as i2 from "../../common/ui-state.service";
import * as i3 from "../../clipboard/clipboard.service";
import * as i4 from "ngx-bootstrap/modal";
import * as i5 from "../../header/header.service";
import * as i6 from "../../common/icon.directive";
import * as i7 from "../../i18n/c8y-translate.directive";
import * as i8 from "@angular/common";
import * as i9 from "../../i18n/c8y-translate.pipe";
export class VersionListComponent {
    constructor(version, appState, clipboardService, modalService, headerService) {
        this.version = version;
        this.appState = appState;
        this.clipboardService = clipboardService;
        this.modalService = modalService;
        this.headerService = headerService;
        this.versionsToDirectlyDisplay$ = this.version.nonHiddenItems$.pipe(map(versions => versions.filter(version => !version.hideInRightDrawer).slice(0, 2)));
        this.currentTenantId$ = this.appState.currentTenant.pipe(map(tenant => tenant?.name), filter(tenantId => !!tenantId), distinctUntilChanged());
        this.open$ = this.headerService.rightDrawerOpen$;
    }
    openDetailedInfo() {
        this.modalService.show(VersionDetailsModalComponent);
    }
    copyIt(text) {
        this.clipboardService.writeText(text);
    }
}
VersionListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionListComponent, deps: [{ token: i1.VersionService }, { token: i2.AppStateService }, { token: i3.ClipboardService }, { token: i4.BsModalService }, { token: i5.HeaderService }], target: i0.ɵɵFactoryTarget.Component });
VersionListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: VersionListComponent, selector: "c8y-version-list", ngImport: i0, template: "<div class=\"separator-top p-t-8 p-b-8\">\n  <div class=\"c8y-right-drawer__item sticky-top\">\n    <i c8yIcon=\"c8y-cumulocity-iot\"></i>\n    <span class=\"text-bold\">{{ 'Platform info' | translate }}</span>\n  </div>\n\n  <ul class=\"list-unstyled\">\n    <li class=\"c8y-right-drawer__item\" *ngIf=\"currentTenantId$ | async as tenantId\">\n      <span class=\"flex-grow text-muted m-0 text-12 text-truncate\" translate>Tenant ID</span>\n      <button\n        type=\"button\"\n        title=\"{{ 'Copy tenant ID to the clipboard' | translate }}\"\n        class=\"m-l-auto flex-no-shrink btn-clean p-0 text-info\"\n        (click)=\"$event.stopPropagation(); copyIt(tenantId)\"\n        [attr.tabindex]=\"(open$ | async) ? '0' : '-1'\"\n      >\n        {{ tenantId }}\n        <i [c8yIcon]=\"'clipboard'\" class=\"text-14 m-0\"></i>\n      </button>\n    </li>\n    <li\n      class=\"c8y-right-drawer__item\"\n      *ngFor=\"let versionEntry of versionsToDirectlyDisplay$ | async\"\n    >\n      <span\n        class=\"flex-grow text-muted text-12 text-truncate m-r-8\"\n        [title]=\"versionEntry.label | translate\"\n      >\n        {{ versionEntry.label | translate }}\n      </span>\n      <span class=\"m-l-auto flex-no-shrink\" [title]=\"versionEntry.version | translate\">\n        {{ versionEntry.version }}\n      </span>\n    </li>\n    <li class=\"c8y-right-drawer__item\">\n      <button\n        class=\"btn btn-default btn-sm\"\n        [attr.tabindex]=\"(open$ | async) ? '0' : '-1'\"\n        (click)=\"openDetailedInfo()\" translate\n      >\n        Detailed info\n      </button>\n    </li>\n  </ul>\n</div>\n", dependencies: [{ kind: "directive", type: i6.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i7.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i9.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i8.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-version-list', template: "<div class=\"separator-top p-t-8 p-b-8\">\n  <div class=\"c8y-right-drawer__item sticky-top\">\n    <i c8yIcon=\"c8y-cumulocity-iot\"></i>\n    <span class=\"text-bold\">{{ 'Platform info' | translate }}</span>\n  </div>\n\n  <ul class=\"list-unstyled\">\n    <li class=\"c8y-right-drawer__item\" *ngIf=\"currentTenantId$ | async as tenantId\">\n      <span class=\"flex-grow text-muted m-0 text-12 text-truncate\" translate>Tenant ID</span>\n      <button\n        type=\"button\"\n        title=\"{{ 'Copy tenant ID to the clipboard' | translate }}\"\n        class=\"m-l-auto flex-no-shrink btn-clean p-0 text-info\"\n        (click)=\"$event.stopPropagation(); copyIt(tenantId)\"\n        [attr.tabindex]=\"(open$ | async) ? '0' : '-1'\"\n      >\n        {{ tenantId }}\n        <i [c8yIcon]=\"'clipboard'\" class=\"text-14 m-0\"></i>\n      </button>\n    </li>\n    <li\n      class=\"c8y-right-drawer__item\"\n      *ngFor=\"let versionEntry of versionsToDirectlyDisplay$ | async\"\n    >\n      <span\n        class=\"flex-grow text-muted text-12 text-truncate m-r-8\"\n        [title]=\"versionEntry.label | translate\"\n      >\n        {{ versionEntry.label | translate }}\n      </span>\n      <span class=\"m-l-auto flex-no-shrink\" [title]=\"versionEntry.version | translate\">\n        {{ versionEntry.version }}\n      </span>\n    </li>\n    <li class=\"c8y-right-drawer__item\">\n      <button\n        class=\"btn btn-default btn-sm\"\n        [attr.tabindex]=\"(open$ | async) ? '0' : '-1'\"\n        (click)=\"openDetailedInfo()\" translate\n      >\n        Detailed info\n      </button>\n    </li>\n  </ul>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.VersionService }, { type: i2.AppStateService }, { type: i3.ClipboardService }, { type: i4.BsModalService }, { type: i5.HeaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvdmVyc2lvbi92ZXJzaW9uLWxpc3QvdmVyc2lvbi1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL2NvcmUvdmVyc2lvbi92ZXJzaW9uLWxpc3QvdmVyc2lvbi1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUV4RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7Ozs7O0FBTXBELE1BQU0sT0FBTyxvQkFBb0I7SUFJL0IsWUFDVSxPQUF1QixFQUN2QixRQUF5QixFQUN6QixnQkFBa0MsRUFDbEMsWUFBNEIsRUFDNUIsYUFBNEI7UUFKNUIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFFcEMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDakUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNwRixDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDdEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQzlCLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7SUFDbkQsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7aUhBNUJVLG9CQUFvQjtxR0FBcEIsb0JBQW9CLHdEQ2ZqQywybURBNkNBOzJGRDlCYSxvQkFBb0I7a0JBSmhDLFNBQVM7K0JBQ0Usa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4uLy4uL2NsaXBib2FyZC9jbGlwYm9hcmQuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vaGVhZGVyL2hlYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZlcnNpb25EZXRhaWxzTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi92ZXJzaW9uLWRldGFpbHMtbW9kYWwvdmVyc2lvbi1kZXRhaWxzLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSAnLi4vdmVyc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBWZXJzaW9uU2VydmljZSB9IGZyb20gJy4uL3ZlcnNpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS12ZXJzaW9uLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vdmVyc2lvbi1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uTGlzdENvbXBvbmVudCB7XG4gIG9wZW4kOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICB2ZXJzaW9uc1RvRGlyZWN0bHlEaXNwbGF5JDogT2JzZXJ2YWJsZTxWZXJzaW9uW10+O1xuICBjdXJyZW50VGVuYW50SWQkOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmVyc2lvbjogVmVyc2lvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpcGJvYXJkU2VydmljZTogQ2xpcGJvYXJkU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBoZWFkZXJTZXJ2aWNlOiBIZWFkZXJTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMudmVyc2lvbnNUb0RpcmVjdGx5RGlzcGxheSQgPSB0aGlzLnZlcnNpb24ubm9uSGlkZGVuSXRlbXMkLnBpcGUoXG4gICAgICBtYXAodmVyc2lvbnMgPT4gdmVyc2lvbnMuZmlsdGVyKHZlcnNpb24gPT4gIXZlcnNpb24uaGlkZUluUmlnaHREcmF3ZXIpLnNsaWNlKDAsIDIpKVxuICAgICk7XG4gICAgdGhpcy5jdXJyZW50VGVuYW50SWQkID0gdGhpcy5hcHBTdGF0ZS5jdXJyZW50VGVuYW50LnBpcGUoXG4gICAgICBtYXAodGVuYW50ID0+IHRlbmFudD8ubmFtZSksXG4gICAgICBmaWx0ZXIodGVuYW50SWQgPT4gISF0ZW5hbnRJZCksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKTtcbiAgICB0aGlzLm9wZW4kID0gdGhpcy5oZWFkZXJTZXJ2aWNlLnJpZ2h0RHJhd2VyT3BlbiQ7XG4gIH1cblxuICBvcGVuRGV0YWlsZWRJbmZvKCkge1xuICAgIHRoaXMubW9kYWxTZXJ2aWNlLnNob3coVmVyc2lvbkRldGFpbHNNb2RhbENvbXBvbmVudCk7XG4gIH1cblxuICBjb3B5SXQodGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5jbGlwYm9hcmRTZXJ2aWNlLndyaXRlVGV4dCh0ZXh0KTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cInNlcGFyYXRvci10b3AgcC10LTggcC1iLThcIj5cbiAgPGRpdiBjbGFzcz1cImM4eS1yaWdodC1kcmF3ZXJfX2l0ZW0gc3RpY2t5LXRvcFwiPlxuICAgIDxpIGM4eUljb249XCJjOHktY3VtdWxvY2l0eS1pb3RcIj48L2k+XG4gICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJvbGRcIj57eyAnUGxhdGZvcm0gaW5mbycgfCB0cmFuc2xhdGUgfX08L3NwYW4+XG4gIDwvZGl2PlxuXG4gIDx1bCBjbGFzcz1cImxpc3QtdW5zdHlsZWRcIj5cbiAgICA8bGkgY2xhc3M9XCJjOHktcmlnaHQtZHJhd2VyX19pdGVtXCIgKm5nSWY9XCJjdXJyZW50VGVuYW50SWQkIHwgYXN5bmMgYXMgdGVuYW50SWRcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiZmxleC1ncm93IHRleHQtbXV0ZWQgbS0wIHRleHQtMTIgdGV4dC10cnVuY2F0ZVwiIHRyYW5zbGF0ZT5UZW5hbnQgSUQ8L3NwYW4+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICB0aXRsZT1cInt7ICdDb3B5IHRlbmFudCBJRCB0byB0aGUgY2xpcGJvYXJkJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGNsYXNzPVwibS1sLWF1dG8gZmxleC1uby1zaHJpbmsgYnRuLWNsZWFuIHAtMCB0ZXh0LWluZm9cIlxuICAgICAgICAoY2xpY2spPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyBjb3B5SXQodGVuYW50SWQpXCJcbiAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwiKG9wZW4kIHwgYXN5bmMpID8gJzAnIDogJy0xJ1wiXG4gICAgICA+XG4gICAgICAgIHt7IHRlbmFudElkIH19XG4gICAgICAgIDxpIFtjOHlJY29uXT1cIidjbGlwYm9hcmQnXCIgY2xhc3M9XCJ0ZXh0LTE0IG0tMFwiPjwvaT5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvbGk+XG4gICAgPGxpXG4gICAgICBjbGFzcz1cImM4eS1yaWdodC1kcmF3ZXJfX2l0ZW1cIlxuICAgICAgKm5nRm9yPVwibGV0IHZlcnNpb25FbnRyeSBvZiB2ZXJzaW9uc1RvRGlyZWN0bHlEaXNwbGF5JCB8IGFzeW5jXCJcbiAgICA+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cImZsZXgtZ3JvdyB0ZXh0LW11dGVkIHRleHQtMTIgdGV4dC10cnVuY2F0ZSBtLXItOFwiXG4gICAgICAgIFt0aXRsZV09XCJ2ZXJzaW9uRW50cnkubGFiZWwgfCB0cmFuc2xhdGVcIlxuICAgICAgPlxuICAgICAgICB7eyB2ZXJzaW9uRW50cnkubGFiZWwgfCB0cmFuc2xhdGUgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwibS1sLWF1dG8gZmxleC1uby1zaHJpbmtcIiBbdGl0bGVdPVwidmVyc2lvbkVudHJ5LnZlcnNpb24gfCB0cmFuc2xhdGVcIj5cbiAgICAgICAge3sgdmVyc2lvbkVudHJ5LnZlcnNpb24gfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2xpPlxuICAgIDxsaSBjbGFzcz1cImM4eS1yaWdodC1kcmF3ZXJfX2l0ZW1cIj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXCJcbiAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwiKG9wZW4kIHwgYXN5bmMpID8gJzAnIDogJy0xJ1wiXG4gICAgICAgIChjbGljayk9XCJvcGVuRGV0YWlsZWRJbmZvKClcIiB0cmFuc2xhdGVcbiAgICAgID5cbiAgICAgICAgRGV0YWlsZWQgaW5mb1xuICAgICAgPC9idXR0b24+XG4gICAgPC9saT5cbiAgPC91bD5cbjwvZGl2PlxuIl19
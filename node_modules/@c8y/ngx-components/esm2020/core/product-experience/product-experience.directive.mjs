import { Directive, HostListener, Inject, Input, Optional, Self, SkipSelf } from '@angular/core';
import { GainsightService } from './gainsight.service';
import { PRODUCT_EXPERIENCE_EVENT_SOURCE } from './product-experience.model';
import * as i0 from "@angular/core";
import * as i1 from "./gainsight.service";
export class ProductExperienceDirective {
    /**
     * If set to <code>true</code>, <code>actionName</code> and <code>actionData</code> will be
     * inherited from the parent component if it has the <code>c8yProductExperience</code> applied to it.
     * With <code>inherit</code> set to <code>true</code> the local <code>actionName</code> value is
     * ignored and overriden by the parent component's <code>actionName</code>. This allows for easy
     * re-use of core components (e.g. <code>&lt;c8y-li-action&gt;</code>) that would use the inherited
     * action name rather than their generic action name. Own <code>actionData</code> properties with
     * the same name take precedence to those inheritted from the parent component.
     */
    set _inherit(inherit) {
        // allows to use the <input c8yProductExperience inherit [actionData]="{...}"> syntax
        this.inherit = inherit === '' || (inherit ?? true);
    }
    /**
     * If set to <code>true</code> own <code>actionData</code> properties would not override
     * <code>actionData</code> properties of the parent component. Instead, values will be
     * inherited from the parent component. It is only effective if <code>inherit</code>
     * is set to <code>true</code>.
     */
    set _suppressDataOverriding(suppressDataOverriding) {
        // allows to use the <input c8yProductExperience suppressDataOverriding [actionData]="{...}"> syntax
        this.suppressDataOverriding = suppressDataOverriding === '' || (suppressDataOverriding ?? true);
    }
    constructor(component, parentEventSource, gainsightService) {
        this.component = component;
        this.parentEventSource = parentEventSource;
        this.gainsightService = gainsightService;
    }
    onClick() {
        if (!this.component) {
            const { actionName, actionData } = this.getAction(this.suppressDataOverriding);
            if (actionName) {
                this.gainsightService.triggerEvent(actionName, actionData);
            }
        }
    }
    ngOnInit() {
        if (this.component) {
            const { actionName, actionData } = this.getAction();
            this.component.productExperienceEvent = {
                eventName: actionName,
                data: this.mergeData(actionData, this.component?.productExperienceEvent?.data, this.suppressDataOverriding)
            };
        }
    }
    getAction(reverse = false) {
        let { actionName, actionData } = this;
        if (this.inherit && this.parentEventSource?.productExperienceEvent) {
            const { productExperienceEvent } = this.parentEventSource;
            actionName = productExperienceEvent.eventName;
            actionData = this.mergeData(productExperienceEvent.data, this.actionData, reverse);
        }
        return { actionName, actionData };
    }
    mergeData(dataA, dataB, reverse = false) {
        return reverse ? { ...dataB, ...dataA } : { ...dataA, ...dataB };
    }
}
ProductExperienceDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceDirective, deps: [{ token: PRODUCT_EXPERIENCE_EVENT_SOURCE, optional: true, self: true }, { token: PRODUCT_EXPERIENCE_EVENT_SOURCE, optional: true, skipSelf: true }, { token: i1.GainsightService }], target: i0.ɵɵFactoryTarget.Directive });
ProductExperienceDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: { actionName: "actionName", actionData: "actionData", _inherit: ["inherit", "_inherit"], _suppressDataOverriding: ["suppressDataOverriding", "_suppressDataOverriding"] }, host: { listeners: { "click": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[c8yProductExperience]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRODUCT_EXPERIENCE_EVENT_SOURCE]
                }] }, { type: undefined, decorators: [{
                    type: SkipSelf
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRODUCT_EXPERIENCE_EVENT_SOURCE]
                }] }, { type: i1.GainsightService }]; }, propDecorators: { actionName: [{
                type: Input
            }], actionData: [{
                type: Input
            }], _inherit: [{
                type: Input,
                args: ['inherit']
            }], _suppressDataOverriding: [{
                type: Input,
                args: ['suppressDataOverriding']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,
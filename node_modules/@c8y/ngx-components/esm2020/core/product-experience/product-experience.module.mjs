import { NgModule } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { GainsightService } from './gainsight.service';
import { ProductExperienceDirective } from './product-experience.directive';
import * as i0 from "@angular/core";
import * as i1 from "../common/ui-state.service";
import * as i2 from "./gainsight.service";
import * as i3 from "../bootstrap/cookie-banner/cookie-banner.service";
import * as i4 from "../common/user-preferences/user-preferences.service";
/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
export class ProductExperienceModule {
    constructor(appState, gainsightService, cookieBannerService, userPreferencesService) {
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.userPreferencesService = userPreferencesService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$,
            this.userPreferencesService.observe(this.gainsightService.USER_PREFERENCES_GAINSIGHT_ENGAGEMENTS_KEY)
        ]).subscribe(async ([currentTenant, isCookieBannerShowed, showGainsightEngagements]) => {
            if (isCookieBannerShowed) {
                return;
            }
            const { customProperties } = currentTenant;
            if (this.gainsightService.shouldLoadGainsightTag(customProperties) &&
                !(await this.gainsightService.isGainsightPreferenceDisabledInUserPreferences(this.gainsightService.USER_PREFERENCES_GAINSIGHT_KEY))) {
                this.gainsightService.loadTag(currentTenant);
            }
            /**
             * In case the user preference for Gainsight bot does not exist the default value is set to true and saved in user preferences
             */
            if (showGainsightEngagements === undefined) {
                showGainsightEngagements = true;
                userPreferencesService.set(this.gainsightService.USER_PREFERENCES_GAINSIGHT_ENGAGEMENTS_KEY, showGainsightEngagements);
            }
            this.gainsightService.switchGainsightEngagementsVisibility(showGainsightEngagements);
        });
    }
}
ProductExperienceModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceModule, deps: [{ token: i1.AppStateService }, { token: i2.GainsightService }, { token: i3.CookieBannerService }, { token: i4.UserPreferencesService }], target: i0.ɵɵFactoryTarget.NgModule });
ProductExperienceModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceModule, declarations: [ProductExperienceDirective], exports: [ProductExperienceDirective] });
ProductExperienceModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceModule, providers: [GainsightService] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProductExperienceModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ProductExperienceDirective],
                    exports: [ProductExperienceDirective],
                    providers: [GainsightService]
                }]
        }], ctorParameters: function () { return [{ type: i1.AppStateService }, { type: i2.GainsightService }, { type: i3.CookieBannerService }, { type: i4.UserPreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcHJvZHVjdC1leHBlcmllbmNlL3Byb2R1Y3QtZXhwZXJpZW5jZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDN0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7OztBQUM1RTs7Ozs7R0FLRztBQU1ILE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFDVSxRQUF5QixFQUN6QixnQkFBa0MsRUFDbEMsbUJBQXdDLEVBQ3hDLHNCQUE4QztRQUg5QyxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUV0RCxhQUFhLENBQUM7WUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFpQixPQUFPLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsbUJBQW1CLENBQUMscUJBQXFCO1lBQzlDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQywwQ0FBMEMsQ0FDakU7U0FDRixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLEVBQUU7WUFDckYsSUFBSSxvQkFBb0IsRUFBRTtnQkFDeEIsT0FBTzthQUNSO1lBQ0QsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsYUFBYSxDQUFDO1lBQzNDLElBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO2dCQUM5RCxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsOENBQThDLENBQzFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw4QkFBOEIsQ0FDckQsQ0FBQyxFQUNGO2dCQUNBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDOUM7WUFFRDs7ZUFFRztZQUNILElBQUksd0JBQXdCLEtBQUssU0FBUyxFQUFFO2dCQUMxQyx3QkFBd0IsR0FBRyxJQUFJLENBQUM7Z0JBQ2hDLHNCQUFzQixDQUFDLEdBQUcsQ0FDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDBDQUEwQyxFQUNoRSx3QkFBd0IsQ0FDekIsQ0FBQzthQUNIO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9DQUFvQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztvSEF2Q1UsdUJBQXVCO3FIQUF2Qix1QkFBdUIsaUJBSm5CLDBCQUEwQixhQUMvQiwwQkFBMEI7cUhBR3pCLHVCQUF1QixhQUZ2QixDQUFDLGdCQUFnQixDQUFDOzJGQUVsQix1QkFBdUI7a0JBTG5DLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7b0JBQzFDLE9BQU8sRUFBRSxDQUFDLDBCQUEwQixDQUFDO29CQUNyQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUN1cnJlbnRUZW5hbnQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDb29raWVCYW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYm9vdHN0cmFwL2Nvb2tpZS1iYW5uZXIvY29va2llLWJhbm5lci5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdXNlci1wcmVmZXJlbmNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2FpbnNpZ2h0U2VydmljZSB9IGZyb20gJy4vZ2FpbnNpZ2h0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2R1Y3QtZXhwZXJpZW5jZS5kaXJlY3RpdmUnO1xuLyoqXG4gKiBUaGlzIG1vZHVsZSBlbmFibGVzIGFuIHRlbmFudCB0byBhY3RpdmF0ZSB0aGUgcHJvZHVjdCBleHBlcmllbmNlXG4gKiBzb2Z0d2FyZSBbR2FpbnNpZ2h0XShodHRwczovL3d3dy5nYWluc2lnaHQuY29tL3Byb2R1Y3QtZXhwZXJpZW5jZS8pIHRvIGhlbHBcbiAqIGFuZCB0cmFjayB1c2VyIGFjdGlvbnMuIEdhaW5zaWdodCBpcyBvbmx5IGFjdGl2YXRlZCwgaWYgdGhlIHRlbmFudCBjdXN0b21cbiAqIHByb3BlcnR5IGBnYWluc2lnaHRFbmFibGVkYCBpcyBzZXQgdG8gdHJ1ZS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBwcm92aWRlcnM6IFtHYWluc2lnaHRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0RXhwZXJpZW5jZU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGdhaW5zaWdodFNlcnZpY2U6IEdhaW5zaWdodFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb29raWVCYW5uZXJTZXJ2aWNlOiBDb29raWVCYW5uZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZVxuICApIHtcbiAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgIHRoaXMuYXBwU3RhdGUuY3VycmVudFRlbmFudC5waXBlKGZpbHRlcjxJQ3VycmVudFRlbmFudD4oQm9vbGVhbikpLFxuICAgICAgdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmlzQ29va2llQmFubmVyU2hvd2VkJCxcbiAgICAgIHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5vYnNlcnZlPGJvb2xlYW4+KFxuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UuVVNFUl9QUkVGRVJFTkNFU19HQUlOU0lHSFRfRU5HQUdFTUVOVFNfS0VZXG4gICAgICApXG4gICAgXSkuc3Vic2NyaWJlKGFzeW5jIChbY3VycmVudFRlbmFudCwgaXNDb29raWVCYW5uZXJTaG93ZWQsIHNob3dHYWluc2lnaHRFbmdhZ2VtZW50c10pID0+IHtcbiAgICAgIGlmIChpc0Nvb2tpZUJhbm5lclNob3dlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IGN1c3RvbVByb3BlcnRpZXMgfSA9IGN1cnJlbnRUZW5hbnQ7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZ2FpbnNpZ2h0U2VydmljZS5zaG91bGRMb2FkR2FpbnNpZ2h0VGFnKGN1c3RvbVByb3BlcnRpZXMpICYmXG4gICAgICAgICEoYXdhaXQgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLmlzR2FpbnNpZ2h0UHJlZmVyZW5jZURpc2FibGVkSW5Vc2VyUHJlZmVyZW5jZXMoXG4gICAgICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLlVTRVJfUFJFRkVSRU5DRVNfR0FJTlNJR0hUX0tFWVxuICAgICAgICApKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZ2FpbnNpZ2h0U2VydmljZS5sb2FkVGFnKGN1cnJlbnRUZW5hbnQpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEluIGNhc2UgdGhlIHVzZXIgcHJlZmVyZW5jZSBmb3IgR2FpbnNpZ2h0IGJvdCBkb2VzIG5vdCBleGlzdCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBzZXQgdG8gdHJ1ZSBhbmQgc2F2ZWQgaW4gdXNlciBwcmVmZXJlbmNlc1xuICAgICAgICovXG4gICAgICBpZiAoc2hvd0dhaW5zaWdodEVuZ2FnZW1lbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2hvd0dhaW5zaWdodEVuZ2FnZW1lbnRzID0gdHJ1ZTtcbiAgICAgICAgdXNlclByZWZlcmVuY2VzU2VydmljZS5zZXQoXG4gICAgICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLlVTRVJfUFJFRkVSRU5DRVNfR0FJTlNJR0hUX0VOR0FHRU1FTlRTX0tFWSxcbiAgICAgICAgICBzaG93R2FpbnNpZ2h0RW5nYWdlbWVudHNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2FpbnNpZ2h0U2VydmljZS5zd2l0Y2hHYWluc2lnaHRFbmdhZ2VtZW50c1Zpc2liaWxpdHkoc2hvd0dhaW5zaWdodEVuZ2FnZW1lbnRzKTtcbiAgICB9KTtcbiAgfVxufVxuIl19
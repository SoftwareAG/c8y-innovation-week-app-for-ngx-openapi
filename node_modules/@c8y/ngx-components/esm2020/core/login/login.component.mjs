import { Component, Input, HostListener } from '@angular/core';
import { TenantLoginOptionType } from '@c8y/client';
import { LoginService } from './login.service';
import { OptionsService } from '../common/options.service';
import { LoginViews } from './login.model';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
import { CredentialsFromQueryParamsService } from './credentials-from-query-params.service';
import * as i0 from "@angular/core";
import * as i1 from "./login.service";
import * as i2 from "../common/options.service";
import * as i3 from "../alert/alert.service";
import * as i4 from "./credentials-from-query-params.service";
import * as i5 from "@angular/common";
import * as i6 from "../authentication/sms-challenge.component";
import * as i7 from "../authentication/provide-phone-number.component";
import * as i8 from "../alert/alert-outlet.component";
import * as i9 from "./recover-password.component";
import * as i10 from "./change-password.component";
import * as i11 from "./credentials.component";
import * as i12 from "./totp-auth.component";
import * as i13 from "./tenant-id-setup.component";
export class LoginComponent {
    /**
     * Just DI.
     */
    constructor(loginService, options, alert, credentialsFromQueryParamsService) {
        this.loginService = loginService;
        this.options = options;
        this.alert = alert;
        this.credentialsFromQueryParamsService = credentialsFromQueryParamsService;
        this.currentView = LoginViews.None;
        this.LOGIN_VIEWS = LoginViews;
        this.disabled = false;
        this.credentials = {};
        this.loginViewParams = {};
        this.displayAlerts = false;
        this.TOKEN_PARAM = 'token';
    }
    ngOnInit() {
        const token = this.getResetPasswordToken();
        if (this.loginService.isFirstLogin) {
            if (!token) {
                this.loginAutomatically();
            }
            else {
                this.credentials.token = token;
                this.reset();
            }
        }
        this.loginService.isFirstLogin = false;
    }
    ngOnDestroy() {
        // make sure that we do not have any queryParameters related to credentials after logging in or even if we were already logged in.
        this.credentialsFromQueryParamsService.removeCredentialsFromQueryParams();
    }
    handleLoginTemplate(event) {
        this.currentView = event.view;
        this.credentials = event.credentials || {};
        this.loginViewParams = event.loginViewParams || {};
    }
    onkeyup(event) {
        if (event.key !== 'Enter') {
            this.loginService.cleanMessages();
        }
    }
    reset() {
        this.loginService.reset();
        this.setView();
        this.loginService.cleanMessages();
    }
    async loginAutomatically() {
        this.loginService.automaticLoginInProgress$.next(true);
        try {
            await this.loginService.login();
        }
        catch (e) {
            const preferredLoginOptionType = this.loginService.loginMode.type;
            if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2) {
                this.loginService.redirectToOauth();
            }
            else {
                this.reset();
                if (preferredLoginOptionType === TenantLoginOptionType.OAUTH2_INTERNAL &&
                    window.location.protocol !== 'https:') {
                    this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                }
                else if (e.res && e.res.status === 403) {
                    this.alert.addServerFailure(e);
                }
            }
        }
        this.loginService.automaticLoginInProgress$.next(false);
    }
    setView() {
        if (this.credentials && this.credentials.token) {
            this.handleLoginTemplate({ view: LoginViews.ChangePassword, credentials: this.credentials });
        }
        else if (this.loginService.showTenantSetup()) {
            this.handleLoginTemplate({ view: LoginViews.TenantIdSetup });
        }
        else {
            this.handleLoginTemplate({ view: LoginViews.Credentials });
        }
    }
    getResetPasswordToken() {
        const token = this.options.get(this.TOKEN_PARAM);
        if (token) {
            this.options.set(this.TOKEN_PARAM, undefined); // only use once
        }
        return token;
    }
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoginComponent, deps: [{ token: i1.LoginService }, { token: i2.OptionsService }, { token: i3.AlertService }, { token: i4.CredentialsFromQueryParamsService }], target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: LoginComponent, selector: "c8y-login", inputs: { name: "name" }, host: { listeners: { "keyup": "onkeyup($event)" } }, ngImport: i0, template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <main class=\"card-block p-b-0\">\n    <span class=\"mainlogo\"></span>\n\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [loginViewParams]=\"loginViewParams\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    ></c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    ></c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n    <c8y-tenant-id-setup\n      *ngSwitchCase=\"LOGIN_VIEWS.TenantIdSetup\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-tenant-id-setup>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </main>\n</div>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i6.SmsChallengeComponent, selector: "c8y-sms-challenge", inputs: ["credentials"], outputs: ["onCancel"] }, { kind: "component", type: i7.ProvidePhoneNumberComponent, selector: "c8y-provide-phone-number", inputs: ["credentials"], outputs: ["onCancel", "onChangeView"] }, { kind: "component", type: i8.AlertOutletComponent, selector: "c8y-alert-outlet" }, { kind: "component", type: i9.RecoverPasswordComponent, selector: "c8y-recover-password", outputs: ["onChangeView"] }, { kind: "component", type: i10.ChangePasswordComponent, selector: "c8y-change-password", inputs: ["credentials"], outputs: ["onChangeView"] }, { kind: "component", type: i11.CredentialsComponent, selector: "c8y-credentials", inputs: ["loginViewParams"], outputs: ["onChangeView"] }, { kind: "component", type: i12.TotpAuthComponent, selector: "c8y-totp-auth", inputs: ["credentials", "view"], outputs: ["onCancel"] }, { kind: "component", type: i13.TenantIdSetupComponent, selector: "c8y-tenant-id-setup", outputs: ["onChangeView"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-login', template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <main class=\"card-block p-b-0\">\n    <span class=\"mainlogo\"></span>\n\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [loginViewParams]=\"loginViewParams\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    ></c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    ></c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n    <c8y-tenant-id-setup\n      *ngSwitchCase=\"LOGIN_VIEWS.TenantIdSetup\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-tenant-id-setup>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </main>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LoginService }, { type: i2.OptionsService }, { type: i3.AlertService }, { type: i4.CredentialsFromQueryParamsService }]; }, propDecorators: { name: [{
                type: Input
            }], onkeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, Output, EventEmitter } from '@angular/core';
import { LoginViews } from './login.model';
import { FetchClient } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { LoginService } from './login.service';
import { AlertService } from '../alert/alert.service';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "../common/ui-state.service";
import * as i3 from "./login.service";
import * as i4 from "../alert/alert.service";
import * as i5 from "@ngx-translate/core";
import * as i6 from "@angular/forms";
import * as i7 from "../i18n/c8y-translate.directive";
import * as i8 from "../forms/form-group.component";
import * as i9 from "../forms/required-input-placeholder.directive";
import * as i10 from "../i18n/c8y-translate.pipe";
/**
 * `TenantIdSetupComponent` is intended to be shown when tenant's id cannot be determined based on the current URL.
 * It asks the user to provide target tenant's id and then it fetches login options for this tenant.
 * In case of OAI-Secure login mode, login options will contain `domain` property set by backend.
 * The component will redirect user to this domain, preserving URL path and params.
 */
export class TenantIdSetupComponent {
    constructor(client, ui, loginService, alert, translateService) {
        this.client = client;
        this.ui = ui;
        this.loginService = loginService;
        this.alert = alert;
        this.translateService = translateService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {
            tenant: ''
        };
    }
    /**
     * Sets up login mode for particular tenant. In case of OAI-Secure will redirect user to tenant domain.
     */
    async setupLoginMode() {
        this.client.tenant = this.model.tenant;
        try {
            await this.ui.refreshLoginOptions();
            this.loginService.initLoginOptions();
            this.redirectToCorrectDomain();
        }
        catch (e) {
            if (e.res && e.res.status === 401) {
                this.alert.danger(this.translateService.instant(gettext('Could not find tenant with ID "{{ tenantId }}".'), { tenantId: this.model.tenant }));
            }
            else {
                this.alert.addServerFailure(e);
            }
        }
    }
    /**
     * Redirects to tenant domain when login mode contains domain.
     */
    redirectToCorrectDomain() {
        const loginRedirectDomain = this.loginService.loginMode.loginRedirectDomain;
        if (loginRedirectDomain) {
            const alreadyOnCorrectDomain = window.location.href.includes(loginRedirectDomain);
            if (!alreadyOnCorrectDomain) {
                this.loginService.redirectToDomain(loginRedirectDomain);
            }
            else {
                this.onChangeView.emit({
                    view: LoginViews.Credentials,
                    loginViewParams: { showTenant: true, disableTenant: true }
                });
            }
        }
        else {
            this.onChangeView.emit({ view: LoginViews.Credentials });
        }
    }
}
TenantIdSetupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantIdSetupComponent, deps: [{ token: i1.FetchClient }, { token: i2.AppStateService }, { token: i3.LoginService }, { token: i4.AlertService }, { token: i5.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
TenantIdSetupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: TenantIdSetupComponent, selector: "c8y-tenant-id-setup", outputs: { onChangeView: "onChangeView" }, ngImport: i0, template: "<form #tenantIdSetupForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Tenant setup</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n  >\n    {{ 'Apply' | translate }}\n  </button>\n</form>\n", dependencies: [{ kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i8.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i9.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "pipe", type: i10.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantIdSetupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-tenant-id-setup', template: "<form #tenantIdSetupForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"setupLoginMode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Tenant setup</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Apply' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"!tenantIdSetupForm.form.valid\"\n  >\n    {{ 'Apply' | translate }}\n  </button>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i2.AppStateService }, { type: i3.LoginService }, { type: i4.AlertService }, { type: i5.TranslateService }]; }, propDecorators: { onChangeView: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbG9naW4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL2NvcmUvbG9naW4vdGVuYW50LWlkLXNldHVwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7Ozs7Ozs7QUFRMUM7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDLFlBQ1UsTUFBbUIsRUFDbkIsRUFBbUIsRUFDbkIsWUFBMEIsRUFDMUIsS0FBbUIsRUFDbkIsZ0JBQWtDO1FBSmxDLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWGxDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QyxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUN6QixVQUFLLEdBQUc7WUFDTixNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUM7SUFRQyxDQUFDO0lBRUo7O09BRUc7SUFDSCxLQUFLLENBQUMsY0FBYztRQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3JDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1NBQ2hDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FDZixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMzQixPQUFPLENBQUMsaURBQWlELENBQUMsRUFDMUQsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FDaEMsQ0FDRixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNGO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsdUJBQXVCO1FBQ3JCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7UUFDNUUsSUFBSSxtQkFBbUIsRUFBRTtZQUN2QixNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2xGLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ3pEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO29CQUNyQixJQUFJLEVBQUUsVUFBVSxDQUFDLFdBQVc7b0JBQzVCLGVBQWUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRTtpQkFDM0QsQ0FBQyxDQUFDO2FBQ0o7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDOzttSEF4RFUsc0JBQXNCO3VHQUF0QixzQkFBc0Isc0dDckJuQyxnNEJBNEJBOzJGRFBhLHNCQUFzQjtrQkFabEMsU0FBUzsrQkFDRSxxQkFBcUI7cU5BWXJCLFlBQVk7c0JBQXJCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi9sb2dpbi5tb2RlbCc7XG5pbXBvcnQgeyBGZXRjaENsaWVudCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdGVuYW50LWlkLXNldHVwJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RlbmFudC1pZC1zZXR1cC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5cbi8qKlxuICogYFRlbmFudElkU2V0dXBDb21wb25lbnRgIGlzIGludGVuZGVkIHRvIGJlIHNob3duIHdoZW4gdGVuYW50J3MgaWQgY2Fubm90IGJlIGRldGVybWluZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgVVJMLlxuICogSXQgYXNrcyB0aGUgdXNlciB0byBwcm92aWRlIHRhcmdldCB0ZW5hbnQncyBpZCBhbmQgdGhlbiBpdCBmZXRjaGVzIGxvZ2luIG9wdGlvbnMgZm9yIHRoaXMgdGVuYW50LlxuICogSW4gY2FzZSBvZiBPQUktU2VjdXJlIGxvZ2luIG1vZGUsIGxvZ2luIG9wdGlvbnMgd2lsbCBjb250YWluIGBkb21haW5gIHByb3BlcnR5IHNldCBieSBiYWNrZW5kLlxuICogVGhlIGNvbXBvbmVudCB3aWxsIHJlZGlyZWN0IHVzZXIgdG8gdGhpcyBkb21haW4sIHByZXNlcnZpbmcgVVJMIHBhdGggYW5kIHBhcmFtcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbmFudElkU2V0dXBDb21wb25lbnQge1xuICBAT3V0cHV0KCkgb25DaGFuZ2VWaWV3ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBMT0dJTl9WSUVXUyA9IExvZ2luVmlld3M7XG4gIG1vZGVsID0ge1xuICAgIHRlbmFudDogJydcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSB1aTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgbG9naW4gbW9kZSBmb3IgcGFydGljdWxhciB0ZW5hbnQuIEluIGNhc2Ugb2YgT0FJLVNlY3VyZSB3aWxsIHJlZGlyZWN0IHVzZXIgdG8gdGVuYW50IGRvbWFpbi5cbiAgICovXG4gIGFzeW5jIHNldHVwTG9naW5Nb2RlKCkge1xuICAgIHRoaXMuY2xpZW50LnRlbmFudCA9IHRoaXMubW9kZWwudGVuYW50O1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnVpLnJlZnJlc2hMb2dpbk9wdGlvbnMoKTtcbiAgICAgIHRoaXMubG9naW5TZXJ2aWNlLmluaXRMb2dpbk9wdGlvbnMoKTtcbiAgICAgIHRoaXMucmVkaXJlY3RUb0NvcnJlY3REb21haW4oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5yZXMgJiYgZS5yZXMuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgdGhpcy5hbGVydC5kYW5nZXIoXG4gICAgICAgICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgICAgICBnZXR0ZXh0KCdDb3VsZCBub3QgZmluZCB0ZW5hbnQgd2l0aCBJRCBcInt7IHRlbmFudElkIH19XCIuJyksXG4gICAgICAgICAgICB7IHRlbmFudElkOiB0aGlzLm1vZGVsLnRlbmFudCB9XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRpcmVjdHMgdG8gdGVuYW50IGRvbWFpbiB3aGVuIGxvZ2luIG1vZGUgY29udGFpbnMgZG9tYWluLlxuICAgKi9cbiAgcmVkaXJlY3RUb0NvcnJlY3REb21haW4oKSB7XG4gICAgY29uc3QgbG9naW5SZWRpcmVjdERvbWFpbiA9IHRoaXMubG9naW5TZXJ2aWNlLmxvZ2luTW9kZS5sb2dpblJlZGlyZWN0RG9tYWluO1xuICAgIGlmIChsb2dpblJlZGlyZWN0RG9tYWluKSB7XG4gICAgICBjb25zdCBhbHJlYWR5T25Db3JyZWN0RG9tYWluID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMobG9naW5SZWRpcmVjdERvbWFpbik7XG4gICAgICBpZiAoIWFscmVhZHlPbkNvcnJlY3REb21haW4pIHtcbiAgICAgICAgdGhpcy5sb2dpblNlcnZpY2UucmVkaXJlY3RUb0RvbWFpbihsb2dpblJlZGlyZWN0RG9tYWluKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VWaWV3LmVtaXQoe1xuICAgICAgICAgIHZpZXc6IExvZ2luVmlld3MuQ3JlZGVudGlhbHMsXG4gICAgICAgICAgbG9naW5WaWV3UGFyYW1zOiB7IHNob3dUZW5hbnQ6IHRydWUsIGRpc2FibGVUZW5hbnQ6IHRydWUgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkNoYW5nZVZpZXcuZW1pdCh7IHZpZXc6IExvZ2luVmlld3MuQ3JlZGVudGlhbHMgfSk7XG4gICAgfVxuICB9XG59XG4iLCI8Zm9ybSAjdGVuYW50SWRTZXR1cEZvcm09XCJuZ0Zvcm1cIiBjbGFzcz1cImxvZ2luRm9ybVwiIChuZ1N1Ym1pdCk9XCJzZXR1cExvZ2luTW9kZSgpXCIgbm92YWxpZGF0ZT5cbiAgPGRpdiBjbGFzcz1cImxlZ2VuZCBmb3JtLWJsb2NrIGNlbnRlclwiIHRyYW5zbGF0ZT5UZW5hbnQgc2V0dXA8L2Rpdj5cbiAgPGM4eS1mb3JtLWdyb3VwIGNsYXNzPVwidGVuYW50RmllbGRcIiBpZD1cInRlbmFudEZpZWxkXCI+XG4gICAgPGxhYmVsIGZvcj1cInRlbmFudFwiIHRyYW5zbGF0ZT5UZW5hbnQgSUQ8L2xhYmVsPlxuICAgIDxpbnB1dFxuICAgICAgWyhuZ01vZGVsKV09XCJtb2RlbC50ZW5hbnRcIlxuICAgICAgI3RlbmFudD1cIm5nTW9kZWxcIlxuICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgbmFtZT1cInRlbmFudFwiXG4gICAgICBpZD1cInRlbmFudFwiXG4gICAgICBhdXRvY2FwaXRhbGl6ZT1cIm9mZlwiXG4gICAgICBhdXRvY29ycmVjdD1cIm9mZlwiXG4gICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICBwbGFjZWhvbGRlcj1cInt7ICdlLmcuJyB8IHRyYW5zbGF0ZSB9fSB0MTIzNDVcIlxuICAgICAgcGxhY2Vob2xkZXItbm8tcmVxdWlyZWQtaGludFxuICAgICAgcmVxdWlyZWRcbiAgICAvPlxuICA8L2M4eS1mb3JtLWdyb3VwPlxuXG4gIDxidXR0b25cbiAgICB0aXRsZT1cInt7ICdBcHBseScgfCB0cmFuc2xhdGUgfX1cIlxuICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBidG4tYmxvY2sgZm9ybS1ncm91cFwiXG4gICAgW2Rpc2FibGVkXT1cIiF0ZW5hbnRJZFNldHVwRm9ybS5mb3JtLnZhbGlkXCJcbiAgPlxuICAgIHt7ICdBcHBseScgfCB0cmFuc2xhdGUgfX1cbiAgPC9idXR0b24+XG48L2Zvcm0+XG4iXX0=
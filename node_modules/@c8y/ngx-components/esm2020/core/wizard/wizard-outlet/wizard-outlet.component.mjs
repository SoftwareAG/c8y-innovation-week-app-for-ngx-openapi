import { Component, EventEmitter, Injector, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WizardService } from '../wizard.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../wizard.service";
import * as i3 from "@angular/common";
import * as i4 from "../../common/icon.directive";
import * as i5 from "../../i18n/c8y-translate.directive";
import * as i6 from "../../i18n/c8y-translate.pipe";
export class WizardOutletComponent {
    constructor(router, c8yWizardService, viewContainerRef, injector) {
        this.router = router;
        this.c8yWizardService = c8yWizardService;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        /**
         * The initial state to be assigned to the created component.
         */
        this.initialState = {};
        /**
         * The event that is emitted when the wizard entry is clicked.
         */
        this.onSelect = new EventEmitter();
        /**
         * The event that is emitted when the URL path is provided.
         */
        this.onPath = new EventEmitter();
        /**
         * List of wizard entries.
         */
        this.entries = [];
        /**
         * @ignore
         */
        this.showList = true;
        /**
         * @ignore
         */
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        this.c8yWizardService
            .getEntriesListById(this.id)
            .pipe(takeUntil(this.destroy$))
            .subscribe((entries) => {
            this.container.clear();
            this.entries = entries;
            this.onEntriesLoaded();
        });
    }
    /**
     * Handles the wizard entry, if the entry contains a path, the user will be redirected to it.
     * Otherwise, an attempt will be made to create a dynamic component provided in the entry.
     * @param entry Wizard menu entry.
     */
    handleEntry(entry = {}) {
        const { path, component, injector } = entry;
        if (path) {
            this.handlePath(path);
            return;
        }
        if (component) {
            this.handleComponent(component, injector);
            this.onSelect.emit(entry);
        }
    }
    /**
     * Resets the wizard to its initial state.
     */
    reset() {
        if (this.componentInstance) {
            this.componentInstance = undefined;
            this.container.clear();
            this.showList = true;
        }
    }
    ngOnDestroy() {
        if (this.componentInstance) {
            this.container.clear();
        }
        this.destroy$.next(true);
        this.destroy$.unsubscribe();
    }
    onEntriesLoaded() {
        const [firstEntry] = this.entries;
        const isSingleEntry = this.entries.length === 1;
        const shouldRedirectToPath = firstEntry && !!firstEntry.path;
        const shouldOmitListOfEntries = isSingleEntry && !shouldRedirectToPath;
        if (shouldOmitListOfEntries) {
            this.handleEntry(firstEntry);
        }
    }
    handlePath(path) {
        this.router.navigateByUrl(path);
        this.onPath.emit(path);
    }
    handleComponent(component, injector) {
        this.showList = false;
        const componentInstance = this.viewContainerRef.createComponent(component, {
            environmentInjector: (injector || this.injector)
        });
        Object.assign(componentInstance.instance, this.initialState);
        this.componentInstance = componentInstance;
    }
}
WizardOutletComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WizardOutletComponent, deps: [{ token: i1.Router }, { token: i2.WizardService }, { token: i0.ViewContainerRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
WizardOutletComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: WizardOutletComponent, selector: "c8y-wizard-outlet", inputs: { initialState: "initialState", id: "id" }, outputs: { onSelect: "onSelect", onPath: "onPath" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: "<ng-container>\n  <div class=\"modal-inner-scroll animated fadeIn\" *ngIf=\"showList\" id=\"modal-body\">\n    <p class=\"p-16 text-center text-medium separator-bottom\">\n      <span translate>Select method</span>\n    </p>\n    <div class=\"list-group list-group-links\" *ngIf=\"entries.length > 0; else emptyState\">\n      <button\n        *ngFor=\"let entry of entries\"\n        type=\"button\"\n        class=\"list-group-item d-flex a-i-center p-t-8 p-b-8\"\n        (click)=\"handleEntry(entry)\"\n      >\n        <div class=\"list-item-icon\">\n          <i [c8yIcon]=\"entry.c8yIcon || 'cogs'\"></i>\n        </div>\n        <div title=\"{{ entry.name | translate }}\" class=\"list-item-body text-truncate\">\n          {{ entry.name | translate }}\n        </div>\n      </button>\n    </div>\n\n    <ng-template #emptyState>\n      <div class=\"c8y-empty-state\">\n        <p>{{ 'No options available.' | translate }}</p>\n      </div>\n    </ng-template>\n  </div>\n</ng-container>\n<template #container [hidden]=\"showList\"></template>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i6.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WizardOutletComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-wizard-outlet', template: "<ng-container>\n  <div class=\"modal-inner-scroll animated fadeIn\" *ngIf=\"showList\" id=\"modal-body\">\n    <p class=\"p-16 text-center text-medium separator-bottom\">\n      <span translate>Select method</span>\n    </p>\n    <div class=\"list-group list-group-links\" *ngIf=\"entries.length > 0; else emptyState\">\n      <button\n        *ngFor=\"let entry of entries\"\n        type=\"button\"\n        class=\"list-group-item d-flex a-i-center p-t-8 p-b-8\"\n        (click)=\"handleEntry(entry)\"\n      >\n        <div class=\"list-item-icon\">\n          <i [c8yIcon]=\"entry.c8yIcon || 'cogs'\"></i>\n        </div>\n        <div title=\"{{ entry.name | translate }}\" class=\"list-item-body text-truncate\">\n          {{ entry.name | translate }}\n        </div>\n      </button>\n    </div>\n\n    <ng-template #emptyState>\n      <div class=\"c8y-empty-state\">\n        <p>{{ 'No options available.' | translate }}</p>\n      </div>\n    </ng-template>\n  </div>\n</ng-container>\n<template #container [hidden]=\"showList\"></template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.WizardService }, { type: i0.ViewContainerRef }, { type: i0.Injector }]; }, propDecorators: { container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef }]
            }], initialState: [{
                type: Input
            }], id: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], onPath: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common/extension-hooks';
/**
 * A hook to add wizard entries.
 * @deprecated Consider using the `hookWizard` function instead.
 */
export const HOOK_WIZARD = new InjectionToken('HOOK_WIZARD');
/**
 * A hook to add wizard entries.
 *
 * You can either provide a single `WizardEntry` as parameter:
 * ```typescript
 *  hookWizard(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookWizard([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<WizardEntry>`
 * ```typescript
 *  export class MyWizardFactory implements ExtensionFactory<WizardEntry> {...}
 *  ...
 *  hookWizard(MyWizardFactory)
 * ```
 * A typed alternative to `HOOK_WIZARD`.
 * @param wizard The `WizardEntry`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookWizard(wizard, options) {
    return hookGeneric(wizard, HOOK_WIZARD, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS93aXphcmQvd2l6YXJkLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsY0FBYyxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBR0wsV0FBVyxFQUVaLE1BQU0sMkJBQTJCLENBQUM7QUFFbkM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLElBQUksY0FBYyxDQUFvQixhQUFhLENBQUMsQ0FBQztBQUVoRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBb0MsRUFBRSxPQUE4QjtJQUM3RixPQUFPLFdBQVcsQ0FBYyxNQUFNLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGlvblRva2VuLCBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRXh0ZW5zaW9uRmFjdG9yeSxcbiAgR2VuZXJpY0hvb2tUeXBlLFxuICBob29rR2VuZXJpYyxcbiAgSG9va09wdGlvbnNcbn0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5cbi8qKlxuICogQSBob29rIHRvIGFkZCB3aXphcmQgZW50cmllcy5cbiAqIEBkZXByZWNhdGVkIENvbnNpZGVyIHVzaW5nIHRoZSBgaG9va1dpemFyZGAgZnVuY3Rpb24gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEhPT0tfV0laQVJEID0gbmV3IEluamVjdGlvblRva2VuPFdpemFyZEV4dGVuc2lvbltdPignSE9PS19XSVpBUkQnKTtcblxuLyoqXG4gKiBBIGhvb2sgdG8gYWRkIHdpemFyZCBlbnRyaWVzLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHByb3ZpZGUgYSBzaW5nbGUgYFdpemFyZEVudHJ5YCBhcyBwYXJhbWV0ZXI6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va1dpemFyZCguLi4pXG4gKiBgYGBcbiAqXG4gKiBPciBhbiBhcnJheSB0byBkaXJlY3RseSByZWdpc3RlciBtdWx0aXBsZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBob29rV2l6YXJkKFsuLi5dKVxuICogYGBgXG4gKlxuICogT3IgeW91IHByb3ZpZGUgYW4gU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8V2l6YXJkRW50cnk+YFxuICogYGBgdHlwZXNjcmlwdFxuICogIGV4cG9ydCBjbGFzcyBNeVdpemFyZEZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFdpemFyZEVudHJ5PiB7Li4ufVxuICogIC4uLlxuICogIGhvb2tXaXphcmQoTXlXaXphcmRGYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX1dJWkFSRGAuXG4gKiBAcGFyYW0gd2l6YXJkIFRoZSBgV2l6YXJkRW50cnlgJ3Mgb3IgYEV4dGVuc2lvbkZhY3RvcnlgIHRvIGJlIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gYFByb3ZpZGVyYCB0byBiZSBwcm92aWRlZCBpbiB5b3VyIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvb2tXaXphcmQod2l6YXJkOiBHZW5lcmljSG9va1R5cGU8V2l6YXJkRW50cnk+LCBvcHRpb25zPzogUGFydGlhbDxIb29rT3B0aW9ucz4pIHtcbiAgcmV0dXJuIGhvb2tHZW5lcmljPFdpemFyZEVudHJ5Pih3aXphcmQsIEhPT0tfV0laQVJELCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaXphcmQ8VCA9IGFueT4ge1xuICAvKipcbiAgICogVGhlIGlkIHBhcmFtZXRlciBpZGVudGlmaWVzIHRoZSBwYXJ0aWN1bGFyIHdpemFyZCBhbmQgY2FuIGJlIHVzZWQgdG8gcmVmZXIgdG8gaXQgd2hlbiBob29raW5nIHdpemFyZCBlbnRyaWVzLlxuICAgKiBFeGFtcGxlOiBcIndpemFyZElkXCIuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuICAvKiogV2l6YXJkIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiAqL1xuICB3aXphcmRDb25maWc/OiBXaXphcmRDb25maWc7XG4gIC8qKiBBIHN0YXRlIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgYWN0dWFsIGNvbXBvbmVudCBjb250YWluZWQgYnkgdGhlIHdpemFyZC4gKi9cbiAgY29tcG9uZW50SW5pdGlhbFN0YXRlPzogUGFydGlhbDxUPjtcbiAgLyoqIFRoZSBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgd2l6YXJkIGVudHJ5IGlzIHNlbGVjdGVkLiAqL1xuICBvblNlbGVjdD86IEV2ZW50RW1pdHRlcjxXaXphcmRFbnRyeT47XG4gIC8qKiBUaGUgZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdGhlIHdpemFyZCBpcyBjbG9zZWQuICovXG4gIG9uQ2xvc2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgLyoqIFRoZSBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgd2l6YXJkIGlzIHJlc2V0LiAqL1xuICBvblJlc2V0PzogRXZlbnRFbWl0dGVyPGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l6YXJkQ29uZmlnIHtcbiAgLyoqIFRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgaGVhZGVyIG9mIHRoZSB3aXphcmQgICovXG4gIGhlYWRlclRleHQ/OiBzdHJpbmc7XG4gIC8qKiBJY29uIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGhlYWRlciBvZiB0aGUgd2l6YXJkICAqL1xuICBoZWFkZXJJY29uPzogc3RyaW5nO1xuICAvKiogVGV4dCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBoZWFkZXIgb2YgdGhlIHdpemFyZCBib2R5IHNlY3Rpb24gICovXG4gIGJvZHlIZWFkZXJUZXh0Pzogc3RyaW5nO1xuICAvKiogSWNvbiB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBoZWFkZXIgb2YgdGhlIHdpemFyZCBib2R5IHNlY3Rpb24gICovXG4gIGJvZHlIZWFkZXJJY29uPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgc2luZ2xlIGl0ZW0gaW4gdGhlIHdpemFyZC5cbiAqIEFuIGludGVyZmFjZSBkZXNjcmliaW5nIHRoZSBlbnRyeSBkaXNwbGF5ZWQgaW4gdGhlIGZpcnN0IHN0ZXAgb2YgdGhlIHdpemFyZCBhcyB3ZWxsIGFzIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBzZWNvbmQgc3RlcCBhbmQgdGhlaXIgd2F5IG9mIGludGVyYWN0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdpemFyZEVudHJ5IHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIGEgd2l6YXJkIHRvIHdoaWNoIHRoZSBlbnRyeSB3aWxsIGJlIGhvb2tlZC5cbiAgICogRXhhbXBsZTogXCJ3aXphcmRJZFwiLlxuICAgKi9cbiAgd2l6YXJkSWQ6IHN0cmluZztcbiAgLyoqIFRoZSBuYW1lIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHdpemFyZCBtZW51ICAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBUaGUgcGF0aCB3aGVyZSB1c2VyIHdpbGwgYmUgcmVkaXJlY3RlZCB3aGVuIHRoaXMgZW50cnkgaXMgc2VsZWN0ZWQgaW4gdGhlIHdpemFyZCdzIG1lbnUuIFRha2VzIHByZWNlZGVuY2Ugb3ZlciBgY29tcG9uZW50YCBwcm9wZXJ0eS4gKi9cbiAgcGF0aD86IHN0cmluZztcbiAgLyoqIFRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIHdoZW4gdGhpcyBlbnRyeSBpcyBzZWxlY3RlZCBpbiB0aGUgd2l6YXJkJ3MgbWVudS4gSWYgYHBhdGhgIGlzIHByb3ZpZGVkLCB0aGUgYGNvbXBvbmVudGAgd2lsbCBiZSBpZ25vcmVkLiAqL1xuICBjb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIC8qKiBUaGUgaW5qZWN0b3IgdG8gdXNlLiBJZiBub3Qgc2V0LCBkZWZhdWx0IGluamVjdG9yIHdpbGwgYmUgdXNlZC4gKi9cbiAgaW5qZWN0b3I/OiBJbmplY3RvcjtcbiAgLyoqIFRoZSBpY29uIHRoYXQgd2lsbCBiZSBzaG93biBpbiB0aGUgd2l6YXJkIG1lbnUgbmV4dCB0byB0aGUgaXRlbS4gKi9cbiAgYzh5SWNvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgV2l6YXJkRXh0ZW5zaW9uID0gV2l6YXJkRW50cnkgfCBXaXphcmRFbnRyeVtdIHwgRXh0ZW5zaW9uRmFjdG9yeTxXaXphcmRFbnRyeT47XG4iXX0=
import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common/extension-hooks';
/**
 * @deprecated Consider using the `hookDynamicProviderConfig` function instead.
 */
export const HOOK_DYNAMIC_PROVIDER_CONFIG = new InjectionToken('HOOK_DYNAMIC_PROVIDER_CONFIG');
/**
 * You can either provide a single `DynamicProviderConfig` as parameter:
 * ```typescript
 *  hookDynamicProviderConfig(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDynamicProviderConfig([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DynamicProviderConfig>`
 * ```typescript
 *  export class MyDynamicProviderConfigFactory implements ExtensionFactory<DynamicProviderConfig> {...}
 *  ...
 *  hookDynamicProviderConfig(MyDynamicProviderConfigFactory)
 * ```
 * A typed alternative to `HOOK_DYNAMIC_PROVIDER_CONFIG`.
 * @param config The `DynamicProviderConfig`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDynamicProviderConfig(config, options) {
    return hookGeneric(config, HOOK_DYNAMIC_PROVIDER_CONFIG, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24taG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBbUIsV0FBVyxFQUFlLE1BQU0sMkJBQTJCLENBQUM7QUFHdEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLGNBQWMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBRS9GOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FDdkMsTUFBOEMsRUFDOUMsT0FBOEI7SUFFOUIsT0FBTyxXQUFXLENBQXdCLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdlbmVyaWNIb29rVHlwZSwgaG9va0dlbmVyaWMsIEhvb2tPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBEeW5hbWljUHJvdmlkZXJDb25maWcgfSBmcm9tICcuL21vZGVsL2R5bmFtaWMtcHJvdmlkZXItY29uZmlnLm1vZGVsJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDb25zaWRlciB1c2luZyB0aGUgYGhvb2tEeW5hbWljUHJvdmlkZXJDb25maWdgIGZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuKCdIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHJyk7XG5cbi8qKlxuICogWW91IGNhbiBlaXRoZXIgcHJvdmlkZSBhIHNpbmdsZSBgRHluYW1pY1Byb3ZpZGVyQ29uZmlnYCBhcyBwYXJhbWV0ZXI6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va0R5bmFtaWNQcm92aWRlckNvbmZpZyguLi4pXG4gKiBgYGBcbiAqXG4gKiBPciBhbiBhcnJheSB0byBkaXJlY3RseSByZWdpc3RlciBtdWx0aXBsZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBob29rRHluYW1pY1Byb3ZpZGVyQ29uZmlnKFsuLi5dKVxuICogYGBgXG4gKlxuICogT3IgeW91IHByb3ZpZGUgYW4gU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8RHluYW1pY1Byb3ZpZGVyQ29uZmlnPmBcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBleHBvcnQgY2xhc3MgTXlEeW5hbWljUHJvdmlkZXJDb25maWdGYWN0b3J5IGltcGxlbWVudHMgRXh0ZW5zaW9uRmFjdG9yeTxEeW5hbWljUHJvdmlkZXJDb25maWc+IHsuLi59XG4gKiAgLi4uXG4gKiAgaG9va0R5bmFtaWNQcm92aWRlckNvbmZpZyhNeUR5bmFtaWNQcm92aWRlckNvbmZpZ0ZhY3RvcnkpXG4gKiBgYGBcbiAqIEEgdHlwZWQgYWx0ZXJuYXRpdmUgdG8gYEhPT0tfRFlOQU1JQ19QUk9WSURFUl9DT05GSUdgLlxuICogQHBhcmFtIGNvbmZpZyBUaGUgYER5bmFtaWNQcm92aWRlckNvbmZpZ2AncyBvciBgRXh0ZW5zaW9uRmFjdG9yeWAgdG8gYmUgcHJvdmlkZWQuXG4gKiBAcmV0dXJucyBBbiBgUHJvdmlkZXJgIHRvIGJlIHByb3ZpZGVkIGluIHlvdXIgbW9kdWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaG9va0R5bmFtaWNQcm92aWRlckNvbmZpZyhcbiAgY29uZmlnOiBHZW5lcmljSG9va1R5cGU8RHluYW1pY1Byb3ZpZGVyQ29uZmlnPixcbiAgb3B0aW9ucz86IFBhcnRpYWw8SG9va09wdGlvbnM+XG4pIHtcbiAgcmV0dXJuIGhvb2tHZW5lcmljPER5bmFtaWNQcm92aWRlckNvbmZpZz4oY29uZmlnLCBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHLCBvcHRpb25zKTtcbn1cbiJdfQ==
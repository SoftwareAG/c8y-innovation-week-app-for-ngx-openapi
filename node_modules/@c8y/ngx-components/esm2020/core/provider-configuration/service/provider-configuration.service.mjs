import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FetchClient, Service } from '@c8y/client';
import { get } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@angular/router";
export class ProviderConfigurationService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
    }
    async detail() {
        return super.detail(ProviderConfigurationService.NO_DETAIL_ID);
    }
    async update(entity) {
        return super.update(entity);
    }
    async delete() {
        return super.delete(ProviderConfigurationService.NO_DETAIL_ID);
    }
    /** There is a single provider configuration per tenant and detail URL is not needed */
    getDetailUrl(_) {
        return this.listUrl;
    }
}
ProviderConfigurationService.NO_DETAIL_ID = null;
ProviderConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationService, deps: [{ token: i1.FetchClient }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
ProviderConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i2.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3NlcnZpY2UvcHJvdmlkZXItY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxXQUFXLEVBQXdCLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN6RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7O0FBSWhDLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxPQUEyQjtJQU0zRSxZQUFZLE1BQW1CLEVBQUUsY0FBOEI7UUFDN0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLHNEQUFzRCxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLHNEQUFzRCxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNO1FBQ1YsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLDRCQUE0QixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQW1DO1FBQzlDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU07UUFDVixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELHVGQUF1RjtJQUM3RSxZQUFZLENBQUMsQ0FBZ0M7UUFDckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7O0FBMUJ1Qix5Q0FBWSxHQUFXLElBQUksQ0FBQzt5SEFEekMsNEJBQTRCOzZIQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFEeEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJSWRlbnRpZmllZCwgSVJlc3VsdCwgU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBQcm92aWRlclByb3BlcnRpZXMgfSBmcm9tICcuLi9tb2RlbC9wcm92aWRlci1wcm9wZXJ0aWVzLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyQ29uZmlndXJhdGlvblNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlPFByb3ZpZGVyUHJvcGVydGllcz4ge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBOT19ERVRBSUxfSUQ6IHN0cmluZyA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIGJhc2VVcmw6IHN0cmluZztcbiAgcHJvdGVjdGVkIGxpc3RVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihjbGllbnQ6IEZldGNoQ2xpZW50LCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBzdXBlcihjbGllbnQpO1xuICAgIHRoaXMuYmFzZVVybCA9IGdldChhY3RpdmF0ZWRSb3V0ZSwgJ3NuYXBzaG90LmRhdGEuZW5kcG9pbnQuY29uZmlndXJhdGlvbkVuZHBvaW50LmJhc2VVcmwnKTtcbiAgICB0aGlzLmxpc3RVcmwgPSBnZXQoYWN0aXZhdGVkUm91dGUsICdzbmFwc2hvdC5kYXRhLmVuZHBvaW50LmNvbmZpZ3VyYXRpb25FbmRwb2ludC5saXN0VXJsJyk7XG4gIH1cblxuICBhc3luYyBkZXRhaWwoKTogUHJvbWlzZTxJUmVzdWx0PFByb3ZpZGVyUHJvcGVydGllcz4+IHtcbiAgICByZXR1cm4gc3VwZXIuZGV0YWlsKFByb3ZpZGVyQ29uZmlndXJhdGlvblNlcnZpY2UuTk9fREVUQUlMX0lEKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShlbnRpdHk6IFBhcnRpYWw8UHJvdmlkZXJQcm9wZXJ0aWVzPik6IFByb21pc2U8SVJlc3VsdDxQcm92aWRlclByb3BlcnRpZXM+PiB7XG4gICAgcmV0dXJuIHN1cGVyLnVwZGF0ZShlbnRpdHkpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKCk6IFByb21pc2U8SVJlc3VsdDxudWxsPj4ge1xuICAgIHJldHVybiBzdXBlci5kZWxldGUoUHJvdmlkZXJDb25maWd1cmF0aW9uU2VydmljZS5OT19ERVRBSUxfSUQpO1xuICB9XG5cbiAgLyoqIFRoZXJlIGlzIGEgc2luZ2xlIHByb3ZpZGVyIGNvbmZpZ3VyYXRpb24gcGVyIHRlbmFudCBhbmQgZGV0YWlsIFVSTCBpcyBub3QgbmVlZGVkICovXG4gIHByb3RlY3RlZCBnZXREZXRhaWxVcmwoXzogc3RyaW5nIHwgbnVtYmVyIHwgSUlkZW50aWZpZWQpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxpc3RVcmw7XG4gIH1cbn1cbiJdfQ==
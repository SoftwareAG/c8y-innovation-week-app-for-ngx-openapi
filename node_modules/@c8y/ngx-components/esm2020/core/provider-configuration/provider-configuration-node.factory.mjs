import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { forkJoin, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { toObservable } from '../common';
import { NavigatorNode } from '../navigator';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import * as i0 from "@angular/core";
export class ProviderConfigurationNodeFactory {
    constructor(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            const canActivate = this.config
                .map(this.getGuards.bind(this))
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map((canActivateResult) => this.config
                .map((c, index) => canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined)
                .filter(el => !!el)), tap(nodes => (this.nodes = nodes)));
        }
        return this.nodes;
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getGuards(c) {
        let result = [];
        if (c.tab && c.tab.canActivate && c.tab.canActivate.length) {
            result = [...result, ...c.tab.canActivate.map(ca => this.injector.get(ca))];
        }
        if (c.navigation.canActivate && c.navigation.canActivate.length) {
            result = [...result, ...c.navigation.canActivate.map(ca => this.injector.get(ca))];
        }
        return result;
    }
}
ProviderConfigurationNodeFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationNodeFactory, deps: [{ token: HOOK_DYNAMIC_PROVIDER_CONFIG, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ProviderConfigurationNodeFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationNodeFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationNodeFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
                }] }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUF3QixNQUFNLGNBQWMsQ0FBQztBQUVuRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUFHN0UsTUFBTSxPQUFPLGdDQUFnQztJQUkzQyxZQUdFLE1BQWlDLEVBQ3pCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFFMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELEdBQUc7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3ZDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxXQUFXLEdBQStCLElBQUksQ0FBQyxNQUFNO2lCQUN4RCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFekMsT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHLENBQUMsQ0FBQyxpQkFBNEIsRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxNQUFNO2lCQUNSLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNoQixpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3ZFO2lCQUNBLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDdEIsRUFDRCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FDbkMsQ0FBQztTQUNIO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxFQUFpQjtRQUN4QyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNyQixNQUFNLGlCQUFpQixHQUErQixFQUFFO2lCQUNyRCxHQUFHLENBQUMsQ0FBQyxXQUF3QixFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDaEYsR0FBRyxDQUFDLFlBQVksQ0FBK0IsQ0FBQztZQUVuRCxPQUFPLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FDckMsR0FBRyxDQUFDLENBQUMsUUFBbUIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUMxRSxDQUFDO1NBQ0g7UUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRU8sU0FBUyxDQUFDLENBQUM7UUFDakIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWhCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDMUQsTUFBTSxHQUFHLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUMvRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OzZIQS9EVSxnQ0FBZ0Msa0JBTWpDLDRCQUE0QjtpSUFOM0IsZ0NBQWdDLGNBRG5CLE1BQU07MkZBQ25CLGdDQUFnQztrQkFENUMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzBCQU03QixRQUFROzswQkFDUixNQUFNOzJCQUFDLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB0b09ic2VydmFibGUgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnkgfSBmcm9tICcuLi9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgRHluYW1pY1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi9tb2RlbC9keW5hbWljLXByb3ZpZGVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLWhvb2snO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5IGltcGxlbWVudHMgTmF2aWdhdG9yTm9kZUZhY3Rvcnkge1xuICBwcml2YXRlIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW107XG4gIHByaXZhdGUgbm9kZXM6IE5hdmlnYXRvck5vZGVbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRylcbiAgICBjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdW10sXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSBmbGF0dGVuKGNvbmZpZyk7XG4gIH1cblxuICBnZXQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZyB8fCAhdGhpcy5jb25maWcubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB7XG4gICAgICBjb25zdCBjYW5BY3RpdmF0ZTogQXJyYXk8T2JzZXJ2YWJsZTxib29sZWFuPj4gPSB0aGlzLmNvbmZpZ1xuICAgICAgICAubWFwKHRoaXMuZ2V0R3VhcmRzLmJpbmQodGhpcykpXG4gICAgICAgIC5tYXAodGhpcy5jaGVja0NhbkFjdGl2YXRlLmJpbmQodGhpcykpO1xuXG4gICAgICByZXR1cm4gZm9ya0pvaW4oY2FuQWN0aXZhdGUpLnBpcGUoXG4gICAgICAgIG1hcCgoY2FuQWN0aXZhdGVSZXN1bHQ6IGJvb2xlYW5bXSkgPT5cbiAgICAgICAgICB0aGlzLmNvbmZpZ1xuICAgICAgICAgICAgLm1hcCgoYywgaW5kZXgpID0+XG4gICAgICAgICAgICAgIGNhbkFjdGl2YXRlUmVzdWx0W2luZGV4XSA/IG5ldyBOYXZpZ2F0b3JOb2RlKGMubmF2aWdhdGlvbikgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5maWx0ZXIoZWwgPT4gISFlbClcbiAgICAgICAgKSxcbiAgICAgICAgdGFwKG5vZGVzID0+ICh0aGlzLm5vZGVzID0gbm9kZXMpKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ub2RlcztcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tDYW5BY3RpdmF0ZShjYTogQ2FuQWN0aXZhdGVbXSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGlmICghIWNhICYmIGNhLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2FuQWN0aXZhdGVSZXN1bHQ6IEFycmF5PE9ic2VydmFibGU8Ym9vbGVhbj4+ID0gY2FcbiAgICAgICAgLm1hcCgoY2FuQWN0aXZhdGU6IENhbkFjdGl2YXRlKSA9PiBjYW5BY3RpdmF0ZS5jYW5BY3RpdmF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCkpXG4gICAgICAgIC5tYXAodG9PYnNlcnZhYmxlKSBhcyBBcnJheTxPYnNlcnZhYmxlPGJvb2xlYW4+PjtcblxuICAgICAgcmV0dXJuIGZvcmtKb2luKGNhbkFjdGl2YXRlUmVzdWx0KS5waXBlKFxuICAgICAgICBtYXAoKGNhUmVzdWx0OiBib29sZWFuW10pID0+IGNhUmVzdWx0LnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgJiYgY3VycikpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldEd1YXJkcyhjKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgaWYgKGMudGFiICYmIGMudGFiLmNhbkFjdGl2YXRlICYmIGMudGFiLmNhbkFjdGl2YXRlLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gWy4uLnJlc3VsdCwgLi4uYy50YWIuY2FuQWN0aXZhdGUubWFwKGNhID0+IHRoaXMuaW5qZWN0b3IuZ2V0KGNhKSldO1xuICAgIH1cblxuICAgIGlmIChjLm5hdmlnYXRpb24uY2FuQWN0aXZhdGUgJiYgYy5uYXZpZ2F0aW9uLmNhbkFjdGl2YXRlLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gWy4uLnJlc3VsdCwgLi4uYy5uYXZpZ2F0aW9uLmNhbkFjdGl2YXRlLm1hcChjYSA9PiB0aGlzLmluamVjdG9yLmdldChjYSkpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=
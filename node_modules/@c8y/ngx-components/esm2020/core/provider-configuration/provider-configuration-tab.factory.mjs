import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { flatten } from 'lodash-es';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from '../common';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class ProviderConfigurationTabFactory {
    constructor(config, router, injector) {
        this.router = router;
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        const configForRoute = this.config.find(c => c.tab
            ? this.router.url === '/' + this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
            : false);
        const filteredRoutes = configForRoute
            ? this.config.filter(c => c.navigation.path.replace(/^\/|\/$/g, '') ===
                configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab)
            : [];
        const canActivate = filteredRoutes
            .map(c => c.tab.canActivate && c.tab.canActivate.length
            ? c.tab.canActivate.map(ca => this.injector.get(ca))
            : undefined)
            .map(this.checkCanActivate.bind(this));
        return canActivate.length > 0
            ? forkJoin(canActivate).pipe(map((canActivateResult) => filteredRoutes
                .map((c, index) => {
                const tab = {
                    ...c.tab,
                    path: this.getNodeTabPath(c.navigation.path, c.tab.path)
                };
                return canActivateResult[index] ? tab : undefined;
            })
                .filter(el => !!el)))
            : [];
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(toObservable);
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    getNodeTabPath(nodePath, tabPath) {
        return `${nodePath.replace(/^\/|\/$/g, '')}/${tabPath.replace(/^\/|\/$/g, '')}`;
    }
}
ProviderConfigurationTabFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationTabFactory, deps: [{ token: HOOK_DYNAMIC_PROVIDER_CONFIG, optional: true }, { token: i1.Router }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ProviderConfigurationTabFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationTabFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ProviderConfigurationTabFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HOOK_DYNAMIC_PROVIDER_CONFIG]
                }] }, { type: i1.Router }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,
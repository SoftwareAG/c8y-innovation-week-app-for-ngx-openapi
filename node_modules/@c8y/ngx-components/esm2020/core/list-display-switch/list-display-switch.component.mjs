import { Location } from '@angular/common';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { pipe } from 'rxjs';
import { tap } from 'rxjs/operators';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../i18n/c8y-translate.pipe";
export class ListDisplaySwitchComponent {
    set listLength(val) {
        this._listLength = val;
        this.loadSelectedOption();
    }
    constructor(location) {
        this.location = location;
        this.filterPipe = pipe(tap());
        this.onListClassChange = new EventEmitter();
        this.DISPLAY_OPTIONS = [
            {
                name: 'AUTO',
                value: 'auto',
                label: gettext('Auto'),
                default: true,
                getListClass: () => {
                    const option = this._listLength > this.AUTO_GRID_ITEMS_LIMIT
                        ? this.DISPLAY_OPTIONS.find(opt => opt.name === 'LIST')
                        : this.DISPLAY_OPTIONS.find(opt => opt.name === 'GRID');
                    return option.getListClass();
                }
            },
            {
                name: 'GRID',
                value: 'grid',
                label: gettext('Grid'),
                getListClass: () => 'interact-grid'
            },
            {
                name: 'LIST',
                value: 'list',
                label: gettext('List'),
                getListClass: () => 'interact-list'
            }
        ];
        this.AUTO_GRID_ITEMS_LIMIT = 12;
    }
    ngOnInit() {
        this.loadSelectedOption();
    }
    onOptionSelect(option) {
        const localStorageKey = this.getLocalStorageKey();
        if (option.default) {
            localStorage.removeItem(localStorageKey);
        }
        else {
            localStorage.setItem(localStorageKey, option.value);
        }
        this.loadSelectedOption();
    }
    loadSelectedOption() {
        this.selectedOption = this.getLocalStorageOption() || this.getDefaultOption();
        this.onListClassChange.emit(this.selectedOption.getListClass());
    }
    getLocalStorageOption() {
        return this.DISPLAY_OPTIONS.find(option => option.value === localStorage.getItem(this.getLocalStorageKey()));
    }
    getDefaultOption() {
        return this.DISPLAY_OPTIONS.find(option => option.default);
    }
    getLocalStorageKey() {
        return `list-display-option[${this.getListKey()}]`;
    }
    getListKey() {
        return this.listKey || this.location.path();
    }
}
ListDisplaySwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListDisplaySwitchComponent, deps: [{ token: i1.Location }], target: i0.ɵɵFactoryTarget.Component });
ListDisplaySwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ListDisplaySwitchComponent, selector: "c8y-list-display-switch", inputs: { listKey: "listKey", listLength: "listLength", filterPipe: "filterPipe" }, outputs: { onListClassChange: "onListClassChange" }, ngImport: i0, template: "<div class=\"form-group\">\n  <label class=\"m-r-8\" id=\"listLabel\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      aria-labelledby=\"listLabel\"\n      name=\"listLabel\"\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n      [attr.aria-label]=\"'Display mode' | translate\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">\n        {{ option.label | translate }}\n      </option>\n    </select>\n    <span></span>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListDisplaySwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-list-display-switch', template: "<div class=\"form-group\">\n  <label class=\"m-r-8\" id=\"listLabel\">\n    {{ 'Display as' | translate }}\n  </label>\n  <div class=\"c8y-select-wrapper\">\n    <select\n      aria-labelledby=\"listLabel\"\n      name=\"listLabel\"\n      class=\"form-control\"\n      [ngModel]=\"selectedOption\"\n      (ngModelChange)=\"onOptionSelect($event)\"\n      [attr.aria-label]=\"'Display mode' | translate\"\n    >\n      <option *ngFor=\"let option of DISPLAY_OPTIONS\" [ngValue]=\"option\">\n        {{ option.label | translate }}\n      </option>\n    </select>\n    <span></span>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.Location }]; }, propDecorators: { listKey: [{
                type: Input
            }], listLength: [{
                type: Input,
                args: ['listLength']
            }], filterPipe: [{
                type: Input
            }], onListClassChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZGlzcGxheS1zd2l0Y2gvbGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZGlzcGxheS1zd2l0Y2gvbGlzdC1kaXNwbGF5LXN3aXRjaC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBTzFDLE1BQU0sT0FBTywwQkFBMEI7SUFFckMsSUFDSSxVQUFVLENBQUMsR0FBVztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBa0NELFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFqQzdCLGVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QixzQkFBaUIsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUd0RSxvQkFBZSxHQUFvQjtZQUMxQztnQkFDRSxJQUFJLEVBQUUsTUFBTTtnQkFDWixLQUFLLEVBQUUsTUFBTTtnQkFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsWUFBWSxFQUFFLEdBQUcsRUFBRTtvQkFDakIsTUFBTSxNQUFNLEdBQ1YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMscUJBQXFCO3dCQUMzQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQzt3QkFDdkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztvQkFDNUQsT0FBTyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQy9CLENBQUM7YUFDRjtZQUNEO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxNQUFNO2dCQUNiLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUN0QixZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZTthQUNwQztZQUNEO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxNQUFNO2dCQUNiLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUN0QixZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZTthQUNwQztTQUNGLENBQUM7UUFDZSwwQkFBcUIsR0FBRyxFQUFFLENBQUM7SUFFSCxDQUFDO0lBRTFDLFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsY0FBYyxDQUFDLE1BQXFCO1FBQ2xDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ2xELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNsQixZQUFZLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzFDO2FBQU07WUFDTCxZQUFZLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDOUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVPLHFCQUFxQjtRQUMzQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUM5QixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUMzRSxDQUFDO0lBQ0osQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTyxrQkFBa0I7UUFDeEIsT0FBTyx1QkFBdUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUM7SUFDckQsQ0FBQztJQUVPLFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7dUhBN0VVLDBCQUEwQjsyR0FBMUIsMEJBQTBCLHdNQ1h2QywwbEJBb0JBOzJGRFRhLDBCQUEwQjtrQkFKdEMsU0FBUzsrQkFDRSx5QkFBeUI7K0ZBSTFCLE9BQU87c0JBQWYsS0FBSztnQkFFRixVQUFVO3NCQURiLEtBQUs7dUJBQUMsWUFBWTtnQkFLVixVQUFVO3NCQUFsQixLQUFLO2dCQUNJLGlCQUFpQjtzQkFBMUIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgRGlzcGxheU9wdGlvbiB9IGZyb20gJy4vbGlzdC1kaXNwbGF5LXN3aXRjaC5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWRpc3BsYXktc3dpdGNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtZGlzcGxheS1zd2l0Y2guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIExpc3REaXNwbGF5U3dpdGNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgbGlzdEtleTogc3RyaW5nO1xuICBASW5wdXQoJ2xpc3RMZW5ndGgnKVxuICBzZXQgbGlzdExlbmd0aCh2YWw6IG51bWJlcikge1xuICAgIHRoaXMuX2xpc3RMZW5ndGggPSB2YWw7XG4gICAgdGhpcy5sb2FkU2VsZWN0ZWRPcHRpb24oKTtcbiAgfVxuICBASW5wdXQoKSBmaWx0ZXJQaXBlID0gcGlwZSh0YXAoKSk7XG4gIEBPdXRwdXQoKSBvbkxpc3RDbGFzc0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgc2VsZWN0ZWRPcHRpb246IERpc3BsYXlPcHRpb247XG5cbiAgcmVhZG9ubHkgRElTUExBWV9PUFRJT05TOiBEaXNwbGF5T3B0aW9uW10gPSBbXG4gICAge1xuICAgICAgbmFtZTogJ0FVVE8nLFxuICAgICAgdmFsdWU6ICdhdXRvJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdBdXRvJyksXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgZ2V0TGlzdENsYXNzOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9XG4gICAgICAgICAgdGhpcy5fbGlzdExlbmd0aCA+IHRoaXMuQVVUT19HUklEX0lURU1TX0xJTUlUXG4gICAgICAgICAgICA/IHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQob3B0ID0+IG9wdC5uYW1lID09PSAnTElTVCcpXG4gICAgICAgICAgICA6IHRoaXMuRElTUExBWV9PUFRJT05TLmZpbmQob3B0ID0+IG9wdC5uYW1lID09PSAnR1JJRCcpO1xuICAgICAgICByZXR1cm4gb3B0aW9uLmdldExpc3RDbGFzcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0dSSUQnLFxuICAgICAgdmFsdWU6ICdncmlkJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdHcmlkJyksXG4gICAgICBnZXRMaXN0Q2xhc3M6ICgpID0+ICdpbnRlcmFjdC1ncmlkJ1xuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0xJU1QnLFxuICAgICAgdmFsdWU6ICdsaXN0JyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdMaXN0JyksXG4gICAgICBnZXRMaXN0Q2xhc3M6ICgpID0+ICdpbnRlcmFjdC1saXN0J1xuICAgIH1cbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBBVVRPX0dSSURfSVRFTVNfTElNSVQgPSAxMjtcbiAgcHJpdmF0ZSBfbGlzdExlbmd0aDogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmxvYWRTZWxlY3RlZE9wdGlvbigpO1xuICB9XG5cbiAgb25PcHRpb25TZWxlY3Qob3B0aW9uOiBEaXNwbGF5T3B0aW9uKSB7XG4gICAgY29uc3QgbG9jYWxTdG9yYWdlS2V5ID0gdGhpcy5nZXRMb2NhbFN0b3JhZ2VLZXkoKTtcbiAgICBpZiAob3B0aW9uLmRlZmF1bHQpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGxvY2FsU3RvcmFnZUtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU3RvcmFnZUtleSwgb3B0aW9uLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5sb2FkU2VsZWN0ZWRPcHRpb24oKTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZFNlbGVjdGVkT3B0aW9uKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLmdldExvY2FsU3RvcmFnZU9wdGlvbigpIHx8IHRoaXMuZ2V0RGVmYXVsdE9wdGlvbigpO1xuICAgIHRoaXMub25MaXN0Q2xhc3NDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkT3B0aW9uLmdldExpc3RDbGFzcygpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYWxTdG9yYWdlT3B0aW9uKCk6IERpc3BsYXlPcHRpb24ge1xuICAgIHJldHVybiB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKFxuICAgICAgb3B0aW9uID0+IG9wdGlvbi52YWx1ZSA9PT0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5nZXRMb2NhbFN0b3JhZ2VLZXkoKSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0T3B0aW9uKCk6IERpc3BsYXlPcHRpb24ge1xuICAgIHJldHVybiB0aGlzLkRJU1BMQVlfT1BUSU9OUy5maW5kKG9wdGlvbiA9PiBvcHRpb24uZGVmYXVsdCk7XG4gIH1cblxuICBwcml2YXRlIGdldExvY2FsU3RvcmFnZUtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgbGlzdC1kaXNwbGF5LW9wdGlvblske3RoaXMuZ2V0TGlzdEtleSgpfV1gO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXN0S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGlzdEtleSB8fCB0aGlzLmxvY2F0aW9uLnBhdGgoKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgPGxhYmVsIGNsYXNzPVwibS1yLThcIiBpZD1cImxpc3RMYWJlbFwiPlxuICAgIHt7ICdEaXNwbGF5IGFzJyB8IHRyYW5zbGF0ZSB9fVxuICA8L2xhYmVsPlxuICA8ZGl2IGNsYXNzPVwiYzh5LXNlbGVjdC13cmFwcGVyXCI+XG4gICAgPHNlbGVjdFxuICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwibGlzdExhYmVsXCJcbiAgICAgIG5hbWU9XCJsaXN0TGFiZWxcIlxuICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgW25nTW9kZWxdPVwic2VsZWN0ZWRPcHRpb25cIlxuICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwib25PcHRpb25TZWxlY3QoJGV2ZW50KVwiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cIidEaXNwbGF5IG1vZGUnIHwgdHJhbnNsYXRlXCJcbiAgICA+XG4gICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgRElTUExBWV9PUFRJT05TXCIgW25nVmFsdWVdPVwib3B0aW9uXCI+XG4gICAgICAgIHt7IG9wdGlvbi5sYWJlbCB8IHRyYW5zbGF0ZSB9fVxuICAgICAgPC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG4gICAgPHNwYW4+PC9zcGFuPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19
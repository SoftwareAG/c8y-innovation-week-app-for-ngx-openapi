import { Component, Input } from '@angular/core';
import { find, keys, get, assign, isEmpty } from 'lodash-es';
import { OptionsService } from '../common/options.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "@angular/common";
export class AppIconComponent {
    constructor(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    ngOnInit() {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        const iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.mapFontAwesomeToDelightIcons(this.model.appIcon),
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(c => !!c);
        this.model.appNameAbbr = this.name.substr(0, 2);
    }
    findStaticIcon() {
        const contextPath = this.contextPath || this.name;
        const appContextPathNormalized = find(keys(this.c8yAppIconsList), cp => {
            return contextPath.indexOf(cp) > -1;
        });
        const appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? `c8y-icon-${appIcon}` : undefined;
    }
    iconFromAppDefinition() {
        const app = this.app || this.options;
        const iconClassProperty = ['icon', 'class'];
        const iconClass = get(app, ['manifest', ...iconClassProperty]) || get(app, iconClassProperty);
        return iconClass;
    }
    iconUrlFromAppDefinition() {
        const app = this.app || this.options;
        const iconUrlProperty = ['icon', 'url'];
        const iconUrl = get(app, ['manifest', ...iconUrlProperty]) || get(app, iconUrlProperty);
        return iconUrl;
    }
    mapFontAwesomeToDelightIcons(iconClasses) {
        if (!iconClasses) {
            return;
        }
        const regex = /fa-/gi;
        return iconClasses.replace(regex, 'dlt-c8y-icon-');
    }
}
AppIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppIconComponent, deps: [{ token: i1.OptionsService }], target: i0.ɵɵFactoryTarget.Component });
AppIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AppIconComponent, selector: "c8y-app-icon", inputs: { contextPath: "contextPath", name: "name", app: "app" }, host: { classAttribute: "c8y-app-icon" }, ngImport: i0, template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-app-icon', host: { class: 'c8y-app-icon' }, template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n" }]
        }], ctorParameters: function () { return [{ type: i1.OptionsService }]; }, propDecorators: { contextPath: [{
                type: Input
            }], name: [{
                type: Input
            }], app: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hcHBsaWNhdGlvbi9hcHAtaWNvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2FwcGxpY2F0aW9uL2FwcC1pY29uLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQU8zRCxNQUFNLE9BQU8sZ0JBQWdCO0lBK0IzQixZQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTdCbEMsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUduQixVQUFLLEdBQUc7WUFDTixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBRU0sb0JBQWUsR0FBRztZQUN4QixnQkFBZ0IsRUFBRSxtQkFBbUI7WUFDckMsbUJBQW1CLEVBQUUsbUJBQW1CO1lBQ3hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtZQUNyQyxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7UUFFTSxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBRWQscUJBQWdCLEdBQUc7WUFDekIsbUJBQW1CLEVBQUUsV0FBVztZQUNoQyxpQkFBaUIsRUFBRSxTQUFTO1lBQzVCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsS0FBSyxF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TyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs2R0EvRVUsZ0JBQWdCO2lHQUFoQixnQkFBZ0IsZ0tDVDdCLG9MQUVBOzJGRE9hLGdCQUFnQjtrQkFMNUIsU0FBUzsrQkFDRSxjQUFjLFFBRWxCLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRTtxR0FHdEIsV0FBVztzQkFBbkIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaW5kLCBrZXlzLCBnZXQsIGFzc2lnbiwgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYXBwLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7IGNsYXNzOiAnYzh5LWFwcC1pY29uJyB9XG59KVxuZXhwb3J0IGNsYXNzIEFwcEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBjb250ZXh0UGF0aDogc3RyaW5nO1xuICBASW5wdXQoKSBuYW1lID0gJyc7XG4gIEBJbnB1dCgpIGFwcDogYW55O1xuXG4gIG1vZGVsID0ge1xuICAgIGFwcEljb246ICcnLFxuICAgIHNob3dJY29uOiB0cnVlLFxuICAgIGljb25DbGFzczogWydjOHktaWNvbiddLFxuICAgIGFwcE5hbWVBYmJyOiAnJyxcbiAgICBpY29uU3R5bGU6IHt9XG4gIH07XG5cbiAgcHJpdmF0ZSBjOHlBcHBJY29uc0xpc3QgPSB7XG4gICAgYW5hbHl0aWNzYnVpbGRlcjogJ2FuYWx5dGljcy1idWlsZGVyJyxcbiAgICAnYW5hbHl0aWNzLWJ1aWxkZXInOiAnYW5hbHl0aWNzLWJ1aWxkZXInLFxuICAgIGNvY2twaXQ6ICdjb2NrcGl0JyxcbiAgICBkZXZpY2VtYW5hZ2VtZW50OiAnZGV2aWNlLW1hbmFnZW1lbnQnLFxuICAgIGFkbWluaXN0cmF0aW9uOiAnYWRtaW5pc3RyYXRpb24nLFxuICAgIGFwYW1hZXBsOiAnYXBhbWEtZXBsJ1xuICB9O1xuXG4gIHByaXZhdGUgd2hpdGUgPSBmYWxzZTtcblxuICBwcml2YXRlIGRlZmF1bHRJY29uU3R5bGUgPSB7XG4gICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXG4gICAgJ2JhY2tncm91bmQtc2l6ZSc6ICdjb250YWluJyxcbiAgICBoZWlnaHQ6ICczNnB4JyxcbiAgICB3aWR0aDogJzM2cHgnXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1vZGVsLmFwcEljb24gPSB0aGlzLmljb25Gcm9tQXBwRGVmaW5pdGlvbigpIHx8IHRoaXMuZmluZFN0YXRpY0ljb24oKTtcbiAgICBjb25zdCBpY29uVXJsID0gdGhpcy5pY29uVXJsRnJvbUFwcERlZmluaXRpb24oKTtcbiAgICBpZiAoaWNvblVybCkge1xuICAgICAgdGhpcy5tb2RlbC5pY29uU3R5bGUgPSBhc3NpZ24odGhpcy5kZWZhdWx0SWNvblN0eWxlLCB7XG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogaWNvblVybFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwuc2hvd0ljb24gPSAhIXRoaXMubW9kZWwuYXBwSWNvbiB8fCAhaXNFbXB0eSh0aGlzLm1vZGVsLmljb25TdHlsZSk7XG4gICAgdGhpcy5tb2RlbC5pY29uQ2xhc3MgPSBbXG4gICAgICAnYzh5LWljb24nLFxuICAgICAgdGhpcy5tYXBGb250QXdlc29tZVRvRGVsaWdodEljb25zKHRoaXMubW9kZWwuYXBwSWNvbiksXG4gICAgICB0aGlzLndoaXRlID8gJ2M4eS1pY29uLXdoaXRlJyA6ICdjOHktaWNvbi1kdW9jb2xvcidcbiAgICBdLmZpbHRlcihjID0+ICEhYyk7XG4gICAgdGhpcy5tb2RlbC5hcHBOYW1lQWJiciA9IHRoaXMubmFtZS5zdWJzdHIoMCwgMik7XG4gIH1cblxuICBwcml2YXRlIGZpbmRTdGF0aWNJY29uKCkge1xuICAgIGNvbnN0IGNvbnRleHRQYXRoID0gdGhpcy5jb250ZXh0UGF0aCB8fCB0aGlzLm5hbWU7XG4gICAgY29uc3QgYXBwQ29udGV4dFBhdGhOb3JtYWxpemVkID0gZmluZChrZXlzKHRoaXMuYzh5QXBwSWNvbnNMaXN0KSwgY3AgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHRQYXRoLmluZGV4T2YoY3ApID4gLTE7XG4gICAgfSk7XG4gICAgY29uc3QgYXBwSWNvbiA9IHRoaXMuYzh5QXBwSWNvbnNMaXN0W2FwcENvbnRleHRQYXRoTm9ybWFsaXplZF07XG4gICAgcmV0dXJuIGFwcEljb24gPyBgYzh5LWljb24tJHthcHBJY29ufWAgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGljb25Gcm9tQXBwRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcCB8fCB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaWNvbkNsYXNzUHJvcGVydHkgPSBbJ2ljb24nLCAnY2xhc3MnXTtcbiAgICBjb25zdCBpY29uQ2xhc3MgPSBnZXQoYXBwLCBbJ21hbmlmZXN0JywgLi4uaWNvbkNsYXNzUHJvcGVydHldKSB8fCBnZXQoYXBwLCBpY29uQ2xhc3NQcm9wZXJ0eSk7XG4gICAgcmV0dXJuIGljb25DbGFzcztcbiAgfVxuXG4gIHByaXZhdGUgaWNvblVybEZyb21BcHBEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwIHx8IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpY29uVXJsUHJvcGVydHkgPSBbJ2ljb24nLCAndXJsJ107XG4gICAgY29uc3QgaWNvblVybCA9IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uVXJsUHJvcGVydHldKSB8fCBnZXQoYXBwLCBpY29uVXJsUHJvcGVydHkpO1xuICAgIHJldHVybiBpY29uVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBGb250QXdlc29tZVRvRGVsaWdodEljb25zKGljb25DbGFzc2VzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWljb25DbGFzc2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlZ2V4ID0gL2ZhLS9naTtcbiAgICByZXR1cm4gaWNvbkNsYXNzZXMucmVwbGFjZShyZWdleCwgJ2RsdC1jOHktaWNvbi0nKTtcbiAgfVxufVxuIiwiPGkgKm5nSWY9XCJtb2RlbC5zaG93SWNvblwiIFtuZ0NsYXNzXT1cIm1vZGVsLmljb25DbGFzc1wiIFtuZ1N0eWxlXT1cIm1vZGVsLmljb25TdHlsZVwiPjwvaT5cbjxzcGFuICpuZ0lmPVwiIW1vZGVsLnNob3dJY29uXCIgY2xhc3M9XCJhcHAtbm9pY29uXCI+IHt7bW9kZWwuYXBwTmFtZUFiYnJ9fTwvc3Bhbj5cbiJdfQ==
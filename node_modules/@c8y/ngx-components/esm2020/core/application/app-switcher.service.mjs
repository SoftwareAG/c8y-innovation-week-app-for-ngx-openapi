import { Injectable } from '@angular/core';
import { get, orderBy } from 'lodash-es';
import { combineLatest } from 'rxjs';
import { map, shareReplay, take } from 'rxjs/operators';
import { AppStateService } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../common";
export class AppSwitcherService {
    constructor(ui) {
        this.ui = ui;
        this.visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        const { currentTenant } = this.ui;
        this.appsOfCurrentUser$ = this.ui.currentAppsOfUser.pipe(map(apps => this.filterVisible(apps)), shareReplay(1));
        this.oneCloudApps$ = this.appsOfCurrentUser$.pipe(map(apps => apps.filter(app => this.isCloudApp(app))), map(cloudApps => this.orderApps(cloudApps)), shareReplay(1));
        const nonCloudApps$ = this.appsOfCurrentUser$.pipe(map(apps => apps.filter(app => !this.isCloudApp(app))));
        this.apps$ = combineLatest([nonCloudApps$, currentTenant]).pipe(map(([apps, tenant]) => this.filterDuplicates(apps, tenant)), map(apps => this.orderApps(apps)), shareReplay(1));
        this.finishedLoading$ = combineLatest([this.apps$, this.oneCloudApps$]).pipe(map(() => true), take(1), shareReplay(1));
    }
    filterVisible(apps) {
        return apps.filter(app => this.visibleApplicationTypes.includes(app.type) &&
            !app.noAppSwitcher &&
            !get(app, 'manifest.noAppSwitcher'));
    }
    isCloudApp(app) {
        return !!app.cloud;
    }
    filterDuplicates(apps, tenant) {
        // Filter out apps that have duplicate contextpaths and are not own owned by the current tenant;
        const filterFn = app => !apps.some(otherApp => app !== otherApp &&
            app.contextPath &&
            app.contextPath === otherApp.contextPath &&
            app.owner.tenant.id !== tenant.name);
        return apps.filter(filterFn);
    }
    orderApps(apps) {
        return orderBy(apps, ({ name }) => name.toLowerCase());
    }
}
AppSwitcherService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppSwitcherService, deps: [{ token: i1.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
AppSwitcherService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppSwitcherService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppSwitcherService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN3aXRjaGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2FwcGxpY2F0aW9uL2FwcC1zd2l0Y2hlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFHNUMsTUFBTSxPQUFPLGtCQUFrQjtJQWlCN0IsWUFBc0IsRUFBbUI7UUFBbkIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFGdEIsNEJBQXVCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFHbEUsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUN0RCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3JDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUMvQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3JELEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDM0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUNoRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDdkQsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM3RCxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUM1RCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ2pDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1FBRUYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO0lBQ0osQ0FBQztJQUVTLGFBQWEsQ0FBQyxJQUFvQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQ0osSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQy9DLENBQUMsR0FBRyxDQUFDLGFBQWE7WUFDbEIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHdCQUF3QixDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDO0lBRVMsVUFBVSxDQUFDLEdBQWlCO1FBQ3BDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVTLGdCQUFnQixDQUFDLElBQW9CLEVBQUUsTUFBc0I7UUFDckUsZ0dBQWdHO1FBQ2hHLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQ3JCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDUixRQUFRLENBQUMsRUFBRSxDQUNULEdBQUcsS0FBSyxRQUFRO1lBQ2hCLEdBQUcsQ0FBQyxXQUFXO1lBQ2YsR0FBRyxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUMsV0FBVztZQUN4QyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLElBQUksQ0FDdEMsQ0FBQztRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRVMsU0FBUyxDQUFDLElBQW9CO1FBQ3RDLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7OytHQXhFVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQURMLE1BQU07MkZBQ25CLGtCQUFrQjtrQkFEOUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQXBwbGljYXRpb24sIElDdXJyZW50VGVuYW50IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZ2V0LCBvcmRlckJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc2hhcmVSZXBsYXksIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEFwcFN3aXRjaGVyU2VydmljZSB7XG4gIC8qKlxuICAgKiBBcHBzIG9mIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIuXG4gICAqL1xuICBhcHBzT2ZDdXJyZW50VXNlciQ6IE9ic2VydmFibGU8QXJyYXk8SUFwcGxpY2F0aW9uPj47XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgY2xvdWQgYXBwcyBvZiB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIHRvIGJlIGRpc3BsYXllZCBpbiBhcHAgc3dpdGNoZXIuXG4gICAqL1xuICBvbmVDbG91ZEFwcHMkOiBPYnNlcnZhYmxlPEFycmF5PElBcHBsaWNhdGlvbj4+O1xuICAvKipcbiAgICogQXZhaWxhYmxlIG5vbmUgY2xvdWQgYXBwcyBvZiB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIHRvIGJlIGRpc3BsYXllZCBpbiBhcHAgc3dpdGNoZXIuXG4gICAqL1xuICBhcHBzJDogT2JzZXJ2YWJsZTxBcnJheTxJQXBwbGljYXRpb24+PjtcbiAgZmluaXNoZWRMb2FkaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdmlzaWJsZUFwcGxpY2F0aW9uVHlwZXMgPSBbJ0hPU1RFRCcsICdFWFRFUk5BTCddO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB1aTogQXBwU3RhdGVTZXJ2aWNlKSB7XG4gICAgY29uc3QgeyBjdXJyZW50VGVuYW50IH0gPSB0aGlzLnVpO1xuICAgIHRoaXMuYXBwc09mQ3VycmVudFVzZXIkID0gdGhpcy51aS5jdXJyZW50QXBwc09mVXNlci5waXBlKFxuICAgICAgbWFwKGFwcHMgPT4gdGhpcy5maWx0ZXJWaXNpYmxlKGFwcHMpKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgICB0aGlzLm9uZUNsb3VkQXBwcyQgPSB0aGlzLmFwcHNPZkN1cnJlbnRVc2VyJC5waXBlKFxuICAgICAgbWFwKGFwcHMgPT4gYXBwcy5maWx0ZXIoYXBwID0+IHRoaXMuaXNDbG91ZEFwcChhcHApKSksXG4gICAgICBtYXAoY2xvdWRBcHBzID0+IHRoaXMub3JkZXJBcHBzKGNsb3VkQXBwcykpLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuICAgIGNvbnN0IG5vbkNsb3VkQXBwcyQgPSB0aGlzLmFwcHNPZkN1cnJlbnRVc2VyJC5waXBlKFxuICAgICAgbWFwKGFwcHMgPT4gYXBwcy5maWx0ZXIoYXBwID0+ICF0aGlzLmlzQ2xvdWRBcHAoYXBwKSkpXG4gICAgKTtcbiAgICB0aGlzLmFwcHMkID0gY29tYmluZUxhdGVzdChbbm9uQ2xvdWRBcHBzJCwgY3VycmVudFRlbmFudF0pLnBpcGUoXG4gICAgICBtYXAoKFthcHBzLCB0ZW5hbnRdKSA9PiB0aGlzLmZpbHRlckR1cGxpY2F0ZXMoYXBwcywgdGVuYW50KSksXG4gICAgICBtYXAoYXBwcyA9PiB0aGlzLm9yZGVyQXBwcyhhcHBzKSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG5cbiAgICB0aGlzLmZpbmlzaGVkTG9hZGluZyQgPSBjb21iaW5lTGF0ZXN0KFt0aGlzLmFwcHMkLCB0aGlzLm9uZUNsb3VkQXBwcyRdKS5waXBlKFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBmaWx0ZXJWaXNpYmxlKGFwcHM6IElBcHBsaWNhdGlvbltdKTogSUFwcGxpY2F0aW9uW10ge1xuICAgIHJldHVybiBhcHBzLmZpbHRlcihcbiAgICAgIGFwcCA9PlxuICAgICAgICB0aGlzLnZpc2libGVBcHBsaWNhdGlvblR5cGVzLmluY2x1ZGVzKGFwcC50eXBlKSAmJlxuICAgICAgICAhYXBwLm5vQXBwU3dpdGNoZXIgJiZcbiAgICAgICAgIWdldChhcHAsICdtYW5pZmVzdC5ub0FwcFN3aXRjaGVyJylcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGlzQ2xvdWRBcHAoYXBwOiBJQXBwbGljYXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFhcHAuY2xvdWQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmlsdGVyRHVwbGljYXRlcyhhcHBzOiBJQXBwbGljYXRpb25bXSwgdGVuYW50OiBJQ3VycmVudFRlbmFudCk6IElBcHBsaWNhdGlvbltdIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGFwcHMgdGhhdCBoYXZlIGR1cGxpY2F0ZSBjb250ZXh0cGF0aHMgYW5kIGFyZSBub3Qgb3duIG93bmVkIGJ5IHRoZSBjdXJyZW50IHRlbmFudDtcbiAgICBjb25zdCBmaWx0ZXJGbiA9IGFwcCA9PlxuICAgICAgIWFwcHMuc29tZShcbiAgICAgICAgb3RoZXJBcHAgPT5cbiAgICAgICAgICBhcHAgIT09IG90aGVyQXBwICYmXG4gICAgICAgICAgYXBwLmNvbnRleHRQYXRoICYmXG4gICAgICAgICAgYXBwLmNvbnRleHRQYXRoID09PSBvdGhlckFwcC5jb250ZXh0UGF0aCAmJlxuICAgICAgICAgIGFwcC5vd25lci50ZW5hbnQuaWQgIT09IHRlbmFudC5uYW1lXG4gICAgICApO1xuICAgIHJldHVybiBhcHBzLmZpbHRlcihmaWx0ZXJGbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3JkZXJBcHBzKGFwcHM6IElBcHBsaWNhdGlvbltdKTogSUFwcGxpY2F0aW9uW10ge1xuICAgIHJldHVybiBvcmRlckJ5KGFwcHMsICh7IG5hbWUgfSkgPT4gbmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuIl19
import { CdkStep } from '@angular/cdk/stepper';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { GainsightService } from '../product-experience/gainsight.service';
import { ACTIONS } from './stepper-px.constants';
import { C8yStepper } from './stepper.component';
import * as i0 from "@angular/core";
import * as i1 from "./stepper.component";
import * as i2 from "@angular/cdk/stepper";
import * as i3 from "../product-experience/gainsight.service";
import * as i4 from "@angular/common";
import * as i5 from "../i18n/c8y-translate.pipe";
/**
 * C8yStepperButtons provides a convenient way to have, according to
 * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
 * step-process. Buttons rendered with the help of this component will use the branding css.
 *
 * By default all steps with this component in use will render a next button, expect the last step.
 * The other way around, every step using this component will render a back button, expect the first step.
 * To get a cancel button rendered you need to handle the onCancel event.
 * For next and back button you don't need to handle the available events onNext and onBack because default behavior
 * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
 * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
 * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
 * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
 * on your own.
 *
 * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
 * {next?: string, back?: string, cancel?: string}
 *
 * The [pending] input is of type boolean and will enable css animation for the next button when true.
 *
 * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
 * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
 * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
 *
 * **Example**
 * ```
 * <c8y-stepper>
 *  <cdk-step>
 *    <!--
 *      your html code
 *          ...
 *          ...    -->
 *    <c8y-stepper-buttons
 *     (onNext)="save()"
 *     [labels]="{ next: 'Save' }"
 *     [pending]="pendingStatus"
 *     ></c8y-stepper-buttons>
 *  </cdk-step>
 * </c8y-stepper>
 *
 * // in your component:
 * async save() {
 *   this.pendingStatus = true;
 *   // your async request goes here ...
 *   // await something();
 *   this.pendingStatus = false;
 *   this.stepper.next();
 * }
 * ```
 */
export class C8yStepperButtons {
    constructor(stepper, step, gainsightService) {
        this.stepper = stepper;
        this.step = step;
        this.gainsightService = gainsightService;
        /**
         * Optional
         * Indicates if a request is pending and sets the next button
         * to disabled when true
         */
        this.pending = false;
        /**
         * Disabled state of a button
         */
        this.disabled = false;
        /**
         * EventEmitter which emits when cancel button is clicked
         */
        this.onCancel = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
         */
        this.onNext = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
         */
        this.onBack = new EventEmitter();
        /**
         * EventEmitter which emits when the optional custom button is clicked
         */
        this.onCustom = new EventEmitter();
        /**
         * Indicator which button should be shown.
         * Based on the cdk-steps within the c8y-stepper
         * next and back buttons are rendered.
         */
        this.showBtns = {
            cancel: false,
            back: false,
            next: false,
            custom: false
        };
        /**
         * Flag that indicates that the default settings defined in the showBtns have been overwritten.
         */
        this.forceShowBtns = false;
    }
    /**
     * This option forces the display of the buttons passed by the input.
     * It will override the default settings and take precedence over the standard settings.
     * @param btns An object that contains options for displaying buttons.
     *
     * **Example**
     * ```html
     *
     * <c8y-stepper-buttons
     *   [labels]="{ custom: 'Custom btn', cancel: 'Cancel btn' }"
     *   [showButtons]="{ custom: true, cancel: true }"
     * ></c8y-stepper-buttons>
     *
     * ```
     */
    set showButtons(btns) {
        if (btns) {
            this.showBtns = btns;
            this.forceShowBtns = true;
        }
    }
    /**
     * @ignore
     */
    ngAfterContentInit() {
        if (!this.forceShowBtns) {
            this.showBtns.cancel = this.onCancel.observers.length > 0;
            this.showBtns.custom = this.onCustom.observers.length > 0;
        }
        if (this.stepper && this.stepper._steps && this.step && !this.forceShowBtns) {
            this.showBtns.back = this.stepper._steps.first !== this.step;
            this.showBtns.next = this.stepper._steps.last !== this.step;
        }
        if (this.step && this.step.stepControl) {
            this.disabled = this.step.stepControl.invalid;
            this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(() => {
                this.disabled = this.step.stepControl.invalid;
            });
        }
    }
    ngOnDestroy() {
        if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
            this.statusChangeSubscription.unsubscribe();
        }
    }
    /**
     * Gets called when cancel button is clicked.
     * It will emit immediate.
     */
    cancel() {
        this.onCancel.emit();
        this.triggerEvent(ACTIONS.CLICK_STEPPER_CANCEL_BTN);
    }
    /**
     * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.next() as default.
     */
    next() {
        if (this.onNext.observers.length > 0) {
            this.onNext.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.next();
        }
        this.triggerEvent(ACTIONS.CLICK_STEPPER_NEXT_BTN);
    }
    /**
     * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.previous() as default.
     */
    back() {
        this.stepper.selected.completed = false;
        if (this.onBack.observers.length > 0) {
            this.onBack.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.previous();
        }
        this.triggerEvent(ACTIONS.CLICK_STEPPER_BACK_BTN);
    }
    /**
     * Gets called when the custom button is clicked.
     * It will emit immediately.
     */
    custom() {
        this.onCustom.emit();
        this.triggerEvent(ACTIONS.CLICK_STEPPER_CUSTOM_BTN);
    }
    triggerEvent(action) {
        const eventData = {
            ...this.stepper.productExperienceEvent?.data,
            action,
            step: this.gainsightService.translateToEnglish(this.step.label)
        };
        const eventName = this.stepper.productExperienceEvent?.eventName || 'c8yStepper';
        this.gainsightService.triggerEvent(eventName, eventData);
    }
}
C8yStepperButtons.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yStepperButtons, deps: [{ token: i1.C8yStepper }, { token: i2.CdkStep }, { token: i3.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
C8yStepperButtons.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: C8yStepperButtons, selector: "c8y-stepper-buttons", inputs: { labels: "labels", pending: "pending", disabled: "disabled", showButtons: "showButtons" }, outputs: { onCancel: "onCancel", onNext: "onNext", onBack: "onBack", onCustom: "onCustom" }, ngImport: i0, template: "<div class=\"text-center\">\n  <button\n    class=\"btn btn-default\"\n    title=\"{{ labels?.cancel | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.cancel\"\n    (click)=\"cancel()\"\n  >\n    <span\n      title=\"{{ labels?.cancel | translate }}\"\n      *ngIf=\"labels?.cancel; else cancelLabel\"\n    >\n      {{ labels?.cancel | translate }}\n    </span>\n    <ng-template #cancelLabel>\n      <span title=\"{{ 'Cancel' | translate }}\">{{ 'Cancel' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn btn-default\"\n    title=\"{{ labels?.back | translate }}\"\n    title=\"{{ labels?.back || 'Back' | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.back\"\n    (click)=\"back()\"\n    [disabled]=\"pending\"\n    data-cy=\"back\"\n  >\n    <span\n      title=\"{{ labels?.back | translate }}\"\n      *ngIf=\"labels?.back; else backLabel\"\n    >\n      {{ labels?.back | translate }}\n    </span>\n    <ng-template #backLabel>\n      <span title=\"{{ 'Back' | translate }}\">{{ 'Back' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn\"\n    title=\"{{ labels?.custom || 'Complete' | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.custom\"\n    (click)=\"custom()\"\n    [ngClass]=\"{\n      'btn-default': showBtns.next,\n      'btn-primary': !showBtns.next,\n      'btn-pending': pending\n    }\"\n    [disabled]=\"disabled\"\n    data-cy=\"custom\"\n  >\n    <span\n      title=\"{{ labels?.custom | translate }}\"\n      *ngIf=\"labels?.custom; else customLabel\"\n    >\n      {{ labels?.custom | translate }}\n    </span>\n    <ng-template #customLabel>\n      <span title=\"{{ 'Complete' | translate }}\">{{ 'Complete' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    title=\"{{ labels?.next | translate }}\"\n    title=\"{{ labels?.next || 'Next' | translate }}\"\n    type=\"button\"\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n    data-cy=\"next\"\n  >\n    <span\n      title=\"{{ labels?.next | translate }}\"\n      *ngIf=\"labels?.next; else nextLabel\"\n    >\n      {{ labels?.next | translate }}\n    </span>\n    <ng-template #nextLabel>\n      <span title=\"{{ 'Next' | translate }}\">{{ 'Next' | translate }}</span>\n    </ng-template>\n  </button>\n  <ng-content select=\"button\"></ng-content>\n</div>\n", dependencies: [{ kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yStepperButtons, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-stepper-buttons', template: "<div class=\"text-center\">\n  <button\n    class=\"btn btn-default\"\n    title=\"{{ labels?.cancel | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.cancel\"\n    (click)=\"cancel()\"\n  >\n    <span\n      title=\"{{ labels?.cancel | translate }}\"\n      *ngIf=\"labels?.cancel; else cancelLabel\"\n    >\n      {{ labels?.cancel | translate }}\n    </span>\n    <ng-template #cancelLabel>\n      <span title=\"{{ 'Cancel' | translate }}\">{{ 'Cancel' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn btn-default\"\n    title=\"{{ labels?.back | translate }}\"\n    title=\"{{ labels?.back || 'Back' | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.back\"\n    (click)=\"back()\"\n    [disabled]=\"pending\"\n    data-cy=\"back\"\n  >\n    <span\n      title=\"{{ labels?.back | translate }}\"\n      *ngIf=\"labels?.back; else backLabel\"\n    >\n      {{ labels?.back | translate }}\n    </span>\n    <ng-template #backLabel>\n      <span title=\"{{ 'Back' | translate }}\">{{ 'Back' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn\"\n    title=\"{{ labels?.custom || 'Complete' | translate }}\"\n    type=\"button\"\n    *ngIf=\"showBtns.custom\"\n    (click)=\"custom()\"\n    [ngClass]=\"{\n      'btn-default': showBtns.next,\n      'btn-primary': !showBtns.next,\n      'btn-pending': pending\n    }\"\n    [disabled]=\"disabled\"\n    data-cy=\"custom\"\n  >\n    <span\n      title=\"{{ labels?.custom | translate }}\"\n      *ngIf=\"labels?.custom; else customLabel\"\n    >\n      {{ labels?.custom | translate }}\n    </span>\n    <ng-template #customLabel>\n      <span title=\"{{ 'Complete' | translate }}\">{{ 'Complete' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    title=\"{{ labels?.next | translate }}\"\n    title=\"{{ labels?.next || 'Next' | translate }}\"\n    type=\"button\"\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n    data-cy=\"next\"\n  >\n    <span\n      title=\"{{ labels?.next | translate }}\"\n      *ngIf=\"labels?.next; else nextLabel\"\n    >\n      {{ labels?.next | translate }}\n    </span>\n    <ng-template #nextLabel>\n      <span title=\"{{ 'Next' | translate }}\">{{ 'Next' | translate }}</span>\n    </ng-template>\n  </button>\n  <ng-content select=\"button\"></ng-content>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.C8yStepper }, { type: i2.CdkStep }, { type: i3.GainsightService }]; }, propDecorators: { labels: [{
                type: Input
            }], pending: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onCancel: [{
                type: Output
            }], onNext: [{
                type: Output
            }], onBack: [{
                type: Output
            }], onCustom: [{
                type: Output
            }], showButtons: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
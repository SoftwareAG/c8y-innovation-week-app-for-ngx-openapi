import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { distinctUntilChanged, filter, map, shareReplay, take } from 'rxjs/operators';
import { fromTrigger, hookGeneric, getInjectedHooks, stateToFactory, ExtensionPointForPlugins } from '../common/extension-hooks';
import { PluginsResolveService } from '../plugins';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../plugins";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookStepper` function instead.
 */
export const HOOK_STEPPER = new InjectionToken('HOOK_STEPPER');
/**
 * You can either provide a single `Step` as parameter:
 * ```typescript
 *  hookStepper(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookStepper([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<Step>`
 * ```typescript
 *  export class MyStepFactory implements ExtensionFactory<Step> {...}
 *  ...
 *  hookStepper(MyStepFactory)
 * ```
 * A typed alternative to `HOOK_STEPPER`.
 * @param step The `Step`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookStepper(step, options) {
    return hookGeneric(step, HOOK_STEPPER, options);
}
/**
 * A service which defines the steps in a stepper component.
 * A stepper hook needs an certain outlet which has an matching id
 * to display the steps.
 */
export class StepperService extends ExtensionPointForPlugins {
    constructor(rootInjector, router, translateService, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.translateService = translateService;
        this.items$ = this.setupItemsObservable();
    }
    sortSteps(steps) {
        return steps.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a step and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    /**
     * Returns the component by it's asssigned stepper id as an observable.
     * @param id The id of the stepper to hook into.
     */
    getById$(id) {
        return this.items$.pipe(filter(steps => steps.length > 0), map(steps => steps.filter(cmp => cmp.stepperId === id)), take(1));
    }
    setupItemsObservable() {
        return fromTrigger(this.router, this.refresh$, [
            getInjectedHooks(HOOK_STEPPER, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), shareReplay(1));
    }
}
StepperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.TranslateService }, { token: i3.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
StepperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.TranslateService }, { type: i3.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable, Injector } from '@angular/core';
import { set } from 'lodash';
import { Observable, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class DynamicResolverService {
    constructor(injector) {
        this.injector = injector;
        this._triggerBulkResolving = new Subject();
        this.requestId = 0;
        this.bulkResolvingTrigger$ = this._triggerBulkResolving.asObservable();
    }
    async executeResolvers(details, dynamicDef) {
        const requestId = this.getRequestId();
        const res = dynamicDef.map((def, index) => this.executeResolversForSingleComponent(def, details[index].config, requestId));
        const promise = this.waitForResults(res);
        this.triggerResolving(requestId);
        return await promise;
    }
    serialize(details, dynamicDef) {
        return dynamicDef.map((def, index) => {
            return this.serializeSingleComponent(def, details[index].config);
        });
    }
    serializeSingleComponent(dynamicDef, config) {
        const res = {};
        if (!dynamicDef?.resolve) {
            return res;
        }
        Object.entries(dynamicDef.resolve).forEach(([key, value]) => {
            try {
                const resolver = this.injector.get(value, null);
                if (resolver && resolver.serialize) {
                    res[key] = resolver.serialize(config, key);
                }
                else {
                    console.warn(`DynamicDetailsResolver: "${value}" not found or does not implement serialize method.`);
                }
            }
            catch {
                console.warn(`Failed to serialize key: "${key}" for dynamic component: "${dynamicDef.id}"`);
            }
        });
        return res;
    }
    triggerResolving(requestId) {
        this._triggerBulkResolving.next(requestId);
    }
    executeResolversForSingleComponent(dynamicDef, config, requestId) {
        const res = {};
        if (!dynamicDef?.resolve) {
            return res;
        }
        Object.entries(dynamicDef.resolve).forEach(([key, value]) => {
            try {
                const resolver = this.injector.get(value, null);
                if (resolver && resolver.resolve) {
                    res[key] = resolver.resolve(config, key, requestId);
                }
                else {
                    console.warn(`DynamicDetailsResolver: "${value}" not found or does not implement resolve method.`);
                }
            }
            catch {
                console.warn(`Failed to resolve key: "${key}" for dynamic component: "${dynamicDef.id}"`);
            }
        });
        return res;
    }
    async waitForResults(data) {
        return Promise.all(data.map(tmp => this.waitForResultsOfSingleEntry(tmp)));
    }
    async waitForResultsOfSingleEntry(data) {
        const res = {};
        try {
            const arr = await Promise.all(Object.values(data).map(tmp => this.awaitResult(tmp)));
            Object.keys(data).forEach((key, index) => set(res, key, arr[index]));
        }
        catch {
            console.warn(`Failed to to resolve data using dynamic component resolver.`);
        }
        return res;
    }
    async awaitResult(data) {
        try {
            if (data instanceof Promise) {
                return await data;
            }
            if (data instanceof Observable) {
                return await data.toPromise();
            }
            return data;
        }
        catch {
            console.warn(`Failed to to resolve data using dynamic component resolver.`);
            return;
        }
    }
    getRequestId() {
        return this.requestId++;
    }
}
DynamicResolverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicResolverService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicResolverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicResolverService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicResolverService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,
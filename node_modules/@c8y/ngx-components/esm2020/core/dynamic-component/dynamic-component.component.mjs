import { Component, EventEmitter, Input, Output, ViewChild, ViewContainerRef, Injector, SimpleChange } from '@angular/core';
import { DynamicComponentErrorStrategy, isLazyDynamicComponents, isEagerDynamicComponents } from './dynamic-component.model';
import { DynamicComponentService } from './dynamic-component.service';
import { isObservable, of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { flatten, get, isUndefined, set, cloneDeep } from 'lodash-es';
import { DynamicComponentAlertAggregator } from './dynamic-component-alert-aggregator';
import { DynamicComponentAlert } from './dynamic-component-alert.model';
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-component.service";
import * as i2 from "../common/icon.directive";
import * as i3 from "../i18n/c8y-translate.directive";
import * as i4 from "@angular/common";
import * as i5 from "ngx-bootstrap/collapse";
import * as i6 from "./dynamic-component-alerts.component";
import * as i7 from "../i18n/c8y-translate.pipe";
/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { hookComponent } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [
 *    hookComponent({
 *      id: 'test-component',
 *      label: 'My test component',
 *      description: 'this is test component',
 *      component: TestComponent
 *    })
 *  ...
 *  ]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
export class DynamicComponentComponent {
    /**
     * @ignore only DI
     */
    constructor(dynamicComponentService, injector) {
        this.dynamicComponentService = dynamicComponentService;
        this.injector = injector;
        /**
         * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
         * By default it is shown in the component mode.
         */
        this.mode = 'component';
        /**
         * Disable this to hide the error that is shown if the component was not found.
         */
        this.notFoundError = true;
        /**
         * If set to true, it will execute the components resolvers before initializing the component.
         * Defaults to false.
         */
        this.executeResolvers = false;
        /**
         * Allows to set additional classes for widget styling.
         */
        this.updateWidgetClasses = new EventEmitter();
        /**
         * @ignore
         */
        this.expandErrorDetails = false;
        this.dynamicComponentErrorStrategy = DynamicComponentErrorStrategy;
        this.destroy$ = new Subject();
    }
    /**
     * Calls the dynamic component life cycle hook. Currently only
     * supporting onBeforeSave, a hook which is called before a config component
     * is saved.
     */
    callLifeCycleHooks() {
        return this.callOnBeforeSaveHook();
    }
    /**
     * @ignore
     */
    async ngOnChanges(changes) {
        const cmp = await this.dynamicComponentService.getById(this.componentId);
        let errors = new Array();
        if (cmp) {
            this.errorStrategy = cmp.errorStrategy || DynamicComponentErrorStrategy.CUSTOM;
            if (this.executeResolvers) {
                const [resolvedConfig] = await this.dynamicComponentService.executeResolvers([
                    { componentId: this.componentId, config: this.config }
                ]);
                Object.entries(resolvedConfig).forEach(([key, value]) => set(this.config, key, value));
            }
            const resolvedValuesOfConfiguration = cmp.resolve
                ? Object.keys(cmp.resolve).map(resolvedKey => get(this.config, resolvedKey))
                : [];
            const flattenedResolvedValuesOfConfiguration = flatten(resolvedValuesOfConfiguration);
            errors = flattenedResolvedValuesOfConfiguration.filter(potentialError => potentialError && potentialError instanceof DynamicComponentAlert);
            if (errors.length && cmp.errorStrategy === DynamicComponentErrorStrategy.NOT_RENDER) {
                return;
            }
        }
        await this.loadComponent(cmp, errors);
        this.emitChangeOnComponent(changes);
    }
    /**
     * If an outside component changes the configuration, this function triggers ngOnChange on the dynamic component.
     * @param newConfigValues The new configuration value.
     */
    emitConfigChange(newConfigValues) {
        if (!this.componentInstance) {
            return;
        }
        const oldConfig = cloneDeep(this.config);
        Object.assign(this.config, newConfigValues);
        this.componentInstance.config = this.config;
        this.emitChangeOnComponent({ config: new SimpleChange(oldConfig, this.config, false) });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    emitChangeOnComponent(changes) {
        const ngOnChanges = this.componentRef?.instance?.ngOnChanges;
        if (ngOnChanges) {
            ngOnChanges.call(this.componentRef.instance, changes);
        }
    }
    async loadComponent(dynamicComponent, errors = []) {
        try {
            this.error = undefined;
            const componentType = await this.getComponentType(dynamicComponent);
            this.host.clear();
            this.componentRef = this.host.createComponent(componentType, {
                environmentInjector: (dynamicComponent.injector || this.injector)
            });
            this.componentInstance = this.componentRef.instance;
            this.componentInstance.config = this.config;
            this.componentInstance.alerts = new DynamicComponentAlertAggregator(errors);
            this.subscribeForOverlayChange();
        }
        catch (ex) {
            this.error = ex;
            console.warn(ex);
        }
    }
    async getComponentType(dynamicComponent) {
        if (isLazyDynamicComponents(dynamicComponent)) {
            const componentPromiseFunction = this.mode === 'component'
                ? dynamicComponent.loadComponent
                : dynamicComponent.loadConfigComponent;
            if (!componentPromiseFunction) {
                return;
            }
            return await componentPromiseFunction();
        }
        else if (isEagerDynamicComponents(dynamicComponent)) {
            return this.mode === 'component'
                ? dynamicComponent.component
                : dynamicComponent.configComponent;
        }
    }
    subscribeForOverlayChange() {
        this.componentInstance.alerts.anyAlertExists$
            .pipe(takeUntil(this.destroy$))
            .subscribe(anyAlertsExists => this.updateWidgetClasses.emit({ 'alerts-overlay': anyAlertsExists }));
    }
    callOnBeforeSaveHook() {
        if (!this.componentRef) {
            return of(true);
        }
        const hook = this.componentRef.instance.onBeforeSave;
        if (hook) {
            const result = hook.call(this.componentRef.instance, this.config);
            if (isUndefined(result)) {
                return of(true);
            }
            return isObservable(result) ? result : of(result);
        }
        return of(true);
    }
}
DynamicComponentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicComponentComponent, deps: [{ token: i1.DynamicComponentService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
DynamicComponentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DynamicComponentComponent, selector: "c8y-dynamic-component", inputs: { componentId: "componentId", config: "config", mode: "mode", notFoundError: "notFoundError", executeResolvers: "executeResolvers" }, outputs: { updateWidgetClasses: "updateWidgetClasses" }, viewQueries: [{ propertyName: "host", first: true, predicate: ["host"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"error && notFoundError\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted m-t-8\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i c8yIcon=\"chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n\n<div\n  class=\"overlay-center-vertically d-flex d-col a-i-stretch j-c-start p-16 p-r-24 p-l-24\"\n  *ngIf=\"\n    errorStrategy === dynamicComponentErrorStrategy.OVERLAY_ERROR &&\n      componentInstance?.alerts?.anyAlertExists$ | async\n  \"\n>\n  <c8y-dynamic-component-alerts [alerts]=\"componentInstance.alerts\"></c8y-dynamic-component-alerts>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.CollapseDirective, selector: "[collapse]", inputs: ["display", "isAnimated", "collapse"], outputs: ["collapsed", "collapses", "expanded", "expands"], exportAs: ["bs-collapse"] }, { kind: "component", type: i6.DynamicComponentAlertsComponent, selector: "c8y-dynamic-component-alerts", inputs: ["alerts"] }, { kind: "pipe", type: i7.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicComponentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-dynamic-component', template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"error && notFoundError\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted m-t-8\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i c8yIcon=\"chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n\n<div\n  class=\"overlay-center-vertically d-flex d-col a-i-stretch j-c-start p-16 p-r-24 p-l-24\"\n  *ngIf=\"\n    errorStrategy === dynamicComponentErrorStrategy.OVERLAY_ERROR &&\n      componentInstance?.alerts?.anyAlertExists$ | async\n  \"\n>\n  <c8y-dynamic-component-alerts [alerts]=\"componentInstance.alerts\"></c8y-dynamic-component-alerts>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DynamicComponentService }, { type: i0.Injector }]; }, propDecorators: { componentId: [{
                type: Input
            }], config: [{
                type: Input
            }], mode: [{
                type: Input
            }], notFoundError: [{
                type: Input
            }], executeResolvers: [{
                type: Input
            }], updateWidgetClasses: [{
                type: Output
            }], host: [{
                type: ViewChild,
                args: ['host', { read: ViewContainerRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
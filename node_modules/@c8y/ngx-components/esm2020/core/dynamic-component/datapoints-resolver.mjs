import { Injectable } from '@angular/core';
import { pick } from 'lodash-es';
import { map } from 'rxjs/operators';
import { DynamicManagedObjectResolver } from './managedObject-resolver';
import * as i0 from "@angular/core";
import * as i1 from "./managedObject-resolver";
/**
 * A DynamicDetailsResolver responsible to resolve configured datapoints for dynamic components.
 * This service implements bulk resolving and uses the DynamicManagedObjectResolver in the background.
 * It will update the datapoint details with the current values from the datapoint library and
 * also updates the target of the datapoint in case e.g. the name changed.
 */
export class DynamicDatapointsResolver {
    constructor(moResolver) {
        this.moResolver = moResolver;
    }
    resolve(config, attribute, bulkRequestId) {
        const datapoints = config[attribute];
        if (!datapoints || !Array.isArray(datapoints) || !datapoints.length) {
            return [];
        }
        const templateIds = datapoints.filter(dp => !!dp.__template).map(dp => `${dp.__template}`);
        const targetIds = datapoints.filter(dp => !!dp.__target?.id).map(dp => `${dp.__target?.id}`);
        const moIds = [...templateIds, ...targetIds];
        this.moResolver.addIdsToBeLoaded(bulkRequestId, ...moIds);
        return this.moResolver
            .getResult$(bulkRequestId)
            .pipe(map(({ result: updatedMos, errors: _errors }) => this.assignUpdatedValues(datapoints, updatedMos)));
    }
    serialize(config, attribute) {
        const valueBehindAttribute = config[attribute];
        if (!Array.isArray(valueBehindAttribute)) {
            return config[attribute];
        }
        valueBehindAttribute.forEach(value => {
            if (value.__target) {
                value.__target = pick(value.__target, ['id', 'name']);
            }
        });
        return valueBehindAttribute;
    }
    assignUpdatedValues(oldDatapoints, currentManagedObjects) {
        return oldDatapoints.map(dp => this.assignUpdatedValuesToSingleDatapoint(dp, currentManagedObjects));
    }
    assignUpdatedValuesToSingleDatapoint(datapoint, currentManagedObjects) {
        if (datapoint.__template) {
            const foundUpdatedDp = currentManagedObjects.find(mo => mo.id === datapoint.__template || mo.id === `${datapoint.__template}`);
            if (!foundUpdatedDp) {
                return datapoint;
            }
            const updatedDatapoint = Object.assign({}, foundUpdatedDp.c8y_Kpi, {
                __template: foundUpdatedDp.id
            });
            Object.assign(datapoint, updatedDatapoint);
        }
        if (datapoint.__target?.id) {
            const foundUpdatedTarget = currentManagedObjects.find(mo => mo.id === datapoint.__target?.id || mo.id === `${datapoint.__target?.id}`);
            if (foundUpdatedTarget) {
                Object.assign(datapoint.__target, foundUpdatedTarget);
            }
        }
        return datapoint;
    }
}
DynamicDatapointsResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicDatapointsResolver, deps: [{ token: i1.DynamicManagedObjectResolver }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicDatapointsResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicDatapointsResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicDatapointsResolver, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DynamicManagedObjectResolver }]; } });
//# sourceMappingURL=data:application/json;base64,
import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common/extension-hooks';
/**
 * Time the hook waits until it emits an undefined value.
 * Used for not defined widgets -> by default after 5s we
 * show an error that the widget could not be loaded.
 */
export const RESOLVING_COMPONENT_WAIT_TIME = new InjectionToken('RESOLVING_COMPONENT_WAIT_TIME');
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 * @deprecated Consider using the `hookComponent` function instead.
 */
export const HOOK_COMPONENTS = new InjectionToken('HOOK_COMPONENTS');
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 *
 * You can either provide a single `DynamicComponentDefinition` as parameter:
 * ```typescript
 *  hookComponent(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookComponent([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DynamicComponentDefinition>`
 * ```typescript
 *  export class MyDynamicComponentDefinitionFactory implements ExtensionFactory<DynamicComponentDefinition> {...}
 *  ...
 *  hookComponent(MyDynamicComponentDefinitionFactory)
 * ```
 * A typed alternative to `HOOK_COMPONENTS`.
 * @param components The `DynamicComponentDefinition`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookComponent(components, options) {
    return hookGeneric(components, HOOK_COMPONENTS, options);
}
export function isLazyDynamicComponents(componentDefinition) {
    return !!componentDefinition?.loadComponent;
}
export function isEagerDynamicComponents(componentDefinition) {
    return !!componentDefinition?.component;
}
export var DynamicComponentErrorStrategy;
(function (DynamicComponentErrorStrategy) {
    /**
     * Will not render/initialize the Widget in case an error was detected.
     */
    DynamicComponentErrorStrategy["NOT_RENDER"] = "NOT_RENDER";
    /**
     * Will add an overlay over the Widget, displaying the error message.
     */
    DynamicComponentErrorStrategy["OVERLAY_ERROR"] = "OVERLAY_ERROR";
    /**
     * The widget implements error handling on its own.
     */
    DynamicComponentErrorStrategy["CUSTOM"] = "CUSTOM";
})(DynamicComponentErrorStrategy || (DynamicComponentErrorStrategy = {}));
//# sourceMappingURL=data:application/json;base64,
import { cloneDeep } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { DismissAlertStrategy } from './dynamic-component-alert.model';
/**
 * Order of widget alerts due to alerts severity.
 */
const WIDGET_ALERTS_ORDER = ['danger', 'warning', 'info'];
export class DynamicComponentAlertAggregator {
    constructor(alerts = []) {
        this.anyAlertExistsSubject = new BehaviorSubject(false);
        this.anyAlertExists$ = this.anyAlertExistsSubject.asObservable();
        this.initAlertsGroups();
        this.setAlerts(alerts);
    }
    /**
     * Adds alert to aggregator.
     *
     * @param {DynamicComponentAlert[]} alerts List of alerts that should be added to aggregator.
     *
     */
    addAlerts(...alerts) {
        this.setAlerts(alerts);
    }
    /**
     * Remove alerts in group by provided alert type or removes all alerts when no param is provided.
     *
     * @param {AlertType} type Type of alerts group that should be removed.
     *
     */
    clear(type) {
        if (type) {
            this.aggregatedAlertsData.get(type).alerts = [];
        }
        else {
            this.aggregatedAlertsData.forEach(value => (value.alerts = []));
        }
        this.onDataChanged();
    }
    /**
     * Sets possibility of alert to be dismissed in specific way.
     *
     * @param {AlertType} alertType Type of alerts for which the dismissal strategy should be set.
     * @param {dismissStrategy} dismissStrategy Type of dismissal strategy that will be set for the alert type.
     *
     */
    setAlertGroupDismissStrategy(alertType, dismissStrategy) {
        this.aggregatedAlertsData.get(alertType).alertDismissal.dismissStrategy = dismissStrategy;
        this.onDataChanged();
    }
    /**
     * Removes alerts in group due to dismissal dismissStrategy and sets userDismissalChoice property.
     * If group has dismissal strategy declared as TEMPORARY_OR_PERMANENT, its userDismissalChoice property can be set to
     * REMIND_ALLOWED or REMIND_DISALLOWED depending on parameter.
     *
     * @param {AlertType} alertType Type of alerts group that should be dismissed.
     * @param {boolean} permanent Determines whether the dismissal of alerts of a given type is permanent.
     *
     */
    dismissAlertGroup(alertType, isPermanent = false) {
        const groupDismissStrategy = this.aggregatedAlertsData.get(alertType).alertDismissal.dismissStrategy;
        switch (groupDismissStrategy) {
            case DismissAlertStrategy.NONE:
                return;
            case DismissAlertStrategy.TEMPORARY:
                this.aggregatedAlertsData.get(alertType).alertDismissal.userDismissalChoice =
                    'REMIND_ALLOWED';
                break;
            case DismissAlertStrategy.TEMPORARY_OR_PERMANENT:
                this.aggregatedAlertsData.get(alertType).alertDismissal.userDismissalChoice = isPermanent
                    ? 'REMIND_DISALLOWED'
                    : 'REMIND_ALLOWED';
        }
        this.clear(alertType);
    }
    /**
     * Alert aggregator as a widget property should not be serialized and stored in database.
     */
    toJSON() {
        return undefined;
    }
    initAlertsGroups() {
        this.aggregatedAlertsData = new Map(WIDGET_ALERTS_ORDER.map(alertType => {
            return [
                alertType,
                {
                    alerts: [],
                    alertDismissal: { dismissStrategy: DismissAlertStrategy.NONE }
                }
            ];
        }));
    }
    setAlerts(alerts) {
        alerts.forEach(alert => {
            if (this.aggregatedAlertsData.get(alert.type).alertDismissal.userDismissalChoice ===
                'REMIND_DISALLOWED') {
                return;
            }
            if (!this.aggregatedAlertsData.get(alert.type)) {
                this.aggregatedAlertsData.get(alert.type).alerts = [];
            }
            this.aggregatedAlertsData.get(alert.type).alerts.push(alert);
        });
        this.onDataChanged();
    }
    onDataChanged() {
        this.alertGroups = [...cloneDeep(this.aggregatedAlertsData)].map(([key, value]) => ({
            type: key,
            value
        }));
        queueMicrotask(() => {
            this.anyAlertExistsSubject.next(this.alertGroups.some(({ value }) => !!value.alerts.length));
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQtYWxlcnQtYWdncmVnYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQtYWxlcnQtYWdncmVnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUdMLG9CQUFvQixFQUVyQixNQUFNLGlDQUFpQyxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxtQkFBbUIsR0FBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXZFLE1BQU0sT0FBTywrQkFBK0I7SUFlMUMsWUFBWSxTQUFrQyxFQUFFO1FBRnhDLDBCQUFxQixHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBR2xFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLEdBQUcsTUFBK0I7UUFDMUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsSUFBZ0I7UUFDcEIsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDakQ7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsS0FB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Q2xGLElBQUksRUFBRSxHQUFHO1lBQ1QsS0FBSztTQUNOLENBQUMsQ0FBQyxDQUFDO1FBQ0osY0FBYyxDQUFDLEdBQUcsRUFBRTtZQUNsQixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMvRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIEFsZXJ0R3JvdXBEYXRhLFxuICBBbGVydFR5cGUsXG4gIERpc21pc3NBbGVydFN0cmF0ZWd5LFxuICBEeW5hbWljQ29tcG9uZW50QWxlcnRcbn0gZnJvbSAnLi9keW5hbWljLWNvbXBvbmVudC1hbGVydC5tb2RlbCc7XG5cbi8qKlxuICogT3JkZXIgb2Ygd2lkZ2V0IGFsZXJ0cyBkdWUgdG8gYWxlcnRzIHNldmVyaXR5LlxuICovXG5jb25zdCBXSURHRVRfQUxFUlRTX09SREVSOiBBbGVydFR5cGVbXSA9IFsnZGFuZ2VyJywgJ3dhcm5pbmcnLCAnaW5mbyddO1xuXG5leHBvcnQgY2xhc3MgRHluYW1pY0NvbXBvbmVudEFsZXJ0QWdncmVnYXRvciB7XG4gIGFueUFsZXJ0RXhpc3RzJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgLyoqXG4gICAqIEFycmF5IGNvbnRhaW5pbmcgZ3JvdXBlZCBhbGVydHMgd2l0aCBkYXRhIG5lY2Vzc2FyeSB0byBkaXNwbGF5IGFsZXJ0cyBhbmQgd2hldGhlciBhbGVydCBncm91cCBzaG91bGQgYmUgZGlzbWlzc2libGUuXG4gICAqL1xuICBhbGVydEdyb3VwczogQXJyYXk8e1xuICAgIHR5cGU6IEFsZXJ0VHlwZTtcbiAgICB2YWx1ZTogQWxlcnRHcm91cERhdGE7XG4gIH0+O1xuICAvKipcbiAgICogUHJpdmF0ZSBNYXAgb2YgYWxlcnRzIGRhdGEuXG4gICAqL1xuICBwcml2YXRlIGFnZ3JlZ2F0ZWRBbGVydHNEYXRhOiBNYXA8QWxlcnRUeXBlLCBBbGVydEdyb3VwRGF0YT47XG4gIHByaXZhdGUgYW55QWxlcnRFeGlzdHNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IoYWxlcnRzOiBEeW5hbWljQ29tcG9uZW50QWxlcnRbXSA9IFtdKSB7XG4gICAgdGhpcy5hbnlBbGVydEV4aXN0cyQgPSB0aGlzLmFueUFsZXJ0RXhpc3RzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB0aGlzLmluaXRBbGVydHNHcm91cHMoKTtcbiAgICB0aGlzLnNldEFsZXJ0cyhhbGVydHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYWxlcnQgdG8gYWdncmVnYXRvci5cbiAgICpcbiAgICogQHBhcmFtIHtEeW5hbWljQ29tcG9uZW50QWxlcnRbXX0gYWxlcnRzIExpc3Qgb2YgYWxlcnRzIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIGFnZ3JlZ2F0b3IuXG4gICAqXG4gICAqL1xuICBhZGRBbGVydHMoLi4uYWxlcnRzOiBEeW5hbWljQ29tcG9uZW50QWxlcnRbXSkge1xuICAgIHRoaXMuc2V0QWxlcnRzKGFsZXJ0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsZXJ0cyBpbiBncm91cCBieSBwcm92aWRlZCBhbGVydCB0eXBlIG9yIHJlbW92ZXMgYWxsIGFsZXJ0cyB3aGVuIG5vIHBhcmFtIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FsZXJ0VHlwZX0gdHlwZSBUeXBlIG9mIGFsZXJ0cyBncm91cCB0aGF0IHNob3VsZCBiZSByZW1vdmVkLlxuICAgKlxuICAgKi9cbiAgY2xlYXIodHlwZT86IEFsZXJ0VHlwZSkge1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldCh0eXBlKS5hbGVydHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZ2dyZWdhdGVkQWxlcnRzRGF0YS5mb3JFYWNoKHZhbHVlID0+ICh2YWx1ZS5hbGVydHMgPSBbXSkpO1xuICAgIH1cbiAgICB0aGlzLm9uRGF0YUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHBvc3NpYmlsaXR5IG9mIGFsZXJ0IHRvIGJlIGRpc21pc3NlZCBpbiBzcGVjaWZpYyB3YXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QWxlcnRUeXBlfSBhbGVydFR5cGUgVHlwZSBvZiBhbGVydHMgZm9yIHdoaWNoIHRoZSBkaXNtaXNzYWwgc3RyYXRlZ3kgc2hvdWxkIGJlIHNldC5cbiAgICogQHBhcmFtIHtkaXNtaXNzU3RyYXRlZ3l9IGRpc21pc3NTdHJhdGVneSBUeXBlIG9mIGRpc21pc3NhbCBzdHJhdGVneSB0aGF0IHdpbGwgYmUgc2V0IGZvciB0aGUgYWxlcnQgdHlwZS5cbiAgICpcbiAgICovXG4gIHNldEFsZXJ0R3JvdXBEaXNtaXNzU3RyYXRlZ3koYWxlcnRUeXBlOiBBbGVydFR5cGUsIGRpc21pc3NTdHJhdGVneTogRGlzbWlzc0FsZXJ0U3RyYXRlZ3kpIHtcbiAgICB0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldChhbGVydFR5cGUpLmFsZXJ0RGlzbWlzc2FsLmRpc21pc3NTdHJhdGVneSA9IGRpc21pc3NTdHJhdGVneTtcbiAgICB0aGlzLm9uRGF0YUNoYW5nZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsZXJ0cyBpbiBncm91cCBkdWUgdG8gZGlzbWlzc2FsIGRpc21pc3NTdHJhdGVneSBhbmQgc2V0cyB1c2VyRGlzbWlzc2FsQ2hvaWNlIHByb3BlcnR5LlxuICAgKiBJZiBncm91cCBoYXMgZGlzbWlzc2FsIHN0cmF0ZWd5IGRlY2xhcmVkIGFzIFRFTVBPUkFSWV9PUl9QRVJNQU5FTlQsIGl0cyB1c2VyRGlzbWlzc2FsQ2hvaWNlIHByb3BlcnR5IGNhbiBiZSBzZXQgdG9cbiAgICogUkVNSU5EX0FMTE9XRUQgb3IgUkVNSU5EX0RJU0FMTE9XRUQgZGVwZW5kaW5nIG9uIHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtBbGVydFR5cGV9IGFsZXJ0VHlwZSBUeXBlIG9mIGFsZXJ0cyBncm91cCB0aGF0IHNob3VsZCBiZSBkaXNtaXNzZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGVybWFuZW50IERldGVybWluZXMgd2hldGhlciB0aGUgZGlzbWlzc2FsIG9mIGFsZXJ0cyBvZiBhIGdpdmVuIHR5cGUgaXMgcGVybWFuZW50LlxuICAgKlxuICAgKi9cbiAgZGlzbWlzc0FsZXJ0R3JvdXAoYWxlcnRUeXBlOiBBbGVydFR5cGUsIGlzUGVybWFuZW50ID0gZmFsc2UpIHtcbiAgICBjb25zdCBncm91cERpc21pc3NTdHJhdGVneSA9XG4gICAgICB0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldChhbGVydFR5cGUpLmFsZXJ0RGlzbWlzc2FsLmRpc21pc3NTdHJhdGVneTtcblxuICAgIHN3aXRjaCAoZ3JvdXBEaXNtaXNzU3RyYXRlZ3kpIHtcbiAgICAgIGNhc2UgRGlzbWlzc0FsZXJ0U3RyYXRlZ3kuTk9ORTpcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBEaXNtaXNzQWxlcnRTdHJhdGVneS5URU1QT1JBUlk6XG4gICAgICAgIHRoaXMuYWdncmVnYXRlZEFsZXJ0c0RhdGEuZ2V0KGFsZXJ0VHlwZSkuYWxlcnREaXNtaXNzYWwudXNlckRpc21pc3NhbENob2ljZSA9XG4gICAgICAgICAgJ1JFTUlORF9BTExPV0VEJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERpc21pc3NBbGVydFN0cmF0ZWd5LlRFTVBPUkFSWV9PUl9QRVJNQU5FTlQ6XG4gICAgICAgIHRoaXMuYWdncmVnYXRlZEFsZXJ0c0RhdGEuZ2V0KGFsZXJ0VHlwZSkuYWxlcnREaXNtaXNzYWwudXNlckRpc21pc3NhbENob2ljZSA9IGlzUGVybWFuZW50XG4gICAgICAgICAgPyAnUkVNSU5EX0RJU0FMTE9XRUQnXG4gICAgICAgICAgOiAnUkVNSU5EX0FMTE9XRUQnO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoYWxlcnRUeXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGVydCBhZ2dyZWdhdG9yIGFzIGEgd2lkZ2V0IHByb3BlcnR5IHNob3VsZCBub3QgYmUgc2VyaWFsaXplZCBhbmQgc3RvcmVkIGluIGRhdGFiYXNlLlxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGluaXRBbGVydHNHcm91cHMoKSB7XG4gICAgdGhpcy5hZ2dyZWdhdGVkQWxlcnRzRGF0YSA9IG5ldyBNYXAoXG4gICAgICBXSURHRVRfQUxFUlRTX09SREVSLm1hcChhbGVydFR5cGUgPT4ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGFsZXJ0VHlwZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhbGVydHM6IFtdLFxuICAgICAgICAgICAgYWxlcnREaXNtaXNzYWw6IHsgZGlzbWlzc1N0cmF0ZWd5OiBEaXNtaXNzQWxlcnRTdHJhdGVneS5OT05FIH1cbiAgICAgICAgICB9IGFzIEFsZXJ0R3JvdXBEYXRhXG4gICAgICAgIF07XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldEFsZXJ0cyhhbGVydHM6IER5bmFtaWNDb21wb25lbnRBbGVydFtdKSB7XG4gICAgYWxlcnRzLmZvckVhY2goYWxlcnQgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldChhbGVydC50eXBlKS5hbGVydERpc21pc3NhbC51c2VyRGlzbWlzc2FsQ2hvaWNlID09PVxuICAgICAgICAnUkVNSU5EX0RJU0FMTE9XRUQnXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldChhbGVydC50eXBlKSkge1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhLmdldChhbGVydC50eXBlKS5hbGVydHMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWdncmVnYXRlZEFsZXJ0c0RhdGEuZ2V0KGFsZXJ0LnR5cGUpLmFsZXJ0cy5wdXNoKGFsZXJ0KTtcbiAgICB9KTtcbiAgICB0aGlzLm9uRGF0YUNoYW5nZWQoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25EYXRhQ2hhbmdlZCgpIHtcbiAgICB0aGlzLmFsZXJ0R3JvdXBzID0gWy4uLmNsb25lRGVlcCh0aGlzLmFnZ3JlZ2F0ZWRBbGVydHNEYXRhKV0ubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICB0eXBlOiBrZXksXG4gICAgICB2YWx1ZVxuICAgIH0pKTtcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICB0aGlzLmFueUFsZXJ0RXhpc3RzU3ViamVjdC5uZXh0KHRoaXMuYWxlcnRHcm91cHMuc29tZSgoeyB2YWx1ZSB9KSA9PiAhIXZhbHVlLmFsZXJ0cy5sZW5ndGgpKTtcbiAgICB9KTtcbiAgfVxufVxuIl19
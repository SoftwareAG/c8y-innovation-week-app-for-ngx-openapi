import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { combineLatest, timer } from 'rxjs';
import { distinctUntilChanged, filter, mergeMap, shareReplay, take, takeUntil } from 'rxjs/operators';
import { ExtensionPointForPlugins, fromTriggerOnce, getInjectedHooks, stateToFactory } from '../common/extension-hooks';
import { PluginsResolveService } from '../plugins';
import { HOOK_COMPONENTS, RESOLVING_COMPONENT_WAIT_TIME } from './dynamic-component.model';
import { DynamicResolverService } from './dynamic-resolver.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./dynamic-resolver.service";
import * as i3 from "../plugins";
export class DynamicComponentService extends ExtensionPointForPlugins {
    constructor(rootInjector, router, waitTimeout, dynamicResolver, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.waitTimeout = waitTimeout;
        this.dynamicResolver = dynamicResolver;
        this.plugins = plugins;
        this.DEFAULT_WAIT_TIMEOUT = 5000;
        this.items$ = this.setupItemsObservable();
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById(id) {
        if (!id) {
            return Promise.resolve(undefined);
        }
        return this.items$
            .pipe(mergeMap((cmps) => cmps), filter((cmp) => cmp.id === id), take(1))
            .toPromise();
    }
    add(component) {
        this.state.add(component);
        this.emitNewState();
    }
    remove(component) {
        this.state.delete(component);
        this.emitNewState();
    }
    async executeResolvers(componentIdAndConfig) {
        const dynamicDef = await Promise.all(componentIdAndConfig.map(({ componentId }) => this.getById(componentId)));
        const result = await this.dynamicResolver.executeResolvers(componentIdAndConfig, dynamicDef);
        return result;
    }
    async serializeConfigs(componentIdAndConfig) {
        const dynamicDef = await Promise.all(componentIdAndConfig.map(({ componentId }) => this.getById(componentId)));
        return this.dynamicResolver.serialize(componentIdAndConfig, dynamicDef);
    }
    setupItemsObservable() {
        const remotesLoaded$ = this.plugins.allPluginsLoaded$.pipe(filter(loaded => !!loaded), take(1));
        return fromTriggerOnce(this.router, this.refresh$, [
            getInjectedHooks(HOOK_COMPONENTS, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), takeUntil(combineLatest([timer(this.waitTimeout || this.DEFAULT_WAIT_TIMEOUT), remotesLoaded$])), shareReplay(1));
    }
}
DynamicComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicComponentService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: RESOLVING_COMPONENT_WAIT_TIME, optional: true }, { token: i2.DynamicResolverService }, { token: i3.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicComponentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RESOLVING_COMPONENT_WAIT_TIME]
                }] }, { type: i2.DynamicResolverService }, { type: i3.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
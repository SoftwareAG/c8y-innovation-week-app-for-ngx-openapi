import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { flatten, pick } from 'lodash';
import { DynamicBulkIIdentifiedResolver } from './abstract-id-resolver';
import { DynamicResolverService } from './dynamic-resolver.service';
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-resolver.service";
import * as i2 from "@c8y/client";
/**
 * A DynamicDetailsResolver responsible to resolve managedObjects for dynamic components.
 * This service implements bulk resolving. This reduces the number of requests made to
 * the backend by querying multiple managedObjectIds in a single request.
 */
export class DynamicManagedObjectResolver extends DynamicBulkIIdentifiedResolver {
    constructor(dynamicResolver, inventory) {
        super(dynamicResolver);
        this.dynamicResolver = dynamicResolver;
        this.inventory = inventory;
        this.typeForErrorMessage = 'managedObject';
        this.maxNumberOfManagedObjectsPerRequest = 50;
        this.queryFilter = {};
    }
    performBulkRequest(uniqIds, bulkRequestId) {
        return this.loadManagedObjectsInChunks(uniqIds, bulkRequestId);
    }
    async loadManagedObjectsInChunks(uniqIds, bulkRequestId) {
        if (!uniqIds.length) {
            return { result: [], bulkRequestId, errors: [] };
        }
        const promiseArray = new Array();
        while (uniqIds.length) {
            const idsToProcess = uniqIds.splice(0, this.maxNumberOfManagedObjectsPerRequest);
            promiseArray.push(this.loadAChunkOfManagedObjects(idsToProcess));
        }
        const result = await Promise.all(promiseArray);
        const managedObjects = flatten(result.map(tmp => tmp.managedObjects));
        const errors = flatten(result.map(tmp => tmp.errors));
        return { result: managedObjects, bulkRequestId, errors };
    }
    async loadAChunkOfManagedObjects(uniqIds) {
        const { data: managedObjects } = await this.inventory.list(Object.assign({}, this.queryFilter || {}, {
            ids: uniqIds.join(),
            pageSize: this.maxNumberOfManagedObjectsPerRequest
        }));
        const notFoundMOs = uniqIds.filter(id => !managedObjects.find(tmp => tmp.id === id));
        if (notFoundMOs.length) {
            const promArray = notFoundMOs.map(id => this.getStatusDetails(id));
            const res = await Promise.all(promArray);
            return { managedObjects, errors: res };
        }
        return { managedObjects, errors: [] };
    }
    async getStatusDetails(moId) {
        try {
            const res = await this.inventory.detail(moId);
            return { id: moId, ...pick(res.res, ['status', 'statusText']) };
        }
        catch (e) {
            return { id: moId, ...pick(e.res, ['status', 'statusText']) };
        }
    }
}
DynamicManagedObjectResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicManagedObjectResolver, deps: [{ token: i1.DynamicResolverService }, { token: i2.InventoryService }], target: i0.ɵɵFactoryTarget.Injectable });
DynamicManagedObjectResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicManagedObjectResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DynamicManagedObjectResolver, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DynamicResolverService }, { type: i2.InventoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
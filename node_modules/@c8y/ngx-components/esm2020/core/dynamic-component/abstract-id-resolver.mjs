import { pick } from 'lodash-es';
import { DynamicComponentAlert } from './dynamic-component-alert.model';
import { DynamicBulkDetailsResolver } from './dynamic-details-resolver';
export class DynamicBulkIIdentifiedResolver extends DynamicBulkDetailsResolver {
    constructor(dynamicResolver, 
    /**
     * You either have to provide the service or implement the performBulkRequest method on your own.
     */
    service) {
        super(dynamicResolver);
        this.dynamicResolver = dynamicResolver;
        this.service = service;
    }
    buildRetrievalAlert(entity, errors) {
        const moError = `"${entity.name || entity.text || '-'}" (${entity.id})`;
        let details = '';
        let foundErrorForId;
        if (errors?.length) {
            foundErrorForId = errors.find(tmp => tmp.id === entity.id);
            if (foundErrorForId) {
                details = `. ${foundErrorForId.status}: ${foundErrorForId.statusText}`;
            }
        }
        const alert = new DynamicComponentAlert({
            text: `Unable to retrieve the following ${this.typeForErrorMessage}: ${moError}${details}`,
            type: 'danger',
            unresolvedData: entity
        });
        alert.retrievalError = foundErrorForId;
        return alert;
    }
    performBulkRequest(uniqIds, bulkRequestId) {
        if (!this.service) {
            console.error(`Either provide a service to the DynamicBulkIIdentifiedResolver constructor or implement performBulkRequest yourself.`);
            return Promise.resolve({ bulkRequestId, errors: [], result: [] });
        }
        const promArray = uniqIds.map(id => this.service.detail(id).catch(res => ({ id, ...pick(res?.res, ['status', 'statusText']) })));
        return Promise.all(promArray).then(result => {
            const successfulResults = result
                .map((tmp) => tmp.data)
                .filter(tmp => !!tmp);
            const errors = result.filter((tmp) => !!tmp.id);
            return { bulkRequestId, errors, result: successfulResults };
        });
    }
    extractIdsToBeRetrieved(valueBehindAttribute) {
        if (Array.isArray(valueBehindAttribute)) {
            return valueBehindAttribute
                .map(entry => entry?.id)
                .filter(tmp => !!tmp)
                .map(tmp => `${tmp}`);
        }
        const id = valueBehindAttribute?.id;
        if (id) {
            return `${id}`;
        }
        return null;
    }
    serializeSingleObject(obj) {
        if (!obj) {
            return obj;
        }
        return pick(obj, ['id', 'name', 'text']);
    }
}
//# sourceMappingURL=data:application/json;base64,
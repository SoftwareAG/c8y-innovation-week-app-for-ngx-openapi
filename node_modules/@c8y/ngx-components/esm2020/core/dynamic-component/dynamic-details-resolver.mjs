import { cloneDeep, get, uniq } from 'lodash-es';
import { filter, map, mergeMap, share, take, tap } from 'rxjs/operators';
/**
 * An abstract class to simplify implementing the DynamicDetailsResolver interface for performing bulk resolving.
 */
export class DynamicBulkDetailsResolver {
    constructor(dynamicResolver) {
        this.dynamicResolver = dynamicResolver;
        /**
         * Map containing the ids to be retrieved per bulk request.
         */
        this.idsGroupedByBulkId = new Map();
        this.resultsOfBulkLoad = this.dynamicResolver.bulkResolvingTrigger$.pipe(map(bulkRequestId => ({
            uniqIds: uniq(this.idsGroupedByBulkId.get(bulkRequestId) || []),
            bulkRequestId
        })), tap(({ bulkRequestId }) => this.idsGroupedByBulkId.delete(bulkRequestId)), mergeMap(({ uniqIds, bulkRequestId }) => this.performBulkRequest(uniqIds, bulkRequestId)), share());
    }
    resolve(config, attribute, bulkRequestId) {
        const valueBehindAttribute = get(config, attribute);
        const idOrIds = this.extractIdsToBeRetrieved(valueBehindAttribute);
        if (!idOrIds) {
            return;
        }
        if (Array.isArray(idOrIds) && !idOrIds.length) {
            return [];
        }
        const idsArray = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
        this.addIdsToBeLoaded(bulkRequestId, ...idsArray);
        return this.getResult$(bulkRequestId).pipe(map(({ result: retrievedEntities, errors }) => {
            if (Array.isArray(idOrIds)) {
                return idOrIds.map((id, index) => retrievedEntities.find(tmp => this.isEntityOfId(tmp, id)) ||
                    this.buildRetrievalAlert(valueBehindAttribute[index], errors));
            }
            return (retrievedEntities.find(tmp => this.isEntityOfId(tmp, idOrIds)) ||
                this.buildRetrievalAlert(valueBehindAttribute, errors));
        }));
    }
    /**
     * Provides an Observable of the results of the given bulkRequestId.
     */
    getResult$(bulkRequestId) {
        return this.resultsOfBulkLoad.pipe(filter(({ bulkRequestId: bId }) => bulkRequestId === bId), map(({ result, errors }) => ({ result, errors })), take(1), map(result => cloneDeep(result)));
    }
    /**
     * Adds a single id or an array of ids to the idsGroupedByBulkId Map for the provided bulkRequestId.
     */
    addIdsToBeLoaded(bulkRequestId, ...ids) {
        let groupedIds = this.idsGroupedByBulkId.get(bulkRequestId);
        if (!groupedIds) {
            groupedIds = [];
            this.idsGroupedByBulkId.set(bulkRequestId, groupedIds);
        }
        groupedIds.push(...ids);
    }
    /**
     * Default implementation compatible with serializing an object or an Array of objects.
     * Calls serializeSingleObject for an object and for every entry within the array.
     */
    serialize(config, attribute) {
        const valueBehindAttribute = get(config, attribute);
        if (Array.isArray(valueBehindAttribute)) {
            return valueBehindAttribute.map(entry => this.serializeSingleObject(entry));
        }
        return this.serializeSingleObject(valueBehindAttribute);
    }
    /**
     * Checks wether an object is of given id.
     * Will by default compare the id attribute with the given id.
     */
    isEntityOfId(obj, id) {
        return obj?.id === id;
    }
}
//# sourceMappingURL=data:application/json;base64,
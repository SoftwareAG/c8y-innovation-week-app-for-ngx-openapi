import { Injectable, InjectionToken, Injector, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { distinctUntilChanged, filter, first, map, shareReplay } from 'rxjs/operators';
import { fromTrigger, hookGeneric, getInjectedHooks, stateToFactory, ExtensionPointForPlugins } from '../common/extension-hooks';
import { OptionsService } from '../common/options.service';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../common/options.service";
import * as i4 from "../plugins/plugins-resolve.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookTab` function instead.
 */
export const HOOK_TABS = new InjectionToken('HOOK_TABS');
/**
 * You can either provide a single `Tab` as parameter:
 * ```typescript
 *  hookTab(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookTab([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<Tab>`
 * ```typescript
 *  export class MyTabFactory implements ExtensionFactory<Tab> {...}
 *  ...
 *  hookTab(MyTabFactory)
 * ```
 * A typed alternative to `HOOK_TABS`.
 * @param tabs The `Tab`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookTab(tabs, options) {
    return hookGeneric(tabs, HOOK_TABS, options);
}
/**
 * A service which defines the used tabs.
 */
export class TabsService extends ExtensionPointForPlugins {
    constructor(rootInjector, router, translateService, options, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.translateService = translateService;
        this.options = options;
        this.items$ = this.setupItemsObservable();
        this.orientation$ = this.items$.pipe(map((tabs) => {
            const firstTabWithDefinedOrientation = tabs.find(tab => tab.orientation);
            if (firstTabWithDefinedOrientation) {
                return firstTabWithDefinedOrientation.orientation;
            }
            return this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        }), distinctUntilChanged());
    }
    prepareTabs(tabs) {
        return this.sortTabs(tabs
            .map(tab => ({
            ...tab,
            template: tab.template instanceof ViewContainerRef ? tab.template : undefined
        }))
            .filter((tab, index, self) => tab.component || index === self.findIndex(t => t.path === tab.path)));
    }
    sortTabs(tabs) {
        return tabs.sort((a, b) => {
            const priorityOrder = (b.priority || 0) - (a.priority || 0);
            if (!!priorityOrder) {
                return priorityOrder;
            }
            if (!a.label) {
                return 1;
            }
            if (!b.label) {
                return -1;
            }
            const aTranslatedLabel = this.translateService.instant(a.label);
            const bTranslatedLabel = this.translateService.instant(b.label);
            const translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return translatedLabelOrder;
        });
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    get firstTab$() {
        return this.items$.pipe(map(tabs => tabs[0]), filter(Boolean), first());
    }
    /**
     * Checks if at least one of the tabs is available.
     * @param tabLabels The array of tab labels to check.
     * @returns Returns true if at least one of the tabs is available.
     */
    areAvailable(tabLabels) {
        const currentTabsSetArray = Array.from(this.state);
        return tabLabels.some(tabLabel => currentTabsSetArray.some(tab => tab.label === tabLabel));
    }
    setupItemsObservable() {
        return fromTrigger(this.router, this.refresh$, [
            getInjectedHooks(HOOK_TABS, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), map(tabs => this.prepareTabs(tabs)), shareReplay(1));
    }
}
TabsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.TranslateService }, { token: i3.OptionsService }, { token: i4.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
TabsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.TranslateService }, { type: i3.OptionsService }, { type: i4.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
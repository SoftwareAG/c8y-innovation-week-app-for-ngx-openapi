import { ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../i18n/c8y-translate.pipe";
export class TimePickerComponent {
    constructor(cdRef) {
        this.cdRef = cdRef;
        this.lastValidHours = '00';
        this.lastValidMinutes = '00';
        this.dayForward = new EventEmitter();
        this.dayBackward = new EventEmitter();
        this.disabled = false;
        this.date = new Date();
        this.touched = false;
        this.destroy$ = new Subject();
        this.simulatedWheelUpEvent = { wheelDeltaY: 1, preventDefault: () => null };
        this.simulatedWheelDownEvent = { wheelDeltaY: -1, preventDefault: () => null };
    }
    parseValue(target, lastValid, limit) {
        this.cdRef.detectChanges();
        if (this[target].length > 0 && !/^\d+$/.test(this[target])) {
            this[target] = this[lastValid];
            return;
        }
        if (this[target].length <= 1) {
            this[target] = this[target].padStart(2, '0');
        }
        if (this[target].length > 2 && this[target].startsWith('0')) {
            this[target] = this[target].slice(1, 3);
        }
        if (this[target].length > 2) {
            this[target] = this[lastValid];
            return;
        }
        if (Number(this[target]) > limit) {
            this[target] = limit;
        }
        this[lastValid] = this[target];
    }
    initializeMinutes() {
        if (!this.hasValue(this.minutes)) {
            this.minutes = '00';
        }
    }
    initializeHours() {
        if (!this.hasValue(this.hours)) {
            this.hours = '00';
        }
    }
    handleHourScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.hours) === 23) {
                this.writeValue({ hour: 0, minute: Number(this.minutes) });
                this.dayForward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) + 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.hours) === 0) {
                this.writeValue({ hour: 23, minute: Number(this.minutes) });
                this.dayBackward.emit();
            }
            else {
                this.writeValue({ hour: Number(this.hours) - 1, minute: Number(this.minutes) });
            }
            this.emitValue();
        }
    }
    handleMinuteScroll(ev) {
        // up
        ev.preventDefault();
        if (ev.wheelDeltaY > 0) {
            if (Number(this.minutes) === 59) {
                this.writeValue({ hour: Number(this.hours), minute: 0 });
                this.handleHourScroll(this.simulatedWheelUpEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) + 1 });
            }
        }
        // down
        if (ev.wheelDeltaY < 0) {
            if (Number(this.minutes) === 0) {
                this.writeValue({ hour: Number(this.hours), minute: 59 });
                this.handleHourScroll(this.simulatedWheelDownEvent);
            }
            else {
                this.writeValue({ hour: Number(this.hours), minute: Number(this.minutes) - 1 });
            }
        }
        this.emitValue();
    }
    emitValue() {
        if (this.hasValue(this.hours) && this.hasValue(this.minutes)) {
            this.onChange({
                hour: Number(this.hours),
                minute: Number(this.minutes)
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (this.hasValue(value?.hour) && this.hasValue(value?.minute)) {
            this.hours = value.hour.toString();
            this.minutes = value.minute.toString();
            this.parseValue('hours', 'lastValidHours', 23);
            this.parseValue('minutes', 'lastValidMinutes', 59);
        }
        else {
            this.hours = undefined;
            this.minutes = undefined;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    hasValue(value) {
        return typeof value !== 'undefined';
    }
}
TimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TimePickerComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: TimePickerComponent, selector: "c8y-time-picker", inputs: { minDate: "minDate", maxDate: "maxDate", placeholder: "placeholder" }, outputs: { dayForward: "dayForward", dayBackward: "dayBackward" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => TimePickerComponent),
            multi: true
        }
    ], ngImport: i0, template: "<table>\n  <tbody>\n    <tr>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'HH`HOURS`' | translate\"\n          [(ngModel)]=\"hours\"\n          (input)=\"parseValue('hours', 'lastValidHours', 23); initializeMinutes()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleHourScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n      <td>&nbsp;:&nbsp;</td>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'MM`MINUTES`' | translate\"\n          [(ngModel)]=\"minutes\"\n          (input)=\"parseValue('minutes', 'lastValidMinutes', 59); initializeHours()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleMinuteScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n", dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TimePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-time-picker', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => TimePickerComponent),
                            multi: true
                        }
                    ], template: "<table>\n  <tbody>\n    <tr>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'HH`HOURS`' | translate\"\n          [(ngModel)]=\"hours\"\n          (input)=\"parseValue('hours', 'lastValidHours', 23); initializeMinutes()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleHourScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n      <td>&nbsp;:&nbsp;</td>\n      <td class=\"form-group\">\n        <input\n          type=\"text\"\n          class=\"form-control text-center bs-timepicker-field\"\n          [disabled]=\"disabled\"\n          [placeholder]=\"'MM`MINUTES`' | translate\"\n          [(ngModel)]=\"minutes\"\n          (input)=\"parseValue('minutes', 'lastValidMinutes', 59); initializeHours()\"\n          (change)=\"emitValue()\"\n          (wheel)=\"handleMinuteScroll($event)\"\n          (focus)=\"markAsTouched()\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], dayForward: [{
                type: Output
            }], dayBackward: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
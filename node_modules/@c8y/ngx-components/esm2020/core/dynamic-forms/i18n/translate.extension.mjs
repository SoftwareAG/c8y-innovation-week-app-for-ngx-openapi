import { combineLatest, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { gettext } from '../../i18n';
export class TranslateExtension {
    constructor(translate, parser) {
        this.translate = translate;
        this.parser = parser;
    }
    prePopulate(field) {
        const to = field.templateOptions || {};
        if (!to.label || to._translated) {
            return;
        }
        to._translated = true;
        field.expressionProperties = {
            ...(field.expressionProperties || {}),
            'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label,
            'templateOptions.description': to.description
                ? this.translate.stream(to.description)
                : to.description,
            'templateOptions.placeholder': to.placeholder
                ? combineLatest([
                    this.translate.stream(to.placeholder),
                    this.translate.stream(gettext('e.g. {{ example }}'))
                ]).pipe(map(([placeholder, expression]) => this.parser.interpolate(expression, { example: placeholder })))
                : to.placeholder,
            'templateOptions.options': (isObservable(to.options) ? to.options : of(to.options)).pipe(map((options) => (options || []).map(option => ({
                ...option,
                label: this.translate.instant(option.label)
            }))))
        };
    }
}
export function registerTranslateExtension(translate, parser) {
    return {
        extensions: [
            {
                name: 'translate',
                extension: new TranslateExtension(translate, parser)
            }
        ]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZHluYW1pYy1mb3Jtcy9pMThuL3RyYW5zbGF0ZS5leHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFBb0IsU0FBMkIsRUFBVSxNQUF1QjtRQUE1RCxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQUcsQ0FBQztJQUNwRixXQUFXLENBQUMsS0FBd0I7UUFDbEMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUMvQixPQUFPO1NBQ1I7UUFFRCxFQUFFLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN0QixLQUFLLENBQUMsb0JBQW9CLEdBQUc7WUFDM0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxFQUFFLENBQUM7WUFDckMsdUJBQXVCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSztZQUM5RSw2QkFBNkIsRUFBRSxFQUFFLENBQUMsV0FBVztnQkFDM0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUM7Z0JBQ3ZDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVztZQUNsQiw2QkFBNkIsRUFBRSxFQUFFLENBQUMsV0FBVztnQkFDM0MsQ0FBQyxDQUFDLGFBQWEsQ0FBQztvQkFDWixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO29CQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztpQkFDckQsQ0FBQyxDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLENBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUM5RCxDQUNGO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVztZQUNsQix5QkFBeUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RGLEdBQUcsQ0FBQyxDQUFDLE9BQWlDLEVBQUUsRUFBRSxDQUN4QyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QixHQUFHLE1BQU07Z0JBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDNUMsQ0FBQyxDQUFDLENBQ0osQ0FDRjtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsU0FBMkIsRUFBRSxNQUF1QjtJQUM3RixPQUFPO1FBQ0wsVUFBVSxFQUFFO1lBQ1Y7Z0JBQ0UsSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLFNBQVMsRUFBRSxJQUFJLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUM7YUFDckQ7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVBhcnNlciwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgaXNPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uL2kxOG4nO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlRXh0ZW5zaW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsIHByaXZhdGUgcGFyc2VyOiBUcmFuc2xhdGVQYXJzZXIpIHt9XG4gIHByZVBvcHVsYXRlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgIGNvbnN0IHRvID0gZmllbGQudGVtcGxhdGVPcHRpb25zIHx8IHt9O1xuICAgIGlmICghdG8ubGFiZWwgfHwgdG8uX3RyYW5zbGF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0by5fdHJhbnNsYXRlZCA9IHRydWU7XG4gICAgZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXMgPSB7XG4gICAgICAuLi4oZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXMgfHwge30pLFxuICAgICAgJ3RlbXBsYXRlT3B0aW9ucy5sYWJlbCc6IHRvLmxhYmVsID8gdGhpcy50cmFuc2xhdGUuc3RyZWFtKHRvLmxhYmVsKSA6IHRvLmxhYmVsLFxuICAgICAgJ3RlbXBsYXRlT3B0aW9ucy5kZXNjcmlwdGlvbic6IHRvLmRlc2NyaXB0aW9uXG4gICAgICAgID8gdGhpcy50cmFuc2xhdGUuc3RyZWFtKHRvLmRlc2NyaXB0aW9uKVxuICAgICAgICA6IHRvLmRlc2NyaXB0aW9uLFxuICAgICAgJ3RlbXBsYXRlT3B0aW9ucy5wbGFjZWhvbGRlcic6IHRvLnBsYWNlaG9sZGVyXG4gICAgICAgID8gY29tYmluZUxhdGVzdChbXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZS5zdHJlYW0odG8ucGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUuc3RyZWFtKGdldHRleHQoJ2UuZy4ge3sgZXhhbXBsZSB9fScpKVxuICAgICAgICAgIF0pLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFtwbGFjZWhvbGRlciwgZXhwcmVzc2lvbl0pID0+XG4gICAgICAgICAgICAgIHRoaXMucGFyc2VyLmludGVycG9sYXRlKGV4cHJlc3Npb24sIHsgZXhhbXBsZTogcGxhY2Vob2xkZXIgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIDogdG8ucGxhY2Vob2xkZXIsXG4gICAgICAndGVtcGxhdGVPcHRpb25zLm9wdGlvbnMnOiAoaXNPYnNlcnZhYmxlKHRvLm9wdGlvbnMpID8gdG8ub3B0aW9ucyA6IG9mKHRvLm9wdGlvbnMpKS5waXBlKFxuICAgICAgICBtYXAoKG9wdGlvbnM6IEFycmF5PHsgbGFiZWw6IHN0cmluZyB9PikgPT5cbiAgICAgICAgICAob3B0aW9ucyB8fCBbXSkubWFwKG9wdGlvbiA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQob3B0aW9uLmxhYmVsKVxuICAgICAgICAgIH0pKVxuICAgICAgICApXG4gICAgICApXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2xhdGVFeHRlbnNpb24odHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlcikge1xuICByZXR1cm4ge1xuICAgIGV4dGVuc2lvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3RyYW5zbGF0ZScsXG4gICAgICAgIGV4dGVuc2lvbjogbmV3IFRyYW5zbGF0ZUV4dGVuc2lvbih0cmFuc2xhdGUsIHBhcnNlcilcbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG4iXX0=
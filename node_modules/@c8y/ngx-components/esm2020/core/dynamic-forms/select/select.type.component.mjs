import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
import { defer, isObservable, of } from 'rxjs';
import { map, startWith, switchMap } from 'rxjs/operators';
import { gettext } from '../../i18n';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@ngx-formly/core";
import * as i5 from "../../i18n/c8y-translate.pipe";
export class SelectComponent extends FieldType {
    constructor(translateService) {
        super();
        this.translateService = translateService;
        this.labelProp = 'label';
        this.valueProp = 'value';
        this.placeholder$ = defer(() => of(this.properties?.placeholder)).pipe(switchMap(placeholder => placeholder
            ? of(placeholder)
            : this.defaultPlaceholder$.pipe(startWith(this.translateService.instant(gettext('Select your option'))))));
        this.defaultPlaceholder$ = defer(() => isObservable(this.properties?.options) ? this.properties?.options : of(this.properties?.options)).pipe(map(data => get(data[0], this.labelProp)), map(example => this.translateService.instant(!example ? gettext('No items') : gettext('Select your option, for example, {{ example }}'), { example })));
    }
    ngOnInit() {
        this.properties = this.props || this.to;
        if (this.properties?.labelProp?.length > 0) {
            this.labelProp = this.properties.labelProp;
        }
        if (this.properties?.valueProp?.length > 0) {
            this.valueProp = this.properties.valueProp;
        }
    }
}
SelectComponent.CONFIG = {
    types: [
        { name: 'select', component: SelectComponent, wrappers: ['c8y-form-field'] },
        { name: 'enum', extends: 'select' }
    ]
};
SelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
SelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SelectComponent, selector: "c8y-select-type", usesInheritance: true, ngImport: i0, template: "<div class=\"c8y-select-wrapper\">\n  <select\n    class=\"form-control\"\n    [formControl]=\"formControl\"\n    [class.is-invalid]=\"showError\"\n    [formlyAttributes]=\"field\"\n    [required]=\"to.required\"\n  >\n    <option [ngValue]=\"undefined\" selected disabled>{{ placeholder$ | async | translate }}</option>\n    <ng-container *ngFor=\"let opt of to.options\">\n      <option [ngValue]=\"opt[valueProp]\" [disabled]=\"opt.disabled || false\">\n        {{ opt[labelProp] | translate }}\n      </option>\n    </ng-container>\n  </select>\n</div>\n  ", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.ɵFormlyAttributes, selector: "[formlyAttributes]", inputs: ["formlyAttributes", "id"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-select-type', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"c8y-select-wrapper\">\n  <select\n    class=\"form-control\"\n    [formControl]=\"formControl\"\n    [class.is-invalid]=\"showError\"\n    [formlyAttributes]=\"field\"\n    [required]=\"to.required\"\n  >\n    <option [ngValue]=\"undefined\" selected disabled>{{ placeholder$ | async | translate }}</option>\n    <ng-container *ngFor=\"let opt of to.options\">\n      <option [ngValue]=\"opt[valueProp]\" [disabled]=\"opt.disabled || false\">\n        {{ opt[labelProp] | translate }}\n      </option>\n    </ng-container>\n  </select>\n</div>\n  " }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LnR5cGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9keW5hbWljLWZvcm1zL3NlbGVjdC9zZWxlY3QudHlwZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9jb3JlL2R5bmFtaWMtZm9ybXMvc2VsZWN0L3NlbGVjdC50eXBlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFnQixTQUFTLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQzs7Ozs7OztBQU9yQyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBbUM1QyxZQUFvQixnQkFBa0M7UUFDcEQsS0FBSyxFQUFFLENBQUM7UUFEVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBM0J0RCxjQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFJcEIsaUJBQVksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQy9ELFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUN0QixXQUFXO1lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUM7WUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FDeEUsQ0FDTixDQUNGLENBQUM7UUFFRix3QkFBbUIsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQy9CLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQ2pHLENBQUMsSUFBSSxDQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQ3pDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNaLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQzNCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxFQUMxRixFQUFFLE9BQU8sRUFBRSxDQUNaLENBQ0YsQ0FDRixDQUFDO0lBSUYsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN4QyxJQUFLLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBb0IsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFtQixDQUFDO1NBQ3REO1FBRUQsSUFBSyxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQW9CLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBbUIsQ0FBQztTQUN0RDtJQUNILENBQUM7O0FBL0NlLHNCQUFNLEdBQWlCO0lBQ3JDLEtBQUssRUFBRTtRQUNMLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDNUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUU7S0FDcEM7Q0FDRixDQUFDOzRHQU5TLGVBQWU7Z0dBQWYsZUFBZSw4RUNiNUIsa2pCQWdCRTsyRkRIVyxlQUFlO2tCQUwzQixTQUFTOytCQUNFLGlCQUFpQixtQkFFVix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWdPcHRpb24sIEZpZWxkVHlwZSwgRm9ybWx5RmllbGRQcm9wcyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGRlZmVyLCBpc09ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uL2kxOG4nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2VsZWN0LXR5cGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LnR5cGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBGaWVsZFR5cGUgaW1wbGVtZW50cyBPbkluaXQge1xuICBzdGF0aWMgcmVhZG9ubHkgQ09ORklHOiBDb25maWdPcHRpb24gPSB7XG4gICAgdHlwZXM6IFtcbiAgICAgIHsgbmFtZTogJ3NlbGVjdCcsIGNvbXBvbmVudDogU2VsZWN0Q29tcG9uZW50LCB3cmFwcGVyczogWydjOHktZm9ybS1maWVsZCddIH0sXG4gICAgICB7IG5hbWU6ICdlbnVtJywgZXh0ZW5kczogJ3NlbGVjdCcgfVxuICAgIF1cbiAgfTtcblxuICBsYWJlbFByb3AgPSAnbGFiZWwnO1xuICB2YWx1ZVByb3AgPSAndmFsdWUnO1xuXG4gIHByaXZhdGUgcHJvcGVydGllczogRm9ybWx5RmllbGRQcm9wcyAmIHsgW2FkZGl0aW9pbmFsUHJvcGVydGllczogc3RyaW5nXTogdW5rbm93biB9O1xuXG4gIHBsYWNlaG9sZGVyJCA9IGRlZmVyKCgpID0+IG9mKHRoaXMucHJvcGVydGllcz8ucGxhY2Vob2xkZXIpKS5waXBlKFxuICAgIHN3aXRjaE1hcChwbGFjZWhvbGRlciA9PlxuICAgICAgcGxhY2Vob2xkZXJcbiAgICAgICAgPyBvZihwbGFjZWhvbGRlcilcbiAgICAgICAgOiB0aGlzLmRlZmF1bHRQbGFjZWhvbGRlciQucGlwZShcbiAgICAgICAgICAgIHN0YXJ0V2l0aCh0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChnZXR0ZXh0KCdTZWxlY3QgeW91ciBvcHRpb24nKSkpXG4gICAgICAgICAgKVxuICAgIClcbiAgKTtcblxuICBkZWZhdWx0UGxhY2Vob2xkZXIkID0gZGVmZXIoKCkgPT5cbiAgICBpc09ic2VydmFibGUodGhpcy5wcm9wZXJ0aWVzPy5vcHRpb25zKSA/IHRoaXMucHJvcGVydGllcz8ub3B0aW9ucyA6IG9mKHRoaXMucHJvcGVydGllcz8ub3B0aW9ucylcbiAgKS5waXBlKFxuICAgIG1hcChkYXRhID0+IGdldChkYXRhWzBdLCB0aGlzLmxhYmVsUHJvcCkpLFxuICAgIG1hcChleGFtcGxlID0+XG4gICAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcbiAgICAgICAgIWV4YW1wbGUgPyBnZXR0ZXh0KCdObyBpdGVtcycpIDogZ2V0dGV4dCgnU2VsZWN0IHlvdXIgb3B0aW9uLCBmb3IgZXhhbXBsZSwge3sgZXhhbXBsZSB9fScpLFxuICAgICAgICB7IGV4YW1wbGUgfVxuICAgICAgKVxuICAgIClcbiAgKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5wcm9wcyB8fCB0aGlzLnRvO1xuICAgIGlmICgodGhpcy5wcm9wZXJ0aWVzPy5sYWJlbFByb3AgYXMgc3RyaW5nKT8ubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5sYWJlbFByb3AgPSB0aGlzLnByb3BlcnRpZXMubGFiZWxQcm9wIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMucHJvcGVydGllcz8udmFsdWVQcm9wIGFzIHN0cmluZyk/Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMudmFsdWVQcm9wID0gdGhpcy5wcm9wZXJ0aWVzLnZhbHVlUHJvcCBhcyBzdHJpbmc7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYzh5LXNlbGVjdC13cmFwcGVyXCI+XG4gIDxzZWxlY3RcbiAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICBbY2xhc3MuaXMtaW52YWxpZF09XCJzaG93RXJyb3JcIlxuICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICBbcmVxdWlyZWRdPVwidG8ucmVxdWlyZWRcIlxuICA+XG4gICAgPG9wdGlvbiBbbmdWYWx1ZV09XCJ1bmRlZmluZWRcIiBzZWxlY3RlZCBkaXNhYmxlZD57eyBwbGFjZWhvbGRlciQgfCBhc3luYyB8IHRyYW5zbGF0ZSB9fTwvb3B0aW9uPlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG9wdCBvZiB0by5vcHRpb25zXCI+XG4gICAgICA8b3B0aW9uIFtuZ1ZhbHVlXT1cIm9wdFt2YWx1ZVByb3BdXCIgW2Rpc2FibGVkXT1cIm9wdC5kaXNhYmxlZCB8fCBmYWxzZVwiPlxuICAgICAgICB7eyBvcHRbbGFiZWxQcm9wXSB8IHRyYW5zbGF0ZSB9fVxuICAgICAgPC9vcHRpb24+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvc2VsZWN0PlxuPC9kaXY+XG4gICJdfQ==
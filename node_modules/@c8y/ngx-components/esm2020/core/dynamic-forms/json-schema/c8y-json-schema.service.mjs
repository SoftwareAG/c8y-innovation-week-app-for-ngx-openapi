import { Injectable } from '@angular/core';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
import { omit } from 'lodash-es';
import * as i0 from "@angular/core";
export class C8yJSONSchema extends FormlyJsonschema {
    toFieldConfig(schema, options) {
        const config = super.toFieldConfig(schema, this.c8yOptions((options || {}).map));
        return config;
    }
    c8yOptions(map) {
        return {
            map(mappedField, mapSource) {
                let result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = {
                        ...result,
                        defaultValue: mapSource.const,
                        type: 'input',
                        props: {
                            ...result.props,
                            type: 'hidden'
                        }
                    };
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = {
                        ...result,
                        props: {
                            ...(result.props || {}),
                            attributes: { ...result.props?.attributes, type: 'password', autocomplete: 'off' }
                        }
                    };
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = {
                        ...result,
                        props: {
                            ...(result.props || {}),
                            placeholder: mapSource.examples.join(', ')
                        }
                    };
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = {
                        ...result,
                        type: 'radio'
                    };
                }
                /** fields with `contentMediaType` or `contentEncoding` are represented as file inputs */
                if (mapSource.contentMediaType || mapSource.contentEncoding) {
                    result = {
                        ...result,
                        type: 'file',
                        props: {
                            ...(result.props || {}),
                            accept: mapSource.contentMediaType,
                            maxAllowedFiles: 1,
                            contentEncoding: mapSource.contentEncoding
                        }
                    };
                    // TODO: Remove this line when base64 encoding is done by file.type.component
                    // and control's value would pass 'string' type validator.
                    if (mapSource.contentEncoding === 'base64') {
                        result.validators = omit(result.validators, ['type']);
                    }
                }
                /** file extension validation for fields with `allowedFileTypes` */
                if (mapSource.allowedFileTypes) {
                    result = {
                        ...result,
                        type: 'file',
                        props: {
                            ...(result.props || {}),
                            ...(mapSource.allowedFileTypes && {
                                accept: mapSource.allowedFileTypes.join(',')
                            })
                        }
                    };
                }
                /** max size file validation` */
                if (mapSource.maxSize) {
                    result = {
                        ...result,
                        type: 'file',
                        props: {
                            ...(result.props || {}),
                            maxFileSizeInMegaBytes: mapSource.maxSize
                        }
                    };
                }
                /** Provides a way to use templateOptions in JSONSchema forms */
                if (mapSource.templateOptions) {
                    result = {
                        ...result,
                        props: {
                            ...mapSource.templateOptions,
                            ...result.props
                        }
                    };
                }
                return map ? map(result, mapSource) : result;
            }
        };
    }
}
C8yJSONSchema.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yJSONSchema, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
C8yJSONSchema.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yJSONSchema, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yJSONSchema, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
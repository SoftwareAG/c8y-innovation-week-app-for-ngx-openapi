import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormGroup, FormControl, NG_VALIDATORS } from '@angular/forms';
import { first, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { gettext } from '../i18n';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "ngx-bootstrap/datepicker";
import * as i3 from "../time-picker/time-picker.component";
import * as i4 from "../i18n/c8y-translate.pipe";
export class DateTimePickerComponent {
    set _minDate(value) {
        this.minDate = value ? new Date(value) : undefined;
    }
    set _maxDate(value) {
        this.maxDate = value ? new Date(value) : undefined;
    }
    constructor() {
        this.defaultPlaceholder = gettext('Select a date…');
        this.destroy$ = new Subject();
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onChange = () => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onTouched = () => { };
        this.form = new FormGroup({});
        this.form.addControl('date', new FormControl(null));
        this.form.addControl('time', new FormControl(null));
        this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value) => {
            this.setDatetime(value);
            this.previousValue = value;
        });
        this.form.statusChanges
            .pipe(first())
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.onTouched();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value) {
        if (typeof value === 'string' && value.length) {
            this.date = new Date(value);
            this.form.setValue({
                date: new Date(value),
                time: {
                    hour: this.date.getHours(),
                    minute: this.date.getMinutes()
                }
            }, { emitEvent: false });
        }
        else {
            this.form.setValue({ date: null, time: null }, { emitEvent: false });
        }
        this.previousValue = this.form.value;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(disabled) {
        if (disabled === this.form?.disabled) {
            return;
        }
        disabled ? this.form.disable() : this.form.enable();
    }
    validate(_control) {
        if (this.date?.getTime() < new Date(this.minDate).getTime()) {
            return { dateBeforeRangeMin: true };
        }
        else if (this.date?.getTime() > new Date(this.maxDate).getTime()) {
            return { dateAfterRangeMax: true };
        }
        else if (this.form.invalid) {
            return { invalidDateTime: true };
        }
        else {
            return null;
        }
    }
    previousDay() {
        this.date.setDate(this.date.getDate() - 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    nextDay() {
        this.date.setDate(this.date.getDate() + 1);
        this.setDatetime({ date: this.date, time: this.form.get('time').value });
    }
    /**
     * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
     * @param dateTime
     * @private
     */
    setDatetime(dateTime) {
        if (!dateTime.date && this.previousValue?.date) {
            this.form.get('time').setValue({ hour: undefined, minute: undefined }, { emitEvent: false });
            this.onChange(null);
            return;
        }
        if (!dateTime.date) {
            dateTime.date = new Date();
            dateTime.date.setSeconds(0);
        }
        this.date = new Date(dateTime.date);
        if (typeof dateTime.time?.hour === 'undefined' ||
            typeof dateTime.time?.minute === 'undefined') {
            dateTime.time = { hour: 0, minute: 0 };
            this.form.get('time').setValue(dateTime.time, { emitEvent: false });
        }
        this.date.setHours(dateTime.time.hour, dateTime.time.minute);
        this.form.get('date').setValue(dateTime.date, { emitEvent: false });
        this.onChange(this.date.toISOString());
    }
}
DateTimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DateTimePickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DateTimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DateTimePickerComponent, selector: "c8y-date-time-picker", inputs: { _minDate: ["minDate", "_minDate"], _maxDate: ["maxDate", "_maxDate"], placeholder: "placeholder" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DateTimePickerComponent),
            multi: true
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => DateTimePickerComponent),
            multi: true
        }
    ], ngImport: i0, template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n", dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.BsDatepickerDirective, selector: "[bsDatepicker]", inputs: ["placement", "triggers", "outsideClick", "container", "outsideEsc", "isDisabled", "minDate", "maxDate", "minMode", "daysDisabled", "datesDisabled", "datesEnabled", "dateCustomClasses", "dateTooltipTexts", "isOpen", "bsValue", "bsConfig"], outputs: ["onShown", "onHidden", "bsValueChange"], exportAs: ["bsDatepicker"] }, { kind: "directive", type: i2.BsDatepickerInputDirective, selector: "input[bsDatepicker]" }, { kind: "component", type: i3.TimePickerComponent, selector: "c8y-time-picker", inputs: ["minDate", "maxDate", "placeholder"], outputs: ["dayForward", "dayBackward"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DateTimePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-date-time-picker', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DateTimePickerComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => DateTimePickerComponent),
                            multi: true
                        }
                    ], template: "<div class=\"datetime-picker\">\n  <div class=\"form-group datepicker\">\n    <input\n      class=\"form-control\"\n      [placeholder]=\"placeholder || defaultPlaceholder | translate\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today', dateInputFormat: 'YYYY-MM-DD' }\"\n      [formControl]=\"form.get('date')\"\n      (blur)=\"onTouched()\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n    />\n  </div>\n  <c8y-time-picker\n    [formControl]=\"form.get('time')\"\n    (dayBackward)=\"previousDay()\"\n    (dayForward)=\"nextDay()\"\n  ></c8y-time-picker>\n</div>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { _minDate: [{
                type: Input,
                args: ['minDate']
            }], _maxDate: [{
                type: Input,
                args: ['maxDate']
            }], placeholder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
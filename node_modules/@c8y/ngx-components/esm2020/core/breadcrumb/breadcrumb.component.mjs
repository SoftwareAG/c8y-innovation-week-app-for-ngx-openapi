import { Component, ContentChildren, QueryList } from '@angular/core';
import { BreadcrumbService } from './breadcrumb.service';
import { BreadcrumbItemComponent } from './breadcrumb-item.component';
import * as i0 from "@angular/core";
import * as i1 from "./breadcrumb.service";
export class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
    }
    ngAfterViewInit() {
        this.items = this.contentChildItems.toArray();
        this.viewInitTimeout = setTimeout(() => this.breadcrumbService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.breadcrumbService.remove(this);
    }
}
BreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: i1.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: BreadcrumbComponent, selector: "c8y-breadcrumb", queries: [{ propertyName: "contentChildItems", predicate: BreadcrumbItemComponent }], ngImport: i0, template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-breadcrumb', template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>" }]
        }], ctorParameters: function () { return [{ type: i1.BreadcrumbService }]; }, propDecorators: { contentChildItems: [{
                type: ContentChildren,
                args: [BreadcrumbItemComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7OztBQU10RSxNQUFNLE9BQU8sbUJBQW1CO0lBSzlCLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBQUcsQ0FBQztJQUU1RCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFrQixDQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsV0FBVztRQUNULFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFrQixDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Z0hBZlUsbUJBQW1CO29HQUFuQixtQkFBbUIsd0ZBRWIsdUJBQXVCLDZCQ1gxQyw0REFFYzsyRkRPRCxtQkFBbUI7a0JBSi9CLFNBQVM7K0JBQ0UsZ0JBQWdCO3dHQUt3QixpQkFBaUI7c0JBQWxFLGVBQWU7dUJBQUMsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiwgQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL2JyZWFkY3J1bWIubW9kZWwnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYlNlcnZpY2UgfSBmcm9tICcuL2JyZWFkY3J1bWIuc2VydmljZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1icmVhZGNydW1iJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBCcmVhZGNydW1iIHtcbiAgaXRlbXM6IEJyZWFkY3J1bWJJdGVtW107XG4gIEBDb250ZW50Q2hpbGRyZW4oQnJlYWRjcnVtYkl0ZW1Db21wb25lbnQpIHByaXZhdGUgY29udGVudENoaWxkSXRlbXM6IFF1ZXJ5TGlzdDxCcmVhZGNydW1iSXRlbT47XG4gIHByaXZhdGUgdmlld0luaXRUaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5jb250ZW50Q2hpbGRJdGVtcy50b0FycmF5KCk7XG4gICAgdGhpcy52aWV3SW5pdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYnJlYWRjcnVtYlNlcnZpY2UuYWRkKHRoaXMgYXMgQnJlYWRjcnVtYikpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudmlld0luaXRUaW1lb3V0KTtcbiAgICB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLnJlbW92ZSh0aGlzIGFzIEJyZWFkY3J1bWIpO1xuICB9XG59XG4iLCI8bmctdGVtcGxhdGU+XG4gIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvbmctdGVtcGxhdGU+Il19
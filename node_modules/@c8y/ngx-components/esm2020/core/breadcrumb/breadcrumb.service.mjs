import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { fromTrigger, hookGeneric, getInjectedHooks, stateToFactory, ExtensionPointForPlugins } from '../common/extension-hooks';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../plugins/plugins-resolve.service";
/**
 * @deprecated Consider using the `hookBreadcrumb` function instead.
 */
export const HOOK_BREADCRUMB = new InjectionToken('HOOK_BREADCRUMB');
/**
 * You can either provide a single `Breadcrumb` as parameter:
 * ```typescript
 *  hookBreadcrumb(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookBreadcrumb([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<Breadcrumb>`
 * ```typescript
 *  export class MyBreadcrumbFactory implements ExtensionFactory<Breadcrumb> {...}
 *  ...
 *  hookBreadcrumb(MyBreadcrumbFactory)
 * ```
 * A typed alternative to `HOOK_BREADCRUMB`.
 * @param breadcrumb The `Breadcrumb`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookBreadcrumb(breadcrumb, options) {
    return hookGeneric(breadcrumb, HOOK_BREADCRUMB, options);
}
export class BreadcrumbService extends ExtensionPointForPlugins {
    constructor(rootInjector, router, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.items$ = this.setupItemsObservable();
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the action bar in the header.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action bar item from the header.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    /**
     * Sets the crumb that contains that path to the top.
     * @param path The path to prefer.
     */
    selectPreferredByPath(path) {
        this.preferredPath = path;
        this.refresh();
    }
    sortByPreferredPath(breadcrumbs) {
        if (this.preferredPath) {
            return breadcrumbs.sort(bc => bc.items.find((item) => !!item.path.match(this.preferredPath)) ? -1 : 1);
        }
        return breadcrumbs;
    }
    setupItemsObservable() {
        return fromTrigger(this.router, this.refresh$, [
            getInjectedHooks(HOOK_BREADCRUMB, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), map(breadcrumbs => this.sortByPreferredPath(breadcrumbs)), shareReplay(1));
    }
}
BreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BreadcrumbService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
BreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BreadcrumbService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
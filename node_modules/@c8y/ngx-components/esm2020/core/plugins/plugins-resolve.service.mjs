import { Injectable, NgModuleRef, createNgModuleRef, EnvironmentInjector } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { reduce, forEach, get, union, camelCase } from 'lodash-es';
import { BehaviorSubject, Subject } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { AppStateService } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@c8y/client";
import * as i3 from "../common";
export class PluginsResolveService {
    constructor(translateService, fetchClient, appState, injector) {
        this.translateService = translateService;
        this.fetchClient = fetchClient;
        this.appState = appState;
        this.injector = injector;
        this.urlRemotesCache = null;
        this.remoteScriptSet = new Set();
        this._injectors$ = new Subject();
        this._refresh$ = new Subject();
        this._pluginDetails$ = new Subject();
        this._allPluginsLoaded$ = new BehaviorSubject(false);
        this.injectors$ = this._injectors$.asObservable().pipe(
        // not specifying the bufferSize of shareReplay so all injectors are received on subscription
        shareReplay());
        this.refresh$ = this._refresh$.asObservable().pipe(shareReplay(1));
        this.pluginDetails$ = this._pluginDetails$.asObservable().pipe(
        // not specifying the bufferSize of shareReplay so all details are received on subscription
        shareReplay());
        this.allPluginsLoaded$ = this._allPluginsLoaded$.asObservable();
    }
    /**
     * Loads plugins by resolving the remote NgModules and injecting it. Also attaching
     * the hooks onto the root injector.
     * @param remoteModules The remote plugins to load as factory name mapping array.
     */
    resolveRemotePlugins(remoteModules) {
        this.loadModulesDynamically(remoteModules);
        this.refreshHooks();
        this.markPluginsAsLoaded();
    }
    /**
     * Loads modules and handles hooking correctly.
     * @param remoteNgModules The modules to load.
     */
    loadModulesDynamically(remoteModules) {
        for (const { factory, name } of remoteModules) {
            try {
                this.loadModule(factory[name]);
            }
            catch (ex) {
                console.error(`Failed to load ${name}`, ex);
            }
        }
    }
    loadModule(remoteNgModule) {
        let moduleRef;
        if (remoteNgModule instanceof NgModuleRef) {
            // AOT
            moduleRef = remoteNgModule;
        }
        else {
            // JIT
            moduleRef = createNgModuleRef(remoteNgModule, this.injector);
        }
        this._injectors$.next(moduleRef.injector);
        this._pluginDetails$.next({ moduleRef, remoteNgModule });
        return moduleRef;
    }
    /**
     * Will refresh all current registered hooks.
     */
    refreshHooks() {
        this._refresh$.next();
    }
    markPluginsAsLoaded() {
        this._allPluginsLoaded$.next(true);
    }
    /**
     * Loads a list of remotes so that a particular application can use them.
     * The request is made to the following address: /apps/<contextPath>/remoteEntry.js
     * @param remotes List of remotes to be loaded.
     * @returns Returns the list of loaded modules from remotes.
     */
    async loadRemotes(remotes) {
        if (!remotes) {
            return [];
        }
        const date = new Date();
        const remoteModules = [];
        for (const pluginId in remotes) {
            if (remotes.hasOwnProperty(pluginId)) {
                const moduleNames = remotes[pluginId];
                const url = `/apps/${pluginId}/remoteEntry.js?nocache=${date.getTime()}`;
                let atLeastOneModuleLoadedSuccessfully = false;
                for (const moduleName of moduleNames) {
                    try {
                        remoteModules.push(await this.loadRemoteModule(url, pluginId, moduleName));
                        atLeastOneModuleLoadedSuccessfully = true;
                    }
                    catch (ex) {
                        console.warn(`Could not load remote module '${moduleName}' from url:`, url);
                    }
                }
                // no need to load translations if we were unable to load a single module..
                if (atLeastOneModuleLoadedSuccessfully) {
                    await this.loadRemoteTranslations(pluginId);
                }
            }
        }
        return remoteModules;
    }
    /**
     * Takes a list of remotes and turns it into an object containing union of corresponding remotes.
     * @param mfRemotes List of the remotes.
     * @returns Returns object with merged remotes.
     *
     * **Example**
     * ```typescript
     * const remotesA:ApplicationRemotePlugins = { contextPathA: ['moduleA', 'moduleB'] };
     * const remotesB:ApplicationRemotePlugins = { contextPathA: ['moduleA'], contextPathB: ['moduleZ'] };
     * const mergedRemotes:ApplicationRemotePlugins = mergeMFRemotes([remotesA, remotesB]);
     * // Result
     * {
     *  contextPathA: ['moduleA', 'moduleB'],
     *  contextPathB: ['moduleZ']
     * }
     *
     * ```
     */
    mergeMFRemotes(mfRemotes) {
        return reduce(mfRemotes, (allRemotes, mfRemote) => {
            forEach(mfRemote, (remoteModules, remoteContextPath) => {
                const currentRemotes = get(allRemotes, remoteContextPath, []);
                allRemotes[remoteContextPath] = union(currentRemotes, remoteModules);
            });
            return allRemotes;
        }, {});
    }
    /**
     * Clears URL remotes cache.
     */
    clearURLRemotesCache() {
        this.urlRemotesCache = null;
    }
    /**
     * Retrieves the remotes list from the URL.
     * @returns Returns the list of remotes.
     */
    loadUrlRemotes() {
        if (!this.urlRemotesCache) {
            const params = new URLSearchParams(window.location.search);
            const remotes = params.get('remotes');
            if (remotes) {
                try {
                    this.urlRemotesCache = JSON.parse(decodeURIComponent(remotes));
                }
                catch (error) {
                    console.warn(`Failed to parse remotes: ${error}`);
                }
            }
        }
        return this.urlRemotesCache;
    }
    async loadRemoteTranslations(pluginId) {
        try {
            const { lang } = this.appState.state;
            const resp = await this.fetchClient.fetch(`/apps/${pluginId}/${lang}.json`);
            if (resp.status < 400) {
                const result = await resp.json();
                this.translateService.setTranslation(lang, result[lang], true);
            }
        }
        catch (ex) {
            console.warn(`Failed to load translations for ${pluginId}`);
        }
    }
    async loadRemoteModule(remoteEntryUrl, remoteContextPath, exposedModule) {
        if (!this.remoteScriptSet.has(remoteEntryUrl)) {
            this.remoteScriptSet.add(remoteEntryUrl);
            await this.loadRemoteEntry(remoteEntryUrl);
        }
        let contextPath = remoteContextPath;
        if (contextPath.includes('@')) {
            contextPath = remoteContextPath.split('@')[0];
        }
        return await this.lookupExposedModule(camelCase(contextPath), exposedModule);
    }
    loadRemoteEntry(remoteEntryUrl) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = remoteEntryUrl;
            script.onerror = reject;
            script.onload = () => {
                resolve(); // window is the global namespace
            };
            document.body.append(script);
        });
    }
    async lookupExposedModule(remoteName, exposedModule) {
        // Initializes the share scope. This fills it with known provided modules from this build and all remotes
        try {
            await __webpack_init_sharing__('default');
        }
        catch (ex) {
            console.error(`Module ${exposedModule} could not be loaded. Module Federation is not enabled in this application.`, ex);
        }
        const container = window[remoteName];
        // Initialize the container, it may provide shared modules
        let factory;
        try {
            await container.init(__webpack_share_scopes__.default);
            factory = (await container.get(exposedModule))();
        }
        catch (ex) {
            console.error(`Module ${exposedModule} could not be loaded.`, ex);
        }
        return { name: exposedModule, factory };
    }
}
PluginsResolveService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsResolveService, deps: [{ token: i1.TranslateService }, { token: i2.FetchClient }, { token: i3.AppStateService }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });
PluginsResolveService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsResolveService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsResolveService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.FetchClient }, { type: i3.AppStateService }, { type: i0.EnvironmentInjector }]; } });
//# sourceMappingURL=data:application/json;base64,
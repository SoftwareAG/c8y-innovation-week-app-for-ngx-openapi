import { Injectable } from '@angular/core';
import { ApplicationAvailability } from '@c8y/client';
import { ApplicationService } from '@c8y/ngx-components/api';
import { cloneDeep, get, uniqBy } from 'lodash-es';
import { coerce, compare } from 'semver';
import { AppStateService } from '../common/ui-state.service';
import { groupBy } from 'lodash-es';
import { PackageType } from './plugins.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/api";
import * as i2 from "../common/ui-state.service";
export class PluginsService {
    constructor(applicationService, appStateService) {
        this.applicationService = applicationService;
        this.appStateService = appStateService;
    }
    /**
     * Fetches a list of available packages.
     * @param params Additional query parameters.
     * @returns Returns a list of packages.
     */
    async listPackages(params = {}) {
        const apps = await this.listApplicationsByCurrentTenant(params);
        const webApps = apps.filter(app => this.isPackage(app));
        const uniqueWebApps = this.removeDuplicates(webApps, 'contextPath');
        return uniqueWebApps.sort((a, b) => a.name.localeCompare(b.name));
    }
    /**
     * Checks if an application is a package.
     * @param application Application managed object.
     * @returns Returns true if the application is a package.
     */
    isPackage(application) {
        return application.manifest?.isPackage === true;
    }
    /**
     * Updates the remotes field in the application configuration by adding new plugins.
     * Important: if the remotes object is not set on the configuration object,
     * remotes will not be added. Make sure that this object exists in the application configuration.
     * @param application Application managed object.
     * @param plugins List of remotes to be added.
     * @returns Returns updated application remotes.
     */
    async addRemotes(application, plugins) {
        const appConfigRemotes = application?.config?.remotes;
        if (appConfigRemotes) {
            const newRemotes = this.addPluginToRemotes(appConfigRemotes, plugins);
            return await this.updateRemotesInAppConfig(application, newRemotes);
        }
        return;
    }
    /**
     * Updates the remotes field in the application configuration by removing plugins.
     * @param application Application managed object.
     * @param plugins List of remotes to be removed.
     * @returns Returns updated application remotes.
     */
    async removeRemotes(application, plugins) {
        const appConfigRemotes = application?.config?.remotes;
        const newRemotes = this.removePluginsFromRemotes(appConfigRemotes, plugins);
        return await this.updateRemotesInAppConfig(application, newRemotes);
    }
    /**
     * Updates the remotes field in the application configuration.
     * @param application Application managed object.
     * @param plugins List of remotes to be added.
     * @returns Returns updated application remotes.
     */
    async updateRemotesInAppConfig(application, plugins) {
        const updatedAppWithConfig = await this.applicationService.updateApplicationConfig(application, {
            remotes: plugins
        });
        return updatedAppWithConfig?.config?.remotes || {};
    }
    /**
     * Fetches the application manifest.
     * @param application Application managed object.
     * @returns Returns the application manifest.
     */
    async getCumulocityJsonFile(application) {
        const c8yJson = await this.applicationService.getAppManifest(application);
        if (!c8yJson.remotes) {
            c8yJson.remotes = {};
        }
        return c8yJson;
    }
    /**
     * Sets the initial state of remotes in the configuration (when it's missing), based on the list of remotes being in the application manifest.
     * @param application  Application managed object.
     * @returns Returns a list of remotes that has been assigned to the configuration object.
     */
    async setInitialRemotes(application) {
        try {
            const manifestRemotes = (await this.getCumulocityJsonFile(application))?.remotes;
            if (manifestRemotes) {
                // If there is no remotes in the config add remotes from the manifest as an initial value if there are some.
                return await this.updateRemotesInAppConfig(application, manifestRemotes);
            }
        }
        catch (er) {
            return undefined;
        }
    }
    sortVersions(source, order) {
        const sourceCopy = cloneDeep(source);
        if (source.list && source.path) {
            const path = sourceCopy.path.join('.');
            return sourceCopy.list.sort((a, b) => compare(coerce(get(a, path)), coerce(get(b, path))) * (order === 'asc' ? 1 : -1));
        }
        else {
            return sourceCopy.sort((a, b) => compare(coerce(a), coerce(b)) * (order === 'asc' ? 1 : -1));
        }
    }
    /**
     * Extracts a list of exported plugins from the application object.
     * @param application Application managed object.
     * @returns Returns a list of exported plugins.
     */
    getMFExports(application) {
        const manifest = application.manifest;
        if (!manifest || !manifest.exports) {
            return [];
        }
        return this.extendPluginsDetails(application, {
            version: manifest.version,
            binaryId: undefined
        });
    }
    /**
     * Extracts a list of exports from each available package.
     * @returns Returns a list of all exported plugins.
     */
    async getAllMFExports(allVersions = false) {
        const plugins = new Array();
        const packages = await this.listPackages();
        for (const pkg of packages) {
            if (!pkg?.manifest?.exports) {
                continue;
            }
            if (allVersions && Array.isArray(pkg.applicationVersions)) {
                pkg.applicationVersions.forEach(version => {
                    plugins.push(...this.extendPluginsDetails(pkg, version));
                });
            }
            else {
                plugins.push(...this.extendPluginsDetails(pkg, {
                    version: pkg.manifest.version,
                    binaryId: undefined
                }));
            }
        }
        return plugins;
    }
    /**
     * Extracts a list of remotes from the application object.
     * @param application Application managed object.
     * @returns Returns list of remotes.
     */
    getMFRemotes(application) {
        return application?.config?.remotes;
    }
    /**
     * Determines the type of a package.
     * A package is OFFICIAL if it comes from management tenant and has a label attached called OFFICIAL.
     * A package is COMMUNITY if it has a label called COMMUNITY.
     * A package is CUSTOM if it does not have any label attached.
     * A package is UNKNOWN if it has a label attached but it does not match COMMUNITY or OFFICIAL.
     *
     * Labels can be used to identify the status of a package. Community packages always need
     * a license validation. The label will be shown on the application card to tell a user
     * whether they are looking into an official or community package.
     *
     * @param packageApplication The package application object to check.
     * @returns The package type.
     */
    getPackageType(packageApplication) {
        if (!packageApplication.label) {
            return PackageType.CUSTOM;
        }
        if (packageApplication.label === PackageType.OFFICIAL &&
            this.isOwnedByManagement(packageApplication)) {
            return PackageType.OFFICIAL;
        }
        if (packageApplication.label === PackageType.COMMUNITY) {
            return PackageType.COMMUNITY;
        }
        return PackageType.UNKNOWN;
    }
    /**
     * Verifies if an application is owned by management tenant.
     *
     * @param app The application to verify.
     * @returns True if owned by management tenant.
     */
    isOwnedByManagement(app) {
        const appOwner = get(app, 'owner.tenant.id');
        return appOwner === 'management';
    }
    removeDuplicates(apps, key) {
        const uniqueList = [];
        const groupedAppsByKey = groupBy(apps, key);
        const groupedApps = Object.keys(groupedAppsByKey).map(key => groupedAppsByKey[key]);
        for (const appsGroup of groupedApps) {
            if (appsGroup.length < 2) {
                uniqueList.push(...appsGroup);
            }
            else {
                const appFromCurrentTenant = appsGroup.find(app => this.isFromCurrentTenant(app));
                if (appFromCurrentTenant) {
                    uniqueList.push(appFromCurrentTenant);
                    continue;
                }
                const appNotOwnedByManagement = appsGroup.find(app => !this.isOwnedByManagement(app));
                uniqueList.push(appNotOwnedByManagement);
            }
        }
        return uniqueList;
    }
    isFromCurrentTenant(app) {
        return app.owner.tenant.id === this.appStateService.currentTenant.value.name;
    }
    /**
     * Modifies the list of plugins to have additional information such as id.
     * @ignore
     */
    extendPluginsDetails(application, version) {
        const plugins = application.manifest.exports;
        const extendedPlugins = plugins.map(p => ({
            ...p,
            id: this.createPluginId(application.contextPath, p, version.version),
            contextPath: application.contextPath,
            version: version.version,
            versioningMatrix: application.manifest.versioningMatrix,
            tags: version.tags || [],
            license: application.manifest.license,
            type: this.getPackageType(application)
        }));
        return extendedPlugins;
    }
    async listApplicationsByCurrentTenant(params = {}) {
        const filter = Object.assign({
            type: 'HOSTED',
            pageSize: 2000,
            withTotalPages: true
        }, params);
        const sharedFilter = Object.assign({
            availability: ApplicationAvailability.SHARED,
            type: 'HOSTED',
            pageSize: 2000,
            withTotalPages: true
        }, params);
        const tenantName = this.appStateService.currentTenant.value.name;
        const [resultAppsOwnedByTenant, resultSharedApps] = await Promise.all([
            this.applicationService.listByTenant(tenantName, filter),
            this.applicationService.list(sharedFilter)
        ]);
        const { data: appsOwnedByTenant } = resultAppsOwnedByTenant;
        const { data: sharedApps } = resultSharedApps;
        const webApps = [...appsOwnedByTenant, ...sharedApps];
        return uniqBy(webApps, (app) => app.id);
    }
    addPluginToRemotes(remotes, plugins) {
        if (!plugins) {
            return;
        }
        const remotesCopy = cloneDeep(remotes);
        const temp = Array.isArray(plugins) ? plugins : [plugins];
        temp.forEach(plugin => {
            const { contextPath, moduleName } = this.parsePluginId(plugin.id);
            if (!contextPath || !moduleName) {
                return;
            }
            remotesCopy[contextPath]?.length >= 0
                ? remotesCopy[contextPath].push(moduleName)
                : (remotesCopy[contextPath] = []).push(moduleName);
            remotesCopy[contextPath] = [...new Set(remotesCopy[contextPath])];
        });
        return remotesCopy;
    }
    removePluginsFromRemotes(remotes, plugins) {
        const remotesCopy = cloneDeep(remotes);
        const temp = Array.isArray(plugins) ? plugins : [plugins];
        temp.forEach(plugin => {
            const { contextPath, moduleName } = this.parsePluginId(plugin.id);
            if (!contextPath || !moduleName || !remotesCopy[contextPath]) {
                return;
            }
            remotesCopy[contextPath] = remotesCopy[contextPath].filter(p => p !== moduleName);
            remotesCopy[contextPath] = [...new Set(remotesCopy[contextPath])];
            if (remotesCopy[contextPath].length === 0) {
                delete remotesCopy[contextPath];
            }
        });
        return remotesCopy;
    }
    createPluginId(contextPath, plugin, version) {
        return `${contextPath}@${version}/${plugin.module}`;
    }
    parsePluginId(id) {
        const [contextPath, moduleName] = id.split('/');
        return { contextPath, moduleName };
    }
}
PluginsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsService, deps: [{ token: i1.ApplicationService }, { token: i2.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
PluginsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }, { type: i2.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
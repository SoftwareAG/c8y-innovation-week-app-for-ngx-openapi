import { Injectable } from '@angular/core';
import { StateService } from '../common/state-service.abstract';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { sortByPriority } from '../common';
import * as i0 from "@angular/core";
export class UserMenuService extends StateService {
    constructor() {
        super();
        this.state$ = new BehaviorSubject({
            userMenuItems: new Set()
        });
        this.items$ = this.state$.pipe(map(state => Array.from(state.userMenuItems.values())), map(items => sortByPriority(items)), distinctUntilChanged());
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    add(item) {
        this.state.userMenuItems.add(item);
        this.emitNewState();
    }
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.userMenuItems.delete(item);
        this.emitNewState();
    }
}
UserMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserMenuService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
UserMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserMenuService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserMenuService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1tZW51LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL3VzZXIvdXNlci1tZW51LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7QUFLM0MsTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTtJQU0vQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBTlYsV0FBTSxHQUFHLElBQUksZUFBZSxDQUFDO1lBQzNCLGFBQWEsRUFBRSxJQUFJLEdBQUcsRUFBZ0I7U0FDdkMsQ0FBQyxDQUFDO1FBS0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFDdEQsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ25DLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUcsQ0FBQyxJQUFrQjtRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBa0I7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs0R0F4Q1UsZUFBZTtnSEFBZixlQUFlLGNBRmQsTUFBTTsyRkFFUCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zdGF0ZS1zZXJ2aWNlLmFic3RyYWN0JztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVzZXJNZW51SXRlbSB9IGZyb20gJy4vdXNlci5tb2RlbCc7XG5pbXBvcnQgeyBzb3J0QnlQcmlvcml0eSB9IGZyb20gJy4uL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJNZW51U2VydmljZSBleHRlbmRzIFN0YXRlU2VydmljZSB7XG4gIHN0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Qoe1xuICAgIHVzZXJNZW51SXRlbXM6IG5ldyBTZXQ8VXNlck1lbnVJdGVtPigpXG4gIH0pO1xuICBpdGVtcyQ6IE9ic2VydmFibGU8VXNlck1lbnVJdGVtW10+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pdGVtcyQgPSB0aGlzLnN0YXRlJC5waXBlKFxuICAgICAgbWFwKHN0YXRlID0+IEFycmF5LmZyb20oc3RhdGUudXNlck1lbnVJdGVtcy52YWx1ZXMoKSkpLFxuICAgICAgbWFwKGl0ZW1zID0+IHNvcnRCeVByaW9yaXR5KGl0ZW1zKSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgc2V0IG9mIGFjdGlvbnMuXG4gICAqL1xuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUkLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgaXRlbSB0byB0aGUgc2VhcmNoIGluIHRoZSBoZWFkZXIuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZC5cbiAgICovXG4gIGFkZChpdGVtOiBVc2VyTWVudUl0ZW0pIHtcbiAgICB0aGlzLnN0YXRlLnVzZXJNZW51SXRlbXMuYWRkKGl0ZW0pO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBzZWFyY2ggZnJvbSB0aGUgaGVhZGVyLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmUoaXRlbTogVXNlck1lbnVJdGVtKSB7XG4gICAgdGhpcy5zdGF0ZS51c2VyTWVudUl0ZW1zLmRlbGV0ZShpdGVtKTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG59XG4iXX0=
import { Component } from '@angular/core';
import { BasicAuth, FetchClient, TenantLoginOptionType, UserService } from '@c8y/client';
import { omit } from 'lodash-es';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { AlertService } from '../alert/alert.service';
import { PasswordService } from '../authentication/password.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { Status } from '../common/status.model';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { gettext } from '../i18n/gettext';
import { LoginService } from '../login/login.service';
import { ModalService } from '../modal/modal.service';
import { GainsightService } from '../product-experience/gainsight.service';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "@c8y/client";
import * as i3 from "../common/ui-state.service";
import * as i4 from "../alert/alert.service";
import * as i5 from "../common/user-preferences/user-preferences.service";
import * as i6 from "../modal/modal.service";
import * as i7 from "../product-experience/gainsight.service";
import * as i8 from "../bootstrap/cookie-banner/cookie-banner.service";
import * as i9 from "../login/login.service";
import * as i10 from "../authentication/password.service";
import * as i11 from "../modal/modal.component";
import * as i12 from "./user-edit.component";
import * as i13 from "../i18n/c8y-translate.pipe";
import * as i14 from "@angular/common";
export class UserEditModalComponent {
    constructor(modal, user, ui, auth, client, alert, userPreferences, c8yModalService, gainsightService, cookieBannerService, loginService, passwordService) {
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.userPreferences = userPreferences;
        this.c8yModalService = c8yModalService;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.loginService = loginService;
        this.passwordService = passwordService;
        this.loading = false;
        this.showProductUsageSetting = false;
    }
    async ngOnInit() {
        this.updateUserInAppState();
        this.showProductUsageSetting = await this.gainsightService.canEditProductExperienceSettings();
        if (this.showProductUsageSetting) {
            if (this.cookieBannerService.isFunctionalCookieEnabled()) {
                this.currentUsageTrackingState =
                    !(await this.gainsightService.isGainsightPreferenceDisabledInUserPreferences(this.gainsightService.USER_PREFERENCES_GAINSIGHT_KEY));
                this.currentGainsightEngagementsState =
                    !(await this.gainsightService.isGainsightPreferenceDisabledInUserPreferences(this.gainsightService.USER_PREFERENCES_GAINSIGHT_ENGAGEMENTS_KEY));
            }
        }
    }
    async onDismiss() {
        this.modal.hide();
    }
    onProductExperience(option) {
        this.usageTrackingState = option;
    }
    onGainsightEngagements(option) {
        this.gainsightEngagementsState = option;
    }
    async updateAndClose(user) {
        this.loading = true;
        try {
            const passwordChanged = Boolean(user.password);
            const usesBasic = this.loginService.loginMode.type === TenantLoginOptionType.BASIC;
            const isExternalUser = user.customProperties.userOrigin === 'OAUTH2';
            if (!isExternalUser && passwordChanged) {
                const currentPassword = await this.passwordService.currentPassword().toPromise();
                if (!currentPassword) {
                    return;
                }
                await this.user.changeCurrentUserPassword(user.password, currentPassword);
                if (usesBasic) {
                    this.updateCredentials(user.password);
                }
            }
            if (this.currentGainsightEngagementsState !== this.gainsightEngagementsState) {
                await this.userPreferences.set(this.gainsightService.USER_PREFERENCES_GAINSIGHT_ENGAGEMENTS_KEY, this.gainsightEngagementsState);
            }
            if (this.currentUsageTrackingState !== this.usageTrackingState) {
                await this.userPreferences.set(this.gainsightService.USER_PREFERENCES_GAINSIGHT_KEY, this.usageTrackingState);
                this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                this.usageTrackingState
                    ? await this.gainsightService.loadTag(this.client.tenant)
                    : await this.gainsightTrackingAppReload();
            }
            if (user.customProperties.userOrigin !== 'OAUTH2') {
                await this.user.updateCurrent(omit(user, 'password'));
                await this.updateUserInAppState();
            }
            this.modal.hide();
            this.alert.success(gettext('User saved.'));
        }
        catch (e) {
            if (e) {
                this.alert.addServerFailure(e);
            }
        }
        finally {
            this.loading = false;
        }
    }
    async gainsightTrackingAppReload() {
        try {
            await this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. How would you like to proceed?'), Status.WARNING, {
                ok: gettext('Reload now'),
                cancel: gettext('Reload later')
            });
            location.reload();
        }
        catch (ex) {
            // do nothing
        }
    }
    async updateUserInAppState() {
        const currentUserResult = await this.user.current();
        this.ui.currentUser.next(currentUserResult.data);
    }
    updateCredentials(password) {
        const newCredentials = {
            password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    }
}
UserEditModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserEditModalComponent, deps: [{ token: i1.BsModalRef }, { token: i2.UserService }, { token: i3.AppStateService }, { token: i2.BasicAuth }, { token: i2.FetchClient }, { token: i4.AlertService }, { token: i5.UserPreferencesService }, { token: i6.ModalService }, { token: i7.GainsightService }, { token: i8.CookieBannerService }, { token: i9.LoginService }, { token: i10.PasswordService }], target: i0.ɵɵFactoryTarget.Component });
UserEditModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: UserEditModalComponent, selector: "c8y-user-edit-modal", ngImport: i0, template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n  [user]=\"ui.currentUser | async\"\n  [loading]=\"loading\"\n  [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n  [isGainsightEngagementsEnabled]=\"currentGainsightEngagementsState\"\n  [showProductUsageSetting]=\"showProductUsageSetting\"\n  (onProductExperience)=\"onProductExperience($event)\"\n  (onGainsightEngagements)=\"onGainsightEngagements($event)\"\n  (onUser)=\"updateAndClose($event)\"\n  (onCancel)=\"onDismiss()\"\n  >\n</c8y-user-edit>\n</c8y-modal>\n", dependencies: [{ kind: "component", type: i11.ModalComponent, selector: "c8y-modal", inputs: ["disabled", "close", "dismiss", "title", "body", "customFooter", "headerClasses", "labels"], outputs: ["onDismiss", "onClose"] }, { kind: "component", type: i12.UserEditComponent, selector: "c8y-user-edit", inputs: ["loading", "user", "showProductUsageSetting", "isUsageTrackingEnabled", "isGainsightEngagementsEnabled"], outputs: ["onUser", "onProductExperience", "onGainsightEngagements", "onCancel"] }, { kind: "pipe", type: i13.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i14.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserEditModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-user-edit-modal', template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n  [user]=\"ui.currentUser | async\"\n  [loading]=\"loading\"\n  [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n  [isGainsightEngagementsEnabled]=\"currentGainsightEngagementsState\"\n  [showProductUsageSetting]=\"showProductUsageSetting\"\n  (onProductExperience)=\"onProductExperience($event)\"\n  (onGainsightEngagements)=\"onGainsightEngagements($event)\"\n  (onUser)=\"updateAndClose($event)\"\n  (onCancel)=\"onDismiss()\"\n  >\n</c8y-user-edit>\n</c8y-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BsModalRef }, { type: i2.UserService }, { type: i3.AppStateService }, { type: i2.BasicAuth }, { type: i2.FetchClient }, { type: i4.AlertService }, { type: i5.UserPreferencesService }, { type: i6.ModalService }, { type: i7.GainsightService }, { type: i8.CookieBannerService }, { type: i9.LoginService }, { type: i10.PasswordService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { combineLatest, BehaviorSubject } from 'rxjs';
import { map, debounceTime, distinctUntilChanged, delay } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { StateService } from '../common/state-service.abstract';
import { HumanizeAppNamePipe } from '../common/humanize-app-name.pipe';
import { DrawerService } from '../drawer/drawer.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/humanize-app-name.pipe";
import * as i3 from "../drawer/drawer.service";
/**
 * A service which defines header functions.
 */
export class HeaderService extends StateService {
    constructor(options, humanizeAppName, drawerService) {
        super();
        this.options = options;
        this.humanizeAppName = humanizeAppName;
        this.drawerService = drawerService;
        this.headerOpen = false;
        this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            },
            rightDrawer: {
                open: false
            }
        });
        this.title = undefined;
        this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        this.header$ = this.map((header) => header);
        this.canToggleNavigator$ = this.drawerService.items$.pipe(map(items => !!items.filter(tmp => tmp.position === 'left' && !tmp.noneRequired)?.length), distinctUntilChanged(), delay(this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES));
        this.navigatorOpen$ = combineLatest([
            this.map(({ nav }) => nav.open),
            this.canToggleNavigator$
        ]).pipe(map(([open, hasItems]) => open && hasItems));
        this.rightDrawerOpen$ = this.map(({ rightDrawer }) => rightDrawer.open).pipe();
        const titleReference = document.querySelector('title');
        const isGlobalTitleValid = !!options.globalTitle &&
            typeof options.globalTitle === 'string' &&
            options.globalTitle.length > 0;
        this.title = {
            elementRef: titleReference,
            titleSuffix: isGlobalTitleValid ? `${options.globalTitle} - ${options.name}` : options.name
        };
        this.humanizeAppName.transform(options.name).subscribe(nameTranslated => {
            this.title.titleSuffix = isGlobalTitleValid
                ? `${options.globalTitle} - ${nameTranslated}`
                : nameTranslated;
        });
    }
    get state() {
        return this.state$.value;
    }
    get navigatorHiddenOnStartup() {
        return this.options.hideNavigator;
    }
    get largeWidth() {
        return document.documentElement.clientWidth > 1200;
    }
    get shouldToggle() {
        return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
    }
    /**
     * Toggles the main header menu in mobile view.
     */
    toggle() {
        this.headerOpen = !this.headerOpen;
    }
    /**
     * Toggles the navigator open status.
     */
    toggleNavigator() {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    }
    /**
     * Force to close the navigator.
     */
    closeNavigator() {
        this.state.nav.open = false;
        this.emitNewState();
    }
    /**
     * Toggles the right drawer open status.
     */
    toggleRightDrawer() {
        this.state.rightDrawer.open = !this.state.rightDrawer.open;
        this.emitNewState();
    }
    /**
     * Force to close the right drawer.
     */
    closeRightDrawer() {
        this.state.rightDrawer.open = false;
        this.emitNewState();
    }
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    configNavigator(config = {}) {
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    }
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    changeTitle(newTitle, pageTitleUpdate = true) {
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    }
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    changePageTitle(newTitle) {
        this.title.elementRef.innerText = newTitle
            ? `${newTitle} / ${this.title.titleSuffix}`
            : `${this.title.titleSuffix}`;
    }
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    verifyIfNavOpen() {
        this.canToggleNavigator$
            .pipe(debounceTime(300))
            .subscribe(hasItems => hasItems && this.shouldToggle && this.toggleNavigator());
    }
    shouldShowBreadcrumbs() {
        return this.options.breadcrumbs;
    }
}
HeaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: HeaderService, deps: [{ token: i1.OptionsService }, { token: i2.HumanizeAppNamePipe }, { token: i3.DrawerService }], target: i0.ɵɵFactoryTarget.Injectable });
HeaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: HeaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: HeaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.OptionsService }, { type: i2.HumanizeAppNamePipe }, { type: i3.DrawerService }]; } });
//# sourceMappingURL=data:application/json;base64,
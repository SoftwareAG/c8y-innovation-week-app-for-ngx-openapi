import { Component, HostListener } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { cloneDeep } from 'lodash-es';
import { C8yJSONSchema } from '../../dynamic-forms/json-schema/c8y-json-schema.service';
import { FilteringFormRendererContext } from './filtering-form-renderer';
import * as i0 from "@angular/core";
import * as i1 from "./filtering-form-renderer";
import * as i2 from "../../dynamic-forms/json-schema/c8y-json-schema.service";
import * as i3 from "@ngx-formly/core";
import * as i4 from "../../i18n/c8y-translate.directive";
import * as i5 from "../../i18n/c8y-translate.pipe";
export class BaseFilteringFormRendererComponent {
    constructor(context, jsonschema) {
        this.context = context;
        this.jsonschema = jsonschema;
    }
    onEnterKeyUp(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        if (column.filteringConfig.fields) {
            this.fields = cloneDeep(column.filteringConfig.fields);
        }
        else if (!column.filteringConfig.fields && column.filteringConfig.schema) {
            this.schema = cloneDeep(column.filteringConfig.schema);
            this.fields = [this.jsonschema.toFieldConfig(this.schema)];
        }
        else {
            throw new Error(`Neither fields nor schema configuration provided for Formly.`);
        }
        this.form = column.filteringConfig.formGroup || new FormGroup({});
        this.model = column.externalFilterQuery || column.filteringConfig.model || {};
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.form.value
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
}
BaseFilteringFormRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BaseFilteringFormRendererComponent, deps: [{ token: i1.FilteringFormRendererContext }, { token: i2.C8yJSONSchema }], target: i0.ɵɵFactoryTarget.Component });
BaseFilteringFormRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: BaseFilteringFormRendererComponent, selector: "ng-component", host: { listeners: { "keyup.enter": "onEnterKeyUp($event)", "keydown.escape": "onEscapeKeyDown($event)" } }, ngImport: i0, template: "<formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n", dependencies: [{ kind: "component", type: i3.FormlyForm, selector: "formly-form", inputs: ["form", "model", "fields", "options"], outputs: ["modelChange"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BaseFilteringFormRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FilteringFormRendererContext }, { type: i2.C8yJSONSchema }]; }, propDecorators: { onEnterKeyUp: [{
                type: HostListener,
                args: ['keyup.enter', ['$event']]
            }], onEscapeKeyDown: [{
                type: HostListener,
                args: ['keydown.escape', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb3JlL2RhdGEtZ3JpZC9jb2x1bW4vYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9jb3JlL2RhdGEtZ3JpZC9jb2x1bW4vYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFFeEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7QUFLekUsTUFBTSxPQUFPLGtDQUFrQztJQVE3QyxZQUFtQixPQUFxQyxFQUFTLFVBQXlCO1FBQXZFLFlBQU8sR0FBUCxPQUFPLENBQThCO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBZTtJQUFHLENBQUM7SUFFckQsWUFBWSxDQUFDLEtBQW9CO1FBQ3hFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUMyQyxlQUFlLENBQUMsS0FBb0I7UUFDOUUsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBRTdDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4RDthQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUMxRSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO1NBQ2pGO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDOUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLFlBQVksRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztZQUN2QixtQkFBbUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7U0FDckMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7OytIQTVDVSxrQ0FBa0M7bUhBQWxDLGtDQUFrQyxpS0NYL0MsMmtCQXFCQTsyRkRWYSxrQ0FBa0M7a0JBSDlDLFNBQVM7OytJQWFpQyxZQUFZO3NCQUFwRCxZQUFZO3VCQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFJSyxlQUFlO3NCQUExRCxZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0TGlzdGVuZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBDOHlKU09OU2NoZW1hIH0gZnJvbSAnLi4vLi4vZHluYW1pYy1mb3Jtcy9qc29uLXNjaGVtYS9jOHktanNvbi1zY2hlbWEuc2VydmljZSc7XG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi9kYXRhLWdyaWQubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCB9IGZyb20gJy4vZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2Jhc2UuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBzY2hlbWE7XG4gIGZvcm06IEZvcm1Hcm91cDtcbiAgbW9kZWw7XG4gIG9wdGlvbnM7XG5cbiAgZmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb250ZXh0LCBwdWJsaWMganNvbnNjaGVtYTogQzh5SlNPTlNjaGVtYSkge31cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cC5lbnRlcicsIFsnJGV2ZW50J10pIG9uRW50ZXJLZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuYXBwbHlGaWx0ZXIoKTtcbiAgfVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVzY2FwZScsIFsnJGV2ZW50J10pIG9uRXNjYXBlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucmVzZXRGaWx0ZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGNvbHVtbjogQ29sdW1uID0gdGhpcy5jb250ZXh0LnByb3BlcnR5O1xuXG4gICAgaWYgKGNvbHVtbi5maWx0ZXJpbmdDb25maWcuZmllbGRzKSB7XG4gICAgICB0aGlzLmZpZWxkcyA9IGNsb25lRGVlcChjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLmZpZWxkcyk7XG4gICAgfSBlbHNlIGlmICghY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5maWVsZHMgJiYgY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5zY2hlbWEpIHtcbiAgICAgIHRoaXMuc2NoZW1hID0gY2xvbmVEZWVwKGNvbHVtbi5maWx0ZXJpbmdDb25maWcuc2NoZW1hKTtcbiAgICAgIHRoaXMuZmllbGRzID0gW3RoaXMuanNvbnNjaGVtYS50b0ZpZWxkQ29uZmlnKHRoaXMuc2NoZW1hKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTmVpdGhlciBmaWVsZHMgbm9yIHNjaGVtYSBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGZvciBGb3JtbHkuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtID0gY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5mb3JtR3JvdXAgfHwgbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgdGhpcy5tb2RlbCA9IGNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5IHx8IGNvbHVtbi5maWx0ZXJpbmdDb25maWcubW9kZWwgfHwge307XG4gICAgdGhpcy5vcHRpb25zID0geyBmb3JtRGVmYXVsdHM6IHsgbmdNb2RlbE9wdGlvbnM6IHsgZGVib3VuY2U6IDEwMCB9IH0gfTtcbiAgfVxuXG4gIGFwcGx5RmlsdGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5hcHBseUZpbHRlcih7XG4gICAgICBleHRlcm5hbEZpbHRlclF1ZXJ5OiB0aGlzLmZvcm0udmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0RmlsdGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5yZXNldEZpbHRlcigpO1xuICB9XG59XG4iLCI8Zm9ybWx5LWZvcm0gW2Zvcm1dPVwiZm9ybVwiIFtmaWVsZHNdPVwiZmllbGRzXCIgW21vZGVsXT1cIm1vZGVsXCI+PC9mb3JtbHktZm9ybT5cbjxkaXYgY2xhc3M9XCJkYXRhLWdyaWRfX2Ryb3Bkb3duX19mb290ZXIgZC1mbGV4IHNlcGFyYXRvci10b3BcIj5cbiAgPGJ1dHRvblxuICAgIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBtLXItOCBmbGV4LWdyb3dcIlxuICAgIChjbGljayk9XCJyZXNldEZpbHRlcigpXCJcbiAgICB0aXRsZT1cInt7ICdSZXNldCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgIHRyYW5zbGF0ZVxuICA+XG4gICAgUmVzZXRcbiAgPC9idXR0b24+XG5cbiAgPGJ1dHRvblxuICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSBmbGV4LWdyb3dcIlxuICAgIChjbGljayk9XCJhcHBseUZpbHRlcigpXCJcbiAgICBbZGlzYWJsZWRdPVwiKGZvcm0ucHJpc3RpbmUgJiYgZm9ybS51bnRvdWNoZWQpIHx8IGZvcm0uaW52YWxpZFwiXG4gICAgdGl0bGU9XCJ7eyAnQXBwbHknIHwgdHJhbnNsYXRlIH19XCJcbiAgICB0cmFuc2xhdGVcbiAgPlxuICAgIEFwcGx5XG4gIDwvYnV0dG9uPlxuPC9kaXY+XG4iXX0=
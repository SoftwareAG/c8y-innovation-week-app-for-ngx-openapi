import { getBasicInputArrayFormFieldConfig } from '../../dynamic-forms/presets';
import { gettext } from '../../i18n/gettext';
import { BaseColumn } from './base.column';
export class CustomColumn extends BaseColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = this.name || 'custom';
        this.header = this.header || gettext('Custom');
        this.filterable = true;
        this.filteringConfig = {
            fields: [
                {
                    key: 'exists',
                    type: 'switch',
                    defaultValue: false,
                    templateOptions: {
                        label: gettext('Only rows where value is defined')
                    }
                },
                ...getBasicInputArrayFormFieldConfig({
                    key: 'equals',
                    label: gettext('Only rows where value equals to'),
                    addText: gettext('Add next`value`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: '10300',
                    optional: true
                })
            ],
            getFilter: (model) => {
                const filter = {};
                if (model.exists) {
                    filter.__has = this.path;
                }
                if (model.equals) {
                    filter[this.path] = { __in: model.equals };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLmNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZGF0YS1ncmlkL2NvbHVtbi9jdXN0b20uY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE1BQU0sT0FBTyxZQUFhLFNBQVEsVUFBVTtJQUMxQyxZQUFZLG1CQUFrQztRQUM1QyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUUzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsR0FBRyxFQUFFLFFBQVE7b0JBQ2IsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsWUFBWSxFQUFFLEtBQUs7b0JBQ25CLGVBQWUsRUFBRTt3QkFDZixLQUFLLEVBQUUsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO3FCQUNuRDtpQkFDRjtnQkFDRCxHQUFHLGlDQUFpQyxDQUFDO29CQUNuQyxHQUFHLEVBQUUsUUFBUTtvQkFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO29CQUNqRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO29CQUNuQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO29CQUNqRCxXQUFXLEVBQUUsT0FBTztvQkFDcEIsUUFBUSxFQUFFLElBQUk7aUJBQ2YsQ0FBQzthQUNIO1lBQ0QsU0FBUyxFQUFFLENBQUMsS0FBVSxFQUFPLEVBQUU7Z0JBQzdCLE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQzFCO2dCQUNELElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQzVDO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QmFzaWNJbnB1dEFycmF5Rm9ybUZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vLi4vZHluYW1pYy1mb3Jtcy9wcmVzZXRzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi8uLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgQ29sdW1uQ29uZmlnIH0gZnJvbSAnLi4vZGF0YS1ncmlkLm1vZGVsJztcbmltcG9ydCB7IEJhc2VDb2x1bW4gfSBmcm9tICcuL2Jhc2UuY29sdW1uJztcblxuZXhwb3J0IGNsYXNzIEN1c3RvbUNvbHVtbiBleHRlbmRzIEJhc2VDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG5cbiAgICB0aGlzLm5hbWUgPSB0aGlzLm5hbWUgfHwgJ2N1c3RvbSc7XG4gICAgdGhpcy5oZWFkZXIgPSB0aGlzLmhlYWRlciB8fCBnZXR0ZXh0KCdDdXN0b20nKTtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBmaWVsZHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ2V4aXN0cycsXG4gICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdPbmx5IHJvd3Mgd2hlcmUgdmFsdWUgaXMgZGVmaW5lZCcpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAuLi5nZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcoe1xuICAgICAgICAgIGtleTogJ2VxdWFscycsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ09ubHkgcm93cyB3aGVyZSB2YWx1ZSBlcXVhbHMgdG8nKSxcbiAgICAgICAgICBhZGRUZXh0OiBnZXR0ZXh0KCdBZGQgbmV4dGB2YWx1ZWAnKSxcbiAgICAgICAgICB0b29sdGlwOiBnZXR0ZXh0KCdVc2UgKiBhcyBhIHdpbGRjYXJkIGNoYXJhY3RlcicpLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnMTAzMDAnLFxuICAgICAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyOiAobW9kZWw6IGFueSk6IGFueSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0ge307XG4gICAgICAgIGlmIChtb2RlbC5leGlzdHMpIHtcbiAgICAgICAgICBmaWx0ZXIuX19oYXMgPSB0aGlzLnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLmVxdWFscykge1xuICAgICAgICAgIGZpbHRlclt0aGlzLnBhdGhdID0geyBfX2luOiBtb2RlbC5lcXVhbHMgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IHRoaXMucGF0aCB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==
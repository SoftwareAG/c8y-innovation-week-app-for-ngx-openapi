import { Inject, Injectable, Optional } from '@angular/core';
import { isEmpty } from 'lodash-es';
import { from, of } from 'rxjs';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { AbstractConfigurationStrategy } from './abstract-configuration-strategy';
import { DATA_GRID_CONFIGURATION_CONTEXT, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER } from './data-grid-configuration.model';
import { LegacyGridConfigMapperService } from './legacy-grid-config-mapper.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/user-preferences/user-preferences.service";
import * as i2 from "./legacy-grid-config-mapper.service";
/**
 * Stores data grid configuration in form of user preferences.
 */
export class UserPreferencesConfigurationStrategy extends AbstractConfigurationStrategy {
    constructor(userPreferencesService, context, contextProvider, legacyGridMapperService) {
        super(context, contextProvider);
        this.userPreferencesService = userPreferencesService;
        this.context = context;
        this.contextProvider = contextProvider;
        this.legacyGridMapperService = legacyGridMapperService;
    }
    getConfig$(context) {
        const configContext = this.retrieveContext(context);
        if (isEmpty(configContext)) {
            return of(undefined);
        }
        else {
            return configContext.legacyConfigKey || configContext.legacyFilterKey
                ? this.legacyGridMapperService.getMappedGridConfig(configContext)
                : this.userPreferencesService.get(configContext?.key);
        }
    }
    saveConfig$(config, context) {
        const configContext = this.retrieveContext(context);
        return isEmpty(configContext)
            ? of(undefined)
            : from(this.userPreferencesService.set(configContext?.key, config));
    }
}
UserPreferencesConfigurationStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesConfigurationStrategy, deps: [{ token: i1.UserPreferencesService }, { token: DATA_GRID_CONFIGURATION_CONTEXT, optional: true }, { token: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, optional: true }, { token: i2.LegacyGridConfigMapperService }], target: i0.ɵɵFactoryTarget.Injectable });
UserPreferencesConfigurationStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesConfigurationStrategy, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesConfigurationStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserPreferencesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_GRID_CONFIGURATION_CONTEXT]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER]
                }, {
                    type: Optional
                }] }, { type: i2.LegacyGridConfigMapperService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy1jb25maWd1cmF0aW9uLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2RhdGEtZ3JpZC91c2VyLXByZWZlcmVuY2VzLWNvbmZpZ3VyYXRpb24tc3RyYXRlZ3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsSUFBSSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM3RixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRixPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLHdDQUF3QyxFQUd6QyxNQUFNLGlDQUFpQyxDQUFDO0FBRXpDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7O0FBU3BGOztHQUVHO0FBRUgsTUFBTSxPQUFPLG9DQUFxQyxTQUFRLDZCQUE2QjtJQUNyRixZQUNZLHNCQUE4QyxFQUc5QyxPQUF5QyxFQUd6QyxlQUEwQyxFQUMxQyx1QkFBc0Q7UUFFaEUsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQVR0QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBRzlDLFlBQU8sR0FBUCxPQUFPLENBQWtDO1FBR3pDLG9CQUFlLEdBQWYsZUFBZSxDQUEyQjtRQUMxQyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQStCO0lBR2xFLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBMEM7UUFDbkQsTUFBTSxhQUFhLEdBQXFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEYsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdEI7YUFBTTtZQUNMLE9BQU8sYUFBYSxDQUFDLGVBQWUsSUFBSSxhQUFhLENBQUMsZUFBZTtnQkFDbkUsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUM7Z0JBQ2pFLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCxXQUFXLENBQ1QsTUFBa0IsRUFDbEIsT0FBMEM7UUFFMUMsTUFBTSxhQUFhLEdBQXFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEYsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDOztpSUFsQ1Usb0NBQW9DLHdEQUdyQywrQkFBK0IsNkJBRy9CLHdDQUF3QztxSUFOdkMsb0NBQW9DLGNBRHZCLE1BQU07MkZBQ25CLG9DQUFvQztrQkFEaEQsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzBCQUk3QixNQUFNOzJCQUFDLCtCQUErQjs7MEJBQ3RDLFFBQVE7OzBCQUVSLE1BQU07MkJBQUMsd0NBQXdDOzswQkFDL0MsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdXNlci1wcmVmZXJlbmNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb25maWd1cmF0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL2Fic3RyYWN0LWNvbmZpZ3VyYXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHtcbiAgREFUQV9HUklEX0NPTkZJR1VSQVRJT05fQ09OVEVYVCxcbiAgREFUQV9HUklEX0NPTkZJR1VSQVRJT05fQ09OVEVYVF9QUk9WSURFUixcbiAgR3JpZENvbmZpZ0NvbnRleHQsXG4gIEdyaWRDb25maWdDb250ZXh0UHJvdmlkZXJcbn0gZnJvbSAnLi9kYXRhLWdyaWQtY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBDb2x1bW4sIEdyaWRDb25maWcgfSBmcm9tICcuL2RhdGEtZ3JpZC5tb2RlbCc7XG5pbXBvcnQgeyBMZWdhY3lHcmlkQ29uZmlnTWFwcGVyU2VydmljZSB9IGZyb20gJy4vbGVnYWN5LWdyaWQtY29uZmlnLW1hcHBlci5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyUHJlZmVyZW5jZXNHcmlkQ29uZmlnQ29udGV4dCBleHRlbmRzIEdyaWRDb25maWdDb250ZXh0IHtcbiAga2V5OiBzdHJpbmc7XG4gIGxlZ2FjeUNvbmZpZ0tleT86IHN0cmluZztcbiAgbGVnYWN5RmlsdGVyS2V5Pzogc3RyaW5nO1xuICBkZWZhdWx0Q29sdW1ucz86IENvbHVtbltdO1xufVxuXG4vKipcbiAqIFN0b3JlcyBkYXRhIGdyaWQgY29uZmlndXJhdGlvbiBpbiBmb3JtIG9mIHVzZXIgcHJlZmVyZW5jZXMuXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzQ29uZmlndXJhdGlvblN0cmF0ZWd5IGV4dGVuZHMgQWJzdHJhY3RDb25maWd1cmF0aW9uU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICBASW5qZWN0KERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX0NPTlRFWFQpXG4gICAgQE9wdGlvbmFsKClcbiAgICBwcm90ZWN0ZWQgY29udGV4dDogVXNlclByZWZlcmVuY2VzR3JpZENvbmZpZ0NvbnRleHQsXG4gICAgQEluamVjdChEQVRBX0dSSURfQ09ORklHVVJBVElPTl9DT05URVhUX1BST1ZJREVSKVxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJvdGVjdGVkIGNvbnRleHRQcm92aWRlcjogR3JpZENvbmZpZ0NvbnRleHRQcm92aWRlcixcbiAgICBwcm90ZWN0ZWQgbGVnYWN5R3JpZE1hcHBlclNlcnZpY2U6IExlZ2FjeUdyaWRDb25maWdNYXBwZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGNvbnRleHQsIGNvbnRleHRQcm92aWRlcik7XG4gIH1cblxuICBnZXRDb25maWckKGNvbnRleHQ/OiBVc2VyUHJlZmVyZW5jZXNHcmlkQ29uZmlnQ29udGV4dCk6IE9ic2VydmFibGU8R3JpZENvbmZpZz4ge1xuICAgIGNvbnN0IGNvbmZpZ0NvbnRleHQ6IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0ID0gdGhpcy5yZXRyaWV2ZUNvbnRleHQoY29udGV4dCk7XG5cbiAgICBpZiAoaXNFbXB0eShjb25maWdDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb25maWdDb250ZXh0LmxlZ2FjeUNvbmZpZ0tleSB8fCBjb25maWdDb250ZXh0LmxlZ2FjeUZpbHRlcktleVxuICAgICAgICA/IHRoaXMubGVnYWN5R3JpZE1hcHBlclNlcnZpY2UuZ2V0TWFwcGVkR3JpZENvbmZpZyhjb25maWdDb250ZXh0KVxuICAgICAgICA6IHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5nZXQoY29uZmlnQ29udGV4dD8ua2V5KTtcbiAgICB9XG4gIH1cblxuICBzYXZlQ29uZmlnJChcbiAgICBjb25maWc6IEdyaWRDb25maWcsXG4gICAgY29udGV4dD86IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0XG4gICk6IE9ic2VydmFibGU8R3JpZENvbmZpZz4ge1xuICAgIGNvbnN0IGNvbmZpZ0NvbnRleHQ6IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0ID0gdGhpcy5yZXRyaWV2ZUNvbnRleHQoY29udGV4dCk7XG4gICAgcmV0dXJuIGlzRW1wdHkoY29uZmlnQ29udGV4dClcbiAgICAgID8gb2YodW5kZWZpbmVkKVxuICAgICAgOiBmcm9tKHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5zZXQoY29uZmlnQ29udGV4dD8ua2V5LCBjb25maWcpKTtcbiAgfVxufVxuIl19
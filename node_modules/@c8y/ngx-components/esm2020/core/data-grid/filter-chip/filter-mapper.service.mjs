import { Injectable } from '@angular/core';
import { flatten, get } from 'lodash-es';
import { combineLatest, from, of } from 'rxjs';
import { map, reduce, switchMap } from 'rxjs/operators';
import { AlertService } from '../../alert/alert.service';
import { C8yJSONSchema } from '../../dynamic-forms/json-schema/c8y-json-schema.service';
import { FilterMapperFactory } from './filter-mapper.factory';
import * as i0 from "@angular/core";
import * as i1 from "../../alert/alert.service";
import * as i2 from "../../dynamic-forms/json-schema/c8y-json-schema.service";
import * as i3 from "./filter-mapper.factory";
export class FilterMapperService {
    constructor(alert, jsonschema, filterMapperFactory) {
        this.alert = alert;
        this.jsonschema = jsonschema;
        this.filterMapperFactory = filterMapperFactory;
    }
    getMappedFilterValues(filter) {
        return of(filter).pipe(switchMap(filter => {
            const { schema, fields, generateChips } = filter.filteringConfig || {};
            const { externalFilterQuery } = filter;
            if (schema || fields) {
                // Will return the extracted filterChip items from the formly fields definition.
                const mappedFields = schema ? [this.jsonschema.toFieldConfig(schema)] : fields;
                return this.mapFieldsToFilter(filter, mappedFields);
            }
            if (generateChips) {
                // Will return the extracted filterChip items from the custom generatedChips
                // function defined in the columns filteringConfig.
                const generatedChips = generateChips(externalFilterQuery);
                const mappedChips = generatedChips.map(chip => ({ ...filter, ...chip }));
                return of(mappedChips);
            }
            if (externalFilterQuery?.chips) {
                // If no schema or custom chips generation function is provided user can put already generated
                // chips in the externalFilterQuery as it is seen in the server example tutorial grid.
                const chips = externalFilterQuery.chips || [];
                const mappedChips = chips.map(chip => ({ ...filter, ...chip }));
                return of(mappedChips);
            }
            return of([]);
        }));
    }
    mapFieldsToFilter(filterChip, formlyFields, path = [], result = of([])) {
        return result.pipe(switchMap(resultChips => {
            return from(formlyFields).pipe(switchMap(field => this.processField(filterChip, field, path, resultChips)), reduce((resultChips, newChips) => [...new Set([...newChips, ...resultChips])]));
        }));
    }
    processField(filterChip, field, path, resultChips) {
        const currentPath = [...path];
        if (field.key) {
            currentPath.push(field.key);
        }
        if (field.fieldGroup) {
            const chip = field.props?.label ? { ...filterChip, label: field.props.label } : filterChip;
            return this.mapFieldsToFilter(chip, field.fieldGroup, currentPath);
        }
        if (field.fieldArray) {
            const fieldsArray = get(filterChip.externalFilterQuery, currentPath);
            const filters = fieldsArray.map((el, index) => {
                filterChip.path = currentPath;
                return this.mapFieldsToFilter(filterChip, [field.fieldArray], [...currentPath, index]);
            });
            return combineLatest(filters).pipe(map(result => flatten(result)));
        }
        filterChip.path = currentPath;
        if (get(filterChip.externalFilterQuery, currentPath)) {
            return this.getChipFromFactory(resultChips, field, filterChip);
        }
        return of([]);
    }
    getChipFromFactory(resultChips, field, filterChip) {
        try {
            const filterMapper = this.filterMapperFactory.get(field.type);
            return filterMapper
                .map(field, filterChip)
                .pipe(map(mappedChip => (mappedChip.displayValue ? [...resultChips, mappedChip] : resultChips)));
        }
        catch (error) {
            this.alert.danger(error);
            return of([]);
        }
    }
    removeChip(chip) {
        const { path, externalFilterQuery } = chip;
        const lastKey = path[path.length - 1];
        const parentObj = path
            .slice(0, -1)
            .reduce((nestedObj, key) => nestedObj[key], externalFilterQuery);
        if (Array.isArray(parentObj)) {
            parentObj.splice(lastKey, 1);
        }
        else {
            delete parentObj[lastKey];
        }
        return {
            externalFilterQuery,
            columnName: chip.columnName
        };
    }
}
FilterMapperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperService, deps: [{ token: i1.AlertService }, { token: i2.C8yJSONSchema }, { token: i3.FilterMapperFactory }], target: i0.ɵɵFactoryTarget.Injectable });
FilterMapperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.AlertService }, { type: i2.C8yJSONSchema }, { type: i3.FilterMapperFactory }]; } });
//# sourceMappingURL=data:application/json;base64,
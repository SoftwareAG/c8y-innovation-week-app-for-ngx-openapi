import { Injectable } from '@angular/core';
import { get } from 'lodash-es';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { DatePipe } from '../../common';
import { toObservable } from '../../common/extension-hooks';
import * as i0 from "@angular/core";
import * as i1 from "../../common";
export class BooleanFilterMapper {
    constructor() {
        this.fieldType = ['switch', 'boolean', 'checkbox'];
    }
    map(field, filter) {
        if (this.fieldType.includes(field.type.toString())) {
            if (get(filter.externalFilterQuery, filter.path)) {
                return of({
                    ...filter,
                    value: get(filter.externalFilterQuery, filter.path),
                    displayValue: field.props?.label
                });
            }
        }
    }
}
BooleanFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BooleanFilterMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BooleanFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BooleanFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BooleanFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class RadioFilterMapper {
    constructor() {
        this.fieldType = ['radio', 'enum'];
    }
    map(field, filter) {
        if (this.fieldType.includes(field.type.toString())) {
            const fieldOptions = field.props?.options || field.props?.enum;
            return toObservable(fieldOptions).pipe(map(options => {
                const object = options.find(option => option.value === get(filter.externalFilterQuery, filter.path)) ??
                    options.find(option => option === get(filter.externalFilterQuery, filter.path));
                return {
                    ...filter,
                    value: object,
                    displayValue: object?.label
                };
            }));
        }
    }
}
RadioFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RadioFilterMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RadioFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RadioFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RadioFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class TypeaheadFilterMapper {
    constructor() {
        this.fieldType = 'typeahead';
    }
    map(field, filter) {
        if (this.fieldType === field.type) {
            const displayProperty = field.props?.displayProperty;
            const valueNoProps = get(filter.externalFilterQuery, filter.path);
            const valueProperties = field.props?.valueProperties;
            let value = valueNoProps;
            if (valueProperties) {
                value = valueProperties.reduce((acc, prop) => {
                    const value = get(filter.externalFilterQuery, [...filter.path, prop]);
                    return { ...acc, [prop]: value };
                }, {});
            }
            return of({
                ...filter,
                value,
                displayValue: get(filter.externalFilterQuery, [...filter.path, displayProperty])
            });
        }
    }
}
TypeaheadFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TypeaheadFilterMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TypeaheadFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TypeaheadFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TypeaheadFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class DateFilterMapper {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.fieldType = ['date-time', 'date'];
    }
    map(field, filter) {
        if (this.fieldType.includes(field.type.toString())) {
            return of({
                ...filter,
                label: field.props?.label,
                displayValue: this.datePipe
                    .transform(new Date(get(filter.externalFilterQuery, filter.path)))
                    .toString(),
                value: get(filter.externalFilterQuery, filter.path)
            });
        }
    }
}
DateFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DateFilterMapper, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Injectable });
DateFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DateFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DateFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; } });
export class SelectFilterMapper {
    constructor() {
        this.fieldType = 'select';
    }
    map(field, filter) {
        if (this.fieldType === field.type) {
            return toObservable(field.props?.options).pipe(map(options => {
                const selectedOption = options.find(option => option.value === get(filter.externalFilterQuery, filter.path));
                return {
                    ...filter,
                    value: get(filter.externalFilterQuery, filter.path),
                    displayValue: selectedOption.label
                };
            }));
        }
    }
}
SelectFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectFilterMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SelectFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class StringFilterMapper {
    constructor() {
        this.fieldType = ['string', 'input'];
    }
    map(field, filter) {
        if (this.fieldType.includes(field.type.toString())) {
            if (get(filter.externalFilterQuery, filter.path)) {
                return of({
                    ...filter,
                    value: get(filter.externalFilterQuery, filter.path),
                    displayValue: get(filter.externalFilterQuery, filter.path)
                });
            }
        }
    }
}
StringFilterMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StringFilterMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
StringFilterMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StringFilterMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StringFilterMapper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,
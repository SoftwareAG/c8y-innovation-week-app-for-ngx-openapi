import { Pipe } from '@angular/core';
import { of } from 'rxjs';
import { FilterMapperService } from './filter-mapper.service';
import * as i0 from "@angular/core";
import * as i1 from "./filter-mapper.service";
export class FilterMapperPipe {
    constructor(filterMapperService) {
        this.filterMapperService = filterMapperService;
    }
    transform(column) {
        const filterMapperService = this.filterMapperService;
        const filterObject = {
            value: '',
            displayValue: '',
            path: [],
            externalFilterQuery: column.externalFilterQuery,
            filteringConfig: column.filteringConfig,
            columnName: column.name,
            remove() {
                return filterMapperService.removeChip(this);
            }
        };
        if (column.filterPredicate) {
            const chip = {
                value: column.filterPredicate,
                displayValue: column.filterPredicate,
                filterPredicate: column.filterPredicate,
                columnName: column.name,
                remove() {
                    return {
                        columnName: this.columnName,
                        filterPredicate: this.filterPredicate
                    };
                }
            };
            return of([chip]);
        }
        return filterMapperService.getMappedFilterValues(filterObject);
    }
}
FilterMapperPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperPipe, deps: [{ token: i1.FilterMapperService }], target: i0.ɵɵFactoryTarget.Pipe });
FilterMapperPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperPipe, name: "mapToFilterChips" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterMapperPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'mapToFilterChips'
                }]
        }], ctorParameters: function () { return [{ type: i1.FilterMapperService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLW1hcHBlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9kYXRhLWdyaWQvZmlsdGVyLWNoaXAvZmlsdGVyLW1hcHBlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7OztBQUs5RCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFlBQW9CLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0lBQUcsQ0FBQztJQUVoRSxTQUFTLENBQUMsTUFBYztRQUN0QixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUVyRCxNQUFNLFlBQVksR0FBZTtZQUMvQixLQUFLLEVBQUUsRUFBRTtZQUNULFlBQVksRUFBRSxFQUFFO1lBQ2hCLElBQUksRUFBRSxFQUFFO1lBQ1IsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLG1CQUFtQjtZQUMvQyxlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7WUFDdkMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ3ZCLE1BQU07Z0JBQ0osT0FBTyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsQ0FBQztTQUNGLENBQUM7UUFFRixJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEdBQWU7Z0JBQ3ZCLEtBQUssRUFBRSxNQUFNLENBQUMsZUFBZTtnQkFDN0IsWUFBWSxFQUFFLE1BQU0sQ0FBQyxlQUF5QjtnQkFDOUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUF5QjtnQkFDakQsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUN2QixNQUFNO29CQUNKLE9BQU87d0JBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO3dCQUMzQixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7cUJBQ3RDLENBQUM7Z0JBQ0osQ0FBQzthQUNGLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDbkI7UUFFRCxPQUFPLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7OzZHQW5DVSxnQkFBZ0I7MkdBQWhCLGdCQUFnQjsyRkFBaEIsZ0JBQWdCO2tCQUg1QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxrQkFBa0I7aUJBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbHVtbiwgRmlsdGVyQ2hpcCB9IGZyb20gJy4uL2RhdGEtZ3JpZC5tb2RlbCc7XG5pbXBvcnQgeyBGaWx0ZXJNYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWx0ZXItbWFwcGVyLnNlcnZpY2UnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdtYXBUb0ZpbHRlckNoaXBzJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJNYXBwZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlsdGVyTWFwcGVyU2VydmljZTogRmlsdGVyTWFwcGVyU2VydmljZSkge31cblxuICB0cmFuc2Zvcm0oY29sdW1uOiBDb2x1bW4pOiBPYnNlcnZhYmxlPEZpbHRlckNoaXBbXT4ge1xuICAgIGNvbnN0IGZpbHRlck1hcHBlclNlcnZpY2UgPSB0aGlzLmZpbHRlck1hcHBlclNlcnZpY2U7XG5cbiAgICBjb25zdCBmaWx0ZXJPYmplY3Q6IEZpbHRlckNoaXAgPSB7XG4gICAgICB2YWx1ZTogJycsXG4gICAgICBkaXNwbGF5VmFsdWU6ICcnLFxuICAgICAgcGF0aDogW10sXG4gICAgICBleHRlcm5hbEZpbHRlclF1ZXJ5OiBjb2x1bW4uZXh0ZXJuYWxGaWx0ZXJRdWVyeSxcbiAgICAgIGZpbHRlcmluZ0NvbmZpZzogY29sdW1uLmZpbHRlcmluZ0NvbmZpZyxcbiAgICAgIGNvbHVtbk5hbWU6IGNvbHVtbi5uYW1lLFxuICAgICAgcmVtb3ZlKCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyTWFwcGVyU2VydmljZS5yZW1vdmVDaGlwKHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoY29sdW1uLmZpbHRlclByZWRpY2F0ZSkge1xuICAgICAgY29uc3QgY2hpcDogRmlsdGVyQ2hpcCA9IHtcbiAgICAgICAgdmFsdWU6IGNvbHVtbi5maWx0ZXJQcmVkaWNhdGUsXG4gICAgICAgIGRpc3BsYXlWYWx1ZTogY29sdW1uLmZpbHRlclByZWRpY2F0ZSBhcyBzdHJpbmcsXG4gICAgICAgIGZpbHRlclByZWRpY2F0ZTogY29sdW1uLmZpbHRlclByZWRpY2F0ZSBhcyBzdHJpbmcsXG4gICAgICAgIGNvbHVtbk5hbWU6IGNvbHVtbi5uYW1lLFxuICAgICAgICByZW1vdmUoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHVtbk5hbWU6IHRoaXMuY29sdW1uTmFtZSxcbiAgICAgICAgICAgIGZpbHRlclByZWRpY2F0ZTogdGhpcy5maWx0ZXJQcmVkaWNhdGVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9mKFtjaGlwXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbHRlck1hcHBlclNlcnZpY2UuZ2V0TWFwcGVkRmlsdGVyVmFsdWVzKGZpbHRlck9iamVjdCk7XG4gIH1cbn1cbiJdfQ==
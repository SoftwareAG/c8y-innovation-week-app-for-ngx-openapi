import { Injectable } from '@angular/core';
import { isEmpty, isNil, omitBy } from 'lodash-es';
import { combineLatest, of } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { DataGridService } from './data-grid.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/user-preferences/user-preferences.service";
import * as i2 from "./data-grid.service";
export class LegacyGridConfigMapperService {
    constructor(userPreferencesService, dataGridService) {
        this.userPreferencesService = userPreferencesService;
        this.dataGridService = dataGridService;
    }
    getMappedGridConfig(context) {
        const legacyAllDevicesGridKey = context.legacyConfigKey;
        const legacyAllDevicesGridFilterKey = context.legacyFilterKey;
        return combineLatest([
            this.userPreferencesService.get(legacyAllDevicesGridKey),
            this.userPreferencesService.get(legacyAllDevicesGridFilterKey)
        ]).pipe(map(([legacyConfig, legacyFilterConfig]) => this.mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig, context.defaultColumns)), concatMap(mappedLegacyConfig => {
            if (mappedLegacyConfig) {
                return Promise.all([
                    this.userPreferencesService.set(legacyAllDevicesGridKey, null),
                    this.userPreferencesService.set(legacyAllDevicesGridFilterKey, null)
                ]).then(() => mappedLegacyConfig);
            }
            else {
                return of(null);
            }
        }), concatMap(mappedLegacyConfig => mappedLegacyConfig
            ? this.userPreferencesService
                .set(context?.key, mappedLegacyConfig)
                .then(() => mappedLegacyConfig)
            : this.userPreferencesService.get(context?.key)), map(config => config || {
            columns: [],
            pagination: {
                pageSize: this.dataGridService.DEFAULT_PAGE_SIZE,
                currentPage: 1
            }
        }));
    }
    mapLegacyToDeviceGridConfig(legacyConfig, legacyFilterConfig, defaultColumns = []) {
        if (Array.isArray(legacyConfig) || !isEmpty(legacyFilterConfig)) {
            return {
                columns: this.getConfigColumns(legacyConfig, legacyFilterConfig, defaultColumns),
                pagination: {
                    pageSize: this.dataGridService.DEFAULT_PAGE_SIZE,
                    currentPage: 1
                }
            };
        }
    }
    getConfigColumns(legacyConfig, legacyFilterConfig, defaultColumns) {
        const legacyFilterConfigArray = legacyFilterConfig
            ? Object.keys(legacyFilterConfig).map(key => ({
                key,
                filter: {
                    externalFilterQuery: legacyFilterConfig[key].filtering
                },
                sorting: legacyFilterConfig[key].sorting
            }))
            : [];
        const config = this.mergeLegacyConfigs(legacyConfig || defaultColumns.map(column => ({ key: column.name })), legacyFilterConfigArray);
        return config
            .filter(column => column.key !== 'removalColumn')
            .map(this.mapLegacyColumnConfig.bind(this));
    }
    mergeLegacyConfigs(columnConfig, filterConfig) {
        return columnConfig.map(column => ({
            ...filterConfig.find(item => item.key === column.key),
            ...column
        }));
    }
    mapLegacyColumnConfig(legacy) {
        const { active, key, custom, headerName, fragmentPath, filter, sorting } = legacy;
        const sortOrder = sorting ? this.migrateSortOrder(sorting) : '';
        return omitBy({
            visible: active ?? true,
            name: LegacyGridConfigMapperService.deviceGridLegacyKeyToName[key] || key,
            sortOrder,
            custom,
            header: custom ? headerName : null,
            path: fragmentPath,
            filter
        }, isNil);
    }
    migrateSortOrder(sorting) {
        switch (sorting.order) {
            case 0:
                return '';
            case -1:
                return 'desc';
            case 1:
                return 'asc';
        }
    }
}
LegacyGridConfigMapperService.deviceGridLegacyKeyToName = {
    status: 'status',
    name: 'name',
    model: 'model',
    serialNumber: 'serialNumber',
    group: 'group',
    registrationDate: 'registrationDate',
    systemId: 'systemId',
    imei: 'imei',
    alarms: 'alarms'
};
LegacyGridConfigMapperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LegacyGridConfigMapperService, deps: [{ token: i1.UserPreferencesService }, { token: i2.DataGridService }], target: i0.ɵɵFactoryTarget.Injectable });
LegacyGridConfigMapperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LegacyGridConfigMapperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LegacyGridConfigMapperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.UserPreferencesService }, { type: i2.DataGridService }]; } });
//# sourceMappingURL=data:application/json;base64,
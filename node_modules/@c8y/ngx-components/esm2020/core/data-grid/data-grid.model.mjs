export const minColumnGridTrackSize = 80;
/** Maps column types to relative widths. */
export const ratiosByColumnTypes = {
    /** The width ration for icon column type. */
    icon: 1,
    /** The width ration for numeric column type. */
    numeric: 1,
    /** The width ration for short text column type. */
    'text-short': 1.67,
    /** The width ration for long text column type. */
    'text-long': 3.33
};
/** Filtering actions. */
export var FilteringActionType;
(function (FilteringActionType) {
    /** Action invoked when filter settings are to be applied. */
    FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
    /** Action invoked when filter settings are to be cleared. */
    FilteringActionType["ResetFilter"] = "RESET_FILTER";
})(FilteringActionType || (FilteringActionType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1ncmlkLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9kYXRhLWdyaWQvZGF0YS1ncmlkLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVLQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFFekMsNENBQTRDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQ2pDLDZDQUE2QztJQUM3QyxJQUFJLEVBQUUsQ0FBQztJQUVQLGdEQUFnRDtJQUNoRCxPQUFPLEVBQUUsQ0FBQztJQUVWLG1EQUFtRDtJQUNuRCxZQUFZLEVBQUUsSUFBSTtJQUVsQixrREFBa0Q7SUFDbEQsV0FBVyxFQUFFLElBQUk7Q0FDbEIsQ0FBQztBQWFGLHlCQUF5QjtBQUN6QixNQUFNLENBQU4sSUFBWSxtQkFNWDtBQU5ELFdBQVksbUJBQW1CO0lBQzdCLDZEQUE2RDtJQUM3RCxtREFBNEIsQ0FBQTtJQUU1Qiw2REFBNkQ7SUFDN0QsbURBQTRCLENBQUE7QUFDOUIsQ0FBQyxFQU5XLG1CQUFtQixLQUFuQixtQkFBbUIsUUFNOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSVJlc3VsdExpc3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKiogRGVzY3JpYmVzIHRoZSBpbnRlcmZhY2Ugb2YgdGhlIGRhdGEgZ3JpZC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUdyaWQge1xuICAvKiogVGhlIGxpc3Qgb2YgY29sdW1ucy4gKi9cbiAgY29sdW1uczogQ29sdW1uW107XG5cbiAgLyoqIFRoZSBsaXN0IG9mIGl0ZW1zLiAqL1xuICByb3dzOiBSb3dbXTtcblxuICAvKiogUGFnaW5hdGlvbiBvYmplY3QuICovXG4gIHBhZ2luYXRpb246IFBhZ2luYXRpb247XG5cbiAgLyoqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmV0Y2ggc2VydmVyIGRhdGEuICovXG4gIHNlcnZlclNpZGVEYXRhQ2FsbGJhY2s6IFNlcnZlclNpZGVEYXRhQ2FsbGJhY2s7XG5cbiAgLyoqIFdoZXRoZXIgaXRlbXMgYXJlIHNlbGVjdGFibGUuICovXG4gIHNlbGVjdGFibGU6IGJvb2xlYW47XG5cbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwcmltYXJ5IGtleSBwcm9wZXJ0eS4gKi9cbiAgc2VsZWN0aW9uUHJpbWFyeUtleTogc3RyaW5nO1xuXG4gIC8qKiBEYXRhIGdyaWQgZGlzcGxheSBvcHRpb25zLiAqL1xuICBkaXNwbGF5T3B0aW9uczogRGlzcGxheU9wdGlvbnM7XG5cbiAgLyoqIEluZGl2aWR1YWwgYWN0aW9uIGNvbnRyb2xzLiAqL1xuICBhY3Rpb25Db250cm9sczogQWN0aW9uQ29udHJvbFtdO1xuXG4gIC8qKiBCdWxrIGFjdGlvbiBjb250cm9scy4gKi9cbiAgYnVsa0FjdGlvbkNvbnRyb2xzOiBCdWxrQWN0aW9uQ29udHJvbFtdO1xuXG4gIC8qKiBIZWFkZXIgYWN0aW9uIGNvbnRyb2xzLiAqL1xuICBoZWFkZXJBY3Rpb25Db250cm9scz86IEhlYWRlckFjdGlvbkNvbnRyb2xbXTtcbn1cblxuLyoqIERlc2NyaWJlcyBhIGRhdGEgZ3JpZCBjb2x1bW4uICovXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbiB7XG4gIC8qKiBUaGUgbmFtZSBmb3IgdGhlIGNvbHVtbi4gKi9cbiAgbmFtZTogc3RyaW5nIHwgU3BlY2lhbENvbHVtbk5hbWU7XG4gIC8qKiBUaGUgY29sdW1uJ3MgaGVhZGVyIChpZiBub3QgZ2l2ZW4sIGBuYW1lYCBpcyB1c2VkIGJ5IGRlZmF1bHQpLiAqL1xuICBoZWFkZXI/OiBzdHJpbmc7XG4gIC8qKiBUaGUgcGF0aCBpbiBhIHJvdyBpdGVtIHRvIHJlYWQgdGhlIGNlbGwgdmFsdWUgZnJvbS4gKi9cbiAgcGF0aD86IHN0cmluZztcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbHVtbiBpcyBkaXNwbGF5ZWQuICovXG4gIHZpc2libGU/OiBib29sZWFuO1xuICAvKiogV2hldGhlciB0aGUgY29sdW1uIGNhbiBiZSBtb3ZlZCB0byBhbm90aGVyIHBvc2l0aW9uLiAqL1xuICBwb3NpdGlvbkZpeGVkPzogYm9vbGVhbjtcbiAgLyoqIE1hcmtzIGEgdXNlciBjb25maWd1cmVkIGN1c3RvbSBjb2x1bW4gKi9cbiAgY3VzdG9tPzogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbHVtbiBjYW4gYmUgcmVzaXplZC4gKi9cbiAgcmVzaXphYmxlPzogYm9vbGVhbjtcbiAgLyoqIE9wdGlvbmFsIHR5cGUgb2YgZGF0YSBpbiB0aGUgY29sdW1uICh1c2VkIHRvIHNldCBkYXRhLXR5cGUgYXR0cmlidXRlLCBlLmcuIGZvciBhZGRpdGlvbmFsIHN0eWxpbmcpLiAqL1xuICBkYXRhVHlwZT86IENvbHVtbkRhdGFUeXBlO1xuICAvKiogVGhlIGNvbHVtbidzIHNpemUsIGUuZy4gXCI0MCBweFwiLiAqL1xuICBncmlkVHJhY2tTaXplPzogc3RyaW5nO1xuICAvKiogQWRkaXRpb25hbCBDU1MgY2xhc3NlcyBmb3IgdGhlIGhlYWRlciBjZWxsLiAqL1xuICBoZWFkZXJDU1NDbGFzc05hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgLyoqIEFkZGl0aW9uYWwgQ1NTIGNsYXNzZXMgZm9yIGRhdGEgY2VsbHMuICovXG4gIGNlbGxDU1NDbGFzc05hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICAvKiogV2hldGhlciB0aGUgY29sdW1uIGlzIHNvcnRhYmxlLiAqL1xuICBzb3J0YWJsZT86IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIHRoZSBzb3J0IG9yZGVyIGlzIGFzY2VuZGluZywgZGVzY2VuZGluZyBvciBub3Qgc3BlY2lmaWVkLiAqL1xuICBzb3J0T3JkZXI/OiBTb3J0T3JkZXI7XG4gIHNvcnRpbmdDb25maWc/OiBDb2x1bW5Tb3J0aW5nQ29uZmlnO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjb2x1bW4gaXMgZmlsdGVyYWJsZS4gKi9cbiAgZmlsdGVyYWJsZT86IGJvb2xlYW47XG4gIC8qKiBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3Igb3IgYSBmdW5jdGlvbiBmb3IgY2xpZW50LXNpZGUgZmlsdGVyaW5nLiAqL1xuICBmaWx0ZXJQcmVkaWNhdGU/OiBzdHJpbmcgfCBGaWx0ZXJQcmVkaWNhdGVGdW5jdGlvbjtcbiAgLyoqIEN1c3RvbSBmaWx0ZXJpbmcgZm9ybSByZW5kZXJlciBjYW4gc2V0IGFueSB2YWx1ZSBoZXJlIGFuZCBpdCBjYW4gYmUgdXNlZCB0byBidWlsZCBhIHF1ZXJ5IHRvIHRoZSBzZXJ2ZXIuICovXG4gIGV4dGVybmFsRmlsdGVyUXVlcnk/OiBhbnk7XG4gIGZpbHRlcmluZ0NvbmZpZz86IEZvcm1seUNvbHVtbkZpbHRlcmluZ0NvbmZpZztcblxuICAvKiogQ3VzdG9tIGRhdGEgY2VsbCByZW5kZXJlciBjb21wb25lbnQuIEluamVjdCBgQ2VsbFJlbmRlcmVyQ29udGV4dGAgdG8gZ2V0IGFjY2VzcyB0byBkYXRhIHZhbHVlLCBpdGVtIGFuZCBjb2x1bW4gb2JqZWN0LiAqL1xuICBjZWxsUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIC8qKiBDdXN0b20gaGVhZGVyIGNlbGwgcmVuZGVyZXIgY29tcG9uZW50LiBJbmplY3QgYENlbGxSZW5kZXJlckNvbnRleHRgIHRvIGdldCBhY2Nlc3MgdG8gaGVhZGVyIHZhbHVlIGFuZCBjb2x1bW4gb2JqZWN0LiAqL1xuICBoZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIC8qKiBDdXN0b20gZmlsdGVyaW5nIGZvcm0gcmVuZGVyZXIgY29tcG9uZW50LiBJbmplY3QgYEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHRgIHRvIGdldCBhY2Nlc3MgdG8gY29sdW1uIG9iamVjdCBhbmQgbWV0aG9kczogYXBwbHlGaWx0ZXIsIHJlc2V0RmlsdGVyLiAqL1xuICBmaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG59XG5cbi8qKiBEZXNjcmliZXMgYSBjb2x1bW4gY29uZmlndXJhdGlvbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uQ29uZmlnIHtcbiAgLyoqIFRoZSBuYW1lIGZvciB0aGUgY29sdW1uLiAqL1xuICBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjb2x1bW4gaXMgZGlzcGxheWVkLiAqL1xuICB2aXNpYmxlPzogYm9vbGVhbjtcblxuICAvKiogV2hldGhlciB0aGUgc29ydCBvcmRlciBpcyBhc2NlbmRpbmcsIGRlc2NlbmRpbmcgb3Igbm90IHNwZWNpZmllZC4gKi9cbiAgc29ydE9yZGVyPzogU29ydE9yZGVyO1xuXG4gIC8qKiBUaGUgc2V0dGluZ3Mgb2YgZmlsdGVyIGluIGEgY29sdW1uLiAqL1xuICBmaWx0ZXI/OiBGaWx0ZXI7XG59XG5cbi8qKiBEZXNjcmliZXMgYSBjdXN0b20gY29sdW1uIGNvbmZpZ3VyYXRpb24uICovXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUNvbHVtbkNvbmZpZyBleHRlbmRzIENvbHVtbkNvbmZpZyB7XG4gIC8qKiBKU09OIHBhdGggdG8gdGhlIG1hbmFnZWQgb2JqZWN0IHByb3BlcnR5IHRvIGJlIGRpc3BsYXllZCAqL1xuICBwYXRoOiBzdHJpbmc7XG5cbiAgLyoqIENvbHVtbiBoZWFkZXIgdGl0bGUgKi9cbiAgaGVhZGVyOiBzdHJpbmc7XG5cbiAgLyoqIEZsYWcgdG8gaWRlbnRpZnkgY3VzdG9tIGNvbHVtbnMgKi9cbiAgY3VzdG9tOiBib29sZWFuO1xufVxuXG4vKiogRGVzY3JpYmVzIHRoZSBzZXR0aW5ncyBvZiBmaWx0ZXIgaW4gYSBjb2x1bW4uICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlciB7XG4gIC8qKiBDdXN0b20gZmlsdGVyaW5nIGZvcm0gcmVuZGVyZXIgY2FuIHNldCBhbnkgdmFsdWUgaGVyZSBhbmQgaXQgY2FuIGJlIHVzZWQgdG8gYnVpbGQgYSBxdWVyeSB0byB0aGUgc2VydmVyLiAqL1xuICBleHRlcm5hbEZpbHRlclF1ZXJ5PzogYW55O1xufVxuXG4vKiogRGVzY3JpYmVzIGFuIG9iamVjdCB3aXRoIGRhdGEgZ3JpZCBjb25maWd1cmF0aW9uLiAqL1xuZXhwb3J0IGludGVyZmFjZSBHcmlkQ29uZmlnIHtcbiAgLyoqIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdHMgZm9yIGFsbCB0aGUgY29sdW1ucy4gKi9cbiAgY29sdW1uczogQ29sdW1uQ29uZmlnW107XG5cbiAgLyoqIFBhZ2luYXRpb24gb2JqZWN0LiAqL1xuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uO1xufVxuXG4vKiogICovXG5leHBvcnQgY29uc3QgZW51bSBTcGVjaWFsQ29sdW1uTmFtZSB7XG4gIC8qKiBDb2x1bW4gd2l0aCBjaGVja2JveC4gKi9cbiAgQ2hlY2tib3ggPSAnY2hlY2tib3gnLFxuXG4gIC8qKiBDb2x1bW4gd2l0aCByYWRpbyBidXR0b24uICovXG4gIFJhZGlvQnV0dG9uID0gJ3JhZGlvLWJ1dHRvbicsXG5cbiAgLyoqIENvbHVtbiB3aXRoIHJvdyBhY3Rpb25zLiAqL1xuICBBY3Rpb25zID0gJ2FjdGlvbnMnXG59XG5cbi8qKiAgKi9cbmV4cG9ydCBjb25zdCBlbnVtIENvbHVtbkRhdGFUeXBlIHtcbiAgLyoqIENvbHVtbiB3aXRoIGljb24uICovXG4gIEljb24gPSAnaWNvbicsXG5cbiAgLyoqIE51bWVyaWMgY29sdW1uLiAqL1xuICBOdW1lcmljID0gJ251bWVyaWMnLFxuXG4gIC8qKiBDb2x1bW4gd2l0aCBzaG9ydCB0ZXh0LiAqL1xuICBUZXh0U2hvcnQgPSAndGV4dC1zaG9ydCcsXG5cbiAgLyoqIENvbHVtbiB3aXRoIGxvbmcgdGV4dC4gKi9cbiAgVGV4dExvbmcgPSAndGV4dC1sb25nJ1xufVxuXG4vKiogQ2xhc3NlcyBmb3IgY29sdW1uIGRhdGEgcmVjb3JkLiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQ29sdW1uRGF0YVJlY29yZENsYXNzTmFtZSB7XG4gIC8qKiBBbiBpY29uLiAqL1xuICBJY29uID0gJ2RhdGEtcmVjb3JkLWljb24nLFxuXG4gIC8qKiBBIGhlYWRlci4gKi9cbiAgSGVhZGVyID0gJ2RhdGEtcmVjb3JkLWhlYWRlcicsXG5cbiAgLyoqIERlZmF1bHQgLSBlbXB0eS4gKi9cbiAgRGVmYXVsdCA9ICcnXG59XG5cbmV4cG9ydCBjb25zdCBtaW5Db2x1bW5HcmlkVHJhY2tTaXplID0gODA7XG5cbi8qKiBNYXBzIGNvbHVtbiB0eXBlcyB0byByZWxhdGl2ZSB3aWR0aHMuICovXG5leHBvcnQgY29uc3QgcmF0aW9zQnlDb2x1bW5UeXBlcyA9IHtcbiAgLyoqIFRoZSB3aWR0aCByYXRpb24gZm9yIGljb24gY29sdW1uIHR5cGUuICovXG4gIGljb246IDEsXG5cbiAgLyoqIFRoZSB3aWR0aCByYXRpb24gZm9yIG51bWVyaWMgY29sdW1uIHR5cGUuICovXG4gIG51bWVyaWM6IDEsXG5cbiAgLyoqIFRoZSB3aWR0aCByYXRpb24gZm9yIHNob3J0IHRleHQgY29sdW1uIHR5cGUuICovXG4gICd0ZXh0LXNob3J0JzogMS42NyxcblxuICAvKiogVGhlIHdpZHRoIHJhdGlvbiBmb3IgbG9uZyB0ZXh0IGNvbHVtbiB0eXBlLiAqL1xuICAndGV4dC1sb25nJzogMy4zM1xufTtcblxuLyoqIFNvcnRpbmcgb3JkZXI6IGFzY2VuZGluZywgZGVzY2VuZGluZywgb3Igbm90IHNwZWNpZmllZC4gKi9cbmV4cG9ydCB0eXBlIFNvcnRPcmRlciA9ICdhc2MnIHwgJ2Rlc2MnIHwgJyc7XG5cbi8qKlxuICogQSBmaWx0ZXIgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICogQHBhcmFtIGl0ZW0gVGhlIGN1cnJlbnQgaXRlbSB0byBiZSBjaGVja2VkLlxuICogQHBhcmFtIHBhdGggVGhlIHByb3BlcnR5IHBhdGggY29uZmlndXJlZCBpbiB0aGUgY3VycmVudCBjb2x1bW4uXG4gKiBAcmV0dXJucyBUaGUgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGl0ZW0gbWF0Y2hlcyBhIGNvbmRpdGlvbiBvciBub3QuXG4gKi9cbmV4cG9ydCB0eXBlIEZpbHRlclByZWRpY2F0ZUZ1bmN0aW9uID0gKGl0ZW06IG9iamVjdCwgcGF0aDogc3RyaW5nKSA9PiBib29sZWFuO1xuXG4vKiogRmlsdGVyaW5nIGFjdGlvbnMuICovXG5leHBvcnQgZW51bSBGaWx0ZXJpbmdBY3Rpb25UeXBlIHtcbiAgLyoqIEFjdGlvbiBpbnZva2VkIHdoZW4gZmlsdGVyIHNldHRpbmdzIGFyZSB0byBiZSBhcHBsaWVkLiAqL1xuICBBcHBseUZpbHRlciA9ICdBUFBMWV9GSUxURVInLFxuXG4gIC8qKiBBY3Rpb24gaW52b2tlZCB3aGVuIGZpbHRlciBzZXR0aW5ncyBhcmUgdG8gYmUgY2xlYXJlZC4gKi9cbiAgUmVzZXRGaWx0ZXIgPSAnUkVTRVRfRklMVEVSJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1seUNvbHVtbkZpbHRlcmluZ0NvbmZpZyB7XG4gIC8qKiBEZWZpbmVzIGEgRmllbGRDb25maWcgY29uZmlndXJhdGlvbiBmb3IgRm9ybWx5LiAgKi9cbiAgZmllbGRzPzogRm9ybWx5RmllbGRDb25maWdbXTtcbiAgLyoqIERlZmluZXMgYSBKU09OIHNjaGVtYSBmb3IgZmlsdGVyaW5nIGNvbmZpZyBtb2RlbC4gQ2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBgZmllbGRzYCAqL1xuICBzY2hlbWE/OiBvYmplY3Q7XG4gIC8qKiBEZWZpbmVzIGEgbW9kZWwgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gcmVuZGVyZWQgZm9ybS4gKi9cbiAgbW9kZWw/OiBvYmplY3Q7XG4gIC8qKiBEZWZpbmVzIEZvcm1Hcm91cCBpbnN0YW5jZSAqL1xuICBmb3JtR3JvdXA/OiBGb3JtR3JvdXA7XG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgZmlsdGVyaW5nIGNvbmZpZyBtb2RlbCB0byBhbiBhcnJheSBvZiBwYXJ0aWFsIGZpbHRlciBjaGlwIG9iamVjdHMuXG4gICAqIEBwYXJhbSBtb2RlbCBBbiBvYmplY3Qgd2l0aCBkZWZpbmVkIHN0cnVjdHVyZSAoZS5nLiBieSBzY2hlbWEpLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwYXJ0aWFsIGZpbHRlciBjaGlwIG9iamVjdHMsIGVhY2ggY29udGFpbmluZyBhdCBsZWFzdCBgZGlzcGxheVZhbHVlYCBhbmQgdGhlIGFjdHVhbCBgdmFsdWVgIHRvIGJlIHVwZGF0ZWQuXG4gICAqIE9wdGlvbmFsbHksIG90aGVyIHByb3BlcnRpZXMgZnJvbSBgRmlsdGVyQ2hpcGAgYXJlIGFsbG93ZWQsIGZvciBleGFtcGxlLCBhIGN1c3RvbSBgcmVtb3ZlYCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuIGEgY2hpcCBpcyBiZWluZyByZW1vdmVkLlxuICAgKi9cbiAgZ2VuZXJhdGVDaGlwcz86IChtb2RlbDogYW55KSA9PiBQYXJ0aWFsRmlsdGVyQ2hpcEdlbmVyYXRpb25UeXBlW107XG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgZmlsdGVyaW5nIGNvbmZpZyBtb2RlbCAoZS5nLiBjb21pbmcgZnJvbSBzY2hlbWEgZm9ybSBjb21wb25lbnQpIHRvIGEgcXVlcnkgb2JqZWN0LlxuICAgKiBIb3dldmVyLCB1c2luZyBzY2hlbWEgZm9ybSBjb21wb25lbnQgaXMgbm90IG5lY2Vzc2FyeS5cbiAgICogTW9kZWwgY2FuIGJlIGRlZmluZWQgYXJiaXRyYXJpbHkgYnV0IG11c3QgY29udmVydGVkIHRvIGEgdmFsaWQgcXVlcnkgb2JqZWN0LlxuICAgKiBAcGFyYW0gbW9kZWwgQW4gb2JqZWN0IHdpdGggZGVmaW5lZCBzdHJ1Y3R1cmUgKGUuZy4gYnkgc2NoZW1hKS5cbiAgICogQHJldHVybnMgQSBxdWVyeSBvYmplY3QgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBhIHF1ZXJ5IHN0cmluZyAoUXVlcnlVdGlscykuXG4gICAqL1xuICBnZXRGaWx0ZXI6IChtb2RlbDogYW55KSA9PiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uU29ydGluZ0NvbmZpZyB7XG4gIHBhdGhTb3J0aW5nQ29uZmlnczogUGF0aFNvcnRpbmdDb25maWdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRoU29ydGluZ0NvbmZpZyB7XG4gIHBhdGg6IHN0cmluZztcbiAgc29ydE9yZGVyTW9kaWZpZXI/OiBTb3J0T3JkZXJNb2RpZmllcjtcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gU29ydE9yZGVyTW9kaWZpZXIge1xuICBLZWVwLFxuICBJbnZlcnRcbn1cblxuLyoqIERlc2NyaWJlcyBhbiBpdGVtIGluIHRoZSByb3cuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvdyB7XG4gIC8qKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGl0ZW0uICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqIEFueSBpdGVtIHByb3BlcnR5LiAqL1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKiBEZXNjcmliZXMgYSBwYWdpbmF0aW9uIG9iamVjdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvbiB7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIHRoZSBjdXJyZW50IHBhZ2UuICovXG4gIGN1cnJlbnRQYWdlPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIHRoZSBuZXh0IHBhZ2UuICovXG4gIG5leHRQYWdlPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIG9uIGEgc2luZ2xlIHBhZ2UuICovXG4gIHBhZ2VTaXplOiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBjYWxsYmFjayBmdW5jdGlvbiB0byBmZXRjaCBzZXJ2ZXIgZGF0YS5cbiAqIEBwYXJhbSBkYXRhU291cmNlTW9kaWZpZXIgVGhlIGN1cnJlbnQgZGF0YSBzb3VyY2UgbW9kaWZpZXIuXG4gKiBAcmV0dXJucyBSZXR1cm5zIHRoZSByZXN1bHQgZnJvbSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCB0eXBlIFNlcnZlclNpZGVEYXRhQ2FsbGJhY2sgPSAoXG4gIGRhdGFTb3VyY2VNb2RpZmllcjogRGF0YVNvdXJjZU1vZGlmaWVyXG4pID0+IFNlcnZlclNpZGVEYXRhUmVzdWx0IHwgUHJvbWlzZTxTZXJ2ZXJTaWRlRGF0YVJlc3VsdD4gfCBPYnNlcnZhYmxlPFNlcnZlclNpZGVEYXRhUmVzdWx0PjtcblxuLyoqIERlc2NyaWJlcyBhIGRhdGEgc291cmNlIG1vZGlmaWVyIGZvciByZXF1ZXN0aW5nIHNlcnZlciBkYXRhLiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhU291cmNlTW9kaWZpZXIge1xuICAvKiogVGhlIGxpc3Qgb2YgY29sdW1ucy4gKi9cbiAgY29sdW1uczogQ29sdW1uW107XG5cbiAgLyoqIFRleHQgdG8gc2VhcmNoLiAqL1xuICBzZWFyY2hUZXh0OiBzdHJpbmc7XG5cbiAgLyoqIFBhZ2luYXRpb24gb2JqZWN0LiAqL1xuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uO1xuXG4gIC8qKiBTZWxlY3Rpb24gaW5mbyBvYmplY3QuICovXG4gIHNlbGVjdGlvbjoge1xuICAgIC8qKiBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZW5hYmxlZC4gKi9cbiAgICBlbmFibGVkOiBib29sZWFuO1xuXG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwcmltYXJ5IGtleS4gKi9cbiAgICBwcmltYXJ5S2V5OiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKiBEZXNjcmliZXMgYSByZXN1bHQgZnJvbSBzZXJ2ZXIgd2l0aCBkYXRhIGFuZCBhZGRpdGlvbmFsIHN0YXRpc3RpY3MuICovXG5leHBvcnQgdHlwZSBTZXJ2ZXJTaWRlRGF0YVJlc3VsdCA9IElSZXN1bHRMaXN0PG9iamVjdD4gJiB7XG4gIC8qKiBUaGUgcmVhbCBncmFuZCB0b3RhbCBudW1iZXIgb2YgaXRlbXMgKHRoZSB3aG9sZSBkYXRhc2V0KS4gKi9cbiAgc2l6ZTogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIGFmdGVyIGZpbHRlcmluZyBhcHBsaWVkIHRvIHRoZSB3aG9sZSBkYXRhc2V0IChzdWJzZXQpLiAqL1xuICBmaWx0ZXJlZFNpemU6IG51bWJlcjtcblxuICAvKiogVGhlIGxpc3Qgb2YgaWRzIG9mIGFsbCBmaWx0ZXJlZCBpdGVtcyAoc3Vic2V0KS4gKi9cbiAgZmlsdGVyZWREYXRhSWRzPzogc3RyaW5nW107XG59O1xuXG4vKiogRGVzY3JpYmVzIGFuIG9iamVjdCB3aXRoIGRhdGEgc291cmNlIHN0YXRpc3RpY3MuICovXG5leHBvcnQgaW50ZXJmYWNlIERhdGFTb3VyY2VTdGF0cyB7XG4gIC8qKiBUaGUgcmVhbCBncmFuZCB0b3RhbCBudW1iZXIgb2YgaXRlbXMgKHRoZSB3aG9sZSBkYXRhc2V0KS4gKi9cbiAgc2l6ZTogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIGFmdGVyIGZpbHRlcmluZyBhcHBsaWVkIHRvIHRoZSB3aG9sZSBkYXRhc2V0IChzdWJzZXQpLiAqL1xuICBmaWx0ZXJlZFNpemU6IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiB0aGUgY3VycmVudCBwYWdlLiAqL1xuICBjdXJyZW50UGFnZTogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIHRoZSBuZXh0IHBhZ2UuICovXG4gIG5leHRQYWdlPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIGN1cnJlbnRseSBzaG93biBpbiB0aGUgbGlzdCB2aWV3LCBhLmsuYS4gY3VycmVudCBwYWdlICh3aGF0IHRoZSB1c2VyIHNlZXMgb24gc2NyZWVuKS4gKi9cbiAgY3VycmVudFBhZ2VTaXplOiBudW1iZXI7XG5cbiAgLyoqIFRoZSBudW1iZXIgb2YgaXRlbXMgb24gdGhlIGZpcnN0IHBhZ2UuICAqL1xuICBmaXJzdFBhZ2VTaXplOiBudW1iZXI7XG59XG5cbi8qKiBEZXNjcmliZXMgZGF0YSBncmlkIGRpc3BsYXkgb3B0aW9ucy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcGxheU9wdGlvbnMge1xuICAvKiogU2hvdyBvciBoaWRlIHplYnJhLXN0cmlwaW5nIGluIHRoZSB0YWJsZSAqL1xuICBzdHJpcGVkOiBib29sZWFuO1xuXG4gIC8qKiBTaG93IG9yIGhpZGUgZWFjaCBjZWxsIGJvcmRlciAqL1xuICBib3JkZXJlZDogYm9vbGVhbjtcblxuICAvKiogU2hvdyBvciBoaWRlIHRoZSBncmlkIGhlYWRlciAqL1xuICBncmlkSGVhZGVyOiBib29sZWFuO1xuXG4gIC8qKiBTaG93IG9yIGhpZGUgZmlsdGVyIGxhYmVsIGluIHRoZSBncmlkIGhlYWRlciAqL1xuICBmaWx0ZXI6IGJvb2xlYW47XG59XG5cbi8qKiBEZXNjcmliZXMgYSBkYXRhIGdyaWQgYWN0aW9uIGNvbnRyb2wgZm9yIGluZGl2aWR1YWwgaXRlbS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQ29udHJvbCB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUgYWN0aW9uLCBwcmVkZWZpbmVkIG9yIGN1c3RvbS4gKi9cbiAgdHlwZTogQnVpbHRJbkFjdGlvblR5cGUgfCBzdHJpbmc7XG5cbiAgLyoqIFRoZSBsYWJlbCBmb3IgdGhlIGFjdGlvbiBidXR0b24uICovXG4gIHRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBpY29uIGZvciB0aGUgYWN0aW9uIGJ1dHRvbi4gKi9cbiAgaWNvbj86IHN0cmluZztcblxuICAvKiogQWN0aW9uIGljb24gd2lsbCBiZSB2aXNpYmxlIG9uIGhvdmVyIG9ubHkgKi9cbiAgc2hvd09uSG92ZXI/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byBwZXJmb3JtIHRoZSBhY3Rpb24gb24uXG4gICAqIEBwYXJhbSByZWxvYWQgVGhlIGZ1bmN0aW9uIHRvIGNhbGwsIGlmIHlvdSB3YW50IHRvIHJlbG9hZCB0aGUgZ3JpZC5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIGNhbGxiYWNrOiAoKGl0ZW06IFJvdywgcmVsb2FkOiAoKSA9PiB2b2lkKSA9PiB2b2lkKSB8IEZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBhY3Rpb24gc2hvdWxkIGJlIHNob3duIGZvciBnaXZlbiBpdGVtIChpZiBub3QgZGVmaW5lZCwgdGhlIGFjdGlvbiB3aWxsIGJlIHNob3duIGFsd2F5cykuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIGZvciB3aGljaCB0aGUgYWN0aW9uIGlzIHN1cHBvc2VkIHRvIGJlIHBlcmZvcm1lZC5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHNob3dJZj86ICgoaXRlbTogUm93KSA9PiBib29sZWFuKSB8IEZ1bmN0aW9uO1xuXG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLyoqIERlc2NyaWJlcyBhIGRhdGEgZ3JpZCBhY3Rpb24gY29udHJvbCBmb3IgbXVsdGlwbGUgaXRlbXMuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1bGtBY3Rpb25Db250cm9sIGV4dGVuZHMgQWN0aW9uQ29udHJvbCB7XG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRJdGVtSWRzIFRoZSBsaXN0IG9mIGlkcyBvZiB0aGUgc2VsZWN0ZWQgaXRlbXMuXG4gICAqIEBwYXJhbSByZWxvYWQgVGhlIGZ1bmN0aW9uIHRvIGNhbGwsIGlmIHlvdSB3YW50IHRvIHJlbG9hZCB0aGUgZ3JpZC5cbiAgICovXG4gIGNhbGxiYWNrKHNlbGVjdGVkSXRlbUlkczogc3RyaW5nW10sIHJlbG9hZDogKCkgPT4gdm9pZCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGFjdGlvbiBzaG91bGQgYmUgc2hvd24gZm9yIGdpdmVuIHNlbGVjdGVkIGl0ZW1zIChpZiBub3QgZGVmaW5lZCwgdGhlIGFjdGlvbiB3aWxsIGJlIHNob3duIGFsd2F5cykuXG4gICAqIEBwYXJhbSBzZWxlY3RlZEl0ZW1JZHMgVGhlIGxpc3Qgb2YgaWRzIG9mIHRoZSBzZWxlY3RlZCBpdGVtcyBmb3Igd2hpY2ggdGhlIGFjdGlvbiBpcyBzdXBwb3NlZCB0byBiZSBwZXJmb3JtZWQuXG4gICAqL1xuICBzaG93SWY/KHNlbGVjdGVkSXRlbUlkczogc3RyaW5nW10pOiBib29sZWFuO1xufVxuXG4vKiogRGVzY3JpYmVzIGEgZGF0YSBncmlkIGFjdGlvbiBjb250cm9sIGZvciB0aGUgaGVhZGVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBIZWFkZXJBY3Rpb25Db250cm9sIGV4dGVuZHMgQWN0aW9uQ29udHJvbCB7XG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgY2FuIGJlIHByb3ZpZGVkLiBJZiBubyB0ZW1wbGF0ZSBpcyBwcm92aWRlZCxcbiAgICogdGhlIGRlZmF1bHQgaGVhZGVyQWN0aW9uQ29udHJvbCB0ZW1wbGF0ZSBpcyB1c2VkLlxuICAgKi9cbiAgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKi9cbiAgY2FsbGJhY2soKTogdm9pZDtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgYWN0aW9uIHNob3VsZCBiZSBzaG93bi5cbiAgICovXG4gIHNob3dJZj8oKTogYm9vbGVhbjtcbn1cblxuLyoqIFByZWRlZmluZWQgdHlwZXMgb2YgYWN0aW9ucy4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIEJ1aWx0SW5BY3Rpb25UeXBlIHtcbiAgLyoqIEVkaXQgYnVpbHQtaW4gYWN0aW9uLiAqL1xuICBFZGl0ID0gJ0VESVQnLFxuXG4gIC8qKiBEZWxldGUgYnVpbHQtaW4gYWN0aW9uLiAqL1xuICBEZWxldGUgPSAnREVMRVRFJyxcblxuICAvKiogRXhwb3J0IGJ1aWx0LWluIGFjdGlvbi4gKi9cbiAgRXhwb3J0ID0gJ0VYUE9SVCdcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGFuIGludGVyZmFjZSBmb3IgYSBmaWx0ZXIgY2hpcCBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgYSBmaWx0ZXIgYXBwbGllZCB0byBhIGNvbHVtbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWx0ZXJDaGlwIHtcbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgdmFsdWUgdGhhdCB0aGUgY2hpcCB3aWxsIGhvbGQuXG4gICAqIEl0IGNhbiBiZSBqdXN0IGEgc3RyaW5nIG9yIGEgbW9yZSBjb21wbGV4IG9iamVjdCBsaWtlXG4gICAqIHtpZDogMTIzLCBuYW1lOiBUZXN0LCB2YWx1ZTogdGVzdH0uXG4gICAqL1xuICB2YWx1ZTogYW55O1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgdGhhdCB0aGUgY2hpcCB3aWxsIGRpc3BsYXkgaW4gdGhlIGRyb3Bkb3duLlxuICAgKi9cbiAgZGlzcGxheVZhbHVlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGxhYmVsIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaWYgZmlsdGVyIGNoaXBzIGFyZSBzZXBhcmF0ZWQgaW50byBtdWx0aXBsZSBncm91cHMuXG4gICAqL1xuICBsYWJlbD86IHN0cmluZztcblxuICAvKiogQW4gb3B0aW9uYWwgcHJvcGVydHkgdGhhdCBob2xkcyB0aGUgcGF0aCB0byB0aGUgY2hpcCB2YWx1ZSBpbiB0aGUgZXh0ZXJuYWxGaWx0ZXJRdWVyeS4gKi9cbiAgcGF0aD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBwcm9wZXJ0eSB0aGF0IGhvbGRzIHRoZSBmb3JtIHZhbHVlIHRha2VuIGZyb20gdGhlIGNvbHVtbiBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgZXh0ZXJuYWxGaWx0ZXJRdWVyeT86IGFueTtcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgcHJvcGVydHkgdGhhdCBob2xkcyB0aGUgZm9ybWx5IGZpbHRlcmluZyBjb25maWd1cmF0aW9uIGZvciB0aGUgY29sdW1uIHRoYXQgdGhpcyBmaWx0ZXIgaXMgYXBwbGllZCB0by5cbiAgICovXG4gIGZpbHRlcmluZ0NvbmZpZz86IEZvcm1seUNvbHVtbkZpbHRlcmluZ0NvbmZpZztcblxuICAvKiogQW4gb3B0aW9uYWwgcHJvcGVydHkgdGhhdCBob2xkcyBhIHN0cmluZyB0byBzZWFyY2ggZm9yLiAqL1xuICBmaWx0ZXJQcmVkaWNhdGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBjb2x1bW4gdGhhdCB0aGlzIGZpbHRlciBpcyBhcHBsaWVkIHRvLlxuICAgKi9cbiAgY29sdW1uTmFtZTogc3RyaW5nIHwgU3BlY2lhbENvbHVtbk5hbWU7XG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGZpbHRlciBmcm9tIHRoZSBjb2x1bW4uXG4gICAqIElmIG5vdCBwcm92aWRlZCB3aWxsIHNldCBkZWZhdWx0IHJlbW92YWwgZnVuY3Rpb24gdGhhdCB3aWxsIHJlZHVjZSB0aGUgZXh0ZXJuYWwgcXVlcnkgYnkgcmVtb3ZpbmcgdGhlIG9iamVjdCB0aGF0IGlzIHJlc29sdmVkIGJ5IHRoZSBwYXRoIHNldCBpbiB0aGUgRmlsdGVyQ2hpcC5cbiAgICogQHJldHVybnMgQW4gb2JqZWN0IGRlZmluZWQgYnkgdGhlIGBGaWx0ZXJDaGlwYCB0eXBlLCBpbmNsdWRpbmcgdGhlIGBjb2x1bW5OYW1lYCBhbmQgIHVwZGF0ZWQgYGV4dGVybmFsRmlsdGVyUXVlcnlgIG9yICdmaWx0ZXJQcmVkaWNhdGUnIHByb3BlcnRpZXMuXG4gICAqIFRoZSByZXR1cm5lZCBvYmplY3QgbWF5IGFsc28gaW5jbHVkZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgZGVmaW5lZCBieSB0aGUgYEZpbHRlckNoaXBgIHR5cGUgYXMgcGFydGlhbHMuXG4gICAqL1xuICByZW1vdmU/OiAoKSA9PiBQYXJ0aWFsRmlsdGVyQ2hpcFJlbW92YWxUeXBlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBwYXJ0aWFsIGZpbHRlciBjaGlwIHdpdGggZWl0aGVyICdjb2x1bW5OYW1lJyBhbmQgJ2V4dGVybmFsRmlsdGVyUXVlcnknIG9yICdjb2x1bW5OYW1lJyBhbmQgJ2ZpbHRlclByZWRpY2F0ZScuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQYXJ0aWFsRmlsdGVyQ2hpcFJlbW92YWxUeXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29sdW1uTmFtZSAtIFRoZSBjb2x1bW4gbmFtZSBmb3IgdGhlIGZpbHRlciBjaGlwLlxuICogQHByb3BlcnR5IHthbnl9IFtleHRlcm5hbEZpbHRlclF1ZXJ5XSAtIFRoZSBleHRlcm5hbCBmaWx0ZXIgcXVlcnkgZm9yIHRoZSBjaGlwIHVzZWQgZm9yIGNvbXBsZXggZmlsdGVycy5cbiAqIEBwcm9wZXJ0eSB7YW55fSBbZmlsdGVyUHJlZGljYXRlXSAtIFRoZSBmaWx0ZXJpbmcgcHJlZGljYXRlIGZvciB0aGUgY2hpcCB1c2VkIGZvciBzaW1wbGUgZmlsdGVycyB3aXRoIGNsaWVudC1zaWRlIGZpbHRlcmluZy5cbiAqIEBwcm9wZXJ0eSB7Li4uRmlsdGVyQ2hpcH0gW29wdGlvbmFsUHJvcGVydGllc10gLSBPcHRpb25hbCBwcm9wZXJ0aWVzIGZyb20gdGhlIEZpbHRlckNoaXAgdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgUGFydGlhbEZpbHRlckNoaXBSZW1vdmFsVHlwZSA9IChcbiAgfCBSZXF1aXJlZDxQaWNrPEZpbHRlckNoaXAsICdjb2x1bW5OYW1lJyB8ICdleHRlcm5hbEZpbHRlclF1ZXJ5Jz4+XG4gIHwgUmVxdWlyZWQ8UGljazxGaWx0ZXJDaGlwLCAnY29sdW1uTmFtZScgfCAnZmlsdGVyUHJlZGljYXRlJz4+XG4pICZcbiAgUGFydGlhbDxGaWx0ZXJDaGlwPjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcGFydGlhbCBmaWx0ZXIgY2hpcCB3aXRoIHJlcXVpcmVkIHByb3BlcnRpZXMgJ2Rpc3BsYXlWYWx1ZScgYW5kICd2YWx1ZScuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQYXJ0aWFsRmlsdGVyQ2hpcEdlbmVyYXRpb25UeXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGlzcGxheVZhbHVlIC0gVGhlIGRpc3BsYXkgdmFsdWUgZm9yIHRoZSBmaWx0ZXIgY2hpcC5cbiAqIEBwcm9wZXJ0eSB7YW55fSB2YWx1ZSAtIFRoZSB2YWx1ZSBmb3IgdGhlIGZpbHRlciBjaGlwLlxuICogQHByb3BlcnR5IHsuLi5GaWx0ZXJDaGlwfSBbb3B0aW9uYWxQcm9wZXJ0aWVzXSAtIE9wdGlvbmFsIHByb3BlcnRpZXMgZnJvbSB0aGUgRmlsdGVyQ2hpcCB0eXBlLlxuICovXG5leHBvcnQgdHlwZSBQYXJ0aWFsRmlsdGVyQ2hpcEdlbmVyYXRpb25UeXBlID0gUmVxdWlyZWQ8UGljazxGaWx0ZXJDaGlwLCAnZGlzcGxheVZhbHVlJyB8ICd2YWx1ZSc+PiAmXG4gIFBhcnRpYWw8RmlsdGVyQ2hpcD47XG5cbi8qKlxuICogRGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIGEgbWFwcGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBhIGBGb3JtbHlGaWVsZENvbmZpZ2AgdG8gYSBgRmlsdGVyQ2hpcGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyTWFwcGVyIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9yIHR5cGVzIG9mIHRoZSBgRm9ybWx5RmllbGRDb25maWdgIHRoYXQgdGhpcyBtYXBwZXIgYXBwbGllcyB0by5cbiAgICovXG4gIGZpZWxkVHlwZTogc3RyaW5nW10gfCBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1hcHMgYSBgRm9ybWx5RmllbGRDb25maWdgIGFuZCBhIGBGaWx0ZXJDaGlwYCB0byBhbiBgT2JzZXJ2YWJsZWAgb2YgYSBgRmlsdGVyQ2hpcGAuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gZXh0ZW5kcyB0aGUgcHJvdmlkZWQgYEZpbHRlckNoaXBgIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcyBiYXNlZCBvbiB0aGUgaW5mb3JtYXRpb24gaW4gdGhlIGBGb3JtbHlGaWVsZENvbmZpZ2AuXG4gICAqIFRoZSBtYXBwaW5nIHByb2Nlc3MgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGBGaWx0ZXJNYXBwZXJgLlxuICAgKlxuICAgKiBAcGFyYW0gZmllbGQgLSBUaGUgYEZvcm1seUZpZWxkQ29uZmlnYCB0byBtYXAuXG4gICAqIEBwYXJhbSBmaWx0ZXIgLSBUaGUgYEZpbHRlckNoaXBgIHRvIG1hcC5cbiAgICogQHJldHVybnMgQW4gYE9ic2VydmFibGVgIHRoYXQgZW1pdHMgdGhlIG1hcHBlZCBgRmlsdGVyQ2hpcGAuXG4gICAqIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCBhbiBlcnJvciBpcyB0aHJvd24gYW5kIHRoZSBjaGlwIGlzIG5vdCB2aXN1YWxpemVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIEV4YW1wbGUgaW1wbGVtZW50YXRpb24gb2YgYG1hcGAgZnVuY3Rpb24gaW4gYSBgRmlsdGVyTWFwcGVyYFxuICAgKiBtYXAoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBmaWx0ZXI6IEZpbHRlckNoaXApOiBPYnNlcnZhYmxlPEZpbHRlckNoaXA+IHtcbiAgICogICBpZiAodGhpcy5maWVsZFR5cGUuaW5jbHVkZXMoZmllbGQudHlwZS50b1N0cmluZygpKSkge1xuICAgKiAgICAgcmV0dXJuIHRvT2JzZXJ2YWJsZShmaWVsZC50ZW1wbGF0ZU9wdGlvbnMub3B0aW9ucykucGlwZShcbiAgICogICAgICAgbWFwKG9wdGlvbnMgPT4ge1xuICAgKiAgICAgICAgIGNvbnN0IG9iamVjdCA9IG9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09PSBnZXQoZmlsdGVyLmV4dGVybmFsRmlsdGVyUXVlcnksIGZpbHRlci5wYXRoKSk7XG4gICAqICAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgIC4uLmZpbHRlcixcbiAgICogICAgICAgICAgIHZhbHVlOiBvYmplY3QsXG4gICAqICAgICAgICAgICBkaXNwbGF5VmFsdWU6IG9iamVjdD8ubGFiZWxcbiAgICogICAgICAgICB9O1xuICAgKiAgICAgICB9KVxuICAgKiAgICAgKTtcbiAgICogICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBtYXA6IChmaWVsZDogRm9ybWx5RmllbGRDb25maWcsIGZpbHRlcjogRmlsdGVyQ2hpcCkgPT4gT2JzZXJ2YWJsZTxGaWx0ZXJDaGlwPjtcbn1cbiJdfQ==
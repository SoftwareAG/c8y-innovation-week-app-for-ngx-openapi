import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { DateContextQueryParamNames } from './widget-time-context.model';
import { WidgetTimeContextHelperService } from './widget-time-context-helper.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./widget-time-context-helper.service";
export class WidgetTimeContextQueryService {
    constructor(activatedRoute, helperService, router) {
        this.activatedRoute = activatedRoute;
        this.helperService = helperService;
        this.router = router;
    }
    queryParamsChange$() {
        return this.activatedRoute.queryParams.pipe(map((params) => {
            const realtime = this.parseRealtime(params.dateContextRealtime);
            return { ...params, dateContextRealtime: realtime };
        }), filter((params) => {
            if (!params.dateContextInterval && !params.dateContextFrom && !params.dateContextTo) {
                return false;
            }
            const isValidInterval = this.helperService.isSelectableInterval(params.dateContextInterval);
            const isValidDateRange = this.helperService.isValidDateRange(params.dateContextFrom, params.dateContextTo);
            if (!params.dateContextInterval) {
                return isValidDateRange;
            }
            if (!params.dateContextFrom && !params.dateContextTo) {
                return isValidInterval;
            }
            return isValidDateRange && isValidInterval;
        }));
    }
    dateTimeContextFromQueryParams() {
        const realtime = this.parseRealtime(this.activatedRoute.snapshot.queryParams[DateContextQueryParamNames.DATE_CONTEXT_REALTIME]);
        // trying to get date context from query params by interval first
        const dateContextInterval = this.activatedRoute.snapshot.queryParams[DateContextQueryParamNames.DATE_CONTEXT_INTERVAL];
        const isValidInterval = this.helperService.isSelectableInterval(dateContextInterval);
        if (isValidInterval) {
            return {
                date: this.helperService.getDateTimeContextByInterval(dateContextInterval),
                interval: dateContextInterval,
                realtime
            };
        }
        // if date context by interval is not provided, try getting date "from" and date "to" from query params
        const dateTimeContextFromQueryParams = this.getDateContextFromQueryParams();
        if (dateTimeContextFromQueryParams) {
            return { date: dateTimeContextFromQueryParams, interval: 'custom', realtime };
        }
        return null;
    }
    setDateContextQueryParams(interval, dateContext, realtime) {
        let queryParams;
        if (interval && interval !== 'custom') {
            queryParams = {
                dateContextInterval: interval,
                dateContextRealtime: `${realtime}`
            };
        }
        else {
            queryParams = {
                dateContextFrom: dateContext[0].toISOString(),
                dateContextTo: dateContext[1].toISOString(),
                dateContextRealtime: `${realtime}`
            };
        }
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams,
            replaceUrl: true
        });
    }
    clearQueryParams() {
        const clearingQueryParams = {
            dateContextFrom: null,
            dateContextTo: null,
            dateContextInterval: null,
            dateContextRealtime: null
        };
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: clearingQueryParams,
            replaceUrl: true
        });
    }
    getDateContextFromQueryParams() {
        const dateContextFrom = this.activatedRoute.snapshot.queryParams[DateContextQueryParamNames.DATE_CONTEXT_FROM];
        const dateContextTo = this.activatedRoute.snapshot.queryParams[DateContextQueryParamNames.DATE_CONTEXT_TO];
        if (this.helperService.isValidDateRange(dateContextFrom, dateContextTo)) {
            return [new Date(dateContextFrom), new Date(dateContextTo)];
        }
        return null;
    }
    parseRealtime(realtime) {
        return realtime === 'false' ? false : realtime === 'true' ? true : null;
    }
}
WidgetTimeContextQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextQueryService, deps: [{ token: i1.ActivatedRoute }, { token: i2.WidgetTimeContextHelperService }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetTimeContextQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextQueryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextQueryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.WidgetTimeContextHelperService }, { type: i1.Router }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { interval, Subject } from 'rxjs';
import { DashboardChildActionComponent } from '../dashboard-child-action.component';
import { DashboardChildComponent } from '../dashboard-child.component';
import { WidgetsDashboardEventService } from '../widgets-dashboard-event.service';
import { FormBuilder } from '@angular/forms';
import { gettext } from '../../i18n';
import { filter, takeUntil } from 'rxjs/operators';
import { WidgetTimeContextQueryService } from './widget-time-context-query.service';
import { WidgetTimeContextHelperService } from './widget-time-context-helper.service';
import { ActivationEnd, NavigationEnd, NavigationStart, Router } from '@angular/router';
import { ActionBarService } from '../../action-bar';
import * as i0 from "@angular/core";
import * as i1 from "../widgets-dashboard-event.service";
import * as i2 from "../dashboard-child.component";
import * as i3 from "@angular/forms";
import * as i4 from "./widget-time-context-query.service";
import * as i5 from "./widget-time-context-helper.service";
import * as i6 from "@angular/router";
import * as i7 from "../../action-bar";
import * as i8 from "../../common/icon.directive";
import * as i9 from "../../i18n/c8y-translate.directive";
import * as i10 from "@angular/common";
import * as i11 from "../../action-bar/action-bar-item.component";
import * as i12 from "ngx-bootstrap/dropdown";
import * as i13 from "../../forms/form-group.component";
import * as i14 from "../../forms/message.directive";
import * as i15 from "../../forms/messages.component";
import * as i16 from "../../date-time-picker/date-time-picker.component";
import * as i17 from "../dashboard-child-action.component";
import * as i18 from "./interval-picker/interval-picker.component";
import * as i19 from "./realtime-control/realtime-control.component";
import * as i20 from "../../i18n/c8y-translate.pipe";
import * as i21 from "../../common/date.pipe";
export class WidgetTimeContextComponent {
    /**
     * @ignore only DI.
     */
    constructor(widgetEventService, dashboardChild, formBuilder, queryService, helperService, router, actionBarService) {
        this.widgetEventService = widgetEventService;
        this.dashboardChild = dashboardChild;
        this.formBuilder = formBuilder;
        this.queryService = queryService;
        this.helperService = helperService;
        this.router = router;
        this.actionBarService = actionBarService;
        /**
         * Indicates if the component can decouple or not.
         */
        this.canDecouple = true;
        /**
         * Emits each change as an array of dates [from, to].
         */
        this.dateContextChange = new EventEmitter();
        /**
         * Indicates if the time context is bound to the global scope.
         */
        this.isCoupled = true;
        this.decoupleTimeContextLabel = gettext('Decouple time context');
        this.coupleTimeContextLabel = gettext('Couple time context');
        this.DEFAULT_INTERVAL = 'days';
        this.ACTION_BAR_GROUP_ID = 'timecontext';
        this.REALTIME_INTERVAL = 1000;
        this.destroy$ = new Subject();
    }
    /**
     * @ignore Subscribing to the global context.
     */
    ngOnInit() {
        const initialContext = this.getInitialContext() || this.getDefaultContext();
        this.form = this.createForm(initialContext);
        this.dateContextChange.emit({ date: initialContext.date, realtime: initialContext.realtime });
        if (this.isCoupled) {
            this.queryService.setDateContextQueryParams(initialContext.interval, initialContext.date, initialContext.realtime);
        }
        this.subscribeToGlobalContext();
        this.subscribeToQueryParamsChange();
        this.subscribeToRouterEvents();
        this.subscribeToIntervalChange();
        this.subscribeToRealtimeChange();
        if (initialContext.realtime) {
            this.onRealtimeValueChange(initialContext.realtime);
            this.startRealtime();
        }
    }
    /**
     * @ignore Adding custom actions.
     */
    ngAfterViewInit() {
        if (this.canDecouple) {
            this.dashboardChild.addActions([this.action]);
        }
    }
    /**
     * Toggles the coupling on or off.
     */
    toggleDecoupling() {
        this.isCoupled = !this.isCoupled;
        const lastEventValue = this.widgetEventService.getLastValue('TIME_CONTEXT');
        const realtime = lastEventValue.realtime;
        let dateContext;
        if (lastEventValue.interval) {
            dateContext = this.helperService.getDateTimeContextByInterval(lastEventValue.interval);
        }
        else {
            dateContext = lastEventValue.dateTimeContext;
        }
        this.updateFormValues(dateContext, lastEventValue.interval, realtime);
        if (this.isCoupled) {
            this.subscribeToGlobalContext();
            this.dateContextChange.emit({ date: dateContext, realtime: realtime });
        }
        else {
            this.unsubscribeFromGlobalContext();
        }
    }
    /**
     * Applies form value to global or local date context.
     */
    applyDatetimeContext() {
        this.update({
            date: [
                new Date(this.form.value.temporaryUserSelectedFromDate),
                new Date(this.form.value.temporaryUserSelectedToDate)
            ],
            interval: null,
            realtime: this.form.value.realtime
        });
    }
    /**
     * Resets form to initial value and update context.
     */
    reset() {
        this.stopRealtime();
        this.update(this.getDefaultContext());
    }
    /**
     * @ignore unsubscribing.
     */
    ngOnDestroy() {
        this.unsubscribeFromGlobalContext();
        this.clearQueryParamsIfNeeded();
        this.stopRealtime();
        this.destroy$.next();
        this.destroy$.complete();
    }
    subscribeToIntervalChange() {
        this.form.controls.currentDateContextInterval.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(interval => {
            if (interval !== 'custom') {
                const date = this.helperService.getDateTimeContextByInterval(interval);
                this.update({ date, interval, realtime: this.form.value.realtime });
            }
        });
    }
    subscribeToRealtimeChange() {
        this.form.controls.realtime.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(realtime => {
            this.onRealtimeValueChange(realtime);
            if (realtime) {
                this.startRealtime();
            }
            else {
                this.stopRealtime();
            }
        });
    }
    createForm(context) {
        return this.formBuilder.group({
            temporaryUserSelectedFromDate: context.date[0].toISOString(),
            temporaryUserSelectedToDate: context.date[1].toISOString(),
            currentDateContextFromDate: context.date[0].toISOString(),
            currentDateContextToDate: context.date[1].toISOString(),
            currentDateContextInterval: context.interval || 'custom',
            realtime: context.realtime
        });
    }
    /**
     * Fires a new WidgetChangeEvent either on the local change emitter or on the global one.
     * @param widgetTimeContextState New widget time context value.*/
    update({ date, interval, realtime }) {
        if (this.isCoupled) {
            const eventData = interval && interval !== 'custom'
                ? { interval, realtime }
                : { dateTimeContext: date, realtime };
            this.widgetEventService.emit({ type: 'TIME_CONTEXT', data: eventData });
        }
        else {
            this.updateFormValues(date, interval, realtime);
            this.dateContextChange.emit({ date, realtime });
        }
    }
    subscribeToGlobalContext() {
        const event$ = this.widgetEventService.getObservable('TIME_CONTEXT');
        this.subscription = event$.subscribe((context) => {
            let dateContext;
            if (context.interval) {
                dateContext = this.helperService.getDateTimeContextByInterval(context.interval);
            }
            else {
                dateContext = context.dateTimeContext;
            }
            const realtime = context.realtime;
            this.dateContextChange.emit({ date: dateContext, realtime });
            this.updateFormValues(dateContext, context.interval, realtime);
            this.queryService.setDateContextQueryParams(context.interval, dateContext, realtime);
        });
    }
    updateFormValues(date, interval, realtime) {
        this.form.patchValue({
            temporaryUserSelectedFromDate: date[0].toISOString(),
            temporaryUserSelectedToDate: date[1].toISOString(),
            currentDateContextFromDate: date[0].toISOString(),
            currentDateContextToDate: date[1].toISOString()
        });
        this.form.controls.realtime.setValue(realtime, {
            emitEvent: false
        });
        this.form.controls.currentDateContextInterval.setValue(interval || 'custom', {
            emitEvent: false
        });
    }
    unsubscribeFromGlobalContext() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    getInitialContext() {
        const dateTimeContextFromQueryParams = this.queryService.dateTimeContextFromQueryParams();
        if (dateTimeContextFromQueryParams) {
            return {
                ...dateTimeContextFromQueryParams,
                realtime: dateTimeContextFromQueryParams.realtime ?? false
            };
        }
        // get value from last value of events service
        const lastEventValue = this.widgetEventService.getLastValue('TIME_CONTEXT');
        const realtime = lastEventValue?.realtime ?? false;
        if (lastEventValue && lastEventValue.dateTimeContext) {
            return { date: lastEventValue.dateTimeContext, interval: 'custom', realtime };
        }
        if (lastEventValue && lastEventValue.interval) {
            return {
                date: this.helperService.getDateTimeContextByInterval(lastEventValue.interval),
                interval: lastEventValue.interval,
                realtime
            };
        }
        return null;
    }
    subscribeToQueryParamsChange() {
        this.queryService
            .queryParamsChange$()
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ dateContextFrom, dateContextTo, dateContextInterval, dateContextRealtime }) => {
            const realtime = dateContextRealtime ?? this.form.value.realtime;
            if (dateContextInterval) {
                this.widgetEventService.emit({
                    type: 'TIME_CONTEXT',
                    data: {
                        interval: dateContextInterval,
                        realtime
                    }
                });
            }
            else {
                const dateContext = [
                    new Date(dateContextFrom),
                    new Date(dateContextTo)
                ];
                this.widgetEventService.emit({
                    type: 'TIME_CONTEXT',
                    data: { dateTimeContext: dateContext, realtime }
                });
            }
        });
    }
    clearQueryParamsIfNeeded() {
        // If navigation is in progress, router will take care of clearing query params. This way we avoid unnecessary manipulation of browser history
        if (this.navigationInProgress) {
            return;
        }
        // check if any other WidgetTimeContextComponent action in action bar exists
        const anyWidgetTimeContextActionLeft = Array.from(this.actionBarService.state).some(action => action.groupId === this.ACTION_BAR_GROUP_ID);
        if (!anyWidgetTimeContextActionLeft) {
            this.queryService.clearQueryParams();
        }
    }
    subscribeToRouterEvents() {
        this.router.events
            .pipe(filter(e => e instanceof NavigationStart || e instanceof NavigationEnd || e instanceof ActivationEnd), takeUntil(this.destroy$))
            .subscribe(e => {
            this.navigationInProgress = e instanceof NavigationStart;
        });
    }
    getDefaultContext() {
        return {
            date: this.helperService.getDateTimeContextByInterval(this.DEFAULT_INTERVAL),
            interval: this.DEFAULT_INTERVAL,
            realtime: false
        };
    }
    startRealtime() {
        this.form.controls.temporaryUserSelectedFromDate.disable();
        this.form.controls.temporaryUserSelectedToDate.disable();
        this.realtimeSubscription = interval(this.REALTIME_INTERVAL).subscribe(() => {
            const newDateFrom = new Date(new Date(this.form.value.currentDateContextFromDate).valueOf() + this.REALTIME_INTERVAL);
            const newDateTo = new Date(new Date(this.form.value.currentDateContextToDate).valueOf() + this.REALTIME_INTERVAL);
            this.updateFormValues([newDateFrom, newDateTo], this.form.value.currentDateContextInterval, true);
        });
    }
    stopRealtime() {
        this.realtimeSubscription?.unsubscribe();
        this.form?.controls.temporaryUserSelectedFromDate.enable();
        this.form?.controls.temporaryUserSelectedToDate.enable();
    }
    onRealtimeValueChange(realtime) {
        let dateTimeContext;
        if (this.form.value.currentDateContextInterval !== 'custom') {
            dateTimeContext = this.helperService.getDateTimeContextByInterval(this.form.value.currentDateContextInterval);
        }
        else {
            const currentTimeSpanInMs = new Date(this.form.value.currentDateContextToDate).valueOf() -
                new Date(this.form.value.currentDateContextFromDate).valueOf();
            const dateTo = new Date();
            const dateFrom = new Date(dateTo.valueOf() - currentTimeSpanInMs);
            dateTimeContext = [dateFrom, dateTo];
        }
        this.update({
            date: dateTimeContext,
            interval: this.form.value.currentDateContextInterval,
            realtime
        });
    }
}
WidgetTimeContextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextComponent, deps: [{ token: i1.WidgetsDashboardEventService }, { token: i2.DashboardChildComponent }, { token: i3.FormBuilder }, { token: i4.WidgetTimeContextQueryService }, { token: i5.WidgetTimeContextHelperService }, { token: i6.Router }, { token: i7.ActionBarService }], target: i0.ɵɵFactoryTarget.Component });
WidgetTimeContextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: WidgetTimeContextComponent, selector: "c8y-widget-time-context", inputs: { canDecouple: "canDecouple" }, outputs: { dateContextChange: "dateContextChange" }, host: { classAttribute: "d-flex a-i-center gap-4" }, viewQueries: [{ propertyName: "action", first: true, predicate: DashboardChildActionComponent, descendants: true }], ngImport: i0, template: "<c8y-action-bar-item\n  *ngIf=\"isCoupled\"\n  [groupId]=\"ACTION_BAR_GROUP_ID\"\n  [placement]=\"'left'\"\n  itemClass=\"navbar-form\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"dateTimePicker\"\n    [ngTemplateOutletContext]=\"{\n      date: [form.value.currentDateContextFromDate, form.value.currentDateContextToDate]\n    }\"\n  ></ng-container>\n</c8y-action-bar-item>\n\n<ng-container\n  *ngIf=\"!isCoupled\"\n  [ngTemplateOutlet]=\"dateTimePicker\"\n  [ngTemplateOutletContext]=\"{\n    date: [form.value.currentDateContextFromDate, form.value.currentDateContextToDate]\n  }\"\n></ng-container>\n\n<ng-template\n  #dateTimePicker\n  let-date=\"date\"\n>\n  <form\n    class=\"d-flex-sm\"\n    [formGroup]=\"form\"\n  >\n    <label>{{ 'Range' | translate }}</label>\n    <div\n      class=\"dropdown m-r-4 m-t-xs-4 m-b-xs-4\"\n      container=\"body\"\n      #dropdown=\"bs-dropdown\"\n      dropdown\n      [insideClick]=\"true\"\n      *ngIf=\"date\"\n    >\n      <button\n        class=\"dropdown-toggle form-control l-h-1 d-flex a-i-center\"\n        title=\"{{ date[0] | c8yDate: 'short' }} \u2014 {{ date[1] | c8yDate: 'short' }}\"\n        aria-haspopup=\"true\"\n        dropdownToggle\n      >\n        <span data-cy=\"widget-time-context--selected-time-range\">\n          {{ date[0] | c8yDate: 'shortDate' }} \u2014 {{ date[1] | c8yDate: 'shortDate' }}\n        </span>\n        <span class=\"caret m-r-8 m-l-4\"></span>\n      </button>\n\n      <div\n        class=\"dropdown-menu dropdown-menu--date-range\"\n        *dropdownMenu\n      >\n        <div class=\"p-16\">\n          <c8y-form-group\n            [ngClass]=\"form.controls.temporaryUserSelectedFromDate.errors ? 'has-error' : ''\"\n          >\n            <label\n              [title]=\"'From`date`' | translate\"\n              for=\"temporaryUserSelectedFromDate\"\n              translate\n            >\n              From`date`\n            </label>\n            <c8y-date-time-picker\n              id=\"temporaryUserSelectedFromDate\"\n              [maxDate]=\"form.value.temporaryUserSelectedToDate\"\n              [placeholder]=\"'From`date`' | translate\"\n              [formControl]=\"form.controls.temporaryUserSelectedFromDate\"\n              [ngClass]=\"form.controls.temporaryUserSelectedFromDate.errors ? 'has-error' : ''\"\n            ></c8y-date-time-picker>\n            <c8y-messages [show]=\"form.controls.temporaryUserSelectedFromDate.errors\">\n              <c8y-message\n                name=\"dateAfterRangeMax\"\n                [text]=\"'This date is after the latest allowed date.' | translate\"\n              ></c8y-message>\n              <c8y-message\n                name=\"invalidDateTime\"\n                [text]=\"'This date is invalid.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n\n          <c8y-form-group\n            [ngClass]=\"form.controls.temporaryUserSelectedToDate.errors ? 'has-error' : ''\"\n          >\n            <label\n              [title]=\"'To`date`' | translate\"\n              for=\"temporaryUserSelectedToDate\"\n              translate\n            >\n              To`date`\n            </label>\n            <c8y-date-time-picker\n              id=\"temporaryUserSelectedToDate\"\n              [minDate]=\"form.value.temporaryUserSelectedFromDate\"\n              [placeholder]=\"'To`date`' | translate\"\n              [formControl]=\"form.controls.temporaryUserSelectedToDate\"\n              [ngClass]=\"form.controls.temporaryUserSelectedToDate.errors ? 'has-error' : ''\"\n            ></c8y-date-time-picker>\n            <c8y-messages [show]=\"form.controls.temporaryUserSelectedToDate.errors\">\n              <c8y-message\n                name=\"dateBeforeRangeMin\"\n                [text]=\"'This date is before the earliest allowed date.' | translate\"\n              ></c8y-message>\n              <c8y-message\n                name=\"invalidDateTime\"\n                [text]=\"'This date is invalid.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n\n        <div class=\"p-16 d-flex gap-8 separator-top\">\n          <button\n            class=\"btn btn-default btn-sm flex-grow\"\n            title=\"{{ 'Reset' | translate }}\"\n            type=\"button\"\n            (click)=\"reset(); dropdown.isOpen = false\"\n            [disabled]=\"form.value.realtime\"\n            translate\n          >\n            Reset\n          </button>\n\n          <button\n            class=\"btn btn-primary btn-sm flex-grow\"\n            title=\"{{ 'Apply' | translate }}\"\n            type=\"button\"\n            (click)=\"applyDatetimeContext(); dropdown.isOpen = false\"\n            [disabled]=\"(form.pristine && form.untouched) || form.invalid || form.value.realtime\"\n            translate\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"c8y-select-wrapper m-t-xs-4 m-b-xs-4 d-inline-block-xs\">\n      <c8y-interval-picker formControlName=\"currentDateContextInterval\"></c8y-interval-picker>\n    </div>\n\n    <div class=\"m-l-8 d-inline-block-xs\">\n      <c8y-realtime-control formControlName=\"realtime\"></c8y-realtime-control>\n    </div>\n  </form>\n</ng-template>\n\n<c8y-dashboard-child-action>\n  <button\n    type=\"button\"\n    (click)=\"toggleDecoupling()\"\n  >\n    <i [c8yIcon]=\"isCoupled ? 'schedule1' : 'today'\"></i>\n    <span class=\"m-l-4\">\n      {{ (isCoupled ? decoupleTimeContextLabel : coupleTimeContextLabel) | translate }}\n    </span>\n  </button>\n</c8y-dashboard-child-action>\n", dependencies: [{ kind: "directive", type: i8.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i9.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i10.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i11.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i12.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i12.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i12.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "component", type: i13.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i14.MessageDirective, selector: "c8y-message", inputs: ["name", "text"] }, { kind: "component", type: i15.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i16.DateTimePickerComponent, selector: "c8y-date-time-picker", inputs: ["minDate", "maxDate", "placeholder"] }, { kind: "component", type: i17.DashboardChildActionComponent, selector: "c8y-dashboard-child-action" }, { kind: "component", type: i18.IntervalPickerComponent, selector: "c8y-interval-picker" }, { kind: "component", type: i19.RealtimeControlComponent, selector: "c8y-realtime-control" }, { kind: "pipe", type: i20.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i21.DatePipe, name: "c8yDate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-widget-time-context', host: { class: 'd-flex a-i-center gap-4' }, template: "<c8y-action-bar-item\n  *ngIf=\"isCoupled\"\n  [groupId]=\"ACTION_BAR_GROUP_ID\"\n  [placement]=\"'left'\"\n  itemClass=\"navbar-form\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"dateTimePicker\"\n    [ngTemplateOutletContext]=\"{\n      date: [form.value.currentDateContextFromDate, form.value.currentDateContextToDate]\n    }\"\n  ></ng-container>\n</c8y-action-bar-item>\n\n<ng-container\n  *ngIf=\"!isCoupled\"\n  [ngTemplateOutlet]=\"dateTimePicker\"\n  [ngTemplateOutletContext]=\"{\n    date: [form.value.currentDateContextFromDate, form.value.currentDateContextToDate]\n  }\"\n></ng-container>\n\n<ng-template\n  #dateTimePicker\n  let-date=\"date\"\n>\n  <form\n    class=\"d-flex-sm\"\n    [formGroup]=\"form\"\n  >\n    <label>{{ 'Range' | translate }}</label>\n    <div\n      class=\"dropdown m-r-4 m-t-xs-4 m-b-xs-4\"\n      container=\"body\"\n      #dropdown=\"bs-dropdown\"\n      dropdown\n      [insideClick]=\"true\"\n      *ngIf=\"date\"\n    >\n      <button\n        class=\"dropdown-toggle form-control l-h-1 d-flex a-i-center\"\n        title=\"{{ date[0] | c8yDate: 'short' }} \u2014 {{ date[1] | c8yDate: 'short' }}\"\n        aria-haspopup=\"true\"\n        dropdownToggle\n      >\n        <span data-cy=\"widget-time-context--selected-time-range\">\n          {{ date[0] | c8yDate: 'shortDate' }} \u2014 {{ date[1] | c8yDate: 'shortDate' }}\n        </span>\n        <span class=\"caret m-r-8 m-l-4\"></span>\n      </button>\n\n      <div\n        class=\"dropdown-menu dropdown-menu--date-range\"\n        *dropdownMenu\n      >\n        <div class=\"p-16\">\n          <c8y-form-group\n            [ngClass]=\"form.controls.temporaryUserSelectedFromDate.errors ? 'has-error' : ''\"\n          >\n            <label\n              [title]=\"'From`date`' | translate\"\n              for=\"temporaryUserSelectedFromDate\"\n              translate\n            >\n              From`date`\n            </label>\n            <c8y-date-time-picker\n              id=\"temporaryUserSelectedFromDate\"\n              [maxDate]=\"form.value.temporaryUserSelectedToDate\"\n              [placeholder]=\"'From`date`' | translate\"\n              [formControl]=\"form.controls.temporaryUserSelectedFromDate\"\n              [ngClass]=\"form.controls.temporaryUserSelectedFromDate.errors ? 'has-error' : ''\"\n            ></c8y-date-time-picker>\n            <c8y-messages [show]=\"form.controls.temporaryUserSelectedFromDate.errors\">\n              <c8y-message\n                name=\"dateAfterRangeMax\"\n                [text]=\"'This date is after the latest allowed date.' | translate\"\n              ></c8y-message>\n              <c8y-message\n                name=\"invalidDateTime\"\n                [text]=\"'This date is invalid.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n\n          <c8y-form-group\n            [ngClass]=\"form.controls.temporaryUserSelectedToDate.errors ? 'has-error' : ''\"\n          >\n            <label\n              [title]=\"'To`date`' | translate\"\n              for=\"temporaryUserSelectedToDate\"\n              translate\n            >\n              To`date`\n            </label>\n            <c8y-date-time-picker\n              id=\"temporaryUserSelectedToDate\"\n              [minDate]=\"form.value.temporaryUserSelectedFromDate\"\n              [placeholder]=\"'To`date`' | translate\"\n              [formControl]=\"form.controls.temporaryUserSelectedToDate\"\n              [ngClass]=\"form.controls.temporaryUserSelectedToDate.errors ? 'has-error' : ''\"\n            ></c8y-date-time-picker>\n            <c8y-messages [show]=\"form.controls.temporaryUserSelectedToDate.errors\">\n              <c8y-message\n                name=\"dateBeforeRangeMin\"\n                [text]=\"'This date is before the earliest allowed date.' | translate\"\n              ></c8y-message>\n              <c8y-message\n                name=\"invalidDateTime\"\n                [text]=\"'This date is invalid.' | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n\n        <div class=\"p-16 d-flex gap-8 separator-top\">\n          <button\n            class=\"btn btn-default btn-sm flex-grow\"\n            title=\"{{ 'Reset' | translate }}\"\n            type=\"button\"\n            (click)=\"reset(); dropdown.isOpen = false\"\n            [disabled]=\"form.value.realtime\"\n            translate\n          >\n            Reset\n          </button>\n\n          <button\n            class=\"btn btn-primary btn-sm flex-grow\"\n            title=\"{{ 'Apply' | translate }}\"\n            type=\"button\"\n            (click)=\"applyDatetimeContext(); dropdown.isOpen = false\"\n            [disabled]=\"(form.pristine && form.untouched) || form.invalid || form.value.realtime\"\n            translate\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"c8y-select-wrapper m-t-xs-4 m-b-xs-4 d-inline-block-xs\">\n      <c8y-interval-picker formControlName=\"currentDateContextInterval\"></c8y-interval-picker>\n    </div>\n\n    <div class=\"m-l-8 d-inline-block-xs\">\n      <c8y-realtime-control formControlName=\"realtime\"></c8y-realtime-control>\n    </div>\n  </form>\n</ng-template>\n\n<c8y-dashboard-child-action>\n  <button\n    type=\"button\"\n    (click)=\"toggleDecoupling()\"\n  >\n    <i [c8yIcon]=\"isCoupled ? 'schedule1' : 'today'\"></i>\n    <span class=\"m-l-4\">\n      {{ (isCoupled ? decoupleTimeContextLabel : coupleTimeContextLabel) | translate }}\n    </span>\n  </button>\n</c8y-dashboard-child-action>\n" }]
        }], ctorParameters: function () { return [{ type: i1.WidgetsDashboardEventService }, { type: i2.DashboardChildComponent }, { type: i3.FormBuilder }, { type: i4.WidgetTimeContextQueryService }, { type: i5.WidgetTimeContextHelperService }, { type: i6.Router }, { type: i7.ActionBarService }]; }, propDecorators: { canDecouple: [{
                type: Input
            }], dateContextChange: [{
                type: Output
            }], action: [{
                type: ViewChild,
                args: [DashboardChildActionComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,
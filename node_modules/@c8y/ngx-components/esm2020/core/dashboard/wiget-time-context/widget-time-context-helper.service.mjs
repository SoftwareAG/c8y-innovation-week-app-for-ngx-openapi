import { Injectable } from '@angular/core';
import { INTERVALS } from './widget-time-context.model';
import * as i0 from "@angular/core";
export class WidgetTimeContextHelperService {
    /**
     * Validates provided param for being selectable Interval id.
     * @param intervalId Interval id to be validated.
     * @returns True if provided id is valid, selectable Interval id and false if it's not.
     */
    isSelectableInterval(intervalId) {
        if (intervalId === 'custom') {
            return false;
        }
        return INTERVALS.some(({ id }) => id === intervalId);
    }
    /**
     * Validates provided date "from" and date "to":
     * - if both dates are proper date strings
     * - if provided date from is earlier than date to.
     * @param stringifiedDateFrom Date "from" that should be validated.
     * @param stringifiedDateTo Date "to" that should be validated.
     * @returns Result of validation of dates range.
     */
    isValidDateRange(stringifiedDateFrom, stringifiedDateTo) {
        const dateFrom = new Date(stringifiedDateFrom);
        const dateTo = new Date(stringifiedDateTo);
        if (dateFrom instanceof Date &&
            !isNaN(dateFrom?.getTime()) &&
            dateTo instanceof Date &&
            !isNaN(dateTo?.getTime())) {
            return dateFrom < dateTo;
        }
        return false;
    }
    /**
     * Calculates date time context according to provided interval.
     * @param intervalId Interval id indicating time range.
     * @returns Tuple of dates- the first one is date "from" according to selected interval, second one is date "to" (now).
     */
    getDateTimeContextByInterval(intervalId) {
        const interval = INTERVALS.find(({ id }) => id === intervalId);
        const dateTo = new Date();
        const dateFrom = new Date(dateTo.valueOf() - interval.timespanInMs);
        return [dateFrom, dateTo];
    }
}
WidgetTimeContextHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
WidgetTimeContextHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextHelperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetTimeContextHelperService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LXRpbWUtY29udGV4dC1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvcmUvZGFzaGJvYXJkL3dpZ2V0LXRpbWUtY29udGV4dC93aWRnZXQtdGltZS1jb250ZXh0LWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFZLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUlsRSxNQUFNLE9BQU8sOEJBQThCO0lBQ3pDOzs7O09BSUc7SUFDSCxvQkFBb0IsQ0FBQyxVQUEwQjtRQUM3QyxJQUFJLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILGdCQUFnQixDQUFDLG1CQUEyQixFQUFFLGlCQUF5QjtRQUNyRSxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0MsSUFDRSxRQUFRLFlBQVksSUFBSTtZQUN4QixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUM7WUFDM0IsTUFBTSxZQUFZLElBQUk7WUFDdEIsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQ3pCO1lBQ0EsT0FBTyxRQUFRLEdBQUcsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDRCQUE0QixDQUFDLFVBQTBCO1FBQ3JELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDL0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7MkhBN0NVLDhCQUE4QjsrSEFBOUIsOEJBQThCLGNBRGpCLE1BQU07MkZBQ25CLDhCQUE4QjtrQkFEMUMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnRlcnZhbCwgSU5URVJWQUxTIH0gZnJvbSAnLi93aWRnZXQtdGltZS1jb250ZXh0Lm1vZGVsJztcbmltcG9ydCB7IERhdGVUaW1lQ29udGV4dCB9IGZyb20gJy4uL3dpZGdldC1jaGFuZ2UtZXZlbnQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFdpZGdldFRpbWVDb250ZXh0SGVscGVyU2VydmljZSB7XG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgcHJvdmlkZWQgcGFyYW0gZm9yIGJlaW5nIHNlbGVjdGFibGUgSW50ZXJ2YWwgaWQuXG4gICAqIEBwYXJhbSBpbnRlcnZhbElkIEludGVydmFsIGlkIHRvIGJlIHZhbGlkYXRlZC5cbiAgICogQHJldHVybnMgVHJ1ZSBpZiBwcm92aWRlZCBpZCBpcyB2YWxpZCwgc2VsZWN0YWJsZSBJbnRlcnZhbCBpZCBhbmQgZmFsc2UgaWYgaXQncyBub3QuXG4gICAqL1xuICBpc1NlbGVjdGFibGVJbnRlcnZhbChpbnRlcnZhbElkOiBJbnRlcnZhbFsnaWQnXSkge1xuICAgIGlmIChpbnRlcnZhbElkID09PSAnY3VzdG9tJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gSU5URVJWQUxTLnNvbWUoKHsgaWQgfSkgPT4gaWQgPT09IGludGVydmFsSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBwcm92aWRlZCBkYXRlIFwiZnJvbVwiIGFuZCBkYXRlIFwidG9cIjpcbiAgICogLSBpZiBib3RoIGRhdGVzIGFyZSBwcm9wZXIgZGF0ZSBzdHJpbmdzXG4gICAqIC0gaWYgcHJvdmlkZWQgZGF0ZSBmcm9tIGlzIGVhcmxpZXIgdGhhbiBkYXRlIHRvLlxuICAgKiBAcGFyYW0gc3RyaW5naWZpZWREYXRlRnJvbSBEYXRlIFwiZnJvbVwiIHRoYXQgc2hvdWxkIGJlIHZhbGlkYXRlZC5cbiAgICogQHBhcmFtIHN0cmluZ2lmaWVkRGF0ZVRvIERhdGUgXCJ0b1wiIHRoYXQgc2hvdWxkIGJlIHZhbGlkYXRlZC5cbiAgICogQHJldHVybnMgUmVzdWx0IG9mIHZhbGlkYXRpb24gb2YgZGF0ZXMgcmFuZ2UuXG4gICAqL1xuICBpc1ZhbGlkRGF0ZVJhbmdlKHN0cmluZ2lmaWVkRGF0ZUZyb206IHN0cmluZywgc3RyaW5naWZpZWREYXRlVG86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRhdGVGcm9tID0gbmV3IERhdGUoc3RyaW5naWZpZWREYXRlRnJvbSk7XG4gICAgY29uc3QgZGF0ZVRvID0gbmV3IERhdGUoc3RyaW5naWZpZWREYXRlVG8pO1xuICAgIGlmIChcbiAgICAgIGRhdGVGcm9tIGluc3RhbmNlb2YgRGF0ZSAmJlxuICAgICAgIWlzTmFOKGRhdGVGcm9tPy5nZXRUaW1lKCkpICYmXG4gICAgICBkYXRlVG8gaW5zdGFuY2VvZiBEYXRlICYmXG4gICAgICAhaXNOYU4oZGF0ZVRvPy5nZXRUaW1lKCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0ZUZyb20gPCBkYXRlVG87XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGRhdGUgdGltZSBjb250ZXh0IGFjY29yZGluZyB0byBwcm92aWRlZCBpbnRlcnZhbC5cbiAgICogQHBhcmFtIGludGVydmFsSWQgSW50ZXJ2YWwgaWQgaW5kaWNhdGluZyB0aW1lIHJhbmdlLlxuICAgKiBAcmV0dXJucyBUdXBsZSBvZiBkYXRlcy0gdGhlIGZpcnN0IG9uZSBpcyBkYXRlIFwiZnJvbVwiIGFjY29yZGluZyB0byBzZWxlY3RlZCBpbnRlcnZhbCwgc2Vjb25kIG9uZSBpcyBkYXRlIFwidG9cIiAobm93KS5cbiAgICovXG4gIGdldERhdGVUaW1lQ29udGV4dEJ5SW50ZXJ2YWwoaW50ZXJ2YWxJZDogSW50ZXJ2YWxbJ2lkJ10pOiBEYXRlVGltZUNvbnRleHQge1xuICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IGludGVydmFsSWQpO1xuICAgIGNvbnN0IGRhdGVUbyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgZGF0ZUZyb20gPSBuZXcgRGF0ZShkYXRlVG8udmFsdWVPZigpIC0gaW50ZXJ2YWwudGltZXNwYW5Jbk1zKTtcbiAgICByZXR1cm4gW2RhdGVGcm9tLCBkYXRlVG9dO1xuICB9XG59XG4iXX0=
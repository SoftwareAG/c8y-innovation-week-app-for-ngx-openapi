import { formatDate } from '@angular/common';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '../i18n/translate.service';
// TODO remove  when c8y-icon will works
export var SendStatus;
(function (SendStatus) {
    SendStatus["AVAILABLE"] = "AVAILABLE";
    SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
    SendStatus["UNKNOWN"] = "UNKNOWN";
    SendStatus["MAINTENANCE"] = "MAINTENANCE";
    SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
})(SendStatus || (SendStatus = {}));
export var PushStatus;
(function (PushStatus) {
    PushStatus["CONNECTED"] = "CONNECTED";
    PushStatus["DISCONNECTED"] = "DISCONNECTED";
    PushStatus["UNKNOWN"] = "UNKNOWN";
    PushStatus["MAINTENANCE"] = "MAINTENANCE";
})(PushStatus || (PushStatus = {}));
export const SendStatusLabels = {
    AVAILABLE: gettext('Send connection: online'),
    NOT_MONITORED: gettext('Send connection: not monitored'),
    UNAVAILABLE: gettext('Send connection: offline'),
    UNKNOWN: gettext('Send connection status unknown'),
    MAINTENANCE: gettext('Device is under maintenance')
};
export const PushStatusLabels = {
    CONNECTED: gettext('Push connection: active'),
    DISCONNECTED: gettext('Push connection: inactive'),
    UNKNOWN: gettext('Push connection: inactive'),
    MAINTENANCE: gettext('Device is under maintenance')
};
export const deviceAvailabilityIconMap = {
    sendData: {
        [SendStatus.AVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        [SendStatus.UNAVAILABLE]: {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        [SendStatus.UNKNOWN]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        [SendStatus.NOT_MONITORED]: {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        }
    },
    push: {
        [PushStatus.CONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        [PushStatus.DISCONNECTED]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.UNKNOWN]: {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        [PushStatus.MAINTENANCE]: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    },
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
export const tooltips = {
    sendStatusConnected: (lastMessage, translateService) => {
        const date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang || TranslateService.defaultLang());
        return translateService.instant(gettext('Device last request:\n{{date}}'), { date });
    },
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWF2YWlsYWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvZGV2aWNlLXN0YXR1cy9kZXZpY2UtYXZhaWxhYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0Qsd0NBQXdDO0FBRXhDLE1BQU0sQ0FBTixJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIscUNBQXVCLENBQUE7SUFDdkIseUNBQTJCLENBQUE7SUFDM0IsaUNBQW1CLENBQUE7SUFDbkIseUNBQTJCLENBQUE7SUFDM0IsNkNBQStCLENBQUE7QUFDakMsQ0FBQyxFQU5XLFVBQVUsS0FBVixVQUFVLFFBTXJCO0FBRUQsTUFBTSxDQUFOLElBQVksVUFLWDtBQUxELFdBQVksVUFBVTtJQUNwQixxQ0FBdUIsQ0FBQTtJQUN2QiwyQ0FBNkIsQ0FBQTtJQUM3QixpQ0FBbUIsQ0FBQTtJQUNuQix5Q0FBMkIsQ0FBQTtBQUM3QixDQUFDLEVBTFcsVUFBVSxLQUFWLFVBQVUsUUFLckI7QUFFRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRztJQUM5QixTQUFTLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0lBQzdDLGFBQWEsRUFBRSxPQUFPLENBQUMsZ0NBQWdDLENBQUM7SUFDeEQsV0FBVyxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0lBQ2xELFdBQVcsRUFBRSxPQUFPLENBQUMsNkJBQTZCLENBQUM7Q0FDM0MsQ0FBQztBQUVYLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHO0lBQzlCLFNBQVMsRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7SUFDN0MsWUFBWSxFQUFFLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztJQUNsRCxPQUFPLEVBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0lBQzdDLFdBQVcsRUFBRSxPQUFPLENBQUMsNkJBQTZCLENBQUM7Q0FDM0MsQ0FBQztBQUVYLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLFFBQVEsRUFBRTtRQUNSLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLFVBQVU7U0FDbEI7UUFDRCxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4QixJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxXQUFXO1NBQ25CO1FBQ0QsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzFCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLGVBQWU7U0FDdkI7S0FDRjtJQUNELElBQUksRUFBRTtRQUNKLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsS0FBSyxFQUFFLFVBQVU7U0FDbEI7UUFDRCxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN6QixJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCO1FBQ0QsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7S0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdEIsbUJBQW1CLEVBQUUsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRTtRQUNyRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUNyQixRQUFRLEVBQ1IsZ0JBQWdCLENBQUMsV0FBVyxJQUFJLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUMvRCxDQUFDO1FBQ0YsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDRCxzQkFBc0IsRUFBRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7SUFDM0QsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO0lBQ2hFLHNCQUFzQixFQUFFLE9BQU8sQ0FDN0IsbUZBQW1GLENBQ3BGO0lBQ0QsV0FBVyxFQUFFLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztDQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9pMThuL3RyYW5zbGF0ZS5zZXJ2aWNlJztcbi8vIFRPRE8gcmVtb3ZlICB3aGVuIGM4eS1pY29uIHdpbGwgd29ya3NcblxuZXhwb3J0IGVudW0gU2VuZFN0YXR1cyB7XG4gIEFWQUlMQUJMRSA9ICdBVkFJTEFCTEUnLFxuICBVTkFWQUlMQUJMRSA9ICdVTkFWQUlMQUJMRScsXG4gIFVOS05PV04gPSAnVU5LTk9XTicsXG4gIE1BSU5URU5BTkNFID0gJ01BSU5URU5BTkNFJyxcbiAgTk9UX01PTklUT1JFRCA9ICdOT1RfTU9OSVRPUkVEJ1xufVxuXG5leHBvcnQgZW51bSBQdXNoU3RhdHVzIHtcbiAgQ09OTkVDVEVEID0gJ0NPTk5FQ1RFRCcsXG4gIERJU0NPTk5FQ1RFRCA9ICdESVNDT05ORUNURUQnLFxuICBVTktOT1dOID0gJ1VOS05PV04nLFxuICBNQUlOVEVOQU5DRSA9ICdNQUlOVEVOQU5DRSdcbn1cblxuZXhwb3J0IGNvbnN0IFNlbmRTdGF0dXNMYWJlbHMgPSB7XG4gIEFWQUlMQUJMRTogZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uOiBvbmxpbmUnKSxcbiAgTk9UX01PTklUT1JFRDogZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uOiBub3QgbW9uaXRvcmVkJyksXG4gIFVOQVZBSUxBQkxFOiBnZXR0ZXh0KCdTZW5kIGNvbm5lY3Rpb246IG9mZmxpbmUnKSxcbiAgVU5LTk9XTjogZ2V0dGV4dCgnU2VuZCBjb25uZWN0aW9uIHN0YXR1cyB1bmtub3duJyksXG4gIE1BSU5URU5BTkNFOiBnZXR0ZXh0KCdEZXZpY2UgaXMgdW5kZXIgbWFpbnRlbmFuY2UnKVxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFB1c2hTdGF0dXNMYWJlbHMgPSB7XG4gIENPTk5FQ1RFRDogZ2V0dGV4dCgnUHVzaCBjb25uZWN0aW9uOiBhY3RpdmUnKSxcbiAgRElTQ09OTkVDVEVEOiBnZXR0ZXh0KCdQdXNoIGNvbm5lY3Rpb246IGluYWN0aXZlJyksXG4gIFVOS05PV046IGdldHRleHQoJ1B1c2ggY29ubmVjdGlvbjogaW5hY3RpdmUnKSxcbiAgTUFJTlRFTkFOQ0U6IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcCA9IHtcbiAgc2VuZERhdGE6IHtcbiAgICBbU2VuZFN0YXR1cy5BVkFJTEFCTEVdOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1yaWdodCcsXG4gICAgICBjbGFzczogJ3N0YXR1c09rJ1xuICAgIH0sXG4gICAgW1NlbmRTdGF0dXMuVU5BVkFJTEFCTEVdOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1yaWdodCcsXG4gICAgICBjbGFzczogJ3N0YXR1c05vaydcbiAgICB9LFxuICAgIFtTZW5kU3RhdHVzLlVOS05PV05dOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1yaWdodCcsXG4gICAgICBjbGFzczogJ3N0YXR1c1Vua25vd24nXG4gICAgfSxcbiAgICBbU2VuZFN0YXR1cy5OT1RfTU9OSVRPUkVEXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctcmlnaHQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNVbmtub3duJ1xuICAgIH1cbiAgfSxcbiAgcHVzaDoge1xuICAgIFtQdXNoU3RhdHVzLkNPTk5FQ1RFRF06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LWxlZnQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNPaydcbiAgICB9LFxuICAgIFtQdXNoU3RhdHVzLkRJU0NPTk5FQ1RFRF06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LWxlZnQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNVbmtub3duJ1xuICAgIH0sXG4gICAgW1B1c2hTdGF0dXMuVU5LTk9XTl06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LWxlZnQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNVbmtub3duJ1xuICAgIH0sXG4gICAgW1B1c2hTdGF0dXMuTUFJTlRFTkFOQ0VdOiB7XG4gICAgICBpY29uOiAnd3JlbmNoJyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzQWxlcnQnXG4gICAgfVxuICB9LFxuICBkZXZpY2U6IHtcbiAgICBNQUlOVEVOQU5DRToge1xuICAgICAgaWNvbjogJ3dyZW5jaCcsXG4gICAgICBjbGFzczogJ3N0YXR1c0FsZXJ0J1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRvb2x0aXBzID0ge1xuICBzZW5kU3RhdHVzQ29ubmVjdGVkOiAobGFzdE1lc3NhZ2UsIHRyYW5zbGF0ZVNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBkYXRlID0gZm9ybWF0RGF0ZShcbiAgICAgIG5ldyBEYXRlKGxhc3RNZXNzYWdlKSxcbiAgICAgICdtZWRpdW0nLFxuICAgICAgdHJhbnNsYXRlU2VydmljZS5jdXJyZW50TGFuZyB8fCBUcmFuc2xhdGVTZXJ2aWNlLmRlZmF1bHRMYW5nKClcbiAgICApO1xuICAgIHJldHVybiB0cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoZ2V0dGV4dCgnRGV2aWNlIGxhc3QgcmVxdWVzdDpcXG57e2RhdGV9fScpLCB7IGRhdGUgfSk7XG4gIH0sXG4gIHNlbmRTdGF0dXNEaXNjb25uZWN0ZWQ6IGdldHRleHQoJ0Nvbm5lY3Rpb24gbm90IG1vbml0b3JlZCcpLFxuICBwdXNoU3RhdHVzQ29ubmVjdGVkOiBnZXR0ZXh0KCdDb25uZWN0aW9uIHRvIGRldmljZSBlc3RhYmxpc2hlZCcpLFxuICBwdXNoU3RhdHVzRGlzY29ubmVjdGVkOiBnZXR0ZXh0KFxuICAgICdDb25uZWN0aW9uIHRvIGRldmljZSBub3QgZXN0YWJsaXNoZWQgKG5vdCBzdXBwb3J0ZWQgYnkgZGV2aWNlIG9yIG5vIGNvbm5lY3Rpdml0eSknXG4gICksXG4gIG1haW50ZW5hbmNlOiBnZXR0ZXh0KCdEZXZpY2UgaXMgdW5kZXIgbWFpbnRlbmFuY2UnKVxufTtcbiJdfQ==
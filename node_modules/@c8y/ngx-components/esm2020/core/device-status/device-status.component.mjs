import { Component, Input } from '@angular/core';
import { deviceAvailabilityIconMap, PushStatusLabels, SendStatusLabels, tooltips } from './device-availability';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/icon.directive";
import * as i3 from "@angular/common";
import * as i4 from "ngx-bootstrap/tooltip";
import * as i5 from "../i18n/c8y-translate.pipe";
export class DeviceStatusComponent {
    set node(value) {
        this._mo = value.mo || value;
    }
    constructor(translateService) {
        this.translateService = translateService;
    }
    get() {
        return this._mo;
    }
    ngOnChanges() {
        this.setStatusProperites();
    }
    ngAfterContentInit() {
        this.setStatusProperites();
    }
    setStatusProperites() {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus =
            this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
    }
    status() {
        let statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    }
    getMaintenanceStatus() {
        return {
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        };
    }
    getSendPushStatus() {
        return {
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        };
    }
    getSendStatusTooltip(device) {
        const availability = device && device.c8y_Availability;
        const lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    }
    getPushStatusTooltip(isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    }
}
DeviceStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceStatusComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
DeviceStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceStatusComponent, selector: "device-status", inputs: { node: ["mo", "node"] }, usesOnChanges: true, ngImport: i0, template: "<div class=\"d-contents\">\n  <button\n    class=\"statusContainer\"\n    [attr.aria-label]=\"'Connection status' | translate\"\n    tooltip=\"{{ status().sendStatus.tooltip | translate }}\n    {{ status().pushStatus.tooltip | translate }}\"\n    placement=\"right\"\n    container=\"body\"\n    [adaptivePosition]=\"false\"\n    [delay]=\"500\"\n    *ngIf=\"!!status().sendStatus || !!status().pushStatus\"\n  >\n    <div\n      *ngIf=\"!!status().sendStatus\"\n      class=\"sendStatus\"\n      [c8yIcon]=\"status().sendStatus.icon\"\n      [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n      *ngIf=\"!!status().pushStatus\"\n      class=\"pushStatus\"\n      [c8yIcon]=\"status().pushStatus.icon\"\n      [ngClass]=\"status().pushStatus.class\"\n    ></div>\n  </button>\n  <button\n    class=\"statusContainer\"\n    [attr.aria-label]=\"'Connection status' | translate\"\n    tooltip=\"{{ status().maintenanceStatus.tooltip | translate }}\"\n    placement=\"right\"\n    container=\"body\"\n    [adaptivePosition]=\"false\"\n    [delay]=\"500\"\n    *ngIf=\"!!status().maintenanceStatus\"\n  >\n    <div\n      class=\"maintenanceStatus\"\n      [c8yIcon]=\"status().maintenanceStatus.icon\"\n      [ngClass]=\"status().maintenanceStatus.class\"\n    ></div>\n  </button>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceStatusComponent, decorators: [{
            type: Component,
            args: [{ selector: 'device-status', template: "<div class=\"d-contents\">\n  <button\n    class=\"statusContainer\"\n    [attr.aria-label]=\"'Connection status' | translate\"\n    tooltip=\"{{ status().sendStatus.tooltip | translate }}\n    {{ status().pushStatus.tooltip | translate }}\"\n    placement=\"right\"\n    container=\"body\"\n    [adaptivePosition]=\"false\"\n    [delay]=\"500\"\n    *ngIf=\"!!status().sendStatus || !!status().pushStatus\"\n  >\n    <div\n      *ngIf=\"!!status().sendStatus\"\n      class=\"sendStatus\"\n      [c8yIcon]=\"status().sendStatus.icon\"\n      [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n      *ngIf=\"!!status().pushStatus\"\n      class=\"pushStatus\"\n      [c8yIcon]=\"status().pushStatus.icon\"\n      [ngClass]=\"status().pushStatus.class\"\n    ></div>\n  </button>\n  <button\n    class=\"statusContainer\"\n    [attr.aria-label]=\"'Connection status' | translate\"\n    tooltip=\"{{ status().maintenanceStatus.tooltip | translate }}\"\n    placement=\"right\"\n    container=\"body\"\n    [adaptivePosition]=\"false\"\n    [delay]=\"500\"\n    *ngIf=\"!!status().maintenanceStatus\"\n  >\n    <div\n      class=\"maintenanceStatus\"\n      [c8yIcon]=\"status().maintenanceStatus.icon\"\n      [ngClass]=\"status().maintenanceStatus.class\"\n    ></div>\n  </button>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { node: [{
                type: Input,
                args: ['mo']
            }] } });
//# sourceMappingURL=data:application/json;base64,
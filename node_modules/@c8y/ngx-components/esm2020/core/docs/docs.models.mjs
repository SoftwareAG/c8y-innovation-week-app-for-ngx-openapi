import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common/extension-hooks';
export const HOOK_DOCS = new InjectionToken('HOOK_DOCS');
/**
 * You can either provide a single `DocLink` as parameter:
 * ```typescript
 *  hookOptions(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookOptions([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DocLink>`
 * ```typescript
 *  @Injectable({ providedIn: 'root' })
 *  export class MyDocLinkFactory implements ExtensionFactory<DocLink> {...}
 *  ...
 *  hookOptions(MyDocLinkFactory)
 * ```
 * A typed alternative to `HOOK_DOCS`.
 * @param doc The `DocLink`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDocs(doc) {
    return hookGeneric(doc, HOOK_DOCS);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy5tb2RlbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2RvY3MvZG9jcy5tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFxQyxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQXNCM0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLElBQUksY0FBYyxDQUFxQixXQUFXLENBQUMsQ0FBQztBQUU3RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUE2QjtJQUNwRCxPQUFPLFdBQVcsQ0FBVSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uRmFjdG9yeSwgR2VuZXJpY0hvb2tUeXBlLCBob29rR2VuZXJpYyB9IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuXG4vKipcbiAqIEFuIGV4dGVuc2lvbiBIT09LIGNhbiB1c2UgZWl0aGVyIGEgcHVyZSB2YWx1ZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlVmFsdWU6IHsgLi4uaG9va1ZhbHVlIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICpcbiAqIE9yIGFuIGFycmF5IHRvIGRpcmVjdGx5IHJlZ2lzdGVyIG11bHRpcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VWYWx1ZTogW3sgLi4uaG9va1ZhbHVlcyB9XSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKlxuICogT3IgYW4gRXh0ZW5zaW9uRmFjdG9yeSB3aGljaCBhbGxvd3MgdG8gZGVmaW5lIGEgZ2V0KCkgZnVuY3Rpb24uIFRoaXMgZnVuY3Rpb25cbiAqIGdldHMgY2FsbGVkIG9uIGVhY2ggbmF2aWdhdGlvbiB3aXRoIHRoZSBjdXJyZW50IHJvdXRlIGFuZCBjYW4gcmV0dXJuIHZhbHVlc1xuICogYXN5bmMgKG9ic2VydmFibGUgb3IgcHJvbWlzZSkuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZUZhY3Rvcnk6IHsgZ2V0OiAocm91dGUpID0+IGRvU29tZXRoaW5nQXN5bmMocm91dGUpIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICovXG5leHBvcnQgdHlwZSBEb2NMaW5rRXh0ZW5zaW9uID0gRG9jTGluayB8IERvY0xpbmtbXSB8IEV4dGVuc2lvbkZhY3Rvcnk8RG9jTGluaz47XG5cbmV4cG9ydCBjb25zdCBIT09LX0RPQ1MgPSBuZXcgSW5qZWN0aW9uVG9rZW48RG9jTGlua0V4dGVuc2lvbltdPignSE9PS19ET0NTJyk7XG5cbi8qKlxuICogWW91IGNhbiBlaXRoZXIgcHJvdmlkZSBhIHNpbmdsZSBgRG9jTGlua2AgYXMgcGFyYW1ldGVyOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tPcHRpb25zKC4uLilcbiAqIGBgYFxuICpcbiAqIE9yIGFuIGFycmF5IHRvIGRpcmVjdGx5IHJlZ2lzdGVyIG11bHRpcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tPcHRpb25zKFsuLi5dKVxuICogYGBgXG4gKlxuICogT3IgeW91IHByb3ZpZGUgYW4gU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8RG9jTGluaz5gXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbiAqICBleHBvcnQgY2xhc3MgTXlEb2NMaW5rRmFjdG9yeSBpbXBsZW1lbnRzIEV4dGVuc2lvbkZhY3Rvcnk8RG9jTGluaz4gey4uLn1cbiAqICAuLi5cbiAqICBob29rT3B0aW9ucyhNeURvY0xpbmtGYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX0RPQ1NgLlxuICogQHBhcmFtIGRvYyBUaGUgYERvY0xpbmtgJ3Mgb3IgYEV4dGVuc2lvbkZhY3RvcnlgIHRvIGJlIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gYFByb3ZpZGVyYCB0byBiZSBwcm92aWRlZCBpbiB5b3VyIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvb2tEb2NzKGRvYzogR2VuZXJpY0hvb2tUeXBlPERvY0xpbms+KSB7XG4gIHJldHVybiBob29rR2VuZXJpYzxEb2NMaW5rPihkb2MsIEhPT0tfRE9DUyk7XG59XG5cbi8qKlxuICogQSBsaW5rIG9uIHRoZSByaWdodCBkcmF3ZXIuXG4gKi9cbmV4cG9ydCB0eXBlIERvY0xpbmsgPSBEb2NMaW5rV2l0aENvbXBvbmVudCB8IERvY0xpbmtXaXRoTGFiZWw7XG5cbmludGVyZmFjZSBEb2NMaW5rQmFzaWMge1xuICAvKipcbiAgICogRG9jIGlzIHNob3duIHVuZGVyIEhlbHAgJiBTdXBwb3J0LiBRdWlja2xpbmsgaXMgZGlzcGxheWVkIGJpZ2dlciBhbmQgc2hvd24gYXQgdGhlIHRvcC5cbiAgICovXG4gIHR5cGU6ICdkb2MnIHwgJ3F1aWNrbGluayc7XG5cbiAgLyoqXG4gICAqIFVzZWQgZm9yIG9yZGVyaW5nIHRoZSBsaW5rcy5cbiAgICovXG4gIHByaW9yaXR5PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvY0xpbmtXaXRoQ29tcG9uZW50IGV4dGVuZHMgRG9jTGlua0Jhc2ljIHtcbiAgLyoqXG4gICAqIEEgY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICovXG4gIGNvbXBvbmVudDogVHlwZTxhbnk+O1xuICAvKipcbiAgICogQSBpbmplY3RvciB0byB1c2UuIElmIG5vbmUgaXMgc2V0IHRoZSBkZWZhdWx0IHJvb3Qgb25lIGlzIHVzZWQuXG4gICAqL1xuICBpbmplY3Rvcj86IEluamVjdG9yO1xuICBpY29uPzogbmV2ZXI7XG4gIGljb25TcmM/OiBuZXZlcjtcbiAgbGFiZWw/OiBuZXZlcjtcbiAgdXJsPzogbmV2ZXI7XG4gIGNsaWNrPzogbmV2ZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jTGlua1dpdGhMYWJlbCBleHRlbmRzIERvY0xpbmtCYXNpYyB7XG4gIC8qKlxuICAgKiBUaGUgKGNzcykgaWNvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgaWNvbjogc3RyaW5nO1xuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgaW1hZ2UtcGF0aCBhcyBpY29uLlxuICAgKi9cbiAgaWNvblNyYz86IHN0cmluZztcbiAgLyoqXG4gICAqIEEgbGFiZWwgdG8gZGlzcGxheS5cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIHVybCB3aGVyZSB0aGUgbGluayBuYXZpYWdhdGVzIHRvLlxuICAgKi9cbiAgdXJsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB3aGljaCBpcyBjYWxsZWQgaWYgdGhlIERvY0xpbmsgaXMgY2xpY2tlZC5cbiAgICovXG4gIGNsaWNrPzogYW55O1xuICBjb21wb25lbnQ/OiBuZXZlcjtcbiAgaW5qZWN0b3I/OiBuZXZlcjtcbn1cbiJdfQ==
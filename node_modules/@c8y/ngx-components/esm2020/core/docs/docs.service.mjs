import { Injectable, Injector } from '@angular/core';
import { OptionsService } from '../common/options.service';
import { documentationItems } from './defaults.items';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { HOOK_DOCS } from './docs.models';
import { ExtensionPointWithoutStateForPlugins, fromTriggerOnce, getInjectedHooks } from '../common/extension-hooks';
import { Router } from '@angular/router';
import { shareReplay, first, filter, distinctUntilChanged } from 'rxjs/operators';
import { isUndefined, get } from 'lodash-es';
import { PluginsResolveService } from '../plugins';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "@angular/router";
import * as i4 from "../plugins";
export class DocsService extends ExtensionPointWithoutStateForPlugins {
    constructor(options, app, rootInjector, router, plugins) {
        super(rootInjector, plugins);
        this.options = options;
        this.app = app;
        this.router = router;
        /**
         * Default documentation URL.
         */
        this.DEFAULT_DOCS_BASE_URL = 'https://www.cumulocity.com/guides/{{ version }}';
        this.items$ = this.setupItemsObservable();
    }
    getBaseUrl(uiVersion) {
        const docsBaseUrl = this.options.get('docsBaseUrl', this.DEFAULT_DOCS_BASE_URL);
        return this.getUrlWithDocsVersion(docsBaseUrl, uiVersion);
    }
    /**
     * Takes a URL and replaces all `{{ version }}` placeholders with the relevant docs version
     * (the version is derived from the app state or from the provided parameter).
     * @param url Any URL that contains `{{ version }}` placeholders.
     * @param uiVersion A version string or object, defaults to the app state version.
     * @returns The URL with replaced `{{ version }}` placeholders.
     */
    getUrlWithDocsVersion(url, uiVersion = this.app.uiVersion) {
        const version = typeof uiVersion === 'string' ? uiVersion : get(uiVersion, 'ngx');
        let docsVersion = '';
        if (!(isUndefined(version) || version === '')) {
            docsVersion = this.getDocsVersionForUiVersion(version);
        }
        return url.replace(/{{\s*version\s*}}/g, docsVersion).replace(/\/+$/g, '');
    }
    get templateStr() {
        return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
    }
    getUserGuideLink(link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    }
    list() {
        return this.items$
            .pipe(filter(i => !!i.length), first())
            .toPromise();
    }
    get() {
        // use the function as a factory
        const { links, noDefault, excludeDefault = [] } = this.options.get('docs', {});
        const { supportUrl } = this.app.state;
        let staticLinks = noDefault
            ? []
            : documentationItems
                .map((item) => ({ ...item, url: this.getUserGuideLink(item.url) }))
                .filter(({ url }) => !excludeDefault.some(e => new RegExp(e).test(url)));
        if (links) {
            // backwards compatibility
            links.map((lnk) => {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    }
    setupItemsObservable() {
        const supportUrlRefreshTrigger = this.app.map(({ supportUrl }) => supportUrl);
        return fromTriggerOnce(this.router, [supportUrlRefreshTrigger, this.refresh$], [getInjectedHooks(HOOK_DOCS, this.injectors), () => this.factories, this]).pipe(shareReplay(1), distinctUntilChanged());
    }
    getLink(templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    }
    prefixWithSlash(partialLink = '') {
        const shouldPrefix = !(partialLink && /^\//.test(partialLink));
        const prefix = shouldPrefix ? '/' : '';
        return `${prefix}${partialLink}`;
    }
    /**
     * Returns the most relevant version of documentation for the given version of UI.
     * For maintenance versions, it's the first version in the line, e.g. 1017.0.123 -> 10.17.0.
     * For develop versions, it's the next minor one, e.g. 1017.123.0-SNAPSHOT -> 10.18.0.
     *
     * @param uiVersion The version of UI.
     * @private
     */
    getDocsVersionForUiVersion(uiVersion) {
        const [majorMinorStr, patchStr] = uiVersion.split('.');
        const patchNumber = parseInt(patchStr, 10);
        const takeNextMinor = patchNumber > 0;
        const majorNumber = Math.floor(parseInt(majorMinorStr, 10) / 100);
        const minorNumber = parseInt(majorMinorStr, 10) - majorNumber * 100 + (takeNextMinor ? 1 : 0);
        return `${majorNumber}.${minorNumber}.0`;
    }
}
DocsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DocsService, deps: [{ token: i1.OptionsService }, { token: i2.AppStateService }, { token: i0.Injector }, { token: i3.Router }, { token: i4.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
DocsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DocsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DocsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.OptionsService }, { type: i2.AppStateService }, { type: i0.Injector }, { type: i3.Router }, { type: i4.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
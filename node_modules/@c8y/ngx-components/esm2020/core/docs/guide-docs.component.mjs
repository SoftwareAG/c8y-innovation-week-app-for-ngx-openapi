import { Component, ContentChildren, QueryList, ContentChild, ElementRef, Renderer2, Optional } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { C8yTranslateDirective } from '../i18n/c8y-translate.directive';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./docs.service";
import * as i2 from "../i18n/c8y-translate.directive";
import * as i3 from "@angular/common";
export class GuideDocsComponent {
    get translateDirective() {
        return this._translateDirective;
    }
    set translateDirective(value) {
        if (!value) {
            return;
        }
        this._translateDirective = value;
    }
    constructor(docs, el, renderer, translateDirective) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
        this.translateDirective = translateDirective;
    }
    ngOnInit() {
        this.baseUrl = this.docs.getBaseUrl();
    }
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    ngAfterContentInit() {
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent.pipe(takeUntil(this.destroyed$)).subscribe(() => {
                this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
        this.links.forEach(guide => {
            guide.baseHref = this.baseUrl;
        });
    }
    /**
     * Find and modify anchor elements
     */
    replaceAnchorAttributes() {
        const anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(a => {
            const guideHref = `${this.baseUrl}/${a.getAttribute('c8y-guide-href')}`;
            this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    }
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    findGuideAnchors(el) {
        const isAnchor = () => el.nodeName === 'A';
        const hasGuideHrefAttr = () => !!el.attributes.getNamedItem('c8y-guide-href');
        const hasChildren = () => el.childNodes && el.childNodes.length > 0;
        let result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach((node) => {
                const searchResult = this.findGuideAnchors(node);
                if (searchResult) {
                    result = [...result, ...searchResult];
                }
            });
        }
        return result;
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
GuideDocsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GuideDocsComponent, deps: [{ token: i1.DocsService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.C8yTranslateDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
GuideDocsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: GuideDocsComponent, selector: "[c8y-guide-docs]", queries: [{ propertyName: "translateDirective", first: true, predicate: C8yTranslateDirective, descendants: true, static: true }, { propertyName: "links", predicate: GuideHrefDirective, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GuideDocsComponent, decorators: [{
            type: Component,
            args: [{ selector: '[c8y-guide-docs]', template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DocsService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.C8yTranslateDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { links: [{
                type: ContentChildren,
                args: [GuideHrefDirective, { descendants: true }]
            }], translateDirective: [{
                type: ContentChild,
                args: [C8yTranslateDirective, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
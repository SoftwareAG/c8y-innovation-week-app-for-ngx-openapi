import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { fromTriggerOnce, hookGeneric, getInjectedHooks, sortByPriority, stateToFactory, ExtensionPointForPlugins } from '../common/extension-hooks';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import { NavigatorNodeRoot } from './navigator-node-root';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../plugins/plugins-resolve.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookNavigator` function instead.
 */
export const HOOK_NAVIGATOR_NODES = new InjectionToken('HOOK_NAVIGATOR_NODES');
/**
 * You can either provide a single `NavigatorNode` or `NavigatorNodeData` as parameter:
 * ```typescript
 *  hookNavigator(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookNavigator([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<NavigatorNode | NavigatorNodeData>`
 * ```typescript
 *  export class MyNavigatorFactory implements ExtensionFactory<NavigatorNode | NavigatorNodeData> {...}
 *  ...
 *  hookNavigator(MyNavigatorFactory)
 * ```
 * A typed alternative to `HOOK_NAVIGATOR_NODES`.
 * @param nodes The `NavigatorNode`'s, `NavigatorNodeData`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookNavigator(nodes, options) {
    return hookGeneric(nodes, HOOK_NAVIGATOR_NODES, options);
}
/**
 * A service which defines the navigator.
 */
export class NavigatorService extends ExtensionPointForPlugins {
    constructor(rootInjector, router, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        /**
         * Indicates whether the menu entry associated with the given URL should be expanded.
         */
        this.firstUrl = true;
        this.items$ = this.setupItemsObservable();
        this.hasItemsInNavigator$ = this.items$.pipe(map(({ length }) => !!length), distinctUntilChanged());
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new node to the navigator.
     * @param {NavigatorNode} node Navigator node to add.
     */
    add(node) {
        this.state.add(node);
        this.emitNewState();
    }
    /**
     * Removes a node from the navigator.
     * @param {NavigatorNode} node Navigator node to remove.
     */
    remove(node) {
        this.state.delete(node);
        this.emitNewState();
    }
    setupItemsObservable() {
        const rootNode = new NavigatorNodeRoot();
        return fromTriggerOnce(this.router, this.refresh$, [
            getInjectedHooks(HOOK_NAVIGATOR_NODES, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(), map((nodes) => {
            const noParent = nodes.filter(node => !node.parent);
            const withParent = nodes.filter(node => node.parent);
            // Based on the sortedNodes array, the nodes are sequentially created.
            // Nodes sorting is done in two steps to have the top-level nodes first.
            // This way, by the time we are adding a child node, the parent node is already present.
            const sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
            rootNode.empty();
            sortedNodes.forEach(node => rootNode.addRoot(node));
            return rootNode.children;
        }), shareReplay(1));
    }
}
NavigatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: NavigatorService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
NavigatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: NavigatorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: NavigatorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
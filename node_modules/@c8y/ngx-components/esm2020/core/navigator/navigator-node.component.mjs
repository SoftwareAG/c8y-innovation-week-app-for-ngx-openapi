// tslint:disable-next-line:max-line-length
import { Component, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';
import { ActivationEnd, Router } from '@angular/router';
import { Subject, merge } from 'rxjs';
import { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { PopoverConfirmComponent } from '../modal/popover-confirm.component';
import { NavigatorIconComponent } from './navigator-icon.component';
import { NavigatorNode } from './navigator-node';
import { isUndefined } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "ngx-bootstrap/collapse";
import * as i3 from "../common/icon.directive";
import * as i4 from "@angular/common";
import * as i5 from "../modal/popover-confirm.component";
import * as i6 from "../i18n/c8y-translate.pipe";
/**
 * Navigator node renderer.
 */
export class NavigatorNodeComponent {
    constructor(router) {
        this.router = router;
        /**
         * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
         *
         * The type of event depends on where you click on the navigator node:
         * * clicking the icon will broadcast the event "icon",
         * * clicking the expander will broadcast the event "expander",
         * * clicking the label will broadcast the event "link".
         */
        this.nodeClick = new EventEmitter();
        /**
         * A subject that is triggered as soon as the navigator node is initialized.
         */
        this.nodeInit$ = new Subject();
        /**
         * A observable which emits, as soon as the active state of the node changes.
         */
        this.isActive$ = merge(this.nodeInit$, this.router.events.pipe(filter(e => e instanceof ActivationEnd))).pipe(map(() => {
            if (isUndefined(this.node.path)) {
                return false;
            }
            return this.router.isActive(this.node.path, this.node.routerLinkExact);
        }), distinctUntilChanged(), tap(isActive => {
            if (isActive) {
                this.expandCollapse(true);
                this.expandRecursiveParent(this.node.parents);
            }
        }));
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        if (!this.node.component) {
            this.viewInitTimeout = setTimeout(() => {
                this.updateIcon();
                this.node.confirm = this.confirm;
                this.nodeInit$.next();
            });
        }
    }
    /**
     * Returns the expander title.
     */
    get expandTitle() {
        return !this.node.open ? 'Expand' : 'Collapse';
    }
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from = 'link', $event) {
        let open;
        switch (from) {
            case "expander" /* ClickEventSource.EXPANDER */:
                if ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                }
                open = !this.node.open;
                break;
            case "icon" /* ClickEventSource.ICON */:
            case "link" /* ClickEventSource.LINK */:
                open = this.router.isActive(this.node.path, this.node.routerLinkExact)
                    ? true
                    : !this.node.open;
                break;
        }
        this.handleExpandCollapse(open, from, $event);
        this.nodeClick.emit(from);
    }
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open, forNode = {}) {
        this.node.open = open;
        forNode.open = open;
        this.node.click(forNode);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        if (this.node) {
            this.node.destroy();
        }
    }
    /**
     * Expands the parent nodes recursively.
     * @param nodes The nodes that should be tried to get opened.
     * @param clickOption The click options to perform on the parent nodes.
     */
    expandRecursiveParent(nodes, clickOption = { expander: true }) {
        nodes.forEach(parentNode => {
            if (!parentNode.open) {
                parentNode.open = true;
                parentNode.click(clickOption);
            }
            this.expandRecursiveParent(parentNode.parents, clickOption);
        });
    }
    handleExpandCollapse(open, from, $event) {
        if (open === this.node.open ||
            (this.node.path && !open && from !== "expander" /* ClickEventSource.EXPANDER */)) {
            return;
        }
        this.expandCollapse(open, { [from]: true, $event });
    }
    updateIcon() {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    }
    updateIconComponent() {
        let componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        const componentRef = this.iconSlot.createComponent(componentType, {
            injector: this.node.injector
        });
        componentRef.instance.node = this.node;
    }
    updateIconTemplate() {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate, undefined, {
            injector: this.node.injector
        });
    }
}
NavigatorNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: NavigatorNodeComponent, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Component });
NavigatorNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: NavigatorNodeComponent, selector: "c8y-navigator-node", inputs: { node: "node", isRoot: "isRoot" }, outputs: { nodeClick: "nodeClick" }, viewQueries: [{ propertyName: "iconSlot", first: true, predicate: ["icon"], descendants: true, read: ViewContainerRef }, { propertyName: "confirm", first: true, predicate: PopoverConfirmComponent, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"node.component\">\n  <ng-container *ngComponentOutlet=\"node.component; injector: node.injector\"></ng-container>\n</ng-container>\n\n<div\n  class=\"slot\"\n  *ngIf=\"!node.component\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <div\n      class=\"link\"\n      tabindex=\"-1\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [ngClass]=\"{ active: isActive$ | async }\"\n    >\n      <ng-container *ngTemplateOutlet=\"navicon\"></ng-container>\n      <button\n        class=\"btn-clean\"\n        title=\"{{ node.translateLabel ? (node.label | translate) : node.label }}\"\n        [attr.aria-expanded]=\"node.hasChildren ? node.open : null\"\n        type=\"button\"\n        draggable=\"false\"\n        (dragover)=\"node.canDrop && $event.preventDefault()\"\n        (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n        (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n        [attr.data-cy]=\"node.label\"\n        [attr.id]=\"isRoot ? node.id : undefined\"\n        (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n        [ngClass]=\"{\n          'root-link': isRoot,\n          open: node.open && node.hasChildren,\n          parent: node.hasChildren,\n          'dragged-hover': node.draggedHover && !node.dragged\n        }\"\n      >\n        <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n      </button>\n    </div>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    ></c8y-navigator-node>\n  </div>\n</div>\n\n<!-- icon -->\n<ng-template #navicon>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    style=\"{{ isRoot ? 'padding-left: 16px;' : null }}\"\n    *ngIf=\"node.loading && !isRoot\"\n  ></i>\n  <ng-container #icon></ng-container>\n</ng-template>\n\n<ng-template #inner>\n  <!--title  -->\n  <span>{{ node.translateLabel ? (node.label | translate) : node.label }}</span>\n\n  <!--expander  -->\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    [attr.aria-label]=\"expandTitle\"\n    role=\"button\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    data-cy=\"c8y-navigator-node--expander\"\n  ></i>\n\n  <!--  Popover confirm  -->\n  <c8y-popover-confirm\n    triggers=\"focus\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i2.CollapseDirective, selector: "[collapse]", inputs: ["display", "isAnimated", "collapse"], outputs: ["collapsed", "collapses", "expanded", "expands"], exportAs: ["bs-collapse"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i5.PopoverConfirmComponent, selector: "c8y-popover-confirm", inputs: ["buttons", "message", "title", "isOpen", "containerClass", "placement", "outsideClick"] }, { kind: "component", type: NavigatorNodeComponent, selector: "c8y-navigator-node", inputs: ["node", "isRoot"], outputs: ["nodeClick"] }, { kind: "pipe", type: i6.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: NavigatorNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-navigator-node', template: "<ng-container *ngIf=\"node.component\">\n  <ng-container *ngComponentOutlet=\"node.component; injector: node.injector\"></ng-container>\n</ng-container>\n\n<div\n  class=\"slot\"\n  *ngIf=\"!node.component\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <div\n      class=\"link\"\n      tabindex=\"-1\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [ngClass]=\"{ active: isActive$ | async }\"\n    >\n      <ng-container *ngTemplateOutlet=\"navicon\"></ng-container>\n      <button\n        class=\"btn-clean\"\n        title=\"{{ node.translateLabel ? (node.label | translate) : node.label }}\"\n        [attr.aria-expanded]=\"node.hasChildren ? node.open : null\"\n        type=\"button\"\n        draggable=\"false\"\n        (dragover)=\"node.canDrop && $event.preventDefault()\"\n        (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n        (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n        [attr.data-cy]=\"node.label\"\n        [attr.id]=\"isRoot ? node.id : undefined\"\n        (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n        [ngClass]=\"{\n          'root-link': isRoot,\n          open: node.open && node.hasChildren,\n          parent: node.hasChildren,\n          'dragged-hover': node.draggedHover && !node.dragged\n        }\"\n      >\n        <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n      </button>\n    </div>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    ></c8y-navigator-node>\n  </div>\n</div>\n\n<!-- icon -->\n<ng-template #navicon>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    style=\"{{ isRoot ? 'padding-left: 16px;' : null }}\"\n    *ngIf=\"node.loading && !isRoot\"\n  ></i>\n  <ng-container #icon></ng-container>\n</ng-template>\n\n<ng-template #inner>\n  <!--title  -->\n  <span>{{ node.translateLabel ? (node.label | translate) : node.label }}</span>\n\n  <!--expander  -->\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    [attr.aria-label]=\"expandTitle\"\n    role=\"button\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    data-cy=\"c8y-navigator-node--expander\"\n  ></i>\n\n  <!--  Popover confirm  -->\n  <c8y-popover-confirm\n    triggers=\"focus\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.Router }]; }, propDecorators: { iconSlot: [{
                type: ViewChild,
                args: ['icon', { read: ViewContainerRef, static: false }]
            }], node: [{
                type: Input
            }], isRoot: [{
                type: Input
            }], nodeClick: [{
                type: Output
            }], confirm: [{
                type: ViewChild,
                args: [PopoverConfirmComponent, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
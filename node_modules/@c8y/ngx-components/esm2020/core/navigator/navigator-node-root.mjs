import { NavigatorNode } from './navigator-node';
/**
 * Root navigator node. Top node in the hierarchy.
 * The root node is used as an anchor point for the rest of the nodes.
 */
export class NavigatorNodeRoot extends NavigatorNode {
    /**
     * Adds top nodes to the navigator tree structure. These nodes are the direct children of the root node.
     * In the case of the cockpit application, such a node is, for example, the "Home" menu entry.
     *
     * @example
     * ```ts
     * const nodeData: NavigatorNodeData = { label: 'Home' } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, a new node will be created and assigned to root.
     * root.addRoot(nodeData);
     *
     * const parentNode: NavigatorNode =  new NavigatorNode({ label: 'Configuration'...});
     * const nodeData: NavigatorNodeData = { label: 'Exports', parent: parentNode } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, parent node will be directly assigned to the root node, and newly created child node
     * // will be added to the parent node.
     * root.add(nodeData);
     *
     * ```
     *
     * @param {Partial<NavigatorNodeData>} nodeData Data on the basis of which a new node is created.
     */
    addRoot(nodeData) {
        let duplicate;
        if (nodeData.preventDuplicates) {
            duplicate = this.find(({ path, parents, label }) => {
                return (path === nodeData.path &&
                    label === nodeData.label &&
                    parents.some(p => p.label === nodeData.parent));
            });
            if (duplicate && !duplicate.hidden) {
                duplicate.routerLinkExact = false;
                return duplicate;
            }
        }
        const { parent } = nodeData;
        const node = this.createNode(nodeData);
        let localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find(n => localParent === n)) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    }
    /**
     * Creates a new navigator node.
     * @param nodeData The data that serves as the basis for creating a new node.
     */
    createNode(nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode({ ...nodeData, parent: undefined });
        }
        throw new Error('Wrong type of node data');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbmF2aWdhdG9yL25hdmlnYXRvci1ub2RlLXJvb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2pEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxhQUFhO0lBQ2xEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXVCRztJQUNILE9BQU8sQ0FBQyxRQUFvQztRQUMxQyxJQUFJLFNBQVMsQ0FBQztRQUVkLElBQUksUUFBUSxDQUFDLGlCQUFpQixFQUFFO1lBQzlCLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7Z0JBQ2pELE9BQU8sQ0FDTCxJQUFJLEtBQUssUUFBUSxDQUFDLElBQUk7b0JBQ3RCLEtBQUssS0FBSyxRQUFRLENBQUMsS0FBSztvQkFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUMvQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2dCQUNsQyxPQUFPLFNBQVMsQ0FBQzthQUNsQjtTQUNGO1FBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxDQUFDO1FBRWhCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzlCLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDNUI7YUFDRjtpQkFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ3JFLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pDO1lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUN2QjthQUNGO1NBQ0Y7UUFFRCxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsVUFBVSxDQUFDLFFBQTZEO1FBQ3RFLElBQUksUUFBUSxZQUFZLGFBQWEsRUFBRTtZQUNyQyxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxhQUFhLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxhQUFhLENBQUMsRUFBRSxHQUFHLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUM5RDtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXZpZ2F0b3JOb2RlIH0gZnJvbSAnLi9uYXZpZ2F0b3Itbm9kZSc7XG5pbXBvcnQgeyBOYXZpZ2F0b3JOb2RlRGF0YSB9IGZyb20gJy4vbmF2aWdhdG9yLW5vZGUtZGF0YSc7XG5cbi8qKlxuICogUm9vdCBuYXZpZ2F0b3Igbm9kZS4gVG9wIG5vZGUgaW4gdGhlIGhpZXJhcmNoeS5cbiAqIFRoZSByb290IG5vZGUgaXMgdXNlZCBhcyBhbiBhbmNob3IgcG9pbnQgZm9yIHRoZSByZXN0IG9mIHRoZSBub2Rlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5hdmlnYXRvck5vZGVSb290IGV4dGVuZHMgTmF2aWdhdG9yTm9kZSB7XG4gIC8qKlxuICAgKiBBZGRzIHRvcCBub2RlcyB0byB0aGUgbmF2aWdhdG9yIHRyZWUgc3RydWN0dXJlLiBUaGVzZSBub2RlcyBhcmUgdGhlIGRpcmVjdCBjaGlsZHJlbiBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBJbiB0aGUgY2FzZSBvZiB0aGUgY29ja3BpdCBhcHBsaWNhdGlvbiwgc3VjaCBhIG5vZGUgaXMsIGZvciBleGFtcGxlLCB0aGUgXCJIb21lXCIgbWVudSBlbnRyeS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3Qgbm9kZURhdGE6IE5hdmlnYXRvck5vZGVEYXRhID0geyBsYWJlbDogJ0hvbWUnIH0gO1xuICAgKiBjb25zdCByb290OiBOYXZpZ2F0b3JOb2RlUm9vdCA9IG5ldyBOYXZpZ2F0b3JOb2RlUm9vdCgpO1xuICAgKlxuICAgKiAvLyBCYXNlZCBvbiB0aGUgbm9kZSBkYXRhLCBhIG5ldyBub2RlIHdpbGwgYmUgY3JlYXRlZCBhbmQgYXNzaWduZWQgdG8gcm9vdC5cbiAgICogcm9vdC5hZGRSb290KG5vZGVEYXRhKTtcbiAgICpcbiAgICogY29uc3QgcGFyZW50Tm9kZTogTmF2aWdhdG9yTm9kZSA9ICBuZXcgTmF2aWdhdG9yTm9kZSh7IGxhYmVsOiAnQ29uZmlndXJhdGlvbicuLi59KTtcbiAgICogY29uc3Qgbm9kZURhdGE6IE5hdmlnYXRvck5vZGVEYXRhID0geyBsYWJlbDogJ0V4cG9ydHMnLCBwYXJlbnQ6IHBhcmVudE5vZGUgfSA7XG4gICAqIGNvbnN0IHJvb3Q6IE5hdmlnYXRvck5vZGVSb290ID0gbmV3IE5hdmlnYXRvck5vZGVSb290KCk7XG4gICAqXG4gICAqIC8vIEJhc2VkIG9uIHRoZSBub2RlIGRhdGEsIHBhcmVudCBub2RlIHdpbGwgYmUgZGlyZWN0bHkgYXNzaWduZWQgdG8gdGhlIHJvb3Qgbm9kZSwgYW5kIG5ld2x5IGNyZWF0ZWQgY2hpbGQgbm9kZVxuICAgKiAvLyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBwYXJlbnQgbm9kZS5cbiAgICogcm9vdC5hZGQobm9kZURhdGEpO1xuICAgKlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtQYXJ0aWFsPE5hdmlnYXRvck5vZGVEYXRhPn0gbm9kZURhdGEgRGF0YSBvbiB0aGUgYmFzaXMgb2Ygd2hpY2ggYSBuZXcgbm9kZSBpcyBjcmVhdGVkLlxuICAgKi9cbiAgYWRkUm9vdChub2RlRGF0YTogUGFydGlhbDxOYXZpZ2F0b3JOb2RlRGF0YT4pIHtcbiAgICBsZXQgZHVwbGljYXRlO1xuXG4gICAgaWYgKG5vZGVEYXRhLnByZXZlbnREdXBsaWNhdGVzKSB7XG4gICAgICBkdXBsaWNhdGUgPSB0aGlzLmZpbmQoKHsgcGF0aCwgcGFyZW50cywgbGFiZWwgfSkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHBhdGggPT09IG5vZGVEYXRhLnBhdGggJiZcbiAgICAgICAgICBsYWJlbCA9PT0gbm9kZURhdGEubGFiZWwgJiZcbiAgICAgICAgICBwYXJlbnRzLnNvbWUocCA9PiBwLmxhYmVsID09PSBub2RlRGF0YS5wYXJlbnQpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGlmIChkdXBsaWNhdGUgJiYgIWR1cGxpY2F0ZS5oaWRkZW4pIHtcbiAgICAgICAgZHVwbGljYXRlLnJvdXRlckxpbmtFeGFjdCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZHVwbGljYXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgcGFyZW50IH0gPSBub2RlRGF0YTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5jcmVhdGVOb2RlKG5vZGVEYXRhKTtcbiAgICBsZXQgbG9jYWxQYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYWxQYXJlbnQgPSB0aGlzLmZpbmQocGFyZW50LmxhYmVsKTtcbiAgICAgICAgaWYgKGxvY2FsUGFyZW50KSB7XG4gICAgICAgICAgbG9jYWxQYXJlbnQudXBkYXRlKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcmVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHBhcmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsb2NhbFBhcmVudCA9IHRoaXMuZmluZChwYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxvY2FsUGFyZW50KSB7XG4gICAgICAgIGxvY2FsUGFyZW50ID0gdGhpcy5jcmVhdGVOb2RlKHBhcmVudCk7XG4gICAgICAgIGlmICghdGhpcy5maW5kKG4gPT4gbG9jYWxQYXJlbnQgPT09IG4pKSB7XG4gICAgICAgICAgdGhpcy5hZGQobG9jYWxQYXJlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKGxvY2FsUGFyZW50IHx8IHRoaXMpLmFkZChub2RlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG5hdmlnYXRvciBub2RlLlxuICAgKiBAcGFyYW0gbm9kZURhdGEgVGhlIGRhdGEgdGhhdCBzZXJ2ZXMgYXMgdGhlIGJhc2lzIGZvciBjcmVhdGluZyBhIG5ldyBub2RlLlxuICAgKi9cbiAgY3JlYXRlTm9kZShub2RlRGF0YTogc3RyaW5nIHwgb2JqZWN0IHwgTmF2aWdhdG9yTm9kZURhdGEgfCBOYXZpZ2F0b3JOb2RlKSB7XG4gICAgaWYgKG5vZGVEYXRhIGluc3RhbmNlb2YgTmF2aWdhdG9yTm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGVEYXRhO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5vZGVEYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG5ldyBOYXZpZ2F0b3JOb2RlKHsgbGFiZWw6IG5vZGVEYXRhIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5vZGVEYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG5ldyBOYXZpZ2F0b3JOb2RlKHsgLi4ubm9kZURhdGEsIHBhcmVudDogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHR5cGUgb2Ygbm9kZSBkYXRhJyk7XG4gIH1cbn1cbiJdfQ==
import { Injectable } from '@angular/core';
import { InventoryService, UserService } from '@c8y/client';
import { concat, from, Subject } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { AppStateService } from '../ui-state.service';
import { UserPreferencesStorageLocal } from './user-preferences-storage-local';
import { UserPreferencesStorageInventory } from './user-preferences-store-inventory';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "../ui-state.service";
export class UserPreferencesService {
    constructor(user, inventory, appState) {
        this.user = user;
        this.inventory = inventory;
        this.appState = appState;
        this.preferenceChanges$ = new Subject();
        this.storage = {
            local: new UserPreferencesStorageLocal(),
            inventory: new UserPreferencesStorageInventory(this.inventory)
        };
        this.currentUser = this.appState.currentUser.pipe(filter(currentUser => currentUser !== null));
    }
    /**
     * Returns an observable of a user preference with given key.
     * Emits its initial value first and then updated values when set by user.
     * @param key The storage key for searched value.
     * @returns An Observable of a user preference.
     */
    observe(key) {
        return concat(this.get(key), this.preferenceChanges$.pipe(filter(change => change.key === key), map(change => change.value)));
    }
    /**
     * Get an Observable value for searched key for current user.
     * @param key The storage key for searched value.
     * @returns An Observable with the value of preference.
     */
    get(key) {
        return this.currentUser.pipe(first(), switchMap(user => this.getForUser(key, user)));
    }
    /**
     * Sets a value in storage for current user.
     * @param key The storage key for the value to be set.
     * @param value The storage value to be set.
     * @returns A promise with saved value.
     */
    set(key, value) {
        return new Promise((resolve, reject) => {
            this.currentUser.pipe(first()).subscribe(user => {
                this.preferenceChanges$.next({ key, value });
                resolve(this.setForUser(key, value, user));
            }, reject);
        });
    }
    /**
     * Get an Observable value of searched key for a specific user.
     * @param key The storage key for searched value.
     * @param user The user for whom the search is done.
     * @returns An Observable with the value of preference.
     */
    getForUser(key, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return from(storage.get(rawKey));
    }
    /**
     * Sets a value in storage for a specific user.
     * @param key The storage key for the value to be set.
     * @param value The storage value to be set.
     * @returns A promise with saved value.
     */
    setForUser(key, value, user) {
        const rawKey = this.getRawKey(key, user);
        const storage = this.getStorage(user);
        return Promise.resolve(storage.set(rawKey, value));
    }
    /**
     * Get a string of key concatenated with username.
     * @param key The storage key for searched value.
     * @param user The user for whom the search is done.
     * @returns A string of key concatenated with username.
     */
    getRawKey(key, user) {
        const username = user.userName.replace(/\./g, '__');
        return `${key}${username}`;
    }
    /**
     * Gets a proper storage depending on the user roles.
     * @param user The user for whom the role check is done.
     * @returns A proper storage.
     */
    getStorage(user) {
        return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN'])
            ? this.storage.inventory
            : this.storage.local;
    }
}
UserPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesService, deps: [{ token: i1.UserService }, { token: i1.InventoryService }, { token: i2.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
UserPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UserPreferencesService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserService }, { type: i1.InventoryService }, { type: i2.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS9jb21tb24vdXNlci1wcmVmZXJlbmNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQVMsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBSXJGLE1BQU0sT0FBTyxzQkFBc0I7SUFPakMsWUFDVSxJQUFpQixFQUNqQixTQUEyQixFQUMzQixRQUF5QjtRQUZ6QixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBUm5DLHVCQUFrQixHQUE0QixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBVTFELElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSwyQkFBMkIsRUFBRTtZQUN4QyxTQUFTLEVBQUUsSUFBSSwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQy9ELENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElB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Q0FBQztJQUN6QixDQUFDOzttSEExR1Usc0JBQXNCO3VIQUF0QixzQkFBc0IsY0FEVCxNQUFNOzJGQUNuQixzQkFBc0I7a0JBRGxDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW52ZW50b3J5U2VydmljZSwgSVVzZXIsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgY29uY2F0LCBmcm9tLCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU3RvcmFnZUxvY2FsIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLXN0b3JhZ2UtbG9jYWwnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU3RvcmFnZUludmVudG9yeSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy1zdG9yZS1pbnZlbnRvcnknO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2UgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZS5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzU2VydmljZSB7XG4gIGN1cnJlbnRVc2VyOiBPYnNlcnZhYmxlPElVc2VyPjtcbiAgcHJlZmVyZW5jZUNoYW5nZXMkOiBTdWJqZWN0PFVzZXJQcmVmZXJlbmNlPiA9IG5ldyBTdWJqZWN0KCk7XG4gIHByaXZhdGUgc3RvcmFnZToge1xuICAgIGxvY2FsOiBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlTG9jYWw7XG4gICAgaW52ZW50b3J5OiBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlSW52ZW50b3J5O1xuICB9O1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHVzZXI6IFVzZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnN0b3JhZ2UgPSB7XG4gICAgICBsb2NhbDogbmV3IFVzZXJQcmVmZXJlbmNlc1N0b3JhZ2VMb2NhbCgpLFxuICAgICAgaW52ZW50b3J5OiBuZXcgVXNlclByZWZlcmVuY2VzU3RvcmFnZUludmVudG9yeSh0aGlzLmludmVudG9yeSlcbiAgICB9O1xuICAgIHRoaXMuY3VycmVudFVzZXIgPSB0aGlzLmFwcFN0YXRlLmN1cnJlbnRVc2VyLnBpcGUoZmlsdGVyKGN1cnJlbnRVc2VyID0+IGN1cnJlbnRVc2VyICE9PSBudWxsKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIG9mIGEgdXNlciBwcmVmZXJlbmNlIHdpdGggZ2l2ZW4ga2V5LlxuICAgKiBFbWl0cyBpdHMgaW5pdGlhbCB2YWx1ZSBmaXJzdCBhbmQgdGhlbiB1cGRhdGVkIHZhbHVlcyB3aGVuIHNldCBieSB1c2VyLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBzdG9yYWdlIGtleSBmb3Igc2VhcmNoZWQgdmFsdWUuXG4gICAqIEByZXR1cm5zIEFuIE9ic2VydmFibGUgb2YgYSB1c2VyIHByZWZlcmVuY2UuXG4gICAqL1xuICBvYnNlcnZlPFQ+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIGNvbmNhdChcbiAgICAgIHRoaXMuZ2V0KGtleSksXG4gICAgICB0aGlzLnByZWZlcmVuY2VDaGFuZ2VzJC5waXBlKFxuICAgICAgICBmaWx0ZXIoY2hhbmdlID0+IGNoYW5nZS5rZXkgPT09IGtleSksXG4gICAgICAgIG1hcChjaGFuZ2UgPT4gY2hhbmdlLnZhbHVlKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIE9ic2VydmFibGUgdmFsdWUgZm9yIHNlYXJjaGVkIGtleSBmb3IgY3VycmVudCB1c2VyLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBzdG9yYWdlIGtleSBmb3Igc2VhcmNoZWQgdmFsdWUuXG4gICAqIEByZXR1cm5zIEFuIE9ic2VydmFibGUgd2l0aCB0aGUgdmFsdWUgb2YgcHJlZmVyZW5jZS5cbiAgICovXG4gIGdldChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFVzZXIucGlwZShcbiAgICAgIGZpcnN0KCksXG4gICAgICBzd2l0Y2hNYXAodXNlciA9PiB0aGlzLmdldEZvclVzZXIoa2V5LCB1c2VyKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSB2YWx1ZSBpbiBzdG9yYWdlIGZvciBjdXJyZW50IHVzZXIuXG4gICAqIEBwYXJhbSBrZXkgVGhlIHN0b3JhZ2Uga2V5IGZvciB0aGUgdmFsdWUgdG8gYmUgc2V0LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHN0b3JhZ2UgdmFsdWUgdG8gYmUgc2V0LlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2l0aCBzYXZlZCB2YWx1ZS5cbiAgICovXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFVzZXIucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUodXNlciA9PiB7XG4gICAgICAgIHRoaXMucHJlZmVyZW5jZUNoYW5nZXMkLm5leHQoeyBrZXksIHZhbHVlIH0pO1xuICAgICAgICByZXNvbHZlKHRoaXMuc2V0Rm9yVXNlcihrZXksIHZhbHVlLCB1c2VyKSk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBPYnNlcnZhYmxlIHZhbHVlIG9mIHNlYXJjaGVkIGtleSBmb3IgYSBzcGVjaWZpYyB1c2VyLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBzdG9yYWdlIGtleSBmb3Igc2VhcmNoZWQgdmFsdWUuXG4gICAqIEBwYXJhbSB1c2VyIFRoZSB1c2VyIGZvciB3aG9tIHRoZSBzZWFyY2ggaXMgZG9uZS5cbiAgICogQHJldHVybnMgQW4gT2JzZXJ2YWJsZSB3aXRoIHRoZSB2YWx1ZSBvZiBwcmVmZXJlbmNlLlxuICAgKi9cbiAgZ2V0Rm9yVXNlcihrZXk6IHN0cmluZywgdXNlcjogSVVzZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJhd0tleSA9IHRoaXMuZ2V0UmF3S2V5KGtleSwgdXNlcik7XG4gICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSh1c2VyKTtcbiAgICByZXR1cm4gZnJvbShzdG9yYWdlLmdldChyYXdLZXkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgdmFsdWUgaW4gc3RvcmFnZSBmb3IgYSBzcGVjaWZpYyB1c2VyLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBzdG9yYWdlIGtleSBmb3IgdGhlIHZhbHVlIHRvIGJlIHNldC5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBzdG9yYWdlIHZhbHVlIHRvIGJlIHNldC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHdpdGggc2F2ZWQgdmFsdWUuXG4gICAqL1xuICBzZXRGb3JVc2VyKGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCB1c2VyOiBJVXNlcik6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmF3S2V5ID0gdGhpcy5nZXRSYXdLZXkoa2V5LCB1c2VyKTtcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHVzZXIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RvcmFnZS5zZXQocmF3S2V5LCB2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHN0cmluZyBvZiBrZXkgY29uY2F0ZW5hdGVkIHdpdGggdXNlcm5hbWUuXG4gICAqIEBwYXJhbSBrZXkgVGhlIHN0b3JhZ2Uga2V5IGZvciBzZWFyY2hlZCB2YWx1ZS5cbiAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgZm9yIHdob20gdGhlIHNlYXJjaCBpcyBkb25lLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBrZXkgY29uY2F0ZW5hdGVkIHdpdGggdXNlcm5hbWUuXG4gICAqL1xuICBwcml2YXRlIGdldFJhd0tleShrZXk6IHN0cmluZywgdXNlcjogSVVzZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gdXNlci51c2VyTmFtZS5yZXBsYWNlKC9cXC4vZywgJ19fJyk7XG4gICAgcmV0dXJuIGAke2tleX0ke3VzZXJuYW1lfWA7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIHByb3BlciBzdG9yYWdlIGRlcGVuZGluZyBvbiB0aGUgdXNlciByb2xlcy5cbiAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgZm9yIHdob20gdGhlIHJvbGUgY2hlY2sgaXMgZG9uZS5cbiAgICogQHJldHVybnMgQSBwcm9wZXIgc3RvcmFnZS5cbiAgICovXG4gIHByaXZhdGUgZ2V0U3RvcmFnZSh1c2VyOiBJVXNlcik6IFVzZXJQcmVmZXJlbmNlc1N0b3JhZ2VJbnZlbnRvcnkgfCBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlTG9jYWwge1xuICAgIHJldHVybiB0aGlzLnVzZXIuaGFzQWxsUm9sZXModXNlciwgWydST0xFX0lOVkVOVE9SWV9SRUFEJywgJ1JPTEVfSU5WRU5UT1JZX0FETUlOJ10pXG4gICAgICA/IHRoaXMuc3RvcmFnZS5pbnZlbnRvcnlcbiAgICAgIDogdGhpcy5zdG9yYWdlLmxvY2FsO1xuICB9XG59XG4iXX0=
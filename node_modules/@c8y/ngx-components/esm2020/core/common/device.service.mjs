import { Injectable } from '@angular/core';
import { find, get, isUndefined, some } from 'lodash-es';
import * as i0 from "@angular/core";
export class DeviceService {
    static isAnyDevice(mo) {
        const isDevice = DeviceService.isRootDevice(mo) || !DeviceService.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    }
    static hasFragmentOrTypeFromBlacklist(mo) {
        return DeviceService.hasTypeFromBlacklist(mo) || DeviceService.hasFragmentFromBlacklist(mo);
    }
    static hasTypeFromBlacklist(mo) {
        const moType = get(mo, 'type', '');
        return some(DeviceService.TYPES_FOR_NO_DEVICE, (type) => moType.includes(type));
    }
    static hasFragmentFromBlacklist(mo) {
        const result = find(DeviceService.FRAGMENTS_FOR_NO_DEVICE, (fragment) => !isUndefined(mo[fragment]));
        return !!result;
    }
    static isRootDevice(mo) {
        return !!mo[DeviceService.DEVICE_FRAGMENT_TYPE];
    }
}
DeviceService.FRAGMENTS_FOR_NO_DEVICE = [
    'c8y_Dashboard',
    'c8y_Report',
    'c8y_Kpi',
    'c8y_ExportConfiguration',
    'c8y_IsBinary',
    'c8y_NoDevice',
    'c8y_IsDeviceGroup',
    'c8y_IsDynamicGroup',
    'c8y_Group',
    'com_cumulocity_model_smartrest_SmartRestTemplate',
    'com_cumulocity_model_devicesimulator_SensorTemplate',
    '_attachments',
    'c8y_IsDeviceType',
    'c8y_objectmapping_ObjectMapping',
    'c8y_IsAssetType'
];
DeviceService.TYPES_FOR_NO_DEVICE = [
    'c8y_ConfigurationDump',
    'c8y_Firmware',
    'c8y_SmartRule',
    'c8y_Software',
    'impact_object_mapping',
    'c8y_UserPreference',
    'c8y_TenantPolicy',
    'c8y_PrivateSmartRule',
    'c8y_SmartRest2Template',
    'c8y_JsonSchema',
    'c8y_DeviceShellTemplate',
    'c8y_DemoStatus',
    'c8y_DataBroker',
    'c8y_Application_',
    'brandingVariables',
    'c8y_DeviceSimulator',
    'c8y_CertificateMetadata',
    'lwm2m_post_registration',
    'c8y_microservice_manifest_'
];
DeviceService.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
DeviceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DeviceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi9kZXZpY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBS3pELE1BQU0sT0FBTyxhQUFhO0lBeUN4QixNQUFNLENBQUMsV0FBVyxDQUFDLEVBQWtCO1FBQ25DLE1BQU0sUUFBUSxHQUNaLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEYsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxFQUFrQjtRQUN0RCxPQUFPLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxhQUFhLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFrQjtRQUM1QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQWtCO1FBQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FDakIsYUFBYSxDQUFDLHVCQUF1QixFQUNyQyxDQUFDLFFBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUMxRCxDQUFDO1FBQ0YsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQWtCO1FBQ3BDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNsRCxDQUFDOztBQWpFTSxxQ0FBdUIsR0FBRztJQUMvQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVCx5QkFBeUI7SUFDekIsY0FBYztJQUNkLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLFdBQVc7SUFDWCxrREFBa0Q7SUFDbEQscURBQXFEO0lBQ3JELGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsaUNBQWlDO0lBQ2pDLGlCQUFpQjtDQUNsQixDQUFDO0FBQ0ssaUNBQW1CLEdBQUc7SUFDM0IsdUJBQXVCO0lBQ3ZCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsY0FBYztJQUNkLHVCQUF1QjtJQUN2QixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0Qix3QkFBd0I7SUFDeEIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsNEJBQTRCO0NBQzdCLENBQUM7QUFDSyxrQ0FBb0IsR0FBRyxjQUFjLENBQUM7MEdBdkNsQyxhQUFhOzhHQUFiLGFBQWEsY0FGWixNQUFNOzJGQUVQLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBmaW5kLCBnZXQsIGlzVW5kZWZpbmVkLCBzb21lIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlU2VydmljZSB7XG4gIHN0YXRpYyBGUkFHTUVOVFNfRk9SX05PX0RFVklDRSA9IFtcbiAgICAnYzh5X0Rhc2hib2FyZCcsXG4gICAgJ2M4eV9SZXBvcnQnLFxuICAgICdjOHlfS3BpJyxcbiAgICAnYzh5X0V4cG9ydENvbmZpZ3VyYXRpb24nLFxuICAgICdjOHlfSXNCaW5hcnknLFxuICAgICdjOHlfTm9EZXZpY2UnLFxuICAgICdjOHlfSXNEZXZpY2VHcm91cCcsXG4gICAgJ2M4eV9Jc0R5bmFtaWNHcm91cCcsXG4gICAgJ2M4eV9Hcm91cCcsXG4gICAgJ2NvbV9jdW11bG9jaXR5X21vZGVsX3NtYXJ0cmVzdF9TbWFydFJlc3RUZW1wbGF0ZScsXG4gICAgJ2NvbV9jdW11bG9jaXR5X21vZGVsX2RldmljZXNpbXVsYXRvcl9TZW5zb3JUZW1wbGF0ZScsXG4gICAgJ19hdHRhY2htZW50cycsXG4gICAgJ2M4eV9Jc0RldmljZVR5cGUnLFxuICAgICdjOHlfb2JqZWN0bWFwcGluZ19PYmplY3RNYXBwaW5nJyxcbiAgICAnYzh5X0lzQXNzZXRUeXBlJ1xuICBdO1xuICBzdGF0aWMgVFlQRVNfRk9SX05PX0RFVklDRSA9IFtcbiAgICAnYzh5X0NvbmZpZ3VyYXRpb25EdW1wJyxcbiAgICAnYzh5X0Zpcm13YXJlJyxcbiAgICAnYzh5X1NtYXJ0UnVsZScsXG4gICAgJ2M4eV9Tb2Z0d2FyZScsXG4gICAgJ2ltcGFjdF9vYmplY3RfbWFwcGluZycsXG4gICAgJ2M4eV9Vc2VyUHJlZmVyZW5jZScsXG4gICAgJ2M4eV9UZW5hbnRQb2xpY3knLFxuICAgICdjOHlfUHJpdmF0ZVNtYXJ0UnVsZScsXG4gICAgJ2M4eV9TbWFydFJlc3QyVGVtcGxhdGUnLFxuICAgICdjOHlfSnNvblNjaGVtYScsXG4gICAgJ2M4eV9EZXZpY2VTaGVsbFRlbXBsYXRlJyxcbiAgICAnYzh5X0RlbW9TdGF0dXMnLFxuICAgICdjOHlfRGF0YUJyb2tlcicsXG4gICAgJ2M4eV9BcHBsaWNhdGlvbl8nLFxuICAgICdicmFuZGluZ1ZhcmlhYmxlcycsXG4gICAgJ2M4eV9EZXZpY2VTaW11bGF0b3InLFxuICAgICdjOHlfQ2VydGlmaWNhdGVNZXRhZGF0YScsXG4gICAgJ2x3bTJtX3Bvc3RfcmVnaXN0cmF0aW9uJyxcbiAgICAnYzh5X21pY3Jvc2VydmljZV9tYW5pZmVzdF8nXG4gIF07XG4gIHN0YXRpYyBERVZJQ0VfRlJBR01FTlRfVFlQRSA9ICdjOHlfSXNEZXZpY2UnO1xuXG4gIHN0YXRpYyBpc0FueURldmljZShtbzogSU1hbmFnZWRPYmplY3QpOiBib29sZWFuIHtcbiAgICBjb25zdCBpc0RldmljZSA9XG4gICAgICBEZXZpY2VTZXJ2aWNlLmlzUm9vdERldmljZShtbykgfHwgIURldmljZVNlcnZpY2UuaGFzRnJhZ21lbnRPclR5cGVGcm9tQmxhY2tsaXN0KG1vKTtcbiAgICByZXR1cm4gaXNEZXZpY2U7XG4gIH1cblxuICBzdGF0aWMgaGFzRnJhZ21lbnRPclR5cGVGcm9tQmxhY2tsaXN0KG1vOiBJTWFuYWdlZE9iamVjdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBEZXZpY2VTZXJ2aWNlLmhhc1R5cGVGcm9tQmxhY2tsaXN0KG1vKSB8fCBEZXZpY2VTZXJ2aWNlLmhhc0ZyYWdtZW50RnJvbUJsYWNrbGlzdChtbyk7XG4gIH1cblxuICBzdGF0aWMgaGFzVHlwZUZyb21CbGFja2xpc3QobW86IElNYW5hZ2VkT2JqZWN0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgbW9UeXBlID0gZ2V0KG1vLCAndHlwZScsICcnKTtcbiAgICByZXR1cm4gc29tZShEZXZpY2VTZXJ2aWNlLlRZUEVTX0ZPUl9OT19ERVZJQ0UsICh0eXBlOiBhbnkpID0+IG1vVHlwZS5pbmNsdWRlcyh0eXBlKSk7XG4gIH1cblxuICBzdGF0aWMgaGFzRnJhZ21lbnRGcm9tQmxhY2tsaXN0KG1vOiBJTWFuYWdlZE9iamVjdCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGZpbmQoXG4gICAgICBEZXZpY2VTZXJ2aWNlLkZSQUdNRU5UU19GT1JfTk9fREVWSUNFLFxuICAgICAgKGZyYWdtZW50OiBzdHJpbmcgfCBudW1iZXIpID0+ICFpc1VuZGVmaW5lZChtb1tmcmFnbWVudF0pXG4gICAgKTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH1cblxuICBzdGF0aWMgaXNSb290RGV2aWNlKG1vOiBJTWFuYWdlZE9iamVjdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIW1vW0RldmljZVNlcnZpY2UuREVWSUNFX0ZSQUdNRU5UX1RZUEVdO1xuICB9XG59XG4iXX0=
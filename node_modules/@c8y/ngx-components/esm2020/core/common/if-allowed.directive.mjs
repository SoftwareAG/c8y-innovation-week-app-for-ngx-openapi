import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { Permissions } from './permissions.service';
import * as i0 from "@angular/core";
import * as i1 from "./permissions.service";
/**
 * A structural directive that conditionally includes a template only if the user has
 * all or any of the roles passed as an input. By default the directive checks all roles:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * or use the shorter version
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 */
export class IfAllowedDirective {
    /**
     * One or many roles required for the element to be rendered
     */
    set c8yIfAllowed(roleIds) {
        this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
    }
    /**
     * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
     */
    set c8yIfAllowedAllowAny(allowAny) {
        this.allowAny = allowAny === null || allowAny;
    }
    constructor(template, container, permissions) {
        this.template = template;
        this.container = container;
        this.permissions = permissions;
        this.allowAny = false;
    }
    ngOnInit() {
        if (!this.rolesIds ||
            !this.rolesIds.length ||
            (this.allowAny
                ? this.permissions.hasAnyRole(this.rolesIds)
                : this.permissions.hasAllRoles(this.rolesIds))) {
            this.container.createEmbeddedView(this.template);
        }
    }
}
IfAllowedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: IfAllowedDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.Permissions }], target: i0.ɵɵFactoryTarget.Directive });
IfAllowedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: IfAllowedDirective, selector: "[c8yIfAllowed]", inputs: { c8yIfAllowed: "c8yIfAllowed", c8yIfAllowedAllowAny: "c8yIfAllowedAllowAny" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: IfAllowedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[c8yIfAllowed]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.Permissions }]; }, propDecorators: { c8yIfAllowed: [{
                type: Input
            }], c8yIfAllowedAllowAny: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtYWxsb3dlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi9pZi1hbGxvd2VkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFFcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Qkc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCOztPQUVHO0lBQ0gsSUFDSSxZQUFZLENBQUMsT0FBMEI7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNJLG9CQUFvQixDQUFDLFFBQWlCO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLENBQUM7SUFDaEQsQ0FBQztJQUtELFlBQ1UsUUFBMEIsRUFDMUIsU0FBMkIsRUFDM0IsV0FBd0I7UUFGeEIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7UUFDMUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFMMUIsYUFBUSxHQUFHLEtBQUssQ0FBQztJQU10QixDQUFDO0lBRUosUUFBUTtRQUNOLElBQ0UsQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUNkLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ3JCLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDaEQ7WUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7OytHQXBDVSxrQkFBa0I7bUdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOzJKQU1LLFlBQVk7c0JBRGYsS0FBSztnQkFTRixvQkFBb0I7c0JBRHZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tICcuL3Blcm1pc3Npb25zLnNlcnZpY2UnO1xuXG4vKipcbiAqIEEgc3RydWN0dXJhbCBkaXJlY3RpdmUgdGhhdCBjb25kaXRpb25hbGx5IGluY2x1ZGVzIGEgdGVtcGxhdGUgb25seSBpZiB0aGUgdXNlciBoYXNcbiAqIGFsbCBvciBhbnkgb2YgdGhlIHJvbGVzIHBhc3NlZCBhcyBhbiBpbnB1dC4gQnkgZGVmYXVsdCB0aGUgZGlyZWN0aXZlIGNoZWNrcyBhbGwgcm9sZXM6XG4gKlxuICogYGBgXG4gKiA8YnV0dG9uICpjOHlJZkFsbG93ZWQ9XCJbJ1JPTEVfUkVDT1JEX0RFTEVURScsICdST0xFX0VOVFJZX0RFTEVURSddXCIgKGNsaWNrKT1cImRlbGV0ZSgpXCIgdGl0bGU9XCJEZWxldGVcIj5cbiAqICAgRGVsZXRlXG4gKiA8L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIFRvIGNoZWNrIGlmIHRoZSB1c2VyIGhhcyBhbnkgb2YgdGhlIHJlcXVpcmVkIHJvbGVzIHRvIHZpZXcgdGhlIGVsZW1lbnQgeW91IG5lZWQgdG8gdXNlIHRoZSBgYWxsb3dBbnlgIGlucHV0OlxuICpcbiAqIGBgYFxuICogPGJ1dHRvbiAqYzh5SWZBbGxvd2VkPVwiWydST0xFX1JFQ09SRF9ERUxFVEUnLCAnUk9MRV9FTlRSWV9ERUxFVEUnXTsgYWxsb3dBbnk6IHRydWVcIiAoY2xpY2spPVwiZGVsZXRlKClcIiB0aXRsZT1cIkRlbGV0ZVwiPlxuICogICBEZWxldGVcbiAqIDwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogb3IgdXNlIHRoZSBzaG9ydGVyIHZlcnNpb25cbiAqXG4gKiBgYGBcbiAqIDxidXR0b24gKmM4eUlmQWxsb3dlZD1cIlsnUk9MRV9SRUNPUkRfREVMRVRFJywgJ1JPTEVfRU5UUllfREVMRVRFJ107IGFsbG93QW55XCIgKGNsaWNrKT1cImRlbGV0ZSgpXCIgdGl0bGU9XCJEZWxldGVcIj5cbiAqICAgRGVsZXRlXG4gKiA8L2J1dHRvbj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5SWZBbGxvd2VkXSdcbn0pXG5leHBvcnQgY2xhc3MgSWZBbGxvd2VkRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIE9uZSBvciBtYW55IHJvbGVzIHJlcXVpcmVkIGZvciB0aGUgZWxlbWVudCB0byBiZSByZW5kZXJlZFxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGM4eUlmQWxsb3dlZChyb2xlSWRzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHRoaXMucm9sZXNJZHMgPSBBcnJheS5pc0FycmF5KHJvbGVJZHMpID8gcm9sZUlkcyA6ICEhcm9sZUlkcyA/IFtyb2xlSWRzXSA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaGVzIHRvIHRoZSBtb2RlIHdoZXJlIGF0IGxlYXN0IG9uZSBvZiB0aGUgcHJvdmlkZWQgcm9sZXMgaXMgc3VmZmljaWVudCBmb3IgdGhlIGVsZW1lbnQgdG8gYmUgcmVuZGVyZWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBjOHlJZkFsbG93ZWRBbGxvd0FueShhbGxvd0FueTogYm9vbGVhbikge1xuICAgIHRoaXMuYWxsb3dBbnkgPSBhbGxvd0FueSA9PT0gbnVsbCB8fCBhbGxvd0FueTtcbiAgfVxuXG4gIHByaXZhdGUgcm9sZXNJZHM6IHN0cmluZ1tdO1xuICBwcml2YXRlIGFsbG93QW55ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9uc1xuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMucm9sZXNJZHMgfHxcbiAgICAgICF0aGlzLnJvbGVzSWRzLmxlbmd0aCB8fFxuICAgICAgKHRoaXMuYWxsb3dBbnlcbiAgICAgICAgPyB0aGlzLnBlcm1pc3Npb25zLmhhc0FueVJvbGUodGhpcy5yb2xlc0lkcylcbiAgICAgICAgOiB0aGlzLnBlcm1pc3Npb25zLmhhc0FsbFJvbGVzKHRoaXMucm9sZXNJZHMpKVxuICAgICkge1xuICAgICAgdGhpcy5jb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGUpO1xuICAgIH1cbiAgfVxufVxuIl19
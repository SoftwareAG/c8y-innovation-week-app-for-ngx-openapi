import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { forEach } from 'lodash-es';
import * as i0 from "@angular/core";
/**
 * A directive to determine if a dropdown should open to the top or as usual to the bottom.
 * This directive has a direct dependency to the bootstrap dropdown (!)
 *
 * Preconditions:
 *  - Bootstrap dropdown is used
 *  - Bootstrap dropdown is not used with container="body"
 *  - Bootstrap dropdown is used like it is intended and documented for e.g.
 * ```html
 * <div dropdown class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 *
 * Example:
 * ```html
 * <div dropdown c8yBsDropdownDirection class="dropdown">
 *  <button class="dropdown-toggle" dropdownToggle>Toggle</button>
 *  <ul class="dropdown-menu" *dropdownMenu>
 *    <!-- Content here -->
 *  </ul>
 * </div>
 * ```
 * You make use of the bootstrap dropdown as usual and additionally add the direction directive to it.
 */
export class DropdownDirectionDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.MARGIN_BOTTOM = 10;
        this.VISIBILITY = 'visibility';
        this.DROPUP = 'dropup';
    }
    onClick() {
        const open = this.elementRef.nativeElement.classList.contains('open');
        if (open) {
            let menu;
            let toggle;
            forEach(this.elementRef.nativeElement.children, (element) => {
                if (element.classList.contains('dropdown-menu')) {
                    menu = element;
                }
                if (element.classList.contains('dropdown-toggle')) {
                    toggle = element;
                }
            });
            if (menu && toggle) {
                this.renderer.setStyle(menu, this.VISIBILITY, 'hidden');
                this.shouldDropup(menu, toggle);
                this.renderer.removeStyle(menu, this.VISIBILITY);
            }
        }
    }
    shouldDropup(container, position) {
        const containerHeight = container.getBoundingClientRect().height;
        const containerDropPosition = position.getBoundingClientRect().bottom;
        const layoutViewport = window.innerHeight;
        const sum = containerHeight + containerDropPosition + this.MARGIN_BOTTOM;
        if (sum >= layoutViewport) {
            this.renderer.addClass(this.elementRef.nativeElement, this.DROPUP);
        }
        else if (this.elementRef.nativeElement.classList.contains(this.DROPUP)) {
            this.renderer.removeClass(this.elementRef.nativeElement, this.DROPUP);
        }
    }
}
DropdownDirectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DropdownDirectionDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
DropdownDirectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: DropdownDirectionDirective, selector: "[dropdown][c8yBsDropdownDirection],[dropdown][c8yDropdownDirection]", host: { listeners: { "click": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DropdownDirectionDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[dropdown][c8yBsDropdownDirection],[dropdown][c8yDropdownDirection]' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tZGlyZWN0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL2Ryb3Bkb3duLWRpcmVjdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQUVwQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBRUgsTUFBTSxPQUFPLDBCQUEwQjtJQUtyQyxZQUFvQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnRELGtCQUFhLEdBQVcsRUFBRSxDQUFDO1FBQzNCLGVBQVUsR0FBVyxZQUFZLENBQUM7UUFDbEMsV0FBTSxHQUFXLFFBQVEsQ0FBQztJQUUrQixDQUFDO0lBRzNFLE9BQU87UUFDTCxNQUFNLElBQUksR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9FLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxJQUFpQixDQUFDO1lBQ3RCLElBQUksTUFBbUIsQ0FBQztZQUV4QixPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBb0IsRUFBRSxFQUFFO2dCQUN2RSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUMvQyxJQUFJLEdBQUcsT0FBTyxDQUFDO2lCQUNoQjtnQkFFRCxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7b0JBQ2pELE1BQU0sR0FBRyxPQUFPLENBQUM7aUJBQ2xCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNsRDtTQUNGO0lBQ0gsQ0FBQztJQUVPLFlBQVksQ0FBQyxTQUFzQixFQUFFLFFBQXFCO1FBQ2hFLE1BQU0sZUFBZSxHQUFXLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUN6RSxNQUFNLHFCQUFxQixHQUFXLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUM5RSxNQUFNLGNBQWMsR0FBVyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBRWxELE1BQU0sR0FBRyxHQUFHLGVBQWUsR0FBRyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBRXpFLElBQUksR0FBRyxJQUFJLGNBQWMsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDcEU7YUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7O3VIQTdDVSwwQkFBMEI7MkdBQTFCLDBCQUEwQjsyRkFBMUIsMEJBQTBCO2tCQUR0QyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLHFFQUFxRSxFQUFFO3lIQVM1RixPQUFPO3NCQUROLFlBQVk7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZvckVhY2ggfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIHRvIGRldGVybWluZSBpZiBhIGRyb3Bkb3duIHNob3VsZCBvcGVuIHRvIHRoZSB0b3Agb3IgYXMgdXN1YWwgdG8gdGhlIGJvdHRvbS5cbiAqIFRoaXMgZGlyZWN0aXZlIGhhcyBhIGRpcmVjdCBkZXBlbmRlbmN5IHRvIHRoZSBib290c3RyYXAgZHJvcGRvd24gKCEpXG4gKlxuICogUHJlY29uZGl0aW9uczpcbiAqICAtIEJvb3RzdHJhcCBkcm9wZG93biBpcyB1c2VkXG4gKiAgLSBCb290c3RyYXAgZHJvcGRvd24gaXMgbm90IHVzZWQgd2l0aCBjb250YWluZXI9XCJib2R5XCJcbiAqICAtIEJvb3RzdHJhcCBkcm9wZG93biBpcyB1c2VkIGxpa2UgaXQgaXMgaW50ZW5kZWQgYW5kIGRvY3VtZW50ZWQgZm9yIGUuZy5cbiAqIGBgYGh0bWxcbiAqIDxkaXYgZHJvcGRvd24gY2xhc3M9XCJkcm9wZG93blwiPlxuICogIDxidXR0b24gY2xhc3M9XCJkcm9wZG93bi10b2dnbGVcIiBkcm9wZG93blRvZ2dsZT5Ub2dnbGU8L2J1dHRvbj5cbiAqICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgKmRyb3Bkb3duTWVudT5cbiAqICAgIDwhLS0gQ29udGVudCBoZXJlIC0tPlxuICogIDwvdWw+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8ZGl2IGRyb3Bkb3duIGM4eUJzRHJvcGRvd25EaXJlY3Rpb24gY2xhc3M9XCJkcm9wZG93blwiPlxuICogIDxidXR0b24gY2xhc3M9XCJkcm9wZG93bi10b2dnbGVcIiBkcm9wZG93blRvZ2dsZT5Ub2dnbGU8L2J1dHRvbj5cbiAqICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgKmRyb3Bkb3duTWVudT5cbiAqICAgIDwhLS0gQ29udGVudCBoZXJlIC0tPlxuICogIDwvdWw+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICogWW91IG1ha2UgdXNlIG9mIHRoZSBib290c3RyYXAgZHJvcGRvd24gYXMgdXN1YWwgYW5kIGFkZGl0aW9uYWxseSBhZGQgdGhlIGRpcmVjdGlvbiBkaXJlY3RpdmUgdG8gaXQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tkcm9wZG93bl1bYzh5QnNEcm9wZG93bkRpcmVjdGlvbl0sW2Ryb3Bkb3duXVtjOHlEcm9wZG93bkRpcmVjdGlvbl0nIH0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25EaXJlY3Rpb25EaXJlY3RpdmUge1xuICBwcml2YXRlIHJlYWRvbmx5IE1BUkdJTl9CT1RUT006IG51bWJlciA9IDEwO1xuICBwcml2YXRlIHJlYWRvbmx5IFZJU0lCSUxJVFk6IHN0cmluZyA9ICd2aXNpYmlsaXR5JztcbiAgcHJpdmF0ZSByZWFkb25seSBEUk9QVVA6IHN0cmluZyA9ICdkcm9wdXAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBjb25zdCBvcGVuOiBib29sZWFuID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJyk7XG5cbiAgICBpZiAob3Blbikge1xuICAgICAgbGV0IG1lbnU6IEhUTUxFbGVtZW50O1xuICAgICAgbGV0IHRvZ2dsZTogSFRNTEVsZW1lbnQ7XG5cbiAgICAgIGZvckVhY2godGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4sIChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duLW1lbnUnKSkge1xuICAgICAgICAgIG1lbnUgPSBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkcm9wZG93bi10b2dnbGUnKSkge1xuICAgICAgICAgIHRvZ2dsZSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAobWVudSAmJiB0b2dnbGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShtZW51LCB0aGlzLlZJU0lCSUxJVFksICdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy5zaG91bGREcm9wdXAobWVudSwgdG9nZ2xlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZShtZW51LCB0aGlzLlZJU0lCSUxJVFkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkRHJvcHVwKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHBvc2l0aW9uOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodDogbnVtYmVyID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICBjb25zdCBjb250YWluZXJEcm9wUG9zaXRpb246IG51bWJlciA9IHBvc2l0aW9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICBjb25zdCBsYXlvdXRWaWV3cG9ydDogbnVtYmVyID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgY29uc3Qgc3VtID0gY29udGFpbmVySGVpZ2h0ICsgY29udGFpbmVyRHJvcFBvc2l0aW9uICsgdGhpcy5NQVJHSU5fQk9UVE9NO1xuXG4gICAgaWYgKHN1bSA+PSBsYXlvdXRWaWV3cG9ydCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5EUk9QVVApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuRFJPUFVQKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5EUk9QVVApO1xuICAgIH1cbiAgfVxufVxuIl19
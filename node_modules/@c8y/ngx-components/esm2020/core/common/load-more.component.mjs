import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Input, Output, TemplateRef } from '@angular/core';
import { Paging } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../i18n/c8y-translate.directive";
import * as i3 from "./icon.directive";
import * as i4 from "../i18n/c8y-translate.pipe";
export class LoadMoreComponent {
    get hostClass() {
        return this.hidden || (!this.hasMore && !this.hasNoMoreData) ? '' : this.class;
    }
    get hasMore() {
        return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
    }
    constructor(element, cdRef) {
        this.element = element;
        this.cdRef = cdRef;
        this.useIntersection = true;
        this.hidden = false;
        this.class = 'c8y-list__item';
        this.maxIterations = 10;
        this.hideNoMoreDataHint = false;
        this.onLoad = new EventEmitter();
        this.isLoading = false;
        this.counter = 0;
        this.hasNoMoreData = false;
        this.LOAD_SAME_PAGE_THRESHOLD = 50;
        this.destroyed = false;
    }
    ngAfterContentInit() {
        this.destroyed = false;
        if (this.useIntersection && 'IntersectionObserver' in window) {
            this.intersectionObserver = new IntersectionObserver(event => this.buttonInView(event[0]), {
                root: this.container ? this.container.nativeElement : null
            });
            this.intersectionObserver.observe(this.element.nativeElement);
        }
        this.hasNoMoreData = this.shouldShowNoMoreDataHint();
    }
    ngOnDestroy() {
        this.destroyed = true;
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
            this.intersectionObserver.unobserve(this.element.nativeElement);
            clearTimeout(this.loadUntilIntersected);
        }
    }
    async loadMore(event) {
        if (!this.destroyed) {
            this.isLoading = true;
            this.cdRef.detectChanges();
            if (event) {
                event.stopPropagation();
            }
            if (this.hasMore) {
                const result = await this.paging.next();
                this.paging = result.paging;
                this.onLoad.emit(result.data);
                this.intersectionLoading();
                this.hasNoMoreData = this.shouldShowNoMoreDataHint();
            }
            else {
                this.counter = 0;
                this.isLoading = false;
            }
            this.cdRef.detectChanges();
        }
    }
    intersectionLoading() {
        if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
            this.loadUntilIntersected = setTimeout(() => this.loadMore(), this.getLoadingThreshold());
            this.useIntersection = this.shouldSwitchMode();
        }
        else {
            this.isLoading = false;
            this.loadUntilIntersected = undefined;
            this.cdRef.detectChanges();
        }
    }
    getLoadingThreshold() {
        return this.LOAD_SAME_PAGE_THRESHOLD * this.counter++;
    }
    shouldShowNoMoreDataHint() {
        return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
    }
    shouldSwitchMode() {
        return this.counter < this.maxIterations || this.hidden;
    }
    buttonInView(event) {
        if (event.isIntersecting) {
            this.loadMore();
        }
        else if (this.loadUntilIntersected) {
            clearTimeout(this.loadUntilIntersected);
            this.loadUntilIntersected = null;
            this.isLoading = false;
            this.cdRef.detectChanges();
        }
        else {
            // avoiding a race condition when timeout is faster
            // cleared then set
            this.loadUntilIntersected = null;
        }
    }
}
LoadMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoadMoreComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
LoadMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: LoadMoreComponent, selector: "c8y-load-more", inputs: { paging: "paging", useIntersection: "useIntersection", hidden: "hidden", container: "container", class: "class", maxIterations: "maxIterations", noMoreDataHint: "noMoreDataHint", loadingTemplate: "loadingTemplate", hideNoMoreDataHint: "hideNoMoreDataHint", loadNextLabel: "loadNextLabel", loadingLabel: "loadingLabel" }, outputs: { onLoad: "onLoad" }, host: { properties: { "class": "this.hostClass" } }, ngImport: i0, template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  type=\"button\"\n  title=\"{{ 'Load more' | translate }}\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  (click)=\"loadMore($event)\"\n  *ngIf=\"hasMore && !(loadingTemplate && isLoading)\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}\n      </span>\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"hasNoMoreData && !hideNoMoreDataHint && !isLoading\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"loadingTemplate && isLoading\">\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoadMoreComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-load-more', template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  type=\"button\"\n  title=\"{{ 'Load more' | translate }}\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  (click)=\"loadMore($event)\"\n  *ngIf=\"hasMore && !(loadingTemplate && isLoading)\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}\n      </span>\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"hasNoMoreData && !hideNoMoreDataHint && !isLoading\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n\n<ng-container *ngIf=\"loadingTemplate && isLoading\">\n  <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { paging: [{
                type: Input
            }], useIntersection: [{
                type: Input
            }], hidden: [{
                type: Input
            }], container: [{
                type: Input
            }], class: [{
                type: Input
            }], maxIterations: [{
                type: Input
            }], noMoreDataHint: [{
                type: Input
            }], loadingTemplate: [{
                type: Input
            }], hideNoMoreDataHint: [{
                type: Input
            }], loadNextLabel: [{
                type: Input
            }], loadingLabel: [{
                type: Input
            }], onLoad: [{
                type: Output
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,
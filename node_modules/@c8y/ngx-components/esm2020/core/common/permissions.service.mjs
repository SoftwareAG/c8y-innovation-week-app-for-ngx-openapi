import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { AppStateService } from './ui-state.service';
import { InventoryService } from '@c8y/client';
import { property } from 'lodash-es';
import { memoize } from './memoize.decorator';
import { UserService } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "./ui-state.service";
import * as i2 from "@c8y/client";
export class Permissions {
    constructor(appState, inventory, user) {
        this.appState = appState;
        this.inventory = inventory;
        this.user = user;
    }
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {IManagedObject | IIdentified} mo The managed object for which we are checking whether the user has access.
     * @param {CanEditConfig} config A configuration object that can take the following values:
     * - `skipRolesCheck`: `boolean` - skips roles check,
     * - `skipOwnerCheck`: `boolean` - skips ownership check,
     * - `skipRequestCheck`: `boolean` - skips checks with a query to the inventory API.
     *   UI will make a query to backend whether the user can edit the managed object.
     *   A rejection from BE indicates a lack of permission.
     */
    canEdit(roleIds, mo, config = {
        skipRolesCheck: false,
        skipOwnerCheck: false,
        skipRequestCheck: false
    }) {
        return this.checkIfCanEdit(roleIds, mo, config);
    }
    hasRole(roleId) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasRole(currentUser, roleId);
    }
    hasAllRoles(roleIds) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAllRoles(currentUser, roleIds);
    }
    hasAnyRole(roleIds) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAnyRole(currentUser, roleIds);
    }
    hasAnyGlobalRole(globalRolesIds) {
        const currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Global roles can only be requested if the user is logged in.');
        }
        return this.user.hasAnyGlobalRole(currentUser, globalRolesIds);
    }
    async checkIfOwner(mo) {
        const currentUserName = await this.appState.currentUser.value.userName;
        const { data } = await this.inventory.detail(mo.id);
        return currentUserName === data.owner;
    }
    checkWithRequest(mo) {
        const moId = mo.id;
        const partialUpdateObject = {
            id: moId
        };
        return this.inventory
            .update(partialUpdateObject)
            .then(() => {
            return true;
        })
            .catch(() => {
            return false;
        });
    }
    async checkIfCanEdit(roleIds, mo, config) {
        if (!config?.skipRolesCheck && (await this.hasAnyRole(roleIds))) {
            return true;
        }
        else if (!config?.skipOwnerCheck && (await this.checkIfOwner(mo))) {
            return true;
        }
        else if (!config?.skipRequestCheck && (await this.checkWithRequest(mo))) {
            return true;
        }
        return false;
    }
}
Permissions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Permissions, deps: [{ token: i1.AppStateService }, { token: i2.InventoryService }, { token: i2.UserService }], target: i0.ɵɵFactoryTarget.Injectable });
Permissions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Permissions, providedIn: 'root' });
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Permissions.prototype, "checkIfOwner", null);
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Permissions.prototype, "checkWithRequest", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Permissions, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.AppStateService }, { type: i2.InventoryService }, { type: i2.UserService }]; }, propDecorators: { checkIfOwner: [], checkWithRequest: [] } });
//# sourceMappingURL=data:application/json;base64,
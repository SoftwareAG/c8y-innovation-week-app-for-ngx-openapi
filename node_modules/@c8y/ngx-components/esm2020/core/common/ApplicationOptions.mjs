/*
 * -----------------------------WARNING---------------------------------
 * This file has an *exact* copy in packages/cli/src/webpack/.
 * Any changes to this file must be reflected there, too.
 */
export class ApplicationOptions {
}
//# sourceMappingURL=data:application/json;base64,
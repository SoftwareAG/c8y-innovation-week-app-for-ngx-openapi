import { Directive, Renderer2, Input, ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Allows to set a icon. Switches between c8y default icons
 * and font awesome icons
 * @example <i [c8yIcon]="'clock'">
 */
export class IconDirective {
    set c8yIcon(icon) {
        this.updateIcon(icon);
    }
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.c8yMatch = /^c8y-/;
        this.klasses = [];
        this.currentClasses = '';
    }
    isC8y(icon) {
        return this.c8yMatch.test(icon);
    }
    getClasses(icon = '') {
        let classes = '';
        if (icon) {
            const _icon = icon.trim();
            const isC8y = this.isC8y(_icon);
            const iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : `dlt-c8y-icon-${_icon}`;
            classes = `${isC8y ? 'c8y-icon' : ''} ${iconClass}`;
        }
        return classes;
    }
    updateIcon(icon) {
        const newClasses = this.getClasses(icon);
        if (newClasses !== this.currentClasses) {
            this.currentClasses
                .split(/\s/)
                .filter(c => c)
                .forEach(klass => {
                this.renderer.removeClass(this.el.nativeElement, klass);
            });
            newClasses
                .split(/\s/)
                .filter(c => c)
                .forEach(klass => {
                this.renderer.addClass(this.el.nativeElement, klass);
            });
            this.currentClasses = newClasses;
        }
    }
}
IconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: IconDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
IconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: IconDirective, selector: "[c8yIcon]", inputs: { c8yIcon: "c8yIcon" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: IconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[c8yIcon]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { c8yIcon: [{
                type: Input
            }] } });
export const ICONS = [
    'home',
    'th',
    'bar-chart-o',
    'tasks',
    'tachometer',
    'bell',
    'puzzle-piece',
    'map-marker',
    'location-arrow',
    'globe',
    'power-off',
    'desktop',
    'laptop',
    'mobile',
    'signal',
    'qrcode',
    'file',
    'file-text',
    'folder',
    'folder-open',
    'archive',
    'ssd',
    'book',
    'bookmark',
    'tag',
    'flag',
    'search',
    'heart',
    'star',
    'bolt',
    'cog',
    'cogs',
    'wrench',
    'ban',
    'user',
    'users',
    'sign-in',
    'sign-out',
    'upload',
    'download',
    'cloud-upload',
    'cloud-download',
    'cloud',
    'hourglass',
    'refresh',
    'repeat',
    'undo',
    'lock',
    'unlock',
    'info',
    'question-circle',
    'exclamation-circle',
    'bug',
    'calendar',
    'random',
    'asterisk',
    'key',
    'link',
    'chain-broken',
    'external-link',
    'picture-o',
    'comment',
    'bullhorn',
    'phone',
    'lightbulb-o',
    'flask',
    'cloud-network',
    'exchange',
    'code-fork',
    'keyboard-o',
    'terminal',
    'code',
    'clipboard',
    'pencil',
    'envelope',
    'inbox',
    'reply',
    'share',
    'thumbs-up',
    'thumbs-down',
    'check',
    'plus',
    'expand',
    'compress',
    'arrows',
    'arrow-up',
    'arrow-down',
    'arrow-left',
    'arrow-right',
    'th-list',
    'bars',
    'table',
    'columns',
    'filter',
    'sort',
    'sort-up',
    'sort-down',
    'ellipsis-h',
    'ellipsis-v',
    'rss'
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2NvbW1vbi9pY29uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUV4RTs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLGFBQWE7SUFDeEIsSUFDSSxPQUFPLENBQUMsSUFBWTtRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFJRCxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFIdkQsYUFBUSxHQUFHLE9BQU8sQ0FBQztRQUNuQixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsbUJBQWMsR0FBRyxFQUFFLENBQUM7SUFDc0MsQ0FBQztJQUUzRCxLQUFLLENBQUMsSUFBSTtRQUNoQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDMUIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixLQUFLLEVBQUUsQ0FBQztZQUM5RixPQUFPLEdBQUcs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UUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFlBQVk7SUFDWixZQUFZO0lBQ1osS0FBSztDQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFJlbmRlcmVyMiwgSW5wdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBbGxvd3MgdG8gc2V0IGEgaWNvbi4gU3dpdGNoZXMgYmV0d2VlbiBjOHkgZGVmYXVsdCBpY29uc1xuICogYW5kIGZvbnQgYXdlc29tZSBpY29uc1xuICogQGV4YW1wbGUgPGkgW2M4eUljb25dPVwiJ2Nsb2NrJ1wiPlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5SWNvbl0nXG59KVxuZXhwb3J0IGNsYXNzIEljb25EaXJlY3RpdmUge1xuICBASW5wdXQoKVxuICBzZXQgYzh5SWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVwZGF0ZUljb24oaWNvbik7XG4gIH1cbiAgcHJpdmF0ZSBjOHlNYXRjaCA9IC9eYzh5LS87XG4gIHByaXZhdGUga2xhc3NlcyA9IFtdO1xuICBwcml2YXRlIGN1cnJlbnRDbGFzc2VzID0gJyc7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBwcml2YXRlIGlzQzh5KGljb24pIHtcbiAgICByZXR1cm4gdGhpcy5jOHlNYXRjaC50ZXN0KGljb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDbGFzc2VzKGljb24gPSAnJykge1xuICAgIGxldCBjbGFzc2VzID0gJyc7XG4gICAgaWYgKGljb24pIHtcbiAgICAgIGNvbnN0IF9pY29uID0gaWNvbi50cmltKCk7XG4gICAgICBjb25zdCBpc0M4eSA9IHRoaXMuaXNDOHkoX2ljb24pO1xuICAgICAgY29uc3QgaWNvbkNsYXNzID0gaXNDOHkgPyBfaWNvbi5yZXBsYWNlKHRoaXMuYzh5TWF0Y2gsICdjOHktaWNvbi0nKSA6IGBkbHQtYzh5LWljb24tJHtfaWNvbn1gO1xuICAgICAgY2xhc3NlcyA9IGAke2lzQzh5ID8gJ2M4eS1pY29uJyA6ICcnfSAke2ljb25DbGFzc31gO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlSWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXdDbGFzc2VzID0gdGhpcy5nZXRDbGFzc2VzKGljb24pO1xuICAgIGlmIChuZXdDbGFzc2VzICE9PSB0aGlzLmN1cnJlbnRDbGFzc2VzKSB7XG4gICAgICB0aGlzLmN1cnJlbnRDbGFzc2VzXG4gICAgICAgIC5zcGxpdCgvXFxzLylcbiAgICAgICAgLmZpbHRlcihjID0+IGMpXG4gICAgICAgIC5mb3JFYWNoKGtsYXNzID0+IHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwga2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgIG5ld0NsYXNzZXNcbiAgICAgICAgLnNwbGl0KC9cXHMvKVxuICAgICAgICAuZmlsdGVyKGMgPT4gYylcbiAgICAgICAgLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBrbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgdGhpcy5jdXJyZW50Q2xhc3NlcyA9IG5ld0NsYXNzZXM7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBJQ09OUyA9IFtcbiAgJ2hvbWUnLFxuICAndGgnLFxuICAnYmFyLWNoYXJ0LW8nLFxuICAndGFza3MnLFxuICAndGFjaG9tZXRlcicsXG4gICdiZWxsJyxcbiAgJ3B1enpsZS1waWVjZScsXG4gICdtYXAtbWFya2VyJyxcbiAgJ2xvY2F0aW9uLWFycm93JyxcbiAgJ2dsb2JlJyxcbiAgJ3Bvd2VyLW9mZicsXG4gICdkZXNrdG9wJyxcbiAgJ2xhcHRvcCcsXG4gICdtb2JpbGUnLFxuICAnc2lnbmFsJyxcbiAgJ3FyY29kZScsXG4gICdmaWxlJyxcbiAgJ2ZpbGUtdGV4dCcsXG4gICdmb2xkZXInLFxuICAnZm9sZGVyLW9wZW4nLFxuICAnYXJjaGl2ZScsXG4gICdzc2QnLFxuICAnYm9vaycsXG4gICdib29rbWFyaycsXG4gICd0YWcnLFxuICAnZmxhZycsXG4gICdzZWFyY2gnLFxuICAnaGVhcnQnLFxuICAnc3RhcicsXG4gICdib2x0JyxcbiAgJ2NvZycsXG4gICdjb2dzJyxcbiAgJ3dyZW5jaCcsXG4gICdiYW4nLFxuICAndXNlcicsXG4gICd1c2VycycsXG4gICdzaWduLWluJyxcbiAgJ3NpZ24tb3V0JyxcbiAgJ3VwbG9hZCcsXG4gICdkb3dubG9hZCcsXG4gICdjbG91ZC11cGxvYWQnLFxuICAnY2xvdWQtZG93bmxvYWQnLFxuICAnY2xvdWQnLFxuICAnaG91cmdsYXNzJyxcbiAgJ3JlZnJlc2gnLFxuICAncmVwZWF0JyxcbiAgJ3VuZG8nLFxuICAnbG9jaycsXG4gICd1bmxvY2snLFxuICAnaW5mbycsXG4gICdxdWVzdGlvbi1jaXJjbGUnLFxuICAnZXhjbGFtYXRpb24tY2lyY2xlJyxcbiAgJ2J1ZycsXG4gICdjYWxlbmRhcicsXG4gICdyYW5kb20nLFxuICAnYXN0ZXJpc2snLFxuICAna2V5JyxcbiAgJ2xpbmsnLFxuICAnY2hhaW4tYnJva2VuJyxcbiAgJ2V4dGVybmFsLWxpbmsnLFxuICAncGljdHVyZS1vJyxcbiAgJ2NvbW1lbnQnLFxuICAnYnVsbGhvcm4nLFxuICAncGhvbmUnLFxuICAnbGlnaHRidWxiLW8nLFxuICAnZmxhc2snLFxuICAnY2xvdWQtbmV0d29yaycsXG4gICdleGNoYW5nZScsXG4gICdjb2RlLWZvcmsnLFxuICAna2V5Ym9hcmQtbycsXG4gICd0ZXJtaW5hbCcsXG4gICdjb2RlJyxcbiAgJ2NsaXBib2FyZCcsXG4gICdwZW5jaWwnLFxuICAnZW52ZWxvcGUnLFxuICAnaW5ib3gnLFxuICAncmVwbHknLFxuICAnc2hhcmUnLFxuICAndGh1bWJzLXVwJyxcbiAgJ3RodW1icy1kb3duJyxcbiAgJ2NoZWNrJyxcbiAgJ3BsdXMnLFxuICAnZXhwYW5kJyxcbiAgJ2NvbXByZXNzJyxcbiAgJ2Fycm93cycsXG4gICdhcnJvdy11cCcsXG4gICdhcnJvdy1kb3duJyxcbiAgJ2Fycm93LWxlZnQnLFxuICAnYXJyb3ctcmlnaHQnLFxuICAndGgtbGlzdCcsXG4gICdiYXJzJyxcbiAgJ3RhYmxlJyxcbiAgJ2NvbHVtbnMnLFxuICAnZmlsdGVyJyxcbiAgJ3NvcnQnLFxuICAnc29ydC11cCcsXG4gICdzb3J0LWRvd24nLFxuICAnZWxsaXBzaXMtaCcsXG4gICdlbGxpcHNpcy12JyxcbiAgJ3Jzcydcbl07XG4iXX0=
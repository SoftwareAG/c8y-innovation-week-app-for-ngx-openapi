import { __decorate, __metadata } from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { FetchClient, TenantLoginOptionsService, ApplicationService } from '@c8y/client';
import { keys, get } from 'lodash-es';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { distinctUntilChanged, filter, map, scan, switchMap, shareReplay, startWith, debounceTime, take } from 'rxjs/operators';
import { OptionsService } from './options.service';
import { StateService } from './state-service.abstract';
import { ApiService } from '@c8y/ngx-components/api';
import { throttle } from './throttle.decorator';
import { satisfies } from 'semver';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components/api";
import * as i3 from "./options.service";
export class AppStateService extends StateService {
    constructor(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
        super();
        this.applicationService = applicationService;
        this.apiService = apiService;
        this.options = options;
        this.fetchClient = fetchClient;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.state$ = new BehaviorSubject({
            app: {
                name: this.options.name,
                contextPath: this.getCurrentContextPath() || this.options.contextPath
            },
            supportUrl: this.options.supportUrl,
            lang: this.options.get('defaultLanguage', 'en'),
            langs: this.getLangs(),
            langsDetail: this.options.languages,
            loginOptions: this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: this.options.versions || { ngx: undefined }
            },
            hidePowered: this.options.hidePowered,
            isLoading: false,
            showRightDrawer: this.options.rightDrawer,
            loginExtraLink: this.options.get('login_extra_link'),
            newsletter: this.options.newsletter
        });
        this.currentSupportUserName = new BehaviorSubject(null);
        this.currentUser = new BehaviorSubject(null);
        this.currentTenant = new BehaviorSubject(null);
        this.currentApplication = new BehaviorSubject(null);
        this.currentApplicationConfig = this.currentApplication.pipe(filter(app => !!app), map(app => app?.config || null));
        this.apiService.calls
            .pipe(filter(({ url }) => !/notification\/realtime/.test(url)), map(({ phase }) => (phase === 'start' ? 1 : -1)), scan((count, item) => count + item, 0), map(count => count > 0), distinctUntilChanged())
            .subscribe(isLoading => (this.state.isLoading = isLoading));
        this.assignApplicationKeyToDefaultHeaders();
        this.currentAppsOfUser = this.currentAppsOfUser$();
    }
    assignApplicationKeyToDefaultHeaders() {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = {
                ...(this.fetchClient.defaultHeaders || {}),
                'X-Cumulocity-Application-Key': this.options.key
            };
        }
    }
    /**
     * Returns the current state.
     */
    get state() {
        return this.state$.value;
    }
    getLangs() {
        const { languages } = this.options;
        return languages ? keys(languages).filter(k => languages[k]) : [];
    }
    /**
     * Returns the correct UI version. In hybrid mode for angular and ngx.
     */
    get uiVersion() {
        const version = this.state.versions.ui;
        return version.ngx || version.ng1;
    }
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    async loadManifest() {
        try {
            const { data: application } = await this.applicationService.getManifestOfContextPath(this.state.app.contextPath);
            this.state.app.manifest = application;
            this.state.app.id = application.id;
            const { data } = await this.applicationService.detail(application.id);
            this.currentApplication.next(data);
            await this.loadDefaultOptions();
        }
        catch (ex) {
            this.currentApplication.next({});
            throw ex;
        }
    }
    /**
     * Dynamic options are stored on the API in a specific config: {} object. They can
     * be used to configure the app dynamically.
     *
     * Note: To avoids conflicts with the default Config, it is recommended
     * to use a certain namespace.
     */
    async updateCurrentApplicationConfig(config) {
        const appWithUpdatedConfig = await this.applicationService.updateApplicationConfig(this.state.app.id, config);
        this.currentApplication.next(appWithUpdatedConfig);
        return appWithUpdatedConfig.config;
    }
    /**
     * When this function called, it refreshes the values of loginOptions stored within ui state object.
     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
     * it should be called on leading edge of the timeout.
     */
    async refreshLoginOptions() {
        const loginOptions = (await this.tenantLoginOptionsService.listForCurrentTenant()).data;
        this.state$.next({ ...this.state, loginOptions });
    }
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    async isApplicationAvailable(name) {
        const apps = await this.currentAppsOfUser.pipe(take(1)).toPromise();
        return apps.some(app => app.name === name || app.contextPath === name);
    }
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    setUser(userInfo) {
        this.currentSupportUserName.next(userInfo.supportUserName || null);
        this.currentUser.next(userInfo.user);
    }
    /**
     * Verifies if the current application is owned by the current tenant.
     * @param app The application to verify.
     * @returns true if it belongs to the current tenant.
     */
    isOwnerOfApplication(app) {
        if (!app) {
            app = this.currentApplication.value;
        }
        const currentTenant = this.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant?.name === appOwner;
    }
    /**
     * Verifies if the current application is owned by the current tenant.
     * @param app The application to verify.
     * @returns true if it belongs to the current tenant.
     */
    isOwnerOfApplication$(app) {
        const app$ = app ? of(app) : this.currentApplication;
        return combineLatest([app$, this.currentTenant]).pipe(map(([app, tenant]) => {
            if (!app || !tenant) {
                return false;
            }
            return tenant.name === get(app, 'owner.tenant.id');
        }));
    }
    getCurrentContextPath() {
        const match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    }
    currentAppsOfUser$() {
        const appChanges$ = this.onAppChangesCompletion$().pipe(startWith(undefined));
        const userChanges$ = this.currentUser.pipe(map(user => user?.id), distinctUntilChanged());
        return combineLatest([userChanges$, appChanges$]).pipe(filter(([userId]) => !!userId), switchMap(([userId]) => this.applicationService.listByUser(userId, {
            dropOverwrittenApps: true,
            noPaging: true
        })), map(({ data }) => data), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * An Observable emitting once all POST, PUT, DELETE requests to the application API finished
     */
    onAppChangesCompletion$() {
        const methods = ['POST', 'PUT', 'DELETE'];
        return this.apiService.calls.pipe(filter(({ method, url }) => methods.includes(method) && url?.includes('application/applications')), map(({ phase }) => (phase === 'start' ? 1 : -1)), scan((count, item) => count + item, 0), map(count => count === 0), distinctUntilChanged(), debounceTime(500), filter(completed => !!completed), map(() => {
            return;
        }));
    }
    async loadDefaultOptions() {
        this.state.supportUrl = await this.options.getSupportUrl();
        this.state.activateSupportUserAvailable = await this.options.getActivateSupportUser();
        this.state.versions.backend = await this.options.getSystemOption('system', 'version');
        try {
            this.showIncompatibleVersionsError();
        }
        catch (ex) {
            // ignore this
        }
        this.emitNewState();
    }
    showIncompatibleVersionsError() {
        if (this.options.noVersionWarning) {
            return;
        }
        const uiVersion = this.state.versions.ui.ngx;
        const backendVersion = this.state.versions.backend;
        if (!satisfies(uiVersion, `<=${backendVersion} || ~${backendVersion}`)) {
            const errorContent = `You are running version ${uiVersion} of the UI and version ${backendVersion} of backend!`;
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    }
}
AppStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppStateService, deps: [{ token: i1.ApplicationService }, { token: i2.ApiService }, { token: i3.OptionsService }, { token: i1.FetchClient }, { token: i1.TenantLoginOptionsService }], target: i0.ɵɵFactoryTarget.Injectable });
AppStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppStateService, providedIn: 'root' });
__decorate([
    throttle(600, { trailing: false }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AppStateService.prototype, "refreshLoginOptions", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppStateService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }, { type: i2.ApiService }, { type: i3.OptionsService }, { type: i1.FetchClient }, { type: i1.TenantLoginOptionsService }]; }, propDecorators: { refreshLoginOptions: [] } });
//# sourceMappingURL=data:application/json;base64,
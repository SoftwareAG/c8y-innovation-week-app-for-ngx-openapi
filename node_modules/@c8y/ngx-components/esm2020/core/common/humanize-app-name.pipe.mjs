import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { of } from 'rxjs';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash-es';
import { internalApps } from './humanize-app-name.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
 */
export class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
    }
    transform(appNameOrApp) {
        if (!appNameOrApp) {
            return of('');
        }
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            typeof appNameOrApp === 'string' ? appNameOrApp : undefined,
            gettext('<no name>')
        ]);
        return internalApps[appName] || this.humanize(appName);
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    }
    humanize(str = '') {
        const result = str.replace(/_/g, ' ').split('');
        result[0] = (result[0] || '').toUpperCase();
        return result.join('');
    }
}
HumanizeAppNamePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: HumanizeAppNamePipe, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });
HumanizeAppNamePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: HumanizeAppNamePipe, name: "humanizeAppName" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: HumanizeAppNamePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'humanizeAppName' }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL2h1bWFuaXplLWFwcC1uYW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQUV6RDs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFHLENBQUM7SUFFMUQsU0FBUyxDQUFDLFlBQW9DO1FBQzVDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxZQUFvQztRQUNyRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO1lBQ2hDLE9BQU8sWUFBWSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQzNELE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sZUFBZSxDQUFDLE1BQU07UUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxXQUFXLENBQUMsWUFBbUM7UUFDckQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTyxRQUFRLENBQUMsR0FBRyxHQUFHLEVBQUU7UUFDdkIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7Z0hBekNVLG1CQUFtQjs4R0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQXBwbGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBnZXQsIGZpbmQsIG5lZ2F0ZSwgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgaW50ZXJuYWxBcHBzIH0gZnJvbSAnLi9odW1hbml6ZS1hcHAtbmFtZS5tb2RlbCc7XG5cbi8qXG4gKiBIdW1hbml6ZSBhbiBhcHBsaWNhdGlvbiBuYW1lIGFuZCB0cmFuc2xhdGVzIGl0LlxuICogVXNhZ2U6XG4gKiAgIGFwcE5hbWVPckFwcCB8IGh1bWFuaXplQXBwTmFtZSB8IGFzeW5jXG4gKi9cbkBQaXBlKHsgbmFtZTogJ2h1bWFuaXplQXBwTmFtZScgfSlcbmV4cG9ydCBjbGFzcyBIdW1hbml6ZUFwcE5hbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICB0cmFuc2Zvcm0oYXBwTmFtZU9yQXBwPzogSUFwcGxpY2F0aW9uIHwgc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBpZiAoIWFwcE5hbWVPckFwcCkge1xuICAgICAgcmV0dXJuIG9mKCcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRBcHBOYW1lKGFwcE5hbWVPckFwcCk7XG5cbiAgICBsZXQgdGV4dDtcbiAgICBpZiAodGhpcy5pc1B1YmxpY0FwcChhcHBOYW1lT3JBcHApKSB7XG4gICAgICB0ZXh0ID0gZ2V0dGV4dCgne3sgYXBwTmFtZSB8IHRyYW5zbGF0ZSB9fSAocHVibGljKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gYXBwTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5zdHJlYW0odGV4dCwgeyBhcHBOYW1lIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBcHBOYW1lKGFwcE5hbWVPckFwcD86IElBcHBsaWNhdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYXBwTmFtZSA9IHRoaXMuZ2V0Rmlyc3REZWZpbmVkKFtcbiAgICAgIGdldChhcHBOYW1lT3JBcHAsICduYW1lJyksXG4gICAgICBnZXQoYXBwTmFtZU9yQXBwLCAnY29udGV4dFBhdGgnKSxcbiAgICAgIHR5cGVvZiBhcHBOYW1lT3JBcHAgPT09ICdzdHJpbmcnID8gYXBwTmFtZU9yQXBwIDogdW5kZWZpbmVkLFxuICAgICAgZ2V0dGV4dCgnPG5vIG5hbWU+JylcbiAgICBdKTtcbiAgICByZXR1cm4gaW50ZXJuYWxBcHBzW2FwcE5hbWVdIHx8IHRoaXMuaHVtYW5pemUoYXBwTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIGdldEZpcnN0RGVmaW5lZCh2YWx1ZXMpIHtcbiAgICByZXR1cm4gZmluZCh2YWx1ZXMsIG5lZ2F0ZShpc1VuZGVmaW5lZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1B1YmxpY0FwcChhcHBOYW1lT3JBcHA6IElBcHBsaWNhdGlvbiB8IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKGdldChhcHBOYW1lT3JBcHAsICdwdWJsaWMnKSk7XG4gIH1cblxuICBwcml2YXRlIGh1bWFuaXplKHN0ciA9ICcnKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXN1bHQgPSBzdHIucmVwbGFjZSgvXy9nLCAnICcpLnNwbGl0KCcnKTtcbiAgICByZXN1bHRbMF0gPSAocmVzdWx0WzBdIHx8ICcnKS50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH1cbn1cbiJdfQ==
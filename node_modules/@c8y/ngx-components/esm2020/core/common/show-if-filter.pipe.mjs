import { Pipe } from '@angular/core';
import { entries, mapValues, omitBy } from 'lodash-es';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { toObservable } from './extension-hooks';
import * as i0 from "@angular/core";
export class ShowIfFilterPipe {
    transform(value) {
        const observableShowIfMap = mapValues(value, val => {
            if (typeof val.showIf === 'boolean') {
                return of(val.showIf);
            }
            else if (typeof val.showIf === 'function') {
                return toObservable(val.showIf());
            }
            else {
                return of(true);
            }
        });
        return combineLatest(entries(observableShowIfMap).map(([key, val]) => val.pipe(map(showIf => ({ key, showIf }))))).pipe(map((allShowIfs) => {
            allShowIfs.forEach(showIf => (value[showIf.key].showIf = showIf.showIf));
            return omitBy(value, (v) => !v.showIf);
        }));
    }
}
ShowIfFilterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ShowIfFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ShowIfFilterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ShowIfFilterPipe, name: "showIfFilter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ShowIfFilterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'showIfFilter' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1pZi1maWx0ZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL3Nob3ctaWYtZmlsdGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBR2pELE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsU0FBUyxDQU1QLEtBQVE7UUFDUixNQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDakQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUNuQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7aUJBQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssVUFBVSxFQUFFO2dCQUMzQyxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBZSxDQUFDO1FBRWpCLE9BQU8sYUFBYSxDQUNsQixPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQzlDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDWSxDQUN6RCxDQUFDLElBQUksQ0FDSixHQUFHLENBQUMsQ0FBQyxVQUFtRCxFQUFFLEVBQUU7WUFDMUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDekUsT0FBTyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OzZHQTVCVSxnQkFBZ0I7MkdBQWhCLGdCQUFnQjsyRkFBaEIsZ0JBQWdCO2tCQUQ1QixJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGVudHJpZXMsIG1hcFZhbHVlcywgb21pdEJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB0b09ic2VydmFibGUgfSBmcm9tICcuL2V4dGVuc2lvbi1ob29rcyc7XG5cbkBQaXBlKHsgbmFtZTogJ3Nob3dJZkZpbHRlcicgfSlcbmV4cG9ydCBjbGFzcyBTaG93SWZGaWx0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybTxcbiAgICBUIGV4dGVuZHMge1xuICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICBzaG93SWY/OiBib29sZWFuIHwgKCgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+IHwgT2JzZXJ2YWJsZTxib29sZWFuPik7XG4gICAgICB9O1xuICAgIH1cbiAgPih2YWx1ZTogVCk6IE9ic2VydmFibGU8UGFydGlhbDxUPj4ge1xuICAgIGNvbnN0IG9ic2VydmFibGVTaG93SWZNYXAgPSBtYXBWYWx1ZXModmFsdWUsIHZhbCA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbC5zaG93SWYgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb2YodmFsLnNob3dJZik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwuc2hvd0lmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0b09ic2VydmFibGUodmFsLnNob3dJZigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcbiAgICAgIH1cbiAgICB9KSBhcyBQYXJ0aWFsPFQ+O1xuXG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoXG4gICAgICBlbnRyaWVzKG9ic2VydmFibGVTaG93SWZNYXApLm1hcCgoW2tleSwgdmFsXSkgPT5cbiAgICAgICAgdmFsLnBpcGUobWFwKHNob3dJZiA9PiAoeyBrZXksIHNob3dJZiB9KSkpXG4gICAgICApIGFzIEFycmF5PE9ic2VydmFibGU8eyBrZXk6IHN0cmluZzsgc2hvd0lmOiBib29sZWFuIH0+PlxuICAgICkucGlwZShcbiAgICAgIG1hcCgoYWxsU2hvd0lmczogQXJyYXk8eyBrZXk6IHN0cmluZzsgc2hvd0lmOiBib29sZWFuIH0+KSA9PiB7XG4gICAgICAgIGFsbFNob3dJZnMuZm9yRWFjaChzaG93SWYgPT4gKHZhbHVlW3Nob3dJZi5rZXldLnNob3dJZiA9IHNob3dJZi5zaG93SWYpKTtcbiAgICAgICAgcmV0dXJuIG9taXRCeSh2YWx1ZSwgKHY6IHsgc2hvd0lmOiBib29sZWFuIH0pID0+ICF2LnNob3dJZik7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==
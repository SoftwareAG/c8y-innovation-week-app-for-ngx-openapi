import { Pipe, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { from, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class MarkdownToHtmlPipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(markdown, args) {
        return markdown
            ? from(import('marked')).pipe(map(marked => {
                const renderer = new marked.Renderer();
                const baseUrl = args?.baseUrl || '';
                if (baseUrl) {
                    const originalRendererImage = renderer.image;
                    renderer.image = (href, title, text) => {
                        href = baseUrl + href;
                        return originalRendererImage.call(renderer, href, title, text);
                    };
                }
                const originalRendererLink = renderer.link;
                renderer.link = (href, title, text) => {
                    const { hostname, protocol } = window.location;
                    const localLink = href.startsWith(`${protocol}//${hostname}`);
                    const html = originalRendererLink.call(renderer, href, title, text);
                    return localLink
                        ? html
                        : html.replace(/^<a /, `<a target="_blank" rel="noreferrer noopener nofollow" `);
                };
                return marked.parse(markdown, { renderer });
            }), map(html => this.sanitizer.sanitize(SecurityContext.HTML, html)), catchError(() => {
                return of('<p>Failed to process markdown file.</p>');
            }))
            : of('');
    }
}
MarkdownToHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MarkdownToHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
MarkdownToHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: MarkdownToHtmlPipe, name: "markdownToHtml" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MarkdownToHtmlPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'markdownToHtml'
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tdG8taHRtbC5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9jb21tb24vbWFya2Rvd24tdG8taHRtbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBS2pELE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztJQUFHLENBQUM7SUFFL0MsU0FBUyxDQUFDLFFBQWdCLEVBQUUsSUFBMEI7UUFDcEQsT0FBTyxRQUFRO1lBQ2IsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7Z0JBQ3BDLElBQUksT0FBTyxFQUFFO29CQUNYLE1BQU0scUJBQXFCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztvQkFDN0MsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7d0JBQ3JDLElBQUksR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDO3dCQUN0QixPQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDakUsQ0FBQyxDQUFDO2lCQUNIO2dCQUNELE1BQU0sb0JBQW9CLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztnQkFDM0MsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7b0JBQ3BDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztvQkFDL0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsS0FBSyxRQUFRLEVBQUUsQ0FBQyxDQUFDO29CQUM5RCxNQUFNLElBQUksR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3BFLE9BQU8sU0FBUzt3QkFDZCxDQUFDLENBQUMsSUFBSTt3QkFDTixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsd0RBQXdELENBQUMsQ0FBQztnQkFDckYsQ0FBQyxDQUFDO2dCQUNGLE9BQVEsTUFBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFDaEUsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxPQUFPLEVBQUUsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxDQUNIO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNiLENBQUM7OytHQWpDVSxrQkFBa0I7NkdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxnQkFBZ0I7aUJBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgU2VjdXJpdHlDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ21hcmtkb3duVG9IdG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBNYXJrZG93blRvSHRtbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge31cblxuICB0cmFuc2Zvcm0obWFya2Rvd246IHN0cmluZywgYXJncz86IHsgYmFzZVVybDogc3RyaW5nIH0pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiBtYXJrZG93blxuICAgICAgPyBmcm9tKGltcG9ydCgnbWFya2VkJykpLnBpcGUoXG4gICAgICAgICAgbWFwKG1hcmtlZCA9PiB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IG5ldyBtYXJrZWQuUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSBhcmdzPy5iYXNlVXJsIHx8ICcnO1xuICAgICAgICAgICAgaWYgKGJhc2VVcmwpIHtcbiAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxSZW5kZXJlckltYWdlID0gcmVuZGVyZXIuaW1hZ2U7XG4gICAgICAgICAgICAgIHJlbmRlcmVyLmltYWdlID0gKGhyZWYsIHRpdGxlLCB0ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgaHJlZiA9IGJhc2VVcmwgKyBocmVmO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcmVySW1hZ2UuY2FsbChyZW5kZXJlciwgaHJlZiwgdGl0bGUsIHRleHQpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxSZW5kZXJlckxpbmsgPSByZW5kZXJlci5saW5rO1xuICAgICAgICAgICAgcmVuZGVyZXIubGluayA9IChocmVmLCB0aXRsZSwgdGV4dCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgICAgICAgICBjb25zdCBsb2NhbExpbmsgPSBocmVmLnN0YXJ0c1dpdGgoYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfWApO1xuICAgICAgICAgICAgICBjb25zdCBodG1sID0gb3JpZ2luYWxSZW5kZXJlckxpbmsuY2FsbChyZW5kZXJlciwgaHJlZiwgdGl0bGUsIHRleHQpO1xuICAgICAgICAgICAgICByZXR1cm4gbG9jYWxMaW5rXG4gICAgICAgICAgICAgICAgPyBodG1sXG4gICAgICAgICAgICAgICAgOiBodG1sLnJlcGxhY2UoL148YSAvLCBgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9yZWZlcnJlciBub29wZW5lciBub2ZvbGxvd1wiIGApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiAobWFya2VkIGFzIGFueSkucGFyc2UobWFya2Rvd24sIHsgcmVuZGVyZXIgfSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgbWFwKGh0bWwgPT4gdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIGh0bWwpKSxcbiAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvZignPHA+RmFpbGVkIHRvIHByb2Nlc3MgbWFya2Rvd24gZmlsZS48L3A+Jyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgOiBvZignJyk7XG4gIH1cbn1cbiJdfQ==
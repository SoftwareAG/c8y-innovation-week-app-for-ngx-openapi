import { Injectable } from '@angular/core';
import { ApplicationType, GrantType, TenantLoginOptionType, UserManagementSource, UserService } from '@c8y/client';
import { get } from 'lodash-es';
import { AppStateService } from './ui-state.service';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "./ui-state.service";
/** The helper UI service for tenant related methods built upon client services. */
export class TenantUiService {
    constructor(userService, appStateService) {
        this.userService = userService;
        this.appStateService = appStateService;
        this.MANAGEMENT = 'management';
        this.ROLE_TENANT_MANAGEMENT_READ = 'ROLE_TENANT_MANAGEMENT_READ';
    }
    /**
     * Returns current tenant
     */
    get currentTenant() {
        return this.appStateService.currentTenant.value;
    }
    /**
     * Checks whether current tenant is the management tenant.
     * @returns True if current tenant is the management tenant.
     */
    async isManagementTenant() {
        const currentTenant = this.appStateService.currentTenant.value;
        return this.isManagement(currentTenant);
    }
    /**
     * Checks whether current tenant is an enterprise tenant.
     * An enterprise tenant is a tenant which has subscribed:
     * - `branding` microservice or `feature-branding` feature app,
     * - `sslmanagement` microservice,
     * - `feature-user-hierarchy` feature app,
     * - `feature-broker` feature app.
     *
     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
     *
     * @returns True, if current tenant is an enterprise tenant.
     */
    async isEnterpriseTenant() {
        const availableAppsOfUser = await this.appStateService.currentAppsOfUser
            .pipe(take(1))
            .toPromise();
        const brandingAvailable = this.hasApp(availableAppsOfUser, 'branding') ||
            this.hasApp(availableAppsOfUser, 'feature-branding');
        const requiredAppsAndFeaturesAvailable = brandingAvailable &&
            this.hasApp(availableAppsOfUser, 'sslmanagement') &&
            this.hasApp(availableAppsOfUser, 'feature-user-hierarchy') &&
            this.hasApp(availableAppsOfUser, 'feature-broker');
        return requiredAppsAndFeaturesAvailable;
    }
    /**
     * Checks whether the current user has read access to tenants, i.e.:
     * - the current tenant can create subtenants or it's the management tenant,
     * - the current user has ROLE_TENANT_MANAGEMENT_READ role.
     * @returns True, if the current user has read access to tenants.
     */
    canReadTenants() {
        const currentTenant = this.appStateService.currentTenant.value;
        const currentUser = this.appStateService.currentUser.value;
        return ((this.isManagement(currentTenant) || currentTenant.allowCreateTenants) &&
            this.userService.hasRole(currentUser, this.ROLE_TENANT_MANAGEMENT_READ));
    }
    /**
     * Returns current tenant preferred login mode.
     */
    getCurrentTenantPreferredLoginOption() {
        return this.getPreferredLoginOption(this.appStateService.state.loginOptions);
    }
    /**
     * Returns current user login mode.
     */
    getCurrentUserLoginMode() {
        const preferredLoginOption = this.getCurrentTenantPreferredLoginOption();
        const currentUser = this.appStateService.currentUser.value;
        if (currentUser.customProperties.userOrigin === 'OAUTH2') {
            return TenantLoginOptionType.OAUTH2;
        }
        return this.isBasic(preferredLoginOption)
            ? TenantLoginOptionType.BASIC
            : TenantLoginOptionType.OAUTH2_INTERNAL;
    }
    /**
     * Returns tenant login option which is preferred.
     *
     * @param loginOptions The list of all available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const preferredLoginOption = tenantLoginOptionsService.getPreferredLoginOption(loginOptions);
     *   })();
     * ```
     */
    getPreferredLoginOption(loginOptions) {
        const defaultFallback = {
            type: TenantLoginOptionType.BASIC,
            userManagementSource: UserManagementSource.INTERNAL
        };
        if (!loginOptions) {
            return defaultFallback;
        }
        else {
            const visibleLoginOptions = loginOptions.filter(this.isVisibleOnLoginPage);
            return (visibleLoginOptions.find(this.isOauthInternal) ||
                visibleLoginOptions.find(this.isBasic) ||
                visibleLoginOptions.find(this.isOauth2) ||
                defaultFallback);
        }
    }
    /**
     * Returns Oauth2 login option if it can be used by UI.
     *
     * @param loginOptions The list of all available tenant's login options.
     *
     * @returns Returns ITenantLoginOption.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2 = tenantLoginOptionsService.getOauth2Option(loginOptions);
     *   })();
     * ```
     */
    getOauth2Option(loginOptions) {
        return loginOptions.find(loginOption => this.isVisibleOnLoginPage(loginOption) && this.isOauth2(loginOption));
    }
    /**
     * Callback which checks if login option is visible on login page.
     *
     * @param loginOption The tenant login option.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const loginOptionsVisibleOnLoginPage = loginOptions.filter(tenantLoginOptionsService.isVisibleOnLoginPage);
     *   })();
     * ```
     */
    isVisibleOnLoginPage(loginOption) {
        return loginOption.visibleOnLoginPage;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2_INTERNAL'.
     *
     * @param loginOption The tenant login option.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2InternalLoginOptions = loginOptions.filter(tenantLoginOptionsService.isOauthInternal);
     *   })();
     * ```
     */
    isOauthInternal(loginOption) {
        return loginOption.type === TenantLoginOptionType.OAUTH2_INTERNAL;
    }
    /**
     * Callback which checks if login option type is 'BASIC'.
     *
     * @param loginOption The tenant login option.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const basicLoginOptions = loginOptions.filter(tenantLoginOptionsService.isBasic);
     *   })();
     * ```
     */
    isBasic(loginOption) {
        return loginOption.type === TenantLoginOptionType.BASIC;
    }
    /**
     * Callback which checks if login option type is 'OAUTH2' and grantType is 'AUTHORIZATION_CODE'.
     *
     * @param loginOption The tenant login option.
     *
     * **Example**
     * ```typescript
     *
     *    (() => {
     *      const oauth2LoginOptions = loginOptions.filter(tenantLoginOptionsService.OAUTH2);
     *   })();
     * ```
     */
    isOauth2(loginOption) {
        return (loginOption.type === TenantLoginOptionType.OAUTH2 &&
            loginOption.grantType === GrantType.AUTHORIZATION_CODE);
    }
    /**
     * Checks if application of type MICROSERVICE is subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     * @param identifier application name or contextPath
     */
    isMicroserviceSubscribedInCurrentTenant(identifier) {
        if (identifier?.length > 0) {
            const microservices = this.getSubscribedMicroservicesInCurrentTenant();
            return microservices.some(({ name, contextPath }) => [name, contextPath].includes(identifier));
        }
        return false;
    }
    /**
     * Gets all application of type MICROSERVICE subscribed to the current tenant.
     * It checks the application references of the currentTenant from the application state.
     * No additional request.
     */
    getSubscribedMicroservicesInCurrentTenant() {
        const references = get(this.appStateService.currentTenant, 'value.applications.references', []);
        return references
            .map(appRef => appRef.application)
            .filter(app => app.type === ApplicationType.MICROSERVICE);
    }
    hasApp(apps, requiredAppName) {
        if (!apps?.length) {
            return false;
        }
        return apps.some(app => app.name === requiredAppName);
    }
    isManagement(currentTenant) {
        return currentTenant.name === this.MANAGEMENT;
    }
}
TenantUiService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantUiService, deps: [{ token: i1.UserService }, { token: i2.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
TenantUiService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantUiService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantUiService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserService }, { type: i2.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
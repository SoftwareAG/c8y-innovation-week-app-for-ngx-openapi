import { Pipe } from '@angular/core';
import { FilesService, GENERIC_FILE_TYPE } from './files.service';
import * as i0 from "@angular/core";
import * as i1 from "./files.service";
/**
 * Extracts extension from provided File object and match icon that fits its generic type
 * Usage:
 *   file | fileIcon
 */
export class GenericFileIconPipe {
    constructor(filesService) {
        this.filesService = filesService;
    }
    transform(file) {
        const genericType = this.getGenericType(file);
        return this.getIcon(genericType);
    }
    getGenericType(file) {
        const extension = this.filesService.getFileExtension(file);
        for (const val of Object.values(GENERIC_FILE_TYPE)) {
            const type = this.matchGenericType(val, extension);
            if (type) {
                return type;
            }
        }
        return 'unknown';
    }
    getIcon(genericType) {
        switch (genericType) {
            case GENERIC_FILE_TYPE.ARCHIVE:
                return 'file-archive-o';
            case GENERIC_FILE_TYPE.AUDIO:
                return 'file-audio-o';
            case GENERIC_FILE_TYPE.CODE:
                return 'document-with-code';
            case GENERIC_FILE_TYPE.EPL:
                return 'file';
            case GENERIC_FILE_TYPE.EXCEL:
                return 'file-excel-o';
            case GENERIC_FILE_TYPE.IMAGE:
                return 'file-image-o';
            case GENERIC_FILE_TYPE.PDF:
                return 'pdf-2';
            case GENERIC_FILE_TYPE.POWERPOINT:
                return 'file-powerpoint-o';
            case GENERIC_FILE_TYPE.TEXT:
                return 'file-text';
            case GENERIC_FILE_TYPE.VIDEO:
                return 'file-video-o';
            case GENERIC_FILE_TYPE.WORD:
                return 'file-word-o';
            default:
                return 'file';
        }
    }
    matchGenericType(type, ext) {
        const fileTypesMap = this.filesService.fileTypeExtensionsMap;
        return fileTypesMap[type].exts.includes(ext) ? type : undefined;
    }
}
GenericFileIconPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GenericFileIconPipe, deps: [{ token: i1.FilesService }], target: i0.ɵɵFactoryTarget.Pipe });
GenericFileIconPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: GenericFileIconPipe, name: "fileIcon" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GenericFileIconPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'fileIcon' }]
        }], ctorParameters: function () { return [{ type: i1.FilesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy1maWxlLWljb24ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL2dlbmVyaWMtZmlsZS1pY29uLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFFbEU7Ozs7R0FJRztBQUVILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUIsWUFBbUIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDO0lBRWpELFNBQVMsQ0FBQyxJQUFVO1FBQ2xCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjLENBQUMsSUFBVTtRQUN2QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNELEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQ2xELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFbkQsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELE9BQU8sQ0FBQyxXQUEwQztRQUNoRCxRQUFRLFdBQVcsRUFBRTtZQUNuQixLQUFLLGlCQUFpQixDQUFDLE9BQU87Z0JBQzVCLE9BQU8sZ0JBQWdCLENBQUM7WUFDMUIsS0FBSyxpQkFBaUIsQ0FBQyxLQUFLO2dCQUMxQixPQUFPLGNBQWMsQ0FBQztZQUN4QixLQUFLLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3pCLE9BQU8sb0JBQW9CLENBQUM7WUFDOUIsS0FBSyxpQkFBaUIsQ0FBQyxHQUFHO2dCQUN4QixPQUFPLE1BQU0sQ0FBQztZQUNoQixLQUFLLGlCQUFpQixDQUFDLEtBQUs7Z0JBQzFCLE9BQU8sY0FBYyxDQUFDO1lBQ3hCLEtBQUssaUJBQWlCLENBQUMsS0FBSztnQkFDMUIsT0FBTyxjQUFjLENBQUM7WUFDeEIsS0FBSyxpQkFBaUIsQ0FBQyxHQUFHO2dCQUN4QixPQUFPLE9BQU8sQ0FBQztZQUNqQixLQUFLLGlCQUFpQixDQUFDLFVBQVU7Z0JBQy9CLE9BQU8sbUJBQW1CLENBQUM7WUFDN0IsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJO2dCQUN6QixPQUFPLFdBQVcsQ0FBQztZQUNyQixLQUFLLGlCQUFpQixDQUFDLEtBQUs7Z0JBQzFCLE9BQU8sY0FBYyxDQUFDO1lBQ3hCLEtBQUssaUJBQWlCLENBQUMsSUFBSTtnQkFDekIsT0FBTyxhQUFhLENBQUM7WUFDdkI7Z0JBQ0UsT0FBTyxNQUFNLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBdUIsRUFBRSxHQUFXO1FBQzNELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUM7UUFDN0QsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbEUsQ0FBQzs7Z0hBckRVLG1CQUFtQjs4R0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlsZXNTZXJ2aWNlLCBHRU5FUklDX0ZJTEVfVFlQRSB9IGZyb20gJy4vZmlsZXMuc2VydmljZSc7XG5cbi8qKlxuICogRXh0cmFjdHMgZXh0ZW5zaW9uIGZyb20gcHJvdmlkZWQgRmlsZSBvYmplY3QgYW5kIG1hdGNoIGljb24gdGhhdCBmaXRzIGl0cyBnZW5lcmljIHR5cGVcbiAqIFVzYWdlOlxuICogICBmaWxlIHwgZmlsZUljb25cbiAqL1xuQFBpcGUoeyBuYW1lOiAnZmlsZUljb24nIH0pXG5leHBvcnQgY2xhc3MgR2VuZXJpY0ZpbGVJY29uUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZmlsZXNTZXJ2aWNlOiBGaWxlc1NlcnZpY2UpIHt9XG5cbiAgdHJhbnNmb3JtKGZpbGU6IEZpbGUpOiBzdHJpbmcge1xuICAgIGNvbnN0IGdlbmVyaWNUeXBlID0gdGhpcy5nZXRHZW5lcmljVHlwZShmaWxlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRJY29uKGdlbmVyaWNUeXBlKTtcbiAgfVxuXG4gIGdldEdlbmVyaWNUeXBlKGZpbGU6IEZpbGUpOiBHRU5FUklDX0ZJTEVfVFlQRSB8ICd1bmtub3duJyB7XG4gICAgY29uc3QgZXh0ZW5zaW9uID0gdGhpcy5maWxlc1NlcnZpY2UuZ2V0RmlsZUV4dGVuc2lvbihmaWxlKTtcblxuICAgIGZvciAoY29uc3QgdmFsIG9mIE9iamVjdC52YWx1ZXMoR0VORVJJQ19GSUxFX1RZUEUpKSB7XG4gICAgICBjb25zdCB0eXBlID0gdGhpcy5tYXRjaEdlbmVyaWNUeXBlKHZhbCwgZXh0ZW5zaW9uKTtcblxuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAndW5rbm93bic7XG4gIH1cblxuICBnZXRJY29uKGdlbmVyaWNUeXBlOiBHRU5FUklDX0ZJTEVfVFlQRSB8ICd1bmtub3duJyk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChnZW5lcmljVHlwZSkge1xuICAgICAgY2FzZSBHRU5FUklDX0ZJTEVfVFlQRS5BUkNISVZFOlxuICAgICAgICByZXR1cm4gJ2ZpbGUtYXJjaGl2ZS1vJztcbiAgICAgIGNhc2UgR0VORVJJQ19GSUxFX1RZUEUuQVVESU86XG4gICAgICAgIHJldHVybiAnZmlsZS1hdWRpby1vJztcbiAgICAgIGNhc2UgR0VORVJJQ19GSUxFX1RZUEUuQ09ERTpcbiAgICAgICAgcmV0dXJuICdkb2N1bWVudC13aXRoLWNvZGUnO1xuICAgICAgY2FzZSBHRU5FUklDX0ZJTEVfVFlQRS5FUEw6XG4gICAgICAgIHJldHVybiAnZmlsZSc7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLkVYQ0VMOlxuICAgICAgICByZXR1cm4gJ2ZpbGUtZXhjZWwtbyc7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLklNQUdFOlxuICAgICAgICByZXR1cm4gJ2ZpbGUtaW1hZ2Utbyc7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLlBERjpcbiAgICAgICAgcmV0dXJuICdwZGYtMic7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLlBPV0VSUE9JTlQ6XG4gICAgICAgIHJldHVybiAnZmlsZS1wb3dlcnBvaW50LW8nO1xuICAgICAgY2FzZSBHRU5FUklDX0ZJTEVfVFlQRS5URVhUOlxuICAgICAgICByZXR1cm4gJ2ZpbGUtdGV4dCc7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLlZJREVPOlxuICAgICAgICByZXR1cm4gJ2ZpbGUtdmlkZW8tbyc7XG4gICAgICBjYXNlIEdFTkVSSUNfRklMRV9UWVBFLldPUkQ6XG4gICAgICAgIHJldHVybiAnZmlsZS13b3JkLW8nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdmaWxlJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1hdGNoR2VuZXJpY1R5cGUodHlwZTogR0VORVJJQ19GSUxFX1RZUEUsIGV4dDogc3RyaW5nKTogR0VORVJJQ19GSUxFX1RZUEUgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGZpbGVUeXBlc01hcCA9IHRoaXMuZmlsZXNTZXJ2aWNlLmZpbGVUeXBlRXh0ZW5zaW9uc01hcDtcbiAgICByZXR1cm4gZmlsZVR5cGVzTWFwW3R5cGVdLmV4dHMuaW5jbHVkZXMoZXh0KSA/IHR5cGUgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==
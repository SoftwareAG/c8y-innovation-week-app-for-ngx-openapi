import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { shareReplay, map, distinctUntilChanged } from 'rxjs/operators';
import { fromTrigger, hookGeneric, getInjectedHooks, sortByPriority, stateToFactory, ExtensionPointForPlugins } from '../common/extension-hooks';
import { groupBy } from 'lodash-es';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../plugins/plugins-resolve.service";
/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 * Consider using the `hookActionBar` function instead.
 *
 * @example
 * ```typescript
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 * ```
 * @deprecated Consider using the `hookActionBar` function instead.
 */
export const HOOK_ACTION_BAR = new InjectionToken('HOOK_ACTION_BAR');
/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 *
 * You can either provide a single `ActionBarItem` as parameter:
 * ```typescript
 *  hookActionBar(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookActionBar([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<ActionBarItem>`
 * ```typescript
 *  export class MyActionBarFactory implements ExtensionFactory<ActionBarItem> {...}
 *  ...
 *  hookActionBar(MyActionBarFactory)
 * ```
 * A typed alternative to `HOOK_ACTION_BAR`.
 * @param items The `ActionBarItem`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookActionBar(items, options) {
    return hookGeneric(items, HOOK_ACTION_BAR, options);
}
/**
 * A service which defines action-bar items via the multi provider concept.
 *
 * @example
 * ```typescript
 * // preferred way, multi provider concept:
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 *
 * // use services:
 * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
 * ```
 */
export class ActionBarService extends ExtensionPointForPlugins {
    /**
     * @ignore
     */
    constructor(rootInjector, router, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.items$ = this.setupItemsObservable();
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new item to the action bar in the header and emits a state change.
     * @param item The item to add.
     */
    add(item) {
        this.state.add(item);
        this.emitNewState();
    }
    /**
     * Removes an action bar item from the header and emits a state change.
     * @param item The item to remove.
     */
    remove(item) {
        this.state.delete(item);
        this.emitNewState();
    }
    setupItemsObservable() {
        return fromTrigger(this.router, this.refresh$, [
            getInjectedHooks(HOOK_ACTION_BAR, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(map((items) => {
            const grouped = groupBy(items, 'groupId');
            // groupBy stores undefined as a string key -> all undefined a ungrouped
            const ungroupedItems = grouped.undefined || [];
            const groupedItems = Object.keys(grouped)
                .filter(key => key !== 'undefined')
                .map(key => grouped[key][0]);
            return [...ungroupedItems, ...groupedItems];
        }), map(items => sortByPriority(items)), shareReplay(1), distinctUntilChanged());
    }
}
ActionBarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActionBarService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionBarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActionBarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActionBarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,
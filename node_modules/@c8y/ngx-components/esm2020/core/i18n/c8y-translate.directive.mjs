import { TranslateDirective, TranslateService } from '@ngx-translate/core';
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
export class C8yTranslateDirective extends TranslateDirective {
    /**
     * Used to get private element property from TranslateDirective, so it doesn't throw tsErrors
     */
    get _elementRef() {
        return this.element;
    }
    /**
     * Used to get private translateService property from TranslateDirective, so it doesn't throw tsErrors
     */
    get _translateService() {
        return this.translateService;
    }
    constructor(translateService, element, _ref) {
        super(translateService, element, _ref);
        /**
         * Used to trigger events when html is replaced by directive.
         */
        this.htmlUpdateEvent = new EventEmitter();
    }
    /**
     * Overridden method from original directive.
     * For simple text nodes, it just invokes the base method.
     * For complex nodes, it builds translation key from whole inner HTML
     * and replaces it with its translation.
     * This prevents splitting HTML into pieces and attempting to translate each one separately
     * which doesn't work, because we extract strings in whole.
     */
    checkNodes(forceUpdate = false, translations) {
        if (!this.htmlMode && (this.isElementSimpleTextType() || this.isElementInnerHtmlEmpty())) {
            /**
             * If element does not contain complex html, then fallBack to default logic.
             */
            super.checkNodes(forceUpdate, translations);
        }
        else {
            this.htmlMode = true;
            if (this.isLookupKeyMissing()) {
                this._elementRef.nativeElement.lookupKey = this.getLookupKey();
            }
            if (this.lookupKeyExist()) {
                const newTranslation = this.getNewTranslation();
                if (!this.lastTranslation || this.lastTranslation !== newTranslation) {
                    this.lastTranslation = newTranslation;
                    this.updateHtmlContent();
                    this.htmlUpdateEvent.emit();
                }
            }
        }
    }
    ngOnDestroy() {
        this.htmlUpdateEvent.complete();
        super.ngOnDestroy();
    }
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    getLookupKey() {
        return this._elementRef.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    }
    isElementSimpleTextType() {
        return (this._elementRef.nativeElement.childNodes.length === 1 &&
            this._elementRef.nativeElement.childNodes[0].nodeType === 3);
    }
    isElementInnerHtmlEmpty() {
        return !this._elementRef.nativeElement.innerHTML;
    }
    isLookupKeyMissing() {
        return !this._elementRef.nativeElement.lookupKey;
    }
    lookupKeyExist() {
        return this._elementRef.nativeElement.lookupKey;
    }
    getNewTranslation() {
        return this._translateService.instant(this._elementRef.nativeElement.lookupKey, this.currentParams || {});
    }
    updateHtmlContent() {
        this._elementRef.nativeElement.innerHTML = this.lastTranslation;
    }
}
C8yTranslateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yTranslateDirective, deps: [{ token: i1.TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
C8yTranslateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: C8yTranslateDirective, selector: "[translate],[ngx-translate]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: C8yTranslateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[translate],[ngx-translate]'
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,
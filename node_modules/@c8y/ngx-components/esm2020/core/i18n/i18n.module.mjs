import { HttpClient, HttpClientModule } from '@angular/common/http';
import { LOCALE_ID, NgModule } from '@angular/core';
import { MissingTranslationHandler, TranslateService as NgxTranslateService, TranslateCompiler, TranslateFakeCompiler, TranslateLoader, TranslateParser, TranslateStore, USE_DEFAULT_LANG, USE_STORE, USE_EXTEND, DEFAULT_LANGUAGE } from '@ngx-translate/core';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { LANGUAGES } from './languages';
import { LOCALE_PATH } from './locale.path';
import { MissingTranslationCustomHandler } from './missing-translation-custom.handler';
import { MESSAGES } from './pattern-messages.data';
import { hookPatternMessages } from './patterns-message.hook';
import { TranslateCustomLoader } from './translate.loader';
import { TranslateParserCustom } from './translate.parser';
import { C8yTranslateModule } from './c8y-translate.module';
import { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import * as i0 from "@angular/core";
/**
 * The @angular/common/locales folder in node_modules contains files with names created based on RFC 3066bis.
 * https://www.w3.org/International/articles/bcp47/
 */
const angularLocalesLanguageMap = {
    en: 'en-GB',
    'en-EN': 'en-GB',
    'en-US': 'en',
    'ja-JP': 'ja',
    'zh-CN': 'zh',
    'zh-TW': 'zh',
    'pt-BR': 'pt'
};
// AoT requires an exported function for factories
export function translateLoaderFactory(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages) {
    return new TranslateCustomLoader(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages);
}
export function localePathFactory(options) {
    return options.localePath;
}
export function languagesFactory(options) {
    return options.languages;
}
export function localeId(appStateService) {
    return {
        get lang() {
            return getAngularLocalesLanguageString(appStateService.state.lang);
        },
        toLowerCase() {
            return this.lang.toLowerCase();
        },
        toString() {
            return this.lang;
        }
    };
}
export function getAngularLocalesLanguageString(language = 'en') {
    return angularLocalesLanguageMap[language] || language;
}
/**
 * The angular module definition for i18n (translation).
 * @exports I18nModule
 */
export class I18nModule {
    static providers() {
        return [
            { provide: LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
            hookPatternMessages(MESSAGES),
            { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
            { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
            // Extracted from projects/ngx-translate/core/src/public_api.ts
            {
                provide: TranslateLoader,
                useFactory: translateLoaderFactory,
                deps: [HttpClient, OptionsService, CachedLocaleDictionaryService, LOCALE_PATH, LANGUAGES]
            },
            { provide: TranslateCompiler, useClass: TranslateFakeCompiler },
            { provide: TranslateParser, useClass: TranslateParserCustom },
            { provide: MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
            TranslateStore,
            NgxTranslateService,
            { provide: USE_STORE, useValue: undefined },
            { provide: USE_DEFAULT_LANG, useValue: undefined },
            { provide: USE_EXTEND, useValue: false },
            { provide: DEFAULT_LANGUAGE, useValue: undefined }
        ];
    }
    static forRoot() {
        return {
            ngModule: I18nModule,
            providers: I18nModule.providers()
        };
    }
}
I18nModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: I18nModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
I18nModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: I18nModule, imports: [HttpClientModule, BsDatepickerModule], exports: [C8yTranslateModule] });
I18nModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: I18nModule, imports: [HttpClientModule, BsDatepickerModule, C8yTranslateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: I18nModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [C8yTranslateModule],
                    imports: [HttpClientModule, BsDatepickerModule]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { PatternMessagesService } from './pattern-messages.service';
import { TranslateParser } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "./pattern-messages.service";
export class MissingTranslationCustomHandler {
    constructor(parser, patternMessagesService) {
        this.parser = parser;
        this.patternMessagesService = patternMessagesService;
        this.cache = {};
    }
    handle(params) {
        const { key: messageKey, interpolateParams, translateService } = params;
        this.translateService = translateService;
        let translation = this.getFromCache(messageKey, interpolateParams);
        if (!translation) {
            const patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
            if (patternMessageTranslation) {
                translation = patternMessageTranslation;
            }
            else {
                translation = this.parser.interpolate(messageKey, interpolateParams);
            }
            this.addToCache(messageKey, interpolateParams, translation);
        }
        return translation;
    }
    getFromCache(messageKey, interpolateParams) {
        const { currentLang } = this.translateService;
        const currentCache = this.cache[currentLang] || {};
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        return currentCache[cacheKey];
    }
    addToCache(messageKey, interpolateParams, translation) {
        const { currentLang } = this.translateService;
        const currentCache = (this.cache[currentLang] = this.cache[currentLang] || {});
        const cacheKey = this.getCacheKey(messageKey, interpolateParams);
        currentCache[cacheKey] = translation;
    }
    getCacheKey(messageKey, interpolateParams) {
        return interpolateParams ? `${messageKey} ${JSON.stringify(interpolateParams)}` : messageKey;
    }
    getPatternMessageTranslation(messageKey, interpolateParams) {
        const shouldTryPatternMessages = !interpolateParams || !interpolateParams.noPatternMessages;
        if (shouldTryPatternMessages) {
            if (!this.patternMessagesService.translateService) {
                this.patternMessagesService.translateService = this.translateService;
            }
            return this.patternMessagesService.translate(messageKey);
        }
        return undefined;
    }
}
MissingTranslationCustomHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MissingTranslationCustomHandler, deps: [{ token: i1.TranslateParser }, { token: i2.PatternMessagesService }], target: i0.ɵɵFactoryTarget.Injectable });
MissingTranslationCustomHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MissingTranslationCustomHandler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MissingTranslationCustomHandler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TranslateParser }, { type: i2.PatternMessagesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzc2luZy10cmFuc2xhdGlvbi1jdXN0b20uaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvaTE4bi9taXNzaW5nLXRyYW5zbGF0aW9uLWN1c3RvbS5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUdMLGVBQWUsRUFFaEIsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUc3QixNQUFNLE9BQU8sK0JBQStCO0lBSTFDLFlBQ1UsTUFBdUIsRUFDdkIsc0JBQThDO1FBRDlDLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFKeEQsVUFBSyxHQUFRLEVBQUUsQ0FBQztJQUtiLENBQUM7SUFFSixNQUFNLENBQUMsTUFBdUM7UUFDNUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDeEUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBRXpDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FDakUsVUFBVSxFQUNWLGlCQUFpQixDQUNsQixDQUFDO1lBQ0YsSUFBSSx5QkFBeUIsRUFBRTtnQkFDN0IsV0FBVyxHQUFHLHlCQUF5QixDQUFDO2FBQ3pDO2lCQUFNO2dCQUNMLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQzthQUN0RTtZQUVELElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzdEO1FBRUQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVPLFlBQVksQ0FBQyxVQUFrQixFQUFFLGlCQUF5QjtRQUNoRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQzlDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25ELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDakUsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxVQUFrQixFQUFFLGlCQUF5QixFQUFFLFdBQW1CO1FBQ25GLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDOUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyxXQUFXLENBQUMsVUFBa0IsRUFBRSxpQkFBeUI7UUFDL0QsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUMvRixDQUFDO0lBRU8sNEJBQTRCLENBQUMsVUFBa0IsRUFBRSxpQkFBeUI7UUFDaEYsTUFBTSx3QkFBd0IsR0FDNUIsQ0FBQyxpQkFBaUIsSUFBSSxDQUFFLGlCQUF5QixDQUFDLGlCQUFpQixDQUFDO1FBRXRFLElBQUksd0JBQXdCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDakQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzthQUN0RTtZQUNELE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMxRDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OzRIQTlEVSwrQkFBK0I7Z0lBQS9CLCtCQUErQjsyRkFBL0IsK0JBQStCO2tCQUQzQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF0dGVybk1lc3NhZ2VzU2VydmljZSB9IGZyb20gJy4vcGF0dGVybi1tZXNzYWdlcy5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIsXG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJQYXJhbXMsXG4gIFRyYW5zbGF0ZVBhcnNlcixcbiAgVHJhbnNsYXRlU2VydmljZVxufSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1pc3NpbmdUcmFuc2xhdGlvbkN1c3RvbUhhbmRsZXIgaW1wbGVtZW50cyBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyIHtcbiAgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZTtcbiAgY2FjaGU6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGFyc2VyOiBUcmFuc2xhdGVQYXJzZXIsXG4gICAgcHJpdmF0ZSBwYXR0ZXJuTWVzc2FnZXNTZXJ2aWNlOiBQYXR0ZXJuTWVzc2FnZXNTZXJ2aWNlXG4gICkge31cblxuICBoYW5kbGUocGFyYW1zOiBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyUGFyYW1zKSB7XG4gICAgY29uc3QgeyBrZXk6IG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zLCB0cmFuc2xhdGVTZXJ2aWNlIH0gPSBwYXJhbXM7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdHJhbnNsYXRlU2VydmljZTtcblxuICAgIGxldCB0cmFuc2xhdGlvbiA9IHRoaXMuZ2V0RnJvbUNhY2hlKG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zKTtcblxuICAgIGlmICghdHJhbnNsYXRpb24pIHtcbiAgICAgIGNvbnN0IHBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24gPSB0aGlzLmdldFBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24oXG4gICAgICAgIG1lc3NhZ2VLZXksXG4gICAgICAgIGludGVycG9sYXRlUGFyYW1zXG4gICAgICApO1xuICAgICAgaWYgKHBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24pIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSBwYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSB0aGlzLnBhcnNlci5pbnRlcnBvbGF0ZShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkVG9DYWNoZShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcywgdHJhbnNsYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RnJvbUNhY2hlKG1lc3NhZ2VLZXk6IHN0cmluZywgaW50ZXJwb2xhdGVQYXJhbXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBjdXJyZW50TGFuZyB9ID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlO1xuICAgIGNvbnN0IGN1cnJlbnRDYWNoZSA9IHRoaXMuY2FjaGVbY3VycmVudExhbmddIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgcmV0dXJuIGN1cnJlbnRDYWNoZVtjYWNoZUtleV07XG4gIH1cblxuICBwcml2YXRlIGFkZFRvQ2FjaGUobWVzc2FnZUtleTogc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtczogb2JqZWN0LCB0cmFuc2xhdGlvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBjdXJyZW50TGFuZyB9ID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlO1xuICAgIGNvbnN0IGN1cnJlbnRDYWNoZSA9ICh0aGlzLmNhY2hlW2N1cnJlbnRMYW5nXSA9IHRoaXMuY2FjaGVbY3VycmVudExhbmddIHx8IHt9KTtcbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2V0Q2FjaGVLZXkobWVzc2FnZUtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgIGN1cnJlbnRDYWNoZVtjYWNoZUtleV0gPSB0cmFuc2xhdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2FjaGVLZXkobWVzc2FnZUtleTogc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtczogb2JqZWN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGVQYXJhbXMgPyBgJHttZXNzYWdlS2V5fSAke0pTT04uc3RyaW5naWZ5KGludGVycG9sYXRlUGFyYW1zKX1gIDogbWVzc2FnZUtleTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGF0dGVybk1lc3NhZ2VUcmFuc2xhdGlvbihtZXNzYWdlS2V5OiBzdHJpbmcsIGludGVycG9sYXRlUGFyYW1zOiBvYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNob3VsZFRyeVBhdHRlcm5NZXNzYWdlcyA9XG4gICAgICAhaW50ZXJwb2xhdGVQYXJhbXMgfHwgIShpbnRlcnBvbGF0ZVBhcmFtcyBhcyBhbnkpLm5vUGF0dGVybk1lc3NhZ2VzO1xuXG4gICAgaWYgKHNob3VsZFRyeVBhdHRlcm5NZXNzYWdlcykge1xuICAgICAgaWYgKCF0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlU2VydmljZSkge1xuICAgICAgICB0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlU2VydmljZSA9IHRoaXMudHJhbnNsYXRlU2VydmljZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhdHRlcm5NZXNzYWdlc1NlcnZpY2UudHJhbnNsYXRlKG1lc3NhZ2VLZXkpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==
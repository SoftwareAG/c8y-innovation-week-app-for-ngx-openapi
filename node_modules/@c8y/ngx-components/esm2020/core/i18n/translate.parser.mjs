import { Injectable } from '@angular/core';
import { TranslateDefaultParser } from '@ngx-translate/core';
import { get } from 'lodash-es';
import { trimTranslationKey } from './translate.loader';
import * as i0 from "@angular/core";
export class TranslateParserCustom extends TranslateDefaultParser {
    getValue(target, key) {
        const trimmedKey = trimTranslationKey(key);
        let translated = get(target, [trimmedKey]);
        if (!translated) {
            const keys = key.split('.');
            if (keys.length > 1) {
                translated = get(target, key);
            }
        }
        return translated;
    }
}
TranslateParserCustom.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateParserCustom, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TranslateParserCustom.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateParserCustom });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateParserCustom, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvaTE4bi90cmFuc2xhdGUucGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFHeEQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHNCQUFzQjtJQUMvRCxRQUFRLENBQUMsTUFBVyxFQUFFLEdBQVc7UUFDL0IsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDL0I7U0FDRjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7O2tIQVhVLHFCQUFxQjtzSEFBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVEZWZhdWx0UGFyc2VyIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgdHJpbVRyYW5zbGF0aW9uS2V5IH0gZnJvbSAnLi90cmFuc2xhdGUubG9hZGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZVBhcnNlckN1c3RvbSBleHRlbmRzIFRyYW5zbGF0ZURlZmF1bHRQYXJzZXIge1xuICBnZXRWYWx1ZSh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IHRyaW1tZWRLZXkgPSB0cmltVHJhbnNsYXRpb25LZXkoa2V5KTtcbiAgICBsZXQgdHJhbnNsYXRlZCA9IGdldCh0YXJnZXQsIFt0cmltbWVkS2V5XSk7XG4gICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBnZXQodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNsYXRlZDtcbiAgfVxufVxuIl19
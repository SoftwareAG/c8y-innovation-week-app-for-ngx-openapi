import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common/extension-hooks';
/**
 * @deprecated Consider using the `hookPatternMessages` function instead.
 */
export const HOOK_PATTERN_MESSAGES = new InjectionToken('HOOK_PATTERN_MESSAGES');
/**
 * You can either provide a single `PatternMessages` as parameter:
 * ```typescript
 *  hookPatternMessages(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookPatternMessages([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<PatternMessages>`
 * ```typescript
 *  export class MyPatternMessagesFactory implements ExtensionFactory<PatternMessages> {...}
 *  ...
 *  hookPatternMessages(MyPatternMessagesFactory)
 * ```
 * A typed alternative to `HOOK_PATTERN_MESSAGES`.
 * @param patterns The `PatternMessages`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookPatternMessages(patterns, options) {
    return hookGeneric(patterns, HOOK_PATTERN_MESSAGES, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybnMtbWVzc2FnZS5ob29rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9pMThuL3BhdHRlcm5zLW1lc3NhZ2UuaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBbUIsV0FBVyxFQUFlLE1BQU0sMkJBQTJCLENBQUM7QUFXdEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBRWpGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsUUFBMEMsRUFDMUMsT0FBOEI7SUFFOUIsT0FBTyxXQUFXLENBQWtCLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdlbmVyaWNIb29rVHlwZSwgaG9va0dlbmVyaWMsIEhvb2tPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0dGVybk1lc3NhZ2VzIHtcbiAgW3BhdHRlcm46IHN0cmluZ106IHtcbiAgICBnZXR0ZXh0OiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXJzPzoge1xuICAgICAgW3BsYWNlaG9sZGVyOiBzdHJpbmddOiBzdHJpbmcgfCBhbnk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDb25zaWRlciB1c2luZyB0aGUgYGhvb2tQYXR0ZXJuTWVzc2FnZXNgIGZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX1BBVFRFUk5fTUVTU0FHRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0hPT0tfUEFUVEVSTl9NRVNTQUdFUycpO1xuXG4vKipcbiAqIFlvdSBjYW4gZWl0aGVyIHByb3ZpZGUgYSBzaW5nbGUgYFBhdHRlcm5NZXNzYWdlc2AgYXMgcGFyYW1ldGVyOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tQYXR0ZXJuTWVzc2FnZXMoLi4uKVxuICogYGBgXG4gKlxuICogT3IgYW4gYXJyYXkgdG8gZGlyZWN0bHkgcmVnaXN0ZXIgbXVsdGlwbGU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va1BhdHRlcm5NZXNzYWdlcyhbLi4uXSlcbiAqIGBgYFxuICpcbiAqIE9yIHlvdSBwcm92aWRlIGFuIFNlcnZpY2UgdGhhdCBpbXBsZW1lbnRzIGBFeHRlbnNpb25GYWN0b3J5PFBhdHRlcm5NZXNzYWdlcz5gXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgZXhwb3J0IGNsYXNzIE15UGF0dGVybk1lc3NhZ2VzRmFjdG9yeSBpbXBsZW1lbnRzIEV4dGVuc2lvbkZhY3Rvcnk8UGF0dGVybk1lc3NhZ2VzPiB7Li4ufVxuICogIC4uLlxuICogIGhvb2tQYXR0ZXJuTWVzc2FnZXMoTXlQYXR0ZXJuTWVzc2FnZXNGYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX1BBVFRFUk5fTUVTU0FHRVNgLlxuICogQHBhcmFtIHBhdHRlcm5zIFRoZSBgUGF0dGVybk1lc3NhZ2VzYCdzIG9yIGBFeHRlbnNpb25GYWN0b3J5YCB0byBiZSBwcm92aWRlZC5cbiAqIEByZXR1cm5zIEFuIGBQcm92aWRlcmAgdG8gYmUgcHJvdmlkZWQgaW4geW91ciBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob29rUGF0dGVybk1lc3NhZ2VzKFxuICBwYXR0ZXJuczogR2VuZXJpY0hvb2tUeXBlPFBhdHRlcm5NZXNzYWdlcz4sXG4gIG9wdGlvbnM/OiBQYXJ0aWFsPEhvb2tPcHRpb25zPlxuKSB7XG4gIHJldHVybiBob29rR2VuZXJpYzxQYXR0ZXJuTWVzc2FnZXM+KHBhdHRlcm5zLCBIT09LX1BBVFRFUk5fTUVTU0FHRVMsIG9wdGlvbnMpO1xufVxuIl19
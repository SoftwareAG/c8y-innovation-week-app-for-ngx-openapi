import { DOCUMENT, registerLocaleData } from '@angular/common';
import { Inject, Injectable, Optional } from '@angular/core';
import { TranslateService as NgxTranslateService } from '@ngx-translate/core';
import { isString, keys } from 'lodash-es';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { getAngularLocalesLanguageString } from './i18n.module';
import { loadLocale } from './load-locale';
import { defineLocale, deLocale, enGbLocale, esLocale, frLocale, jaLocale, koLocale, nlLocale, plLocale, ptBrLocale, ruLocale, zhCnLocale } from 'ngx-bootstrap/chronos';
import { BsLocaleService } from 'ngx-bootstrap/datepicker';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/ui-state.service";
import * as i3 from "../common/options.service";
import * as i4 from "ngx-bootstrap/datepicker";
/**
 * A service to manage the language of the application.
 */
export class TranslateService {
    static defaultLang() {
        return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
    }
    constructor(ngxTranslate, ui, options, document, bsLocaleService) {
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.document = document;
        this.bsLocaleService = bsLocaleService;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(k => this.langsDetail[k]);
        this.DEFAULT_SEPARATOR = '_';
        const queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    /**
     * Switches the app to given locale (incl. Angular, Bootstrap, translations).
     * @param localeCode The locale code. Supported formats:
     * - two-letter codes for language only, for example: `en`, `de`
     * - four-letter codes for language and country, separated with underscore or dash, for example: `zh_CN`, `zh_cn`, `zh-CN`, `zh-cn`
     */
    async switchToLanguage(localeCode) {
        const { langCountryCode: ngxLocaleCode, langCode: ngxLocaleCodeFallback } = this.parseLocaleCode(localeCode, '-');
        try {
            await this.loadLocales(ngxLocaleCode);
        }
        catch (e) {
            if (ngxLocaleCodeFallback !== ngxLocaleCode) {
                await this.loadLocales(ngxLocaleCodeFallback);
            }
            else {
                throw e;
            }
        }
        const { langCode: bsLocaleCode, langCountryCode: ngxTranslateLocaleCode } = this.parseLocaleCode(localeCode);
        this.setBsLocale(bsLocaleCode);
        this.setLanguage(ngxTranslateLocaleCode);
    }
    async loadLocales(moduleLang) {
        const module = await loadLocale(getAngularLocalesLanguageString(moduleLang));
        registerLocaleData(module.default);
    }
    setLanguage(lang) {
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(() => {
            this.ui.state$.next({ ...this.ui.state, lang });
        });
        this.document.documentElement.lang = lang;
    }
    /**
     * Finds the first supported language
     */
    firstSupportedLanguage() {
        const languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean)
            .map(lang => lang.toLowerCase());
        const preferredLanguage = languages.find(lang => this.getSupported(lang));
        return this.getSupported(preferredLanguage);
    }
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    convertToLanguageCodePO(lang) {
        const sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        const [langMain, langSpecific] = lang.split(sep);
        const langLast = langSpecific ? `${this.DEFAULT_SEPARATOR}${langSpecific}` : '';
        return `${langMain}${langLast}`;
    }
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    getNativeLanguage(lang) {
        const langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    }
    saveInLocalStorage(lang) {
        window.localStorage.setItem(TranslateService.SAVE_LANGUAGE_KEY, lang);
    }
    getSupported(localeCode) {
        if (!localeCode) {
            return undefined;
        }
        const localeCodeParsed = this.parseLocaleCode(localeCode);
        const localeCodesParsed = this.langs.map(lang => this.parseLocaleCode(lang));
        const langCountryCodeMatch = localeCodesParsed.find(({ langCountryCode }) => langCountryCode === localeCodeParsed.langCountryCode);
        if (langCountryCodeMatch) {
            return langCountryCodeMatch.langCountryCode;
        }
        const langCodeMatch = localeCodesParsed.find(({ langCode }) => langCode === localeCodeParsed.langCode);
        if (langCodeMatch) {
            return langCodeMatch.langCountryCode;
        }
        return undefined;
    }
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    queryStringLang() {
        return this.getQueryParameter('lang');
    }
    parseLocaleCode(localeCode, outputSeparator = '_') {
        const matches = localeCode.match(/^([a-z]{2})([_-]([a-z]{2}))?$/i);
        if (!matches) {
            throw new Error(`Could not parse locale code "${localeCode}", make sure it's a two- or four-letter code (case insensitive) separated with "_" or "-".`);
        }
        const langCode = matches[1].toLowerCase();
        const countryCode = matches[3]?.toUpperCase();
        const langCountryCode = `${langCode}${countryCode ? `${outputSeparator}${countryCode}` : ''}`;
        return { langCode, langCountryCode };
    }
    getLessSpecific(lang) {
        return isString(lang)
            ? lang.replace('-', this.DEFAULT_SEPARATOR).split(this.DEFAULT_SEPARATOR)[0]
            : '';
    }
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    localStorageLang() {
        return window.localStorage.getItem(TranslateService.SAVE_LANGUAGE_KEY);
    }
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    browserLangs() {
        const { navigator } = window;
        const browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce((languages, property) => {
            const propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    }
    getQueryParameter(queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        const query = window.location.search.substring(1);
        let result;
        query.split('&').find(pair => {
            const [key, value] = pair.split('=');
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    }
    /**
     * Sets locale for ngx-bootstrap.
     * @param lang A two-letter language code.
     * @private
     */
    setBsLocale(lang) {
        switch (lang) {
            case 'de': {
                defineLocale(lang, deLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'en': {
                // 'en-gb' is created because overwriting default 'en' breaks date-picker somehow
                defineLocale('en-gb', enGbLocale);
                this.bsLocaleService.use('en-gb');
                break;
            }
            case 'es': {
                defineLocale(lang, esLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'fr': {
                defineLocale(lang, frLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'ja': {
                defineLocale(lang, jaLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'ko': {
                defineLocale(lang, koLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'nl': {
                defineLocale(lang, nlLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'pl': {
                defineLocale(lang, plLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'pt': {
                defineLocale(lang, ptBrLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'ru': {
                defineLocale(lang, ruLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            case 'zh': {
                defineLocale(lang, zhCnLocale);
                this.bsLocaleService.use(lang);
                break;
            }
            default: {
                defineLocale('en-gb', enGbLocale);
                this.bsLocaleService.use('en-gb');
            }
        }
    }
}
TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
TranslateService.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateService, deps: [{ token: i1.TranslateService }, { token: i2.AppStateService }, { token: i3.OptionsService }, { token: DOCUMENT }, { token: i4.BsLocaleService, optional: true }], target: i0.ÉµÉµFactoryTarget.Injectable });
TranslateService.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateService, providedIn: 'root' });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TranslateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.AppStateService }, { type: i3.OptionsService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i4.BsLocaleService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injector, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { allEntriesAreEqual, fromTriggerOnce, getInjectedHooks, removeDuplicatesIds, StateService, stateToFactory } from '../common';
import { InjectionToken } from '@angular/core';
import { hookGeneric } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * A hook to use for Multi Provider extension.
 * Consider using the `hookDrawer` function instead.
 */
const HOOK_DRAWER = new InjectionToken('HOOK_DRAWER');
/**
 * You can either provide a single `DrawerItem` as parameter:
 * ```typescript
 *  hookDrawer(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDrawer([...])
 * ```
 *
 * Or you provide a Service that implements `ExtensionFactory<DrawerItem>`
 * ```typescript
 *  export class MyDrawerFactory implements ExtensionFactory<DrawerItem> {...}
 *  ...
 *  hookDrawer(MyDrawerFactory)
 * ```
 * A typed alternative to `HOOK_DRAWER`.
 * @param drawer The `DrawerItem`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDrawer(drawer, options) {
    return hookGeneric(drawer, HOOK_DRAWER, options);
}
export class DrawerService extends StateService {
    constructor(rootInjector, router) {
        super();
        this.rootInjector = rootInjector;
        this.router = router;
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        /**
         * Additional factories that can be added by plugins.
         */
        this.factories = [];
        this.injectors = [this.rootInjector];
        this.items$ = fromTriggerOnce(router, this.refreshTrigger, [
            getInjectedHooks(HOOK_DRAWER, this.injectors),
            () => this.factories,
            stateToFactory(this.state$)
        ]).pipe(distinctUntilChanged(allEntriesAreEqual), map((drawerItems) => removeDuplicatesIds(drawerItems)), shareReplay(1));
    }
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state() {
        return this.state$.value;
    }
    getDrawersForPosition$(position) {
        return this.items$.pipe(map(items => items.filter(drawer => drawer.position === position)));
    }
    /**
     * Refresh the extension factories.
     */
    refresh() {
        this.refreshTrigger.next();
    }
    /**
     * Adds a new node to the navigator.
     * @param {DrawerItem} node Navigator node to add.
     */
    add(node) {
        this.state.add(node);
        this.emitNewState();
    }
    /**
     * Removes a node from the navigator.
     * @param {DrawerItem} node Navigator node to remove.
     */
    remove(node) {
        this.state.delete(node);
        this.emitNewState();
    }
}
DrawerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DrawerService, deps: [{ token: i0.Injector }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
DrawerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DrawerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DrawerService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2RyYXdlci9kcmF3ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RSxPQUFPLEVBQ0wsa0JBQWtCLEVBR2xCLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLFlBQVksRUFDWixjQUFjLEVBQ2YsTUFBTSxXQUFXLENBQUM7QUFFbkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQW1CLFdBQVcsRUFBZSxNQUFNLFdBQVcsQ0FBQzs7O0FBRXRFOzs7R0FHRztBQUNILE1BQU0sV0FBVyxHQUFHLElBQUksY0FBYyxDQUFlLGFBQWEsQ0FBQyxDQUFDO0FBRXBFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBbUMsRUFBRSxPQUE4QjtJQUM1RixPQUFPLFdBQVcsQ0FBYSxNQUFNLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFHRCxNQUFNLE9BQU8sYUFBYyxTQUFRLFlBQVk7SUFnQjdDLFlBQW9CLFlBQXNCLEVBQVUsTUFBYztRQUNoRSxLQUFLLEVBQUUsQ0FBQztRQURVLGlCQUFZLEdBQVosWUFBWSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQWJsRTs7O1dBR0c7UUFDYyxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDN0MsV0FBTSxHQUFHLElBQUksZUFBZSxDQUFrQixJQUFJLEdBQUcsRUFBYyxDQUFDLENBQUM7UUFFOUU7O1dBRUc7UUFDSCxjQUFTLEdBQW1DLEVBQUUsQ0FBQztRQUMvQyxjQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFLOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQWEsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckUsZ0JBQWdCLENBQWEsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDekQsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDcEIsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDNUIsQ0FBQyxDQUFDLElBQUksQ0FDTCxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxFQUN4QyxHQUFHLENBQUMsQ0FBQyxXQUF5QixFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUNwRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsc0JBQXNCLENBQUMsUUFBMEI7UUFDL0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTztRQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUcsQ0FBQyxJQUFnQjtRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFnQjtRQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7MEdBbEVVLGFBQWE7OEdBQWIsYUFBYSxjQURBLE1BQU07MkZBQ25CLGFBQWE7a0JBRHpCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgYWxsRW50cmllc0FyZUVxdWFsLFxuICBFeHRlbnNpb25GYWN0b3J5LFxuICBFeHRlbnNpb25Qb2ludCxcbiAgZnJvbVRyaWdnZXJPbmNlLFxuICBnZXRJbmplY3RlZEhvb2tzLFxuICByZW1vdmVEdXBsaWNhdGVzSWRzLFxuICBTdGF0ZVNlcnZpY2UsXG4gIHN0YXRlVG9GYWN0b3J5XG59IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBEcmF3ZXJJdGVtIH0gZnJvbSAnLi9kcmF3ZXIubW9kZWwnO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdlbmVyaWNIb29rVHlwZSwgaG9va0dlbmVyaWMsIEhvb2tPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uJztcblxuLyoqXG4gKiBBIGhvb2sgdG8gdXNlIGZvciBNdWx0aSBQcm92aWRlciBleHRlbnNpb24uXG4gKiBDb25zaWRlciB1c2luZyB0aGUgYGhvb2tEcmF3ZXJgIGZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmNvbnN0IEhPT0tfRFJBV0VSID0gbmV3IEluamVjdGlvblRva2VuPERyYXdlckl0ZW1bXT4oJ0hPT0tfRFJBV0VSJyk7XG5cbi8qKlxuICogWW91IGNhbiBlaXRoZXIgcHJvdmlkZSBhIHNpbmdsZSBgRHJhd2VySXRlbWAgYXMgcGFyYW1ldGVyOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tEcmF3ZXIoLi4uKVxuICogYGBgXG4gKlxuICogT3IgYW4gYXJyYXkgdG8gZGlyZWN0bHkgcmVnaXN0ZXIgbXVsdGlwbGU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va0RyYXdlcihbLi4uXSlcbiAqIGBgYFxuICpcbiAqIE9yIHlvdSBwcm92aWRlIGEgU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8RHJhd2VySXRlbT5gXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgZXhwb3J0IGNsYXNzIE15RHJhd2VyRmFjdG9yeSBpbXBsZW1lbnRzIEV4dGVuc2lvbkZhY3Rvcnk8RHJhd2VySXRlbT4gey4uLn1cbiAqICAuLi5cbiAqICBob29rRHJhd2VyKE15RHJhd2VyRmFjdG9yeSlcbiAqIGBgYFxuICogQSB0eXBlZCBhbHRlcm5hdGl2ZSB0byBgSE9PS19EUkFXRVJgLlxuICogQHBhcmFtIGRyYXdlciBUaGUgYERyYXdlckl0ZW1gJ3Mgb3IgYEV4dGVuc2lvbkZhY3RvcnlgIHRvIGJlIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gYFByb3ZpZGVyYCB0byBiZSBwcm92aWRlZCBpbiB5b3VyIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvb2tEcmF3ZXIoZHJhd2VyOiBHZW5lcmljSG9va1R5cGU8RHJhd2VySXRlbT4sIG9wdGlvbnM/OiBQYXJ0aWFsPEhvb2tPcHRpb25zPikge1xuICByZXR1cm4gaG9va0dlbmVyaWM8RHJhd2VySXRlbT4oZHJhd2VyLCBIT09LX0RSQVdFUiwgb3B0aW9ucyk7XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRHJhd2VyU2VydmljZSBleHRlbmRzIFN0YXRlU2VydmljZSBpbXBsZW1lbnRzIEV4dGVuc2lvblBvaW50PERyYXdlckl0ZW0+IHtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPERyYXdlckl0ZW1bXT47XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggdGhlIGV4dGVuc2lvbiBmYWN0b3JpZXMgc3ViamVjdC5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTZXQ8RHJhd2VySXRlbT4+KG5ldyBTZXQ8RHJhd2VySXRlbT4oKSk7XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZmFjdG9yaWVzIHRoYXQgY2FuIGJlIGFkZGVkIGJ5IHBsdWdpbnMuXG4gICAqL1xuICBmYWN0b3JpZXM6IEV4dGVuc2lvbkZhY3Rvcnk8RHJhd2VySXRlbT5bXSA9IFtdO1xuICBpbmplY3RvcnMgPSBbdGhpcy5yb290SW5qZWN0b3JdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm9vdEluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLml0ZW1zJCA9IGZyb21UcmlnZ2VyT25jZTxEcmF3ZXJJdGVtPihyb3V0ZXIsIHRoaXMucmVmcmVzaFRyaWdnZXIsIFtcbiAgICAgIGdldEluamVjdGVkSG9va3M8RHJhd2VySXRlbT4oSE9PS19EUkFXRVIsIHRoaXMuaW5qZWN0b3JzKSxcbiAgICAgICgpID0+IHRoaXMuZmFjdG9yaWVzLFxuICAgICAgc3RhdGVUb0ZhY3RvcnkodGhpcy5zdGF0ZSQpXG4gICAgXSkucGlwZShcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGFsbEVudHJpZXNBcmVFcXVhbCksXG4gICAgICBtYXAoKGRyYXdlckl0ZW1zOiBEcmF3ZXJJdGVtW10pID0+IHJlbW92ZUR1cGxpY2F0ZXNJZHMoZHJhd2VySXRlbXMpKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgc2V0IG9mIGFjdGlvbnMuXG4gICAqL1xuICBnZXQgc3RhdGUoKTogU2V0PERyYXdlckl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICBnZXREcmF3ZXJzRm9yUG9zaXRpb24kKHBvc2l0aW9uOiAncmlnaHQnIHwgJ2xlZnQnKTogT2JzZXJ2YWJsZTxEcmF3ZXJJdGVtW10+IHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcyQucGlwZShtYXAoaXRlbXMgPT4gaXRlbXMuZmlsdGVyKGRyYXdlciA9PiBkcmF3ZXIucG9zaXRpb24gPT09IHBvc2l0aW9uKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggdGhlIGV4dGVuc2lvbiBmYWN0b3JpZXMuXG4gICAqL1xuICByZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXIubmV4dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgbm9kZSB0byB0aGUgbmF2aWdhdG9yLlxuICAgKiBAcGFyYW0ge0RyYXdlckl0ZW19IG5vZGUgTmF2aWdhdG9yIG5vZGUgdG8gYWRkLlxuICAgKi9cbiAgYWRkKG5vZGU6IERyYXdlckl0ZW0pIHtcbiAgICB0aGlzLnN0YXRlLmFkZChub2RlKTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBub2RlIGZyb20gdGhlIG5hdmlnYXRvci5cbiAgICogQHBhcmFtIHtEcmF3ZXJJdGVtfSBub2RlIE5hdmlnYXRvciBub2RlIHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZShub2RlOiBEcmF3ZXJJdGVtKSB7XG4gICAgdGhpcy5zdGF0ZS5kZWxldGUobm9kZSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxufVxuIl19
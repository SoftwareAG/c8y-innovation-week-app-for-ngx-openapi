import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { Permissions } from '../common/permissions.service';
import { AppStateService } from '../common/ui-state.service';
import { Steppers } from '../stepper/stepper.model';
import { StepperService } from '../stepper/stepper.service';
import { NEEDED_ROLE_FOR_SETUP, SETUP_FINISHED_STEP_ID } from './setup.model';
import { PluginsResolveService } from '../plugins/plugins-resolve.service';
import * as i0 from "@angular/core";
import * as i1 from "../stepper/stepper.service";
import * as i2 from "../common/permissions.service";
import * as i3 from "../common/options.service";
import * as i4 from "../common/ui-state.service";
import * as i5 from "../plugins/plugins-resolve.service";
export class SetupService {
    /**
     * @ignore only DI and initialization
     */
    constructor(stepperService, permissions, options, ui, pluginsResolve) {
        this.stepperService = stepperService;
        this.permissions = permissions;
        this.options = options;
        this.ui = ui;
        this.pluginsResolve = pluginsResolve;
        this.skipSetup$ = new BehaviorSubject(false);
        this.isSetupNeeded$ = this.pluginsResolve.allPluginsLoaded$.pipe(filter(loaded => loaded), switchMap(() => this.ui.isOwnerOfApplication$()), switchMap(isOwner => {
            if (!isOwner) {
                return of([]);
            }
            return this.stepperService.getById$(Steppers.SETUP);
        }), map((steps) => this.getNotCompletedSetupSteps(steps)), map(notCompletedSetupSteps => this.options.forceSetup ||
            (this.options.isSetup && this.needsSetup(notCompletedSetupSteps))), switchMap(required => this.setupRequired(required)));
    }
    skipSetup() {
        this.skipSetup$.next(true);
    }
    setupRequired(required) {
        if (!required) {
            return of(required);
        }
        return this.skipSetup$.pipe(map(skipped => !skipped));
    }
    needsSetup(notCompletedSetupSteps) {
        notCompletedSetupSteps = this.excludeSetupFinishStep(notCompletedSetupSteps);
        if (this.hasPermission()) {
            return notCompletedSetupSteps.length > 0;
        }
        // Show setup screen as there are required steps but the user
        // has no permission. The Setup screen will show an error to
        // the user.
        return this.hasRequiredSteps(notCompletedSetupSteps);
    }
    excludeSetupFinishStep(notCompletedSetupSteps) {
        return notCompletedSetupSteps.filter(({ setupId }) => setupId !== SETUP_FINISHED_STEP_ID);
    }
    hasRequiredSteps(notCompletedSetupSteps) {
        return notCompletedSetupSteps.some(step => step.required);
    }
    hasPermission() {
        return this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
    }
    getNotCompletedSetupSteps(steps) {
        if (!this.ui.currentApplication.value) {
            return steps;
        }
        return steps.filter(step => step.setupId &&
            !(this.ui.currentApplication.value.config?.setup || []).includes(step.setupId));
    }
}
SetupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SetupService, deps: [{ token: i1.StepperService }, { token: i2.Permissions }, { token: i3.OptionsService }, { token: i4.AppStateService }, { token: i5.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
SetupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SetupService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SetupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StepperService }, { type: i2.Permissions }, { type: i3.OptionsService }, { type: i4.AppStateService }, { type: i5.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvc2V0dXAvc2V0dXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFhLHNCQUFzQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7O0FBSzNFLE1BQU0sT0FBTyxZQUFZO0lBUXZCOztPQUVHO0lBQ0gsWUFDVSxjQUE4QixFQUM5QixXQUF3QixFQUN4QixPQUF1QixFQUN4QixFQUFtQixFQUNsQixjQUFxQztRQUpyQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDeEIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbEIsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBVnZDLGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVk5QyxJQUFJLENB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QyxDQUNqRixDQUFDO0lBQ0osQ0FBQzs7eUdBaEZVLFlBQVk7NkdBQVosWUFBWSxjQUZYLE1BQU07MkZBRVAsWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IFBlcm1pc3Npb25zIH0gZnJvbSAnLi4vY29tbW9uL3Blcm1pc3Npb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RlcHBlcnMgfSBmcm9tICcuLi9zdGVwcGVyL3N0ZXBwZXIubW9kZWwnO1xuaW1wb3J0IHsgU3RlcHBlclNlcnZpY2UgfSBmcm9tICcuLi9zdGVwcGVyL3N0ZXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBORUVERURfUk9MRV9GT1JfU0VUVVAsIFNldHVwU3RlcCwgU0VUVVBfRklOSVNIRURfU1RFUF9JRCB9IGZyb20gJy4vc2V0dXAubW9kZWwnO1xuaW1wb3J0IHsgUGx1Z2luc1Jlc29sdmVTZXJ2aWNlIH0gZnJvbSAnLi4vcGx1Z2lucy9wbHVnaW5zLXJlc29sdmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNldHVwU2VydmljZSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGFwcGxpY2F0aW9ucyBuZWVkcyB0byBzaG93IGEgc2V0dXAgd2l6YXJkLlxuICAgKi9cbiAgaXNTZXR1cE5lZWRlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgcHJpdmF0ZSBza2lwU2V0dXAkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgb25seSBESSBhbmQgaW5pdGlhbGl6YXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RlcHBlclNlcnZpY2U6IFN0ZXBwZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLFxuICAgIHByaXZhdGUgb3B0aW9uczogT3B0aW9uc1NlcnZpY2UsXG4gICAgcHVibGljIHVpOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwbHVnaW5zUmVzb2x2ZTogUGx1Z2luc1Jlc29sdmVTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuaXNTZXR1cE5lZWRlZCQgPSB0aGlzLnBsdWdpbnNSZXNvbHZlLmFsbFBsdWdpbnNMb2FkZWQkLnBpcGUoXG4gICAgICBmaWx0ZXIobG9hZGVkID0+IGxvYWRlZCksXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy51aS5pc093bmVyT2ZBcHBsaWNhdGlvbiQoKSksXG4gICAgICBzd2l0Y2hNYXAoaXNPd25lciA9PiB7XG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIHJldHVybiBvZihbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHBlclNlcnZpY2UuZ2V0QnlJZCQoU3RlcHBlcnMuU0VUVVApO1xuICAgICAgfSksXG4gICAgICBtYXAoKHN0ZXBzOiBTZXR1cFN0ZXBbXSkgPT4gdGhpcy5nZXROb3RDb21wbGV0ZWRTZXR1cFN0ZXBzKHN0ZXBzKSksXG4gICAgICBtYXAoXG4gICAgICAgIG5vdENvbXBsZXRlZFNldHVwU3RlcHMgPT5cbiAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yY2VTZXR1cCB8fFxuICAgICAgICAgICh0aGlzLm9wdGlvbnMuaXNTZXR1cCAmJiB0aGlzLm5lZWRzU2V0dXAobm90Q29tcGxldGVkU2V0dXBTdGVwcykpXG4gICAgICApLFxuICAgICAgc3dpdGNoTWFwKHJlcXVpcmVkID0+IHRoaXMuc2V0dXBSZXF1aXJlZChyZXF1aXJlZCkpXG4gICAgKTtcbiAgfVxuXG4gIHNraXBTZXR1cCgpIHtcbiAgICB0aGlzLnNraXBTZXR1cCQubmV4dCh0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBSZXF1aXJlZChyZXF1aXJlZDogYm9vbGVhbik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGlmICghcmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBvZihyZXF1aXJlZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNraXBTZXR1cCQucGlwZShtYXAoc2tpcHBlZCA9PiAhc2tpcHBlZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBuZWVkc1NldHVwKG5vdENvbXBsZXRlZFNldHVwU3RlcHM6IFNldHVwU3RlcFtdKTogYm9vbGVhbiB7XG4gICAgbm90Q29tcGxldGVkU2V0dXBTdGVwcyA9IHRoaXMuZXhjbHVkZVNldHVwRmluaXNoU3RlcChub3RDb21wbGV0ZWRTZXR1cFN0ZXBzKTtcbiAgICBpZiAodGhpcy5oYXNQZXJtaXNzaW9uKCkpIHtcbiAgICAgIHJldHVybiBub3RDb21wbGV0ZWRTZXR1cFN0ZXBzLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIC8vIFNob3cgc2V0dXAgc2NyZWVuIGFzIHRoZXJlIGFyZSByZXF1aXJlZCBzdGVwcyBidXQgdGhlIHVzZXJcbiAgICAvLyBoYXMgbm8gcGVybWlzc2lvbi4gVGhlIFNldHVwIHNjcmVlbiB3aWxsIHNob3cgYW4gZXJyb3IgdG9cbiAgICAvLyB0aGUgdXNlci5cbiAgICByZXR1cm4gdGhpcy5oYXNSZXF1aXJlZFN0ZXBzKG5vdENvbXBsZXRlZFNldHVwU3RlcHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBleGNsdWRlU2V0dXBGaW5pc2hTdGVwKG5vdENvbXBsZXRlZFNldHVwU3RlcHM6IFNldHVwU3RlcFtdKSB7XG4gICAgcmV0dXJuIG5vdENvbXBsZXRlZFNldHVwU3RlcHMuZmlsdGVyKCh7IHNldHVwSWQgfSkgPT4gc2V0dXBJZCAhPT0gU0VUVVBfRklOSVNIRURfU1RFUF9JRCk7XG4gIH1cblxuICBwcml2YXRlIGhhc1JlcXVpcmVkU3RlcHMobm90Q29tcGxldGVkU2V0dXBTdGVwczogU2V0dXBTdGVwW10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gbm90Q29tcGxldGVkU2V0dXBTdGVwcy5zb21lKHN0ZXAgPT4gc3RlcC5yZXF1aXJlZCk7XG4gIH1cblxuICBwcml2YXRlIGhhc1Blcm1pc3Npb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGVybWlzc2lvbnMuaGFzUm9sZShORUVERURfUk9MRV9GT1JfU0VUVVApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXROb3RDb21wbGV0ZWRTZXR1cFN0ZXBzKHN0ZXBzOiBTZXR1cFN0ZXBbXSk6IFNldHVwU3RlcFtdIHtcbiAgICBpZiAoIXRoaXMudWkuY3VycmVudEFwcGxpY2F0aW9uLnZhbHVlKSB7XG4gICAgICByZXR1cm4gc3RlcHM7XG4gICAgfVxuICAgIHJldHVybiBzdGVwcy5maWx0ZXIoXG4gICAgICBzdGVwID0+XG4gICAgICAgIHN0ZXAuc2V0dXBJZCAmJlxuICAgICAgICAhKHRoaXMudWkuY3VycmVudEFwcGxpY2F0aW9uLnZhbHVlLmNvbmZpZz8uc2V0dXAgfHwgW10pLmluY2x1ZGVzKHN0ZXAuc2V0dXBJZClcbiAgICApO1xuICB9XG59XG4iXX0=
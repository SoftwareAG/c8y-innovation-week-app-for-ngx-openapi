import { Component, Input, ViewChild, ElementRef, HostListener, forwardRef, Inject, Injector, Output, EventEmitter } from '@angular/core';
import { fromEvent, merge, of } from 'rxjs';
import { distinctUntilChanged, filter, map, sample, switchMap, tap, withLatestFrom } from 'rxjs/operators';
import * as mimeDB from 'mime-db';
import { FilesService } from '../common';
import { FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { FilePickerValidators } from './file-picker-validators';
import { validateArrayElements } from '../forms';
import { gettext } from '../i18n';
import * as i0 from "@angular/core";
import * as i1 from "../common";
import * as i2 from "../forms/form-group.component";
import * as i3 from "../forms/message.directive";
import * as i4 from "../forms/messages.component";
import * as i5 from "@angular/common";
import * as i6 from "../common/icon.directive";
import * as i7 from "../common/loading.component";
import * as i8 from "../forms/extract-array-validation-errors.pipe";
import * as i9 from "../forms/filter-non-array-validation-errors.pipe";
import * as i10 from "../forms/humanize-validation-message.pipe";
import * as i11 from "../i18n/c8y-translate.pipe";
import * as i12 from "../common/bytes.pipe";
import * as i13 from "../common/generic-file-icon.pipe";
/**
 File uploader
 */
export class FilePickerFormControlComponent {
    constructor(filesService, injector) {
        this.filesService = filesService;
        this.injector = injector;
        this.maxAllowedFiles = Infinity;
        this.minRequiredFiles = 1;
        this.disableValidators = {};
        this.uploadInProgress = false;
        /** Display warning if any file dragged over the drop area has unsupported extension. */
        this.validateExtensionOnDrag = false;
        this.dropped = new EventEmitter();
        this.droppedFiles = [];
        this.disabledValidators = {
            fileMaxSize: false,
            fileNonEmpty: false,
            fileNameMaxLength: false
        };
        this.loadingMessage = gettext('Upload in progress');
        this.onChange = () => undefined;
        this.onTouched = () => undefined;
        this.onValidatorChange = () => undefined;
    }
    ngOnInit() {
        const ngControl = this.injector.get(NgControl, false);
        if (ngControl && ngControl.control) {
            this.controlInstance = ngControl.control;
        }
        else {
            /**
             * In case if component is used without utilizing ControlValueAccessor, internal control
             * instance is created, so it can still benefit from built in validators.
             * (dropped) @Output event can be used to get list of files.
             */
            this.controlInstance = new FormControl([], this.validate.bind(this));
            this.onChange = () => {
                this.controlInstance.setValue(this.droppedFiles);
            };
            this.onValidatorChange = () => {
                this.controlInstance.updateValueAndValidity();
            };
            this.onTouched = () => {
                this.controlInstance.markAsTouched();
            };
        }
        this.acceptedExts = this.filesService.extractFileExtensions(this.accept).map(t => `.${t}`);
        this.disabledValidators = { ...this.disabledValidators, ...this.disableValidators };
        this.filesService.loadBytesSizeLimit().then(sizeLimit => {
            this.fileSizeLimit = sizeLimit;
            this.onValidatorChange();
        });
    }
    ngAfterViewInit() {
        /**
         * Emits DragEvent when user drag file inside or outside viewport. Only works when type of dragged elements is 'Files'.
         */
        const draggingFilesGlobally$ = merge(fromEvent(document, 'dragenter'), fromEvent(document, 'dragleave').pipe(
        // TODO review why this specific filter is needed
        filter((e) => e.pageX === 0 && e.pageY === 0))).pipe(filter((ev) => ev.dataTransfer?.types.toString() === 'Files'), filter(() => !this.uploadInProgress));
        /**
         * Emits boolean value when file is dragged inside or outside of viewport, or file is not dragged anymore.
         */
        this.isDraggingFiles$ = merge(draggingFilesGlobally$.pipe(map(ev => ev.type === 'dragenter')), fromEvent(document, 'mouseenter').pipe(map(() => false)), fromEvent(document, 'drop').pipe(map(() => false))).pipe(distinctUntilChanged());
        /**
         * Emits boolean value after checking if dragged files match configured extensions list,
         * When dragging of file starts, get mimetypes of each file, convert them to possible extensions list
         * that may be associated with given mimetype, and then check if any of these extensions match configured
         * extensions accept list.
         */
        this.isExtensionAllowed$ = draggingFilesGlobally$.pipe(sample(this.isDraggingFiles$.pipe(filter(enlarged => enlarged))), switchMap(ev => {
            if (!this.accept) {
                return of(true);
            }
            return of(ev).pipe(map(ev => [...ev.dataTransfer.items]), map(files => files.map(file => mimeDB[file.type].extensions || ['unknown'])), map(extensionsForFiles => extensionsForFiles.every(extensionsForFile => extensionsForFile.some(ext => this.filesService.extractFileExtensions(this.accept).includes(ext)))));
        }), tap(allowed => {
            this.isExtensionAllowed = allowed;
        }));
        /**
         * If File is being dragged and extensions meets requirements, then drop-area can be enlarged.
         */
        this.isDropAreaEnlarged$ = this.isDraggingFiles$;
        this.isDraggedFileUnsupported$ = this.isDraggingFiles$.pipe(withLatestFrom(this.isExtensionAllowed$), map(([fileDragged, extAllowed]) => fileDragged && !extAllowed));
        /**
         * Emits true when file is hovering above drop-area. Only works when isDropAreaEnlarged$ also emits true.
         * This is workaround for CSS :hover pseudo-class not triggering when dragging file.
         */
        this.isDraggingOverFilePlaceholder$ = merge(fromEvent(this.filePlaceholder.nativeElement, 'dragenter'), fromEvent(this.filePlaceholder.nativeElement, 'dragleave'), fromEvent(this.filePlaceholder.nativeElement, 'drop')).pipe(filter((ev) => ev.dataTransfer?.types.toString() === 'Files'), map(ev => ev.type === 'dragenter'), withLatestFrom(this.isDropAreaEnlarged$), map(([draggingOver, dropAreaEnlarged]) => draggingOver && dropAreaEnlarged));
    }
    afterValueChanged() {
        this.onChange([...this.droppedFiles]);
        this.onTouched();
        this.dropped.emit([...this.droppedFiles]);
        this.valid = this.controlInstance.valid;
        this.errors = this.controlInstance.errors;
    }
    onDrop(e) {
        if (this.uploadInProgress) {
            return;
        }
        if (e.dataTransfer.types.toString() !== 'Files') {
            return;
        }
        const files = e.dataTransfer.files;
        if (!files?.length) {
            return;
        }
        for (let i = 0; i < files.length; i++) {
            this.droppedFiles.push(files.item(i));
        }
        this.afterValueChanged();
    }
    filesSelected(ev) {
        const inputElement = ev.target;
        const files = Array.from(inputElement.files);
        this.droppedFiles.push(...files);
        inputElement.value = null;
        this.afterValueChanged();
    }
    deleteAt(index) {
        this.droppedFiles.splice(index, 1);
        this.afterValueChanged();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    writeValue(files) {
        if (!files) {
            files = [];
        }
        this.droppedFiles = [...files];
        this.onValidatorChange();
    }
    onDragOver(e) {
        e.preventDefault();
    }
    onWindowDrop(e) {
        e.preventDefault();
    }
    validate(control) {
        let errors = {};
        if (!this.disableValidators.fileMaxSize) {
            errors = appendErrors(errors, validateArrayElements(FilePickerValidators.fileMaxSize(this.fileSizeLimit, this.filesService))(control));
        }
        if (!this.disableValidators.fileNonEmpty) {
            errors = appendErrors(errors, validateArrayElements(FilePickerValidators.fileNonEmpty(this.filesService))(control));
        }
        if (!this.disableValidators.fileNameMaxLength) {
            errors = appendErrors(errors, validateArrayElements(FilePickerValidators.fileNameMaxLength(this.filesService))(control));
        }
        if (this.accept) {
            errors = appendErrors(errors, validateArrayElements(FilePickerValidators.haveValidExtensions(this.filesService, this.accept))(control));
        }
        if (this.maxAllowedFiles) {
            errors = appendErrors(errors, FilePickerValidators.fileCountMax(this.maxAllowedFiles)(control));
        }
        if (this.minRequiredFiles) {
            errors = appendErrors(errors, FilePickerValidators.fileCountMin(this.minRequiredFiles)(control));
        }
        return Object.keys(errors).length ? errors : null;
    }
}
FilePickerFormControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilePickerFormControlComponent, deps: [{ token: i1.FilesService }, { token: Injector }], target: i0.ɵɵFactoryTarget.Component });
FilePickerFormControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FilePickerFormControlComponent, selector: "c8y-file-picker-form-control", inputs: { accept: "accept", maxAllowedFiles: "maxAllowedFiles", minRequiredFiles: "minRequiredFiles", disableValidators: "disableValidators", uploadInProgress: "uploadInProgress", uploadProgress: "uploadProgress", validateExtensionOnDrag: "validateExtensionOnDrag" }, outputs: { dropped: "dropped" }, host: { listeners: { "window:dragover": "onDragOver($event)", "window:drop": "onWindowDrop($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => FilePickerFormControlComponent),
            multi: true
        },
        {
            provide: NG_VALIDATORS,
            multi: true,
            useExisting: forwardRef(() => FilePickerFormControlComponent)
        }
    ], viewQueries: [{ propertyName: "filePlaceholder", first: true, predicate: ["filePlaceholder"], descendants: true, static: true }], ngImport: i0, template: "<c8y-form-group class=\"m-0\">\n  <div\n    class=\"file-picker-drop-zone\"\n    [class.dragging]=\"isDropAreaEnlarged$ | async\"\n    tabindex=\"0\"\n  >\n    <div\n      class=\"file-placeholder pointer\"\n      [class.drag-over]=\"isDraggingOverFilePlaceholder$ | async\"\n      #filePlaceholder\n      (drop)=\"onDrop($event)\"\n      (click)=\"!uploadInProgress && picker.click()\"\n    >\n      <div *ngIf=\"validateExtensionOnDrag && (isDraggedFileUnsupported$ | async); else defaultHint\">\n        <p class=\"form-control-static text-truncate\">\n          <i\n            class=\"text-warning m-r-4\"\n            c8yIcon=\"exclamation-triangle\"\n          ></i>\n          <span>{{ 'At least one file is of an unsupported type.' | translate }}</span>\n        </p>\n      </div>\n      <ng-template #defaultHint>\n        <div\n          class=\"hint-placeholder\"\n          *ngIf=\"!uploadInProgress\"\n        >\n          <i c8yIcon=\"upload\"></i>\n          <p>\n            <b>{{ 'Drop files here or click to browse' | translate }}</b>\n          </p>\n          <p\n            class=\"m-t-8 text-12 text-muted\"\n            *ngIf=\"accept\"\n          >\n            {{ 'Supported file types:' | translate }} {{ accept }}\n          </p>\n          <c8y-form-group>\n            <c8y-messages\n              class=\"has-error\"\n              *ngIf=\"\n                controlInstance.touched && controlInstance.errors && controlInstance.errors\n                  | filterNonArrayValidationErrors\n              \"\n            >\n              <c8y-message\n                *ngFor=\"\n                  let error of controlInstance.errors | filterNonArrayValidationErrors | keyvalue\n                \"\n              >\n                {{ error.key | humanizeValidationMessage | translate: error.value }}\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n        <div\n          class=\"d-flex d-col p-4 flex-center\"\n          *ngIf=\"uploadInProgress\"\n        >\n          <c8y-loading></c8y-loading>\n          <p class=\"m-t-auto m-b-auto m-r-8 text-center\">\n            {{ loadingMessage | translate }}\n          </p>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n  <div class=\"file-container\">\n    <ul class=\"list-group\">\n      <ng-container *ngFor=\"let file of droppedFiles; let i = index\">\n        <li class=\"list-group-item p-4 a-i-center\">\n          <div class=\"d-flex a-i-center\">\n            <i\n              class=\"icon-20 m-r-8\"\n              [c8yIcon]=\"file | fileIcon\"\n            ></i>\n            <div\n              class=\"m-r-16 text-truncate\"\n              [title]=\"file.name\"\n            >\n              {{ file.name }}\n            </div>\n            <div class=\"m-r-16 text-nowrap\">({{ file.size | bytes }})</div>\n            <div class=\"m-l-auto\">\n              <button\n                class=\"btn btn-dot btn-dot--danger\"\n                title=\"{{ 'Remove' | translate }}\"\n                [attr.aria-label]=\"'Remove' | translate\"\n                type=\"button\"\n                *ngIf=\"!uploadInProgress\"\n                (click)=\"deleteAt(i)\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </div>\n          <c8y-form-group>\n            <c8y-messages class=\"has-error\">\n              <c8y-message\n                *ngFor=\"\n                  let error of controlInstance.errors | extractArrayValidationErrors: i | keyvalue\n                \"\n              >\n                {{ error.key | humanizeValidationMessage | translate: error.value }}\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n\n          <div\n            class=\"d-block\"\n            data-cy=\"c8y-file-picker-form-control--upload-progress-bar\"\n            *ngIf=\"uploadInProgress\"\n          >\n            <div\n              class=\"progress progress-striped active\"\n              *ngIf=\"uploadProgress\"\n            >\n              <div\n                class=\"progress-bar progress-bar-info\"\n                [style.width]=\"uploadProgress[i].percentage + '%'\"\n                aria-valuenow=\"0\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                role=\"progressbar\"\n              >\n                {{ uploadProgress[i].percentage }}%\n              </div>\n            </div>\n          </div>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n  <input\n    class=\"hidden\"\n    id=\"file\"\n    type=\"file\"\n    #picker\n    (change)=\"filesSelected($event)\"\n    [accept]=\"acceptedExts\"\n    [multiple]=\"maxAllowedFiles > 1\"\n  />\n</c8y-form-group>\n", dependencies: [{ kind: "component", type: i2.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i3.MessageDirective, selector: "c8y-message", inputs: ["name", "text"] }, { kind: "component", type: i4.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i6.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "component", type: i7.LoadingComponent, selector: "c8y-loading" }, { kind: "pipe", type: i8.ExtractArrayValidationErrorsPipe, name: "extractArrayValidationErrors" }, { kind: "pipe", type: i9.FilterNonArrayValidationErrorsPipe, name: "filterNonArrayValidationErrors" }, { kind: "pipe", type: i10.HumanizeValidationMessagePipe, name: "humanizeValidationMessage" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.KeyValuePipe, name: "keyvalue" }, { kind: "pipe", type: i11.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i12.BytesPipe, name: "bytes" }, { kind: "pipe", type: i13.GenericFileIconPipe, name: "fileIcon" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilePickerFormControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-file-picker-form-control', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => FilePickerFormControlComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            multi: true,
                            useExisting: forwardRef(() => FilePickerFormControlComponent)
                        }
                    ], template: "<c8y-form-group class=\"m-0\">\n  <div\n    class=\"file-picker-drop-zone\"\n    [class.dragging]=\"isDropAreaEnlarged$ | async\"\n    tabindex=\"0\"\n  >\n    <div\n      class=\"file-placeholder pointer\"\n      [class.drag-over]=\"isDraggingOverFilePlaceholder$ | async\"\n      #filePlaceholder\n      (drop)=\"onDrop($event)\"\n      (click)=\"!uploadInProgress && picker.click()\"\n    >\n      <div *ngIf=\"validateExtensionOnDrag && (isDraggedFileUnsupported$ | async); else defaultHint\">\n        <p class=\"form-control-static text-truncate\">\n          <i\n            class=\"text-warning m-r-4\"\n            c8yIcon=\"exclamation-triangle\"\n          ></i>\n          <span>{{ 'At least one file is of an unsupported type.' | translate }}</span>\n        </p>\n      </div>\n      <ng-template #defaultHint>\n        <div\n          class=\"hint-placeholder\"\n          *ngIf=\"!uploadInProgress\"\n        >\n          <i c8yIcon=\"upload\"></i>\n          <p>\n            <b>{{ 'Drop files here or click to browse' | translate }}</b>\n          </p>\n          <p\n            class=\"m-t-8 text-12 text-muted\"\n            *ngIf=\"accept\"\n          >\n            {{ 'Supported file types:' | translate }} {{ accept }}\n          </p>\n          <c8y-form-group>\n            <c8y-messages\n              class=\"has-error\"\n              *ngIf=\"\n                controlInstance.touched && controlInstance.errors && controlInstance.errors\n                  | filterNonArrayValidationErrors\n              \"\n            >\n              <c8y-message\n                *ngFor=\"\n                  let error of controlInstance.errors | filterNonArrayValidationErrors | keyvalue\n                \"\n              >\n                {{ error.key | humanizeValidationMessage | translate: error.value }}\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n        <div\n          class=\"d-flex d-col p-4 flex-center\"\n          *ngIf=\"uploadInProgress\"\n        >\n          <c8y-loading></c8y-loading>\n          <p class=\"m-t-auto m-b-auto m-r-8 text-center\">\n            {{ loadingMessage | translate }}\n          </p>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n  <div class=\"file-container\">\n    <ul class=\"list-group\">\n      <ng-container *ngFor=\"let file of droppedFiles; let i = index\">\n        <li class=\"list-group-item p-4 a-i-center\">\n          <div class=\"d-flex a-i-center\">\n            <i\n              class=\"icon-20 m-r-8\"\n              [c8yIcon]=\"file | fileIcon\"\n            ></i>\n            <div\n              class=\"m-r-16 text-truncate\"\n              [title]=\"file.name\"\n            >\n              {{ file.name }}\n            </div>\n            <div class=\"m-r-16 text-nowrap\">({{ file.size | bytes }})</div>\n            <div class=\"m-l-auto\">\n              <button\n                class=\"btn btn-dot btn-dot--danger\"\n                title=\"{{ 'Remove' | translate }}\"\n                [attr.aria-label]=\"'Remove' | translate\"\n                type=\"button\"\n                *ngIf=\"!uploadInProgress\"\n                (click)=\"deleteAt(i)\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </div>\n          <c8y-form-group>\n            <c8y-messages class=\"has-error\">\n              <c8y-message\n                *ngFor=\"\n                  let error of controlInstance.errors | extractArrayValidationErrors: i | keyvalue\n                \"\n              >\n                {{ error.key | humanizeValidationMessage | translate: error.value }}\n              </c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n\n          <div\n            class=\"d-block\"\n            data-cy=\"c8y-file-picker-form-control--upload-progress-bar\"\n            *ngIf=\"uploadInProgress\"\n          >\n            <div\n              class=\"progress progress-striped active\"\n              *ngIf=\"uploadProgress\"\n            >\n              <div\n                class=\"progress-bar progress-bar-info\"\n                [style.width]=\"uploadProgress[i].percentage + '%'\"\n                aria-valuenow=\"0\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                role=\"progressbar\"\n              >\n                {{ uploadProgress[i].percentage }}%\n              </div>\n            </div>\n          </div>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n  <input\n    class=\"hidden\"\n    id=\"file\"\n    type=\"file\"\n    #picker\n    (change)=\"filesSelected($event)\"\n    [accept]=\"acceptedExts\"\n    [multiple]=\"maxAllowedFiles > 1\"\n  />\n</c8y-form-group>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FilesService }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }]; }, propDecorators: { filePlaceholder: [{
                type: ViewChild,
                args: ['filePlaceholder', { static: true }]
            }], accept: [{
                type: Input
            }], maxAllowedFiles: [{
                type: Input
            }], minRequiredFiles: [{
                type: Input
            }], disableValidators: [{
                type: Input
            }], uploadInProgress: [{
                type: Input
            }], uploadProgress: [{
                type: Input
            }], validateExtensionOnDrag: [{
                type: Input
            }], dropped: [{
                type: Output
            }], onDragOver: [{
                type: HostListener,
                args: ['window:dragover', ['$event']]
            }], onWindowDrop: [{
                type: HostListener,
                args: ['window:drop', ['$event']]
            }] } });
function appendErrors(errors, newErrors) {
    return newErrors ? { ...errors, ...newErrors } : errors;
}
//# sourceMappingURL=data:application/json;base64,
import { Component, Attribute, HostBinding } from '@angular/core';
import { AlertService } from './alert.service';
import { AlertOutletBase } from './alert-outlet-base';
import * as i0 from "@angular/core";
import * as i1 from "./alert.service";
import * as i2 from "../common/icon.directive";
import * as i3 from "@angular/common";
import * as i4 from "../i18n/c8y-translate.pipe";
/**
 * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
 *
 * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
 *
 * ## Example:
 * ```html
 *  <div class="alerts">
 *    <c8y-alert-outlet></c8y-alert-outlet>
 *  </div>
 * ```
 */
export class AlertOutletComponent extends AlertOutletBase {
    /**
     * The array of current alerts.
     */
    get alerts() {
        return this.alertService.state$;
    }
    /**
     * @ignore
     */
    constructor(position, alertService) {
        super(alertService);
        this.position = position;
        this.alertService = alertService;
        /**
         * @ignore
         */
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    /**
     * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
     */
    getClass(alert) {
        const classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push(`alert-${alert.type}`);
        return classes.join(' ');
    }
    /**
     * Executes alert’s onClose method, if provided, and closes the alert.
     * @param alert The alert which will be closed.
     */
    close(alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    }
}
AlertOutletComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertOutletComponent, deps: [{ token: 'position', attribute: true }, { token: i1.AlertService }], target: i0.ɵɵFactoryTarget.Component });
AlertOutletComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AlertOutletComponent, selector: "c8y-alert-outlet", host: { properties: { "class.static": "this.isStatic" } }, usesInheritance: true, ngImport: i0, template: "<div\n  class=\"alert animated fadeInRightBig m-t-16\"\n  data-cy=\"c8y-alert--message\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [textContent]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i c8yIcon=\"chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i c8yIcon=\"chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [textContent]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertOutletComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-alert-outlet', template: "<div\n  class=\"alert animated fadeInRightBig m-t-16\"\n  data-cy=\"c8y-alert--message\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [textContent]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i c8yIcon=\"chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted m-t-8\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i c8yIcon=\"chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [textContent]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['position']
                }] }, { type: i1.AlertService }]; }, propDecorators: { isStatic: [{
                type: HostBinding,
                args: ['class.static']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYWxlcnQvYWxlcnQtb3V0bGV0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL2NvcmUvYWxlcnQvYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7QUFFdEQ7Ozs7Ozs7Ozs7O0dBV0c7QUFLSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZUFBZTtJQUt2RDs7T0FFRztJQUNILElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsWUFBMkMsUUFBZ0IsRUFBUyxZQUEwQjtRQUM1RixLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFEcUIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFTLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBYjlGOztXQUVHO1FBQzBCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFZNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUM3QyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxRQUFRLENBQUMsS0FBWTtRQUNuQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLEtBQVk7UUFDaEIsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O2lIQXRDVSxvQkFBb0Isa0JBY1IsVUFBVTtxR0FkdEIsb0JBQW9CLDBJQ3RCakMsMmxEQXFDQTsyRkRmYSxvQkFBb0I7a0JBSmhDLFNBQVM7K0JBQ0Usa0JBQWtCOzswQkFpQmYsU0FBUzsyQkFBQyxVQUFVO3VFQVZKLFFBQVE7c0JBQXBDLFdBQVc7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQXR0cmlidXRlLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICcuL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4vYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZXJ0T3V0bGV0QmFzZSB9IGZyb20gJy4vYWxlcnQtb3V0bGV0LWJhc2UnO1xuXG4vKipcbiAqIEFsZXJ0IG91dGxldCBjb21wb25lbnQgc2hvd3MgYWxsIGFkZGVkIGFsZXJ0cy4gSXQgaXMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24ncyBgYzh5LWJvb3RzdHJhcGAgY29tcG9uZW50LlxuICpcbiAqIEZvciBhcHBsaWNhdGlvbnMgd2hpY2ggZG9u4oCZdCB1c2UgYGM4eS1ib290c3RyYXBgIGNvbXBvbmVudCBidXQgd2FudCB0byBkaXNwbGF5IGFsZXJ0cyB2aWEgQWxlcnRTZXJ2aWNlLCBhIGM4eS1hbGVydC1vdXRsZXQgY29tcG9uZW50IG5lZWRzIHRvIGJlIGFkZGVkIGV4cGxpY2l0bHkgaW4gdGhlIHRlbXBsYXRlLlxuICpcbiAqICMjIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiAgPGRpdiBjbGFzcz1cImFsZXJ0c1wiPlxuICogICAgPGM4eS1hbGVydC1vdXRsZXQ+PC9jOHktYWxlcnQtb3V0bGV0PlxuICogIDwvZGl2PlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hbGVydC1vdXRsZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBbGVydE91dGxldENvbXBvbmVudCBleHRlbmRzIEFsZXJ0T3V0bGV0QmFzZSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnN0YXRpYycpIGlzU3RhdGljID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgYXJyYXkgb2YgY3VycmVudCBhbGVydHMuXG4gICAqL1xuICBnZXQgYWxlcnRzKCk6IEJlaGF2aW9yU3ViamVjdDxBbGVydFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuYWxlcnRTZXJ2aWNlLnN0YXRlJDtcbiAgfVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29uc3RydWN0b3IoQEF0dHJpYnV0ZSgncG9zaXRpb24nKSBwcml2YXRlIHBvc2l0aW9uOiBzdHJpbmcsIHB1YmxpYyBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSkge1xuICAgIHN1cGVyKGFsZXJ0U2VydmljZSk7XG4gICAgdGhpcy5pc1N0YXRpYyA9IHRoaXMucG9zaXRpb24gPT09ICdzdGF0aWMnO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ1NTIGNsYXNzIGZvciBhbiBhbGVydCBkZXBlbmRpbmcgb24gaXRzIHR5cGUgdG8gc3R5bGUgdGhlIGNvcnJlc3BvbmRpbmcgYWxlcnQgY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0Q2xhc3MoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGlmIChhbGVydC50eXBlICE9PSAnZGFuZ2VyJykge1xuICAgICAgY2xhc3Nlcy5wdXNoKCdpbnRlcmFjdCcpO1xuICAgIH1cbiAgICBjbGFzc2VzLnB1c2goYGFsZXJ0LSR7YWxlcnQudHlwZX1gKTtcbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGFsZXJ04oCZcyBvbkNsb3NlIG1ldGhvZCwgaWYgcHJvdmlkZWQsIGFuZCBjbG9zZXMgdGhlIGFsZXJ0LlxuICAgKiBAcGFyYW0gYWxlcnQgVGhlIGFsZXJ0IHdoaWNoIHdpbGwgYmUgY2xvc2VkLlxuICAgKi9cbiAgY2xvc2UoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgaWYgKGFsZXJ0Lm9uQ2xvc2UpIHtcbiAgICAgIGFsZXJ0Lm9uQ2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5hbGVydFNlcnZpY2UucmVtb3ZlKGFsZXJ0KTtcbiAgfVxufVxuIiwiPGRpdlxuICBjbGFzcz1cImFsZXJ0IGFuaW1hdGVkIGZhZGVJblJpZ2h0QmlnIG0tdC0xNlwiXG4gIGRhdGEtY3k9XCJjOHktYWxlcnQtLW1lc3NhZ2VcIlxuICAqbmdGb3I9XCJsZXQgYWxlcnQgb2YgYWxlcnRzIHwgYXN5bmNcIlxuICBbbmdDbGFzc109XCJbZ2V0Q2xhc3MoYWxlcnQpLCBpc0RldGFpbHNTaG93KGFsZXJ0KSA/ICdleHBhbmRlZCcgOiAnJ11cIlxuPlxuICA8YnV0dG9uIHRpdGxlPVwie3sgJ0Nsb3NlJyB8IHRyYW5zbGF0ZSB9fVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgKGNsaWNrKT1cImNsb3NlKGFsZXJ0KVwiPlxuICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+e3sgJ0Nsb3NlJyB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj5cbiAgPC9idXR0b24+XG5cbiAgPGRpdiAqbmdJZj1cIiFpc1RlbXBsYXRlUmVmKGFsZXJ0LnRleHQpOyBlbHNlIHRlbXBsYXRlKGFsZXJ0LnRleHQpXCI+XG4gICAgPHN0cm9uZyAqbmdJZj1cIiFhbGVydC5hbGxvd0h0bWxcIiBbdGV4dENvbnRlbnRdPVwiYWxlcnQudGV4dCB8IHRyYW5zbGF0ZVwiIGNsYXNzPVwibWVzc2FnZVwiPjwvc3Ryb25nPlxuICAgIDxzdHJvbmcgKm5nSWY9XCJhbGVydC5hbGxvd0h0bWxcIiBbaW5uZXJIVE1MXT1cImFsZXJ0LnRleHQgfCB0cmFuc2xhdGVcIiBjbGFzcz1cIm1lc3NhZ2VcIj48L3N0cm9uZz5cbiAgPC9kaXY+XG4gIDxwICpuZ0lmPVwiaGFzRGV0YWlscyhhbGVydCkgJiYgIWlzRGV0YWlsc1Nob3coYWxlcnQpXCIgY2xhc3M9XCJ0ZXh0LW11dGVkIG0tdC04XCI+XG4gICAgPGJ1dHRvblxuICAgICAgdGl0bGU9XCJ7eyAnU2hvdyBkZXRhaWxzJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICBjbGFzcz1cImJ0biBidG4tY2xlYW5cIlxuICAgICAgKGNsaWNrKT1cInNob3dEZXRhaWxzKGFsZXJ0KVwiXG4gICAgPlxuICAgICAgPGkgYzh5SWNvbj1cImNoZXZyb24tZG93blwiPjwvaT5cbiAgICAgIHt7ICdTaG93IGRldGFpbHMnIHwgdHJhbnNsYXRlIH19XG4gICAgPC9idXR0b24+XG4gIDwvcD5cbiAgPHAgKm5nSWY9XCJoYXNEZXRhaWxzKGFsZXJ0KSAmJiBpc0RldGFpbHNTaG93KGFsZXJ0KVwiIGNsYXNzPVwidGV4dC1tdXRlZCBtLXQtOFwiPlxuICAgIDxidXR0b24gdGl0bGU9XCJ7eyAnSGlkZSBkZXRhaWxzJyB8IHRyYW5zbGF0ZSB9fVwiIGNsYXNzPVwiYnRuIGJ0bi1jbGVhblwiIChjbGljayk9XCJjbG9zZURldGFpbHMoKVwiPlxuICAgICAgPGkgYzh5SWNvbj1cImNoZXZyb24tdXBcIj48L2k+XG4gICAgICB7eyAnSGlkZSBkZXRhaWxzJyB8IHRyYW5zbGF0ZSB9fVxuICAgIDwvYnV0dG9uPlxuICA8L3A+XG4gIDxkaXYgKm5nSWY9XCJpc0RldGFpbHNTaG93KGFsZXJ0KVwiPlxuICAgIDxkaXYgKm5nSWY9XCIhaXNUZW1wbGF0ZVJlZihkZXRhaWxEaXNwbGF5ZWRBbGVydC5jb250ZW50cyk7IGVsc2UgdGVtcGxhdGUoYWxlcnQuZGV0YWlsZWREYXRhKVwiPlxuICAgICAgPHByZT48Y29kZSBbdGV4dENvbnRlbnRdPVwiZGV0YWlsRGlzcGxheWVkQWxlcnQuY29udGVudHMgfCB0cmFuc2xhdGVcIj48L2NvZGU+PC9wcmU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=
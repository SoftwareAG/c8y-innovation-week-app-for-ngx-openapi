import { Component, Input, ViewChild, ContentChild } from '@angular/core';
import { AlertService } from './alert.service';
import { AlertDetailsComponent } from './alert-details.component';
import * as i0 from "@angular/core";
import * as i1 from "./alert.service";
/**
 * Alert component allows creating alert with complex view.
 */
export class AlertComponent {
    /**
     * @ignore
     */
    constructor(alertService) {
        this.alertService = alertService;
    }
    /**
     * AlertComponent adds new alert to collection stored in alertService after view init.
     */
    ngAfterViewInit() {
        if (!this.containDetailsComponent) {
            this.detailedData = null;
        }
        this.viewInitTimeout = setTimeout(() => this.alertService.add(this));
    }
    /**
     * AlertComponent removes alert from collection stored in alertService on destroy component.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.alertService.remove(this);
    }
}
AlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertComponent, deps: [{ token: i1.AlertService }], target: i0.ɵɵFactoryTarget.Component });
AlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AlertComponent, selector: "c8y-alert", inputs: { type: "type", onDetail: "onDetail", onClose: "onClose" }, queries: [{ propertyName: "containDetailsComponent", first: true, predicate: AlertDetailsComponent, descendants: true }], viewQueries: [{ propertyName: "detailedData", first: true, predicate: ["detailedData"], descendants: true }, { propertyName: "text", first: true, predicate: ["text"], descendants: true }], ngImport: i0, template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-alert', template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>" }]
        }], ctorParameters: function () { return [{ type: i1.AlertService }]; }, propDecorators: { type: [{
                type: Input
            }], onDetail: [{
                type: Input
            }], onClose: [{
                type: Input
            }], detailedData: [{
                type: ViewChild,
                args: ['detailedData', { static: false }]
            }], text: [{
                type: ViewChild,
                args: ['text', { static: false }]
            }], containDetailsComponent: [{
                type: ContentChild,
                args: [AlertDetailsComponent, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9hbGVydC9hbGVydC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2FsZXJ0L2FsZXJ0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWEsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFFbEU7O0dBRUc7QUFNSCxNQUFNLE9BQU8sY0FBYztJQStCekI7O09BRUc7SUFDSCxZQUFtQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7SUFFakQ7O09BRUc7SUFDSCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVztRQUNULFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7MkdBcERVLGNBQWM7K0ZBQWQsY0FBYywwS0F3QlgscUJBQXFCLDZPQ3JDckMsNE9BTWM7MkZET0QsY0FBYztrQkFKMUIsU0FBUzsrQkFDRSxXQUFXO21HQU9aLElBQUk7c0JBQVosS0FBSztnQkFJRyxRQUFRO3NCQUFoQixLQUFLO2dCQUlHLE9BQU87c0JBQWYsS0FBSztnQkFJd0MsWUFBWTtzQkFBekQsU0FBUzt1QkFBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dCQUlOLElBQUk7c0JBQXpDLFNBQVM7dUJBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQkFLcEMsdUJBQXVCO3NCQUR0QixZQUFZO3VCQUFDLHFCQUFxQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25EZXN0cm95LCBJbnB1dCwgVmlld0NoaWxkLCBDb250ZW50Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAnLi9hbGVydC5tb2RlbCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuL2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnREZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi9hbGVydC1kZXRhaWxzLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQWxlcnQgY29tcG9uZW50IGFsbG93cyBjcmVhdGluZyBhbGVydCB3aXRoIGNvbXBsZXggdmlldy5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWxlcnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWxlcnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFsZXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBBbGVydCB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgYWxlcnQuXG4gICAqL1xuICBASW5wdXQoKSB0eXBlOiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZGFuZ2VyJyB8ICdpbmZvJyB8ICdzeXN0ZW0nO1xuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2FsbCBpZiB1c2VyIGNsaWNrcyBvbiB0aGUgZGV0YWlsIGJ1dHRvbi5cbiAgICovXG4gIEBJbnB1dCgpIG9uRGV0YWlsOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2FsbCBpZiB1c2VyIGNsaWNrcyBvbiB0aGUgY2xvc2UgYnV0dG9uLlxuICAgKi9cbiAgQElucHV0KCkgb25DbG9zZTogKCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIERldGFpbGVkIGluZm9ybWF0aW9uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBAVmlld0NoaWxkKCdkZXRhaWxlZERhdGEnLCB7IHN0YXRpYzogZmFsc2UgfSkgZGV0YWlsZWREYXRhO1xuICAvKipcbiAgICogVGhlIHRleHQgdGVtcGxhdGVSZWYgdG8gZGlzcGxheSBtZXNzYWdlLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgndGV4dCcsIHsgc3RhdGljOiBmYWxzZSB9KSB0ZXh0O1xuICAvKipcbiAgICogQ29udGVudCBvZiBBbGVydERldGFpbHNDb21wb25lbnQgaXMgZGlzcGxheWVkIGFzIGFsZXJ0RGV0YWlscy5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoQWxlcnREZXRhaWxzQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgY29udGFpbkRldGFpbHNDb21wb25lbnQ6IEFsZXJ0RGV0YWlsc0NvbXBvbmVudDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHByaXZhdGUgdmlld0luaXRUaW1lb3V0O1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIEFsZXJ0Q29tcG9uZW50IGFkZHMgbmV3IGFsZXJ0IHRvIGNvbGxlY3Rpb24gc3RvcmVkIGluIGFsZXJ0U2VydmljZSBhZnRlciB2aWV3IGluaXQuXG4gICAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRhaW5EZXRhaWxzQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLmRldGFpbGVkRGF0YSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMudmlld0luaXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmFsZXJ0U2VydmljZS5hZGQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsZXJ0Q29tcG9uZW50IHJlbW92ZXMgYWxlcnQgZnJvbSBjb2xsZWN0aW9uIHN0b3JlZCBpbiBhbGVydFNlcnZpY2Ugb24gZGVzdHJveSBjb21wb25lbnQuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy52aWV3SW5pdFRpbWVvdXQpO1xuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgfVxufVxuIiwiPG5nLXRlbXBsYXRlICN0ZXh0PlxyXG4gIDxuZy1jb250ZW50IHNlbGVjdD1cImM4eS1hbGVydC10ZXh0XCI+PC9uZy1jb250ZW50PlxyXG4gIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuPC9uZy10ZW1wbGF0ZT5cclxuPG5nLXRlbXBsYXRlICNkZXRhaWxlZERhdGE+XHJcbiAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiYzh5LWFsZXJ0LWRldGFpbHNcIj48L25nLWNvbnRlbnQ+XHJcbjwvbmctdGVtcGxhdGU+Il19
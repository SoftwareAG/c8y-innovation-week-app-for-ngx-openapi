import { BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { StateService } from '../common/state-service.abstract';
import { gettext } from '../i18n/gettext';
import { isEqual } from 'lodash-es';
import * as i0 from "@angular/core";
/**
 * A service which allows to display alerts.
 */
export class AlertService extends StateService {
    constructor() {
        super(...arguments);
        /**
         * @ignore
         */
        this.state$ = new BehaviorSubject([]);
        this.MAX_ALERTS = 3;
        this.ALERT_TIMEOUT = 3000;
    }
    /**
     * Returns all alerts.
     * @readonly
     */
    get state() {
        return this.state$.value;
    }
    /**
     * Adds a new alert to the current state.
     */
    add(alert) {
        this.addAlert(alert);
    }
    /**
     * Adds a alert by text.
     */
    addByText(type, txt, detailedData) {
        this.addAlert({ text: txt, type, detailedData });
    }
    /**
     * Returns all alerts.
     * @deprecated Use alertService.alerts instead.
     */
    list() {
        return this.state;
    }
    /**
     * Remove an alert from the current state.
     */
    remove(alert) {
        this.changeAlerts(this.state.filter(item => !this.areSame(alert, item)));
    }
    /**
     * Updates matching alert with provided values.
     */
    update(alert, fieldsToUpdate) {
        this.changeAlerts(this.state.map(item => {
            if (this.areSame(alert, item)) {
                Object.assign(item, fieldsToUpdate);
            }
            return item;
        }));
    }
    /**
     * Removes last danger alert.
     * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.
     *
     * ```js
     *  try {
     *    // something that might throw a danger server msg
     *  } catch (ex) {
     *   this.alertService.removeLastDanger();
     *  }
     * ```
     */
    removeLastDanger() {
        const firstDangerAlert = this.state.reverse().find(({ type }) => type === 'danger');
        this.changeAlerts(this.state.filter(alert => alert !== firstDangerAlert));
    }
    /**
     * Shorthand for a save successful alert.
     * @param savedObject The object which was saved.
     * @return A function that can be executed to show the msg.
     */
    saveSuccess(savedObject) {
        return () => {
            const text = `${savedObject} saved successfully`;
            this.addByText('success', text);
        };
    }
    /**
     * Shorthand for a create successful alert.
     * @param createdObject The object which was created.
     * @return A function that can be executed to show the msg.
     */
    createSuccess(createdObject) {
        return () => {
            const text = `${createdObject} created successfully`;
            this.addByText('success', text);
        };
    }
    /**
     * Clears all alerts.
     */
    clearAll() {
        this.changeAlerts([]);
    }
    /**
     * A shorthand to display a simple success message.
     * @param text The success text.
     * @param detailedData The text with additional information.
     */
    success(text, detailedData) {
        this.addByText('success', text, detailedData);
    }
    /**
     * A shorthand to display a simple danger message.
     * @param text The danger text.
     * @param detailedData The text with additional information.
     */
    danger(text, detailedData) {
        this.addByText('danger', text, detailedData);
    }
    /**
     * A shorthand to display a simple info message.
     * @param text The info text.
     * @param detailedData The text with additional information.
     */
    info(text, detailedData) {
        this.addByText('info', text, detailedData);
    }
    /**
     * A shorthand to display a simple warning message.
     * @param text The warning text.
     * @param detailedData The text with additional information.
     */
    warning(text, detailedData) {
        this.addByText('warning', text, detailedData);
    }
    /**
     * Creates alert from standard api errors.
     * Should be used for errors generated by @c8y/client services.
     * @param {IResult}  error The error from server.
     * @param {alertType} type The type of alert.
     */
    addServerFailure(error, type = 'danger') {
        const { data, res } = error;
        let text = data?.message || null;
        let detailedData;
        if (data) {
            if (typeof data === 'object') {
                detailedData = data.exceptionMessage;
            }
            else if (typeof data === 'string') {
                detailedData = data;
            }
        }
        const hasRelevantMessage = !!(text || detailedData);
        if (!text) {
            text = gettext('A server error occurred.');
        }
        if (res && !hasRelevantMessage) {
            detailedData = {
                status: res.status,
                statusText: res.statusText,
                url: res.url
            };
        }
        this.addAlert({
            type,
            text,
            detailedData
        });
    }
    /**
     * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.
     * Callbacks are same if they refer to the same function.
     */
    areSame(alert1, alert2) {
        return (alert1.text === alert2.text &&
            alert1.type === alert2.type &&
            isEqual(alert1.detailedData, alert2.detailedData) &&
            alert1.onClose === alert2.onClose &&
            alert1.onDetail === alert2.onDetail);
    }
    changeAlerts(newAlerts) {
        this.state$.next(newAlerts);
    }
    addAlert(alert) {
        if (!alert.text && !alert.type) {
            throw new Error('Cannot add empty alert');
        }
        const alertAlreadyAdded = this.state.find(item => this.areSame(alert, item));
        if (alertAlreadyAdded) {
            return;
        }
        this.changeAlerts([...this.state, alert]);
        this.hideAutomaticallyIfNeeded(alert);
        this.removeOldestIfMax();
    }
    hideAutomaticallyIfNeeded(alert) {
        const isSuccess = alert.type === 'success';
        const noDetails = !alert.detailedData;
        let alertTimeout = isSuccess && noDetails ? this.ALERT_TIMEOUT : 0;
        if (typeof alert.timeout !== 'undefined') {
            alertTimeout = alert.timeout;
        }
        if (alertTimeout) {
            setTimeout(() => this.remove(alert), alertTimeout);
        }
    }
    removeOldestIfMax() {
        if (this.state.length > this.MAX_ALERTS) {
            const [, ...firstRemoved] = this.state;
            this.changeAlerts(firstRemoved);
        }
    }
}
AlertService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
AlertService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AlertService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { Output, EventEmitter, Component, Input, forwardRef } from '@angular/core';
import { CheckboxControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ElementRef, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../i18n/c8y-translate.directive";
import * as i2 from "@angular/common";
/**
 * A component to display checkboxes in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-checkbox></c8y-li-checkbox>
 * </c8y-li>
 * ```
 */
export class ListItemCheckboxComponent extends CheckboxControlValueAccessor {
    constructor(renderer, elementRef) {
        super(renderer, elementRef);
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * Indicates if the checkbox is selected.
         */
        this.selected = false;
        /**
         * Indicates if the checkbox is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the checkbox is selected.
         */
        this.onSelect = new EventEmitter();
        this.displayAsSwitch = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Selects the checkbox.
     * @param value The value to pass.
     */
    select(value) {
        this.onSelect.emit(value);
        this.onChange(value);
        this.selected = value;
    }
    // default implementation (https://github.com/angular/angular/blob/main/packages/forms/src/directives/checkbox_value_accessor.ts#L54) not sufficient.
    // get overruled by our binding on checked..
    writeValue(value) {
        this.selected = value;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
ListItemCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemCheckboxComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
ListItemCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ListItemCheckboxComponent, selector: "c8y-list-item-checkbox, c8y-li-checkbox", inputs: { selected: "selected", disabled: "disabled", displayAsSwitch: "displayAsSwitch" }, outputs: { onSelect: "onSelect" }, host: { classAttribute: "c8y-list__item__check" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => ListItemCheckboxComponent)
        }
    ], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<label [ngClass]=\"displayAsSwitch ? 'c8y-switch c8y-switch--inline' : 'c8y-checkbox'\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n  <span class=\"sr-only\" translate>event</span>\n</label>\n<ng-content></ng-content>\n", dependencies: [{ kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-list-item-checkbox, c8y-li-checkbox', host: {
                        class: 'c8y-list__item__check'
                    }, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => ListItemCheckboxComponent)
                        }
                    ], template: "<label [ngClass]=\"displayAsSwitch ? 'c8y-switch c8y-switch--inline' : 'c8y-checkbox'\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n  <span class=\"sr-only\" translate>event</span>\n</label>\n<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { selected: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], displayAsSwitch: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1ncm91cC9saXN0LWl0ZW0tY2hlY2tib3guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vY29yZS9saXN0LWdyb3VwL2xpc3QtaXRlbS1jaGVja2JveC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFFdEQ7Ozs7Ozs7Ozs7R0FVRztBQWVILE1BQU0sT0FBTyx5QkFBMEIsU0FBUSw0QkFBNEI7SUFtQnpFLFlBQW9CLFFBQW1CLEVBQVUsVUFBc0I7UUFDckUsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQURWLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBbEJ2RTs7V0FFRztRQUVILGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakI7O1dBRUc7UUFFSCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCOztXQUVHO1FBRUgsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFOUIsb0JBQWUsR0FBRyxLQUFLLENBQUM7SUFJakMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO1lBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEtBQUs7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxxSkFBcUo7SUFDckosNENBQTRDO0lBQzVDLFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztJQUM3QixDQUFDOztzSEFsRFUseUJBQXlCOzBHQUF6Qix5QkFBeUIsb1BBUnpCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLEtBQUssRUFBRSxJQUFJO1lBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztTQUN6RDtLQUNGLHNFQzNCSCx5WEFZQTsyRkRpQmEseUJBQXlCO2tCQWRyQyxTQUFTOytCQUNFLHlDQUF5QyxRQUU3Qzt3QkFDSixLQUFLLEVBQUUsdUJBQXVCO3FCQUMvQixhQUNVO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLEtBQUssRUFBRSxJQUFJOzRCQUNYLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDO3lCQUN6RDtxQkFDRjt5SEFPRCxRQUFRO3NCQURQLEtBQUs7Z0JBTU4sUUFBUTtzQkFEUCxLQUFLO2dCQU1OLFFBQVE7c0JBRFAsTUFBTTtnQkFHRSxlQUFlO3NCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudCwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gZGlzcGxheSBjaGVja2JveGVzIGluIGEgYzh5LWxpLiBVc2UgaXQgd2l0aCBjb250ZW50IHByb2plY3Rpb24uIEl0XG4gKiBjYW4gYmUgdXNlZCBzdGFuZGFsb25lIG9yIHdpdGggYW4gbmdNb2RlbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1saT5cbiAqICAgPGM4eS1saS1jaGVja2JveD48L2M4eS1saS1jaGVja2JveD5cbiAqIDwvYzh5LWxpPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWl0ZW0tY2hlY2tib3gsIGM4eS1saS1jaGVja2JveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LWl0ZW0tY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdjOHktbGlzdF9faXRlbV9fY2hlY2snXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMaXN0SXRlbUNoZWNrYm94Q29tcG9uZW50KVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0SXRlbUNoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNoZWNrYm94IGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgY2hlY2tib3ggaXMgZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBkaXNhYmxlZCA9IGZhbHNlO1xuICAvKipcbiAgICogQW4gZXZlbnQgZW1pdHRlZCBhcyBzb29uIGFzIHRoZSBjaGVja2JveCBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBvblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBASW5wdXQoKSBkaXNwbGF5QXNTd2l0Y2ggPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKHJlbmRlcmVyLCBlbGVtZW50UmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuc2VsZWN0ZWQgJiYgIWNoYW5nZXMuc2VsZWN0ZWQuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TZWxlY3QuZW1pdChjaGFuZ2VzLnNlbGVjdGVkLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIGNoZWNrYm94LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MuXG4gICAqL1xuICBzZWxlY3QodmFsdWUpIHtcbiAgICB0aGlzLm9uU2VsZWN0LmVtaXQodmFsdWUpO1xuICAgIHRoaXMub25DaGFuZ2UodmFsdWUpO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi9tYWluL3BhY2thZ2VzL2Zvcm1zL3NyYy9kaXJlY3RpdmVzL2NoZWNrYm94X3ZhbHVlX2FjY2Vzc29yLnRzI0w1NCkgbm90IHN1ZmZpY2llbnQuXG4gIC8vIGdldCBvdmVycnVsZWQgYnkgb3VyIGJpbmRpbmcgb24gY2hlY2tlZC4uXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gdmFsdWU7XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxufVxuIiwiPGxhYmVsIFtuZ0NsYXNzXT1cImRpc3BsYXlBc1N3aXRjaCA/ICdjOHktc3dpdGNoIGM4eS1zd2l0Y2gtLWlubGluZScgOiAnYzh5LWNoZWNrYm94J1wiPlxuICA8aW5wdXRcbiAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgIFtjaGVja2VkXT1cInNlbGVjdGVkXCJcbiAgICAoY2hhbmdlKT1cInNlbGVjdCgkZXZlbnQudGFyZ2V0LmNoZWNrZWQpOyAoZmFsc2UpXCJcbiAgLz5cbiAgPHNwYW4+PC9zcGFuPlxuICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIiB0cmFuc2xhdGU+ZXZlbnQ8L3NwYW4+XG48L2xhYmVsPlxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19
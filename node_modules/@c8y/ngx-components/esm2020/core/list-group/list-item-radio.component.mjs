import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../i18n/c8y-translate.directive";
/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
export class ListItemRadioComponent {
    constructor() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    /**
     * Resets the native radio element.
     */
    reset() {
        this.radio.nativeElement.checked = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    change(checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * Registers an onChange event.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers an onTouch event.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @ignore
     */
    writeValue(value) {
        this.model = value;
    }
}
ListItemRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemRadioComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ListItemRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ListItemRadioComponent, selector: "c8y-list-item-radio, c8y-li-radio", inputs: { selected: "selected", name: "name", disabled: "disabled", value: "value" }, outputs: { onSelect: "onSelect" }, host: { classAttribute: "c8y-list__item__radio" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => ListItemRadioComponent)
        }
    ], viewQueries: [{ propertyName: "radio", first: true, predicate: ["radio"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    id=\"event\"\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n  <span for=\"event\" class=\"sr-only\" translate>event</span>\n</label>\n<ng-content></ng-content>\n", dependencies: [{ kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemRadioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-list-item-radio, c8y-li-radio', host: {
                        class: 'c8y-list__item__radio'
                    }, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => ListItemRadioComponent)
                        }
                    ], template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    id=\"event\"\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n  <span for=\"event\" class=\"sr-only\" translate>event</span>\n</label>\n<ng-content></ng-content>\n" }]
        }], propDecorators: { radio: [{
                type: ViewChild,
                args: ['radio', { static: true }]
            }], selected: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbGlzdC1ncm91cC9saXN0LWl0ZW0tcmFkaW8uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vY29yZS9saXN0LWdyb3VwL2xpc3QtaXRlbS1yYWRpby5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixTQUFTLEVBQ1QsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRXpFOzs7Ozs7Ozs7O0dBVUc7QUFlSCxNQUFNLE9BQU8sc0JBQXNCO0lBZG5DO1FBbUJFOztXQUVHO1FBRUgsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQjs7V0FFRztRQUVILFNBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUN6Qjs7V0FFRztRQUVILGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakI7O1dBRUc7UUFFSCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztLQXFFeEM7SUFuREM7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7WUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsT0FBTztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FBQyxFQUFPO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7O21IQTVGVSxzQkFBc0I7dUdBQXRCLHNCQUFzQix3T0FSdEI7UUFDVDtZQUNFLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsS0FBSyxFQUFFLElBQUk7WUFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDO1NBQ3REO0tBQ0YsNkpDbkNILDhWQWNBOzJGRHVCYSxzQkFBc0I7a0JBZGxDLFNBQVM7K0JBQ0UsbUNBQW1DLFFBRXZDO3dCQUNKLEtBQUssRUFBRSx1QkFBdUI7cUJBQy9CLGFBQ1U7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsS0FBSyxFQUFFLElBQUk7NEJBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUM7eUJBQ3REO3FCQUNGOzhCQU1xQyxLQUFLO3NCQUExQyxTQUFTO3VCQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBS3BDLFFBQVE7c0JBRFAsS0FBSztnQkFNTixJQUFJO3NCQURILEtBQUs7Z0JBTU4sUUFBUTtzQkFEUCxLQUFLO2dCQU1OLFFBQVE7c0JBRFAsTUFBTTtnQkFLRSxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkLFxuICBmb3J3YXJkUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIGRpc3BsYXkgYSByYWRpbyBidXR0b24gaW4gYSBjOHktbGkuIFVzZSBpdCB3aXRoIGNvbnRlbnQgcHJvamVjdGlvbi4gSXRcbiAqIGNhbiBiZSB1c2VkIHN0YW5kYWxvbmUgb3Igd2l0aCBhbiBuZ01vZGVsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8Yzh5LWxpPlxuICogICA8Yzh5LWxpLXJhZGlvPjwvYzh5LWxpLXJhZGlvPlxuICogPC9jOHktbGk+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWxpc3QtaXRlbS1yYWRpbywgYzh5LWxpLXJhZGlvJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtaXRlbS1yYWRpby5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2M4eS1saXN0X19pdGVtX19yYWRpbydcbiAgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IExpc3RJdGVtUmFkaW9Db21wb25lbnQpXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExpc3RJdGVtUmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBAVmlld0NoaWxkKCdyYWRpbycsIHsgc3RhdGljOiB0cnVlIH0pIHJhZGlvOiBFbGVtZW50UmVmO1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSByYWRpbyBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcmFkaW8gKHVzZSBkaWZmZXJlbnQgbmFtZXMgZm9yIGRpZmZlcmVudCByYWRpbyBncm91cHMpLlxuICAgKi9cbiAgQElucHV0KClcbiAgbmFtZSA9ICdsaXN0X2l0ZW1fcmFkaW8nO1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSByYWRpbyBpcyBkaXNhYmxlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGRpc2FibGVkID0gZmFsc2U7XG4gIC8qKlxuICAgKiBBbiBldmVudCBlbWl0dGVkIGFzIHNvb24gYXMgdGhlIHJhZGlvIGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgQE91dHB1dCgpXG4gIG9uU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZTogYW55O1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbW9kZWw6IGFueTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBuYXRpdmUgcmFkaW8gZWxlbWVudC5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMucmFkaW8ubmF0aXZlRWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnNlbGVjdGVkICYmICFjaGFuZ2VzLnNlbGVjdGVkLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU2VsZWN0LmVtaXQoY2hhbmdlcy5zZWxlY3RlZC5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgcmFkaW8gaXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIGNoZWNrZWQgU2hvdWxkIGl0IGJlIGNoZWNrZWQgb3Igbm90P1xuICAgKi9cbiAgY2hhbmdlKGNoZWNrZWQpIHtcbiAgICB0aGlzLm9uU2VsZWN0LmVtaXQoY2hlY2tlZCk7XG4gICAgdGhpcy5tb2RlbCA9IHRoaXMudmFsdWU7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5tb2RlbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9uVG91Y2hlZCkge1xuICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIG9uQ2hhbmdlIGV2ZW50LlxuICAgKi9cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhbiBvblRvdWNoIGV2ZW50LlxuICAgKi9cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubW9kZWwgPSB2YWx1ZTtcbiAgfVxufVxuIiwiPGxhYmVsIGNsYXNzPVwiYzh5LXJhZGlvXCI+XG4gIDxpbnB1dFxuICAgICNyYWRpb1xuICAgIGlkPVwiZXZlbnRcIlxuICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgW25hbWVdPVwibmFtZVwiXG4gICAgW2NoZWNrZWRdPVwic2VsZWN0ZWRcIlxuICAgIChjaGFuZ2UpPVwiY2hhbmdlKCRldmVudC50YXJnZXQuY2hlY2tlZCk7IChmYWxzZSlcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gIC8+XG4gIDxzcGFuPjwvc3Bhbj5cbiAgPHNwYW4gZm9yPVwiZXZlbnRcIiBjbGFzcz1cInNyLW9ubHlcIiB0cmFuc2xhdGU+ZXZlbnQ8L3NwYW4+XG48L2xhYmVsPlxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19
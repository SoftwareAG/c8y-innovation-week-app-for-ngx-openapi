import { Component, EventEmitter, forwardRef, HostListener, Input, Output, ViewChild } from '@angular/core';
import { assignWith } from 'lodash-es';
import { GainsightService } from '../product-experience/gainsight.service';
import { PRODUCT_EXPERIENCE_EVENT_SOURCE } from '../product-experience/product-experience.model';
import * as i0 from "@angular/core";
import * as i1 from "../product-experience/gainsight.service";
import * as i2 from "../common/icon.directive";
import * as i3 from "@angular/common";
import * as i4 from "../i18n/c8y-translate.pipe";
/**
 * Actions are functions that can be executed on the
 * current list item. They are displayed next to the
 * item and can be grouped in a dropdown.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *     Delete
 *   </c8y-li-action>
 *   <c8y-li-action (click)="(false)" icon="rocket">
 *     Launch to space
 *   </c8y-li-action>
 * </c8y-li>
 * ```
 */
export class ListItemActionComponent {
    constructor(gainsightService) {
        this.gainsightService = gainsightService;
        /**
         * An EventEmitter to determine what to do if the
         * action is triggered.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        const element = event.closest('[title]') || event.closest('[uib-tooltip]');
        if (!element) {
            return;
        }
        const eventName = this.productExperienceEvent?.eventName || 'listItemAction';
        const actionName = element.getAttribute('title') || element.getAttribute('uib-tooltip');
        const action = this.gainsightService.translateToEnglish(actionName);
        // Assign url and action to event data only if they are not already defined
        const eventData = assignWith(this.productExperienceEvent?.data, {
            url: element.baseURI,
            action
        }, (targetVal, sourceVal) => sourceVal ?? targetVal);
        this.gainsightService.triggerEvent(eventName, eventData);
    }
}
ListItemActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemActionComponent, deps: [{ token: i1.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
ListItemActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ListItemActionComponent, selector: "c8y-list-item-action, c8y-li-action", inputs: { label: "label", icon: "icon" }, outputs: { click: "click" }, host: { listeners: { "click": "onClick($event.target)" } }, providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => ListItemActionComponent)
        }
    ], viewQueries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true }], ngImport: i0, template: "<ng-template #template>\n  <li>\n    <button\n      title=\"{{ label | translate }}\"\n      (click)=\"click.emit($event)\"\n      data-cy=\"c8y-li-action--btn\"\n    >\n      <i\n        [c8yIcon]=\"icon\"\n        *ngIf=\"icon\"\n      ></i>\n      &nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ListItemActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-list-item-action, c8y-li-action', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => ListItemActionComponent)
                        }
                    ], template: "<ng-template #template>\n  <li>\n    <button\n      title=\"{{ label | translate }}\"\n      (click)=\"click.emit($event)\"\n      data-cy=\"c8y-li-action--btn\"\n    >\n      <i\n        [c8yIcon]=\"icon\"\n        *ngIf=\"icon\"\n      ></i>\n      &nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.GainsightService }]; }, propDecorators: { template: [{
                type: ViewChild,
                args: ['template', { static: false }]
            }], label: [{
                type: Input
            }], icon: [{
                type: Input
            }], click: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDM0UsT0FBTyxFQUdMLCtCQUErQixFQUNoQyxNQUFNLGdEQUFnRCxDQUFDOzs7Ozs7QUFFeEQ7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFXSCxNQUFNLE9BQU8sdUJBQXVCO0lBMEJsQyxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVR0RDs7O1dBR0c7UUFFSCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUl5QixDQUFDO0lBRzFELE9BQU8sQ0FBQyxLQUFrQjtRQUN4QixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU87U0FDUjtRQUNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxTQUFTLElBQUksZ0JBQWdCLENBQUM7UUFDN0UsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSwyRUFBMkU7UUFDM0UsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUMxQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxFQUNqQztZQUNFLEdBQUcsRUFBRSxPQUFPLENBQUMsT0FBTztZQUNwQixNQUFNO1NBQ1AsRUFDRCxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQ2pELENBQUM7UUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzRCxDQUFDOztvSEFoRFUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsaU1BUHZCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsK0JBQStCO1lBQ3hDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUM7U0FDdkQ7S0FDRixnSUMxQ0gsMFlBaUJBOzJGRDJCYSx1QkFBdUI7a0JBVm5DLFNBQVM7K0JBQ0UscUNBQXFDLGFBRXBDO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSwrQkFBK0I7NEJBQ3hDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHdCQUF3QixDQUFDO3lCQUN2RDtxQkFDRjt1R0FPRCxRQUFRO3NCQURQLFNBQVM7dUJBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQkFPeEMsS0FBSztzQkFESixLQUFLO2dCQU1OLElBQUk7c0JBREgsS0FBSztnQkFPTixLQUFLO3NCQURKLE1BQU07Z0JBUVAsT0FBTztzQkFETixZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzc2lnbldpdGggfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgR2FpbnNpZ2h0U2VydmljZSB9IGZyb20gJy4uL3Byb2R1Y3QtZXhwZXJpZW5jZS9nYWluc2lnaHQuc2VydmljZSc7XG5pbXBvcnQge1xuICBQcm9kdWN0RXhwZXJpZW5jZUV2ZW50LFxuICBQcm9kdWN0RXhwZXJpZW5jZUV2ZW50U291cmNlLFxuICBQUk9EVUNUX0VYUEVSSUVOQ0VfRVZFTlRfU09VUkNFXG59IGZyb20gJy4uL3Byb2R1Y3QtZXhwZXJpZW5jZS9wcm9kdWN0LWV4cGVyaWVuY2UubW9kZWwnO1xuXG4vKipcbiAqIEFjdGlvbnMgYXJlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBleGVjdXRlZCBvbiB0aGVcbiAqIGN1cnJlbnQgbGlzdCBpdGVtLiBUaGV5IGFyZSBkaXNwbGF5ZWQgbmV4dCB0byB0aGVcbiAqIGl0ZW0gYW5kIGNhbiBiZSBncm91cGVkIGluIGEgZHJvcGRvd24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktbGk+XG4gKiAgIDxjOHktbGktYWN0aW9uIChjbGljayk9XCJkZWxldGVEZXZpY2UoZGV2aWNlLmlkKVwiIGljb249XCJ0aW1lc1wiPlxuICogICAgIERlbGV0ZVxuICogICA8L2M4eS1saS1hY3Rpb24+XG4gKiAgIDxjOHktbGktYWN0aW9uIChjbGljayk9XCIoZmFsc2UpXCIgaWNvbj1cInJvY2tldFwiPlxuICogICAgIExhdW5jaCB0byBzcGFjZVxuICogICA8L2M4eS1saS1hY3Rpb24+XG4gKiA8L2M4eS1saT5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbGlzdC1pdGVtLWFjdGlvbiwgYzh5LWxpLWFjdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LWl0ZW0tYWN0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUFJPRFVDVF9FWFBFUklFTkNFX0VWRU5UX1NPVVJDRSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IExpc3RJdGVtQWN0aW9uQ29tcG9uZW50KVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0SXRlbUFjdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIFByb2R1Y3RFeHBlcmllbmNlRXZlbnRTb3VyY2Uge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZCgndGVtcGxhdGUnLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgdGVtcGxhdGU6IGFueTtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB0byBkaXNwbGF5ICh5b3UgY2FuIGFsdGVybmF0aXZlbHkgdXNlXG4gICAqIGNvbnRlbnQgcHJvamVjdGlvbiB0byBkaXNwbGF5IHRoZSBsYWJlbCkuXG4gICAqL1xuICBASW5wdXQoKVxuICBsYWJlbDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGljb24gdG8gdXNlXG4gICAqL1xuICBASW5wdXQoKVxuICBpY29uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBbiBFdmVudEVtaXR0ZXIgdG8gZGV0ZXJtaW5lIHdoYXQgdG8gZG8gaWYgdGhlXG4gICAqIGFjdGlvbiBpcyB0cmlnZ2VyZWQuXG4gICAqL1xuICBAT3V0cHV0KClcbiAgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwcm9kdWN0RXhwZXJpZW5jZUV2ZW50OiBQcm9kdWN0RXhwZXJpZW5jZUV2ZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZ2FpbnNpZ2h0U2VydmljZTogR2FpbnNpZ2h0U2VydmljZSkge31cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBvbkNsaWNrKGV2ZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC5jbG9zZXN0KCdbdGl0bGVdJykgfHwgZXZlbnQuY2xvc2VzdCgnW3VpYi10b29sdGlwXScpO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBldmVudE5hbWUgPSB0aGlzLnByb2R1Y3RFeHBlcmllbmNlRXZlbnQ/LmV2ZW50TmFtZSB8fCAnbGlzdEl0ZW1BY3Rpb24nO1xuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgndWliLXRvb2x0aXAnKTtcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJhbnNsYXRlVG9FbmdsaXNoKGFjdGlvbk5hbWUpO1xuICAgIC8vIEFzc2lnbiB1cmwgYW5kIGFjdGlvbiB0byBldmVudCBkYXRhIG9ubHkgaWYgdGhleSBhcmUgbm90IGFscmVhZHkgZGVmaW5lZFxuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGFzc2lnbldpdGgoXG4gICAgICB0aGlzLnByb2R1Y3RFeHBlcmllbmNlRXZlbnQ/LmRhdGEsXG4gICAgICB7XG4gICAgICAgIHVybDogZWxlbWVudC5iYXNlVVJJLFxuICAgICAgICBhY3Rpb25cbiAgICAgIH0sXG4gICAgICAodGFyZ2V0VmFsLCBzb3VyY2VWYWwpID0+IHNvdXJjZVZhbCA/PyB0YXJnZXRWYWxcbiAgICApO1xuXG4gICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudChldmVudE5hbWUsIGV2ZW50RGF0YSk7XG4gIH1cbn1cbiIsIjxuZy10ZW1wbGF0ZSAjdGVtcGxhdGU+XG4gIDxsaT5cbiAgICA8YnV0dG9uXG4gICAgICB0aXRsZT1cInt7IGxhYmVsIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgIChjbGljayk9XCJjbGljay5lbWl0KCRldmVudClcIlxuICAgICAgZGF0YS1jeT1cImM4eS1saS1hY3Rpb24tLWJ0blwiXG4gICAgPlxuICAgICAgPGlcbiAgICAgICAgW2M4eUljb25dPVwiaWNvblwiXG4gICAgICAgICpuZ0lmPVwiaWNvblwiXG4gICAgICA+PC9pPlxuICAgICAgJm5ic3A7XG4gICAgICA8c3BhbiAqbmdJZj1cImxhYmVsXCI+e3sgbGFiZWwgfCB0cmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9idXR0b24+XG4gIDwvbGk+XG48L25nLXRlbXBsYXRlPlxuIl19
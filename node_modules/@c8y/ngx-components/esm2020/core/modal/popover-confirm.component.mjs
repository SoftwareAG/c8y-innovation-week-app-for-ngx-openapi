import { Component, Input, ViewChild } from '@angular/core';
import { PopoverDirective } from 'ngx-bootstrap/popover';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ngx-bootstrap/popover";
import * as i3 from "../i18n/c8y-translate.pipe";
/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
export class PopoverConfirmComponent {
    constructor() {
        this.buttons = [
            { label: gettext('cancel'), action: () => Promise.reject() }
        ];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    async show(buttons) {
        this.buttons = buttons || this.buttons;
        this.isOpen = true;
        let result;
        try {
            result = await new Promise((resolve, reject) => {
                return (this.click = (action) => action().then(resolve).catch(reject));
            });
        }
        catch (ex) {
            throw ex;
        }
        finally {
            this.isOpen = false;
        }
        return result;
    }
    buttonStatus(status) {
        if (status) {
            return `btn-${status}`;
        }
        return 'btn-link btn-clean';
    }
    handleOutsideClick() {
        this.click(() => Promise.reject());
    }
}
PopoverConfirmComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PopoverConfirmComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PopoverConfirmComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PopoverConfirmComponent, selector: "c8y-popover-confirm", inputs: { buttons: "buttons", message: "message", title: "title", isOpen: "isOpen", containerClass: "containerClass", placement: "placement", outsideClick: "outsideClick" }, viewQueries: [{ propertyName: "popover", first: true, predicate: PopoverDirective, descendants: true }], ngImport: i0, template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"m-b-8\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        [attr.data-cy]=\"'popover-confirm--' + (button.label | translate)\"\n        class=\"btn btn-sm m-r-16\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PopoverConfirmComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-popover-confirm', template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"m-b-8\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        [attr.data-cy]=\"'popover-confirm--' + (button.label | translate)\"\n        class=\"btn btn-sm m-r-16\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n" }]
        }], propDecorators: { popover: [{
                type: ViewChild,
                args: [PopoverDirective, { static: false }]
            }], buttons: [{
                type: Input
            }], message: [{
                type: Input
            }], title: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], containerClass: [{
                type: Input
            }], placement: [{
                type: Input
            }], outsideClick: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvbW9kYWwvcG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL2NvcmUvbW9kYWwvcG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBaUIxQzs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8sdUJBQXVCO0lBSnBDO1FBTVcsWUFBTyxHQUE0QjtZQUMxQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRTtTQUM3RCxDQUFDO1FBR08sV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNmLG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFDcEIsaUJBQVksR0FBRyxLQUFLLENBQUM7S0FpQy9CO0lBN0JDOztPQUVHO0lBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFpQztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksTUFBTSxDQUFDO1FBQ1gsSUFBSTtZQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUM3QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQTBCLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM3RixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQztTQUNWO2dCQUFTO1lBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDckI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsWUFBWSxDQUFDLE1BQU07UUFDakIsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLE9BQU8sTUFBTSxFQUFFLENBQUM7U0FDeEI7UUFDRCxPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDOztvSEExQ1UsdUJBQXVCO3dHQUF2Qix1QkFBdUIsa1JBQ3ZCLGdCQUFnQixnRENoQzdCLDZ6QkE0QkE7MkZER2EsdUJBQXVCO2tCQUpuQyxTQUFTOytCQUNFLHFCQUFxQjs4QkFJaUIsT0FBTztzQkFBdEQsU0FBUzt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0JBQ3JDLE9BQU87c0JBQWYsS0FBSztnQkFHRyxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wb3ZlckRpcmVjdGl2ZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBQb3BvdmVyQ29uZmlybUJ1dHRvbnMge1xuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBidXR0b25cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGljaCBhY3Rpb24gdG8gcGVyZm9ybS5cbiAgICovXG4gIGFjdGlvbjogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICAvKipcbiAgICogVGhlIHN0YXR1cyBjbGFzcyBhdHRhY2hlZCB0byB0aGUgYnV0dG9uLlxuICAgKi9cbiAgc3RhdHVzPzogU3RhdHVzVHlwZSB8ICdwcmltYXJ5JyB8ICdkZWZhdWx0Jztcbn1cblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0byBzaG93IGEgcG9wb3ZlciByaWdodCBuZXh0IHRvIHRoZVxuICogdXNlciBhY3Rpb24uIEFkZCB0aGlzIGNvbXBvbmVudCB3aGVyZSB0aGUgY29uZmlybSBtb2RhbFxuICogc2hvdWxkIGJlIHNob3duIGFuZCB0b2dnbGUgaXNPcGVuIHRvIGRpc3BsYXkgaXQuIFlvdVxuICogY2FuIHVzZSBgYXdhaXQgaXNTaG93KClgIHRvIHdhaXQgZm9yIGEgcmVzdWx0IG9uIHRoZVxuICogY2xpY2sgYWN0aW9uLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcG9wb3Zlci1jb25maXJtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvcG92ZXItY29uZmlybS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9wb3ZlckNvbmZpcm1Db21wb25lbnQge1xuICBAVmlld0NoaWxkKFBvcG92ZXJEaXJlY3RpdmUsIHsgc3RhdGljOiBmYWxzZSB9KSBwb3BvdmVyOiBQb3BvdmVyRGlyZWN0aXZlO1xuICBASW5wdXQoKSBidXR0b25zOiBQb3BvdmVyQ29uZmlybUJ1dHRvbnNbXSA9IFtcbiAgICB7IGxhYmVsOiBnZXR0ZXh0KCdjYW5jZWwnKSwgYWN0aW9uOiAoKSA9PiBQcm9taXNlLnJlamVjdCgpIH1cbiAgXTtcbiAgQElucHV0KCkgbWVzc2FnZTogc3RyaW5nO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBpc09wZW4gPSBmYWxzZTtcbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3MgPSAnJztcbiAgQElucHV0KCkgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgQElucHV0KCkgb3V0c2lkZUNsaWNrID0gZmFsc2U7XG5cbiAgY2xpY2s6IChhY3Rpb246ICgpID0+IFByb21pc2U8YW55PikgPT4gdm9pZDtcblxuICAvKipcbiAgICogU2hvdyB0aGUgcG9wb3Zlci4gV2FpdCB1bnRpbCBhbiBhY3Rpb24gaXMgcGVyZm9ybWVkIG9uIGl0LlxuICAgKi9cbiAgYXN5bmMgc2hvdyhidXR0b25zPzogUG9wb3ZlckNvbmZpcm1CdXR0b25zW10pIHtcbiAgICB0aGlzLmJ1dHRvbnMgPSBidXR0b25zIHx8IHRoaXMuYnV0dG9ucztcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuY2xpY2sgPSAoYWN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT4pID0+IGFjdGlvbigpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhyb3cgZXg7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBidXR0b25TdGF0dXMoc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgcmV0dXJuIGBidG4tJHtzdGF0dXN9YDtcbiAgICB9XG4gICAgcmV0dXJuICdidG4tbGluayBidG4tY2xlYW4nO1xuICB9XG5cbiAgaGFuZGxlT3V0c2lkZUNsaWNrKCkge1xuICAgIHRoaXMuY2xpY2soKCkgPT4gUHJvbWlzZS5yZWplY3QoKSk7XG4gIH1cbn1cbiIsIjxzcGFuXG4gIFtwb3BvdmVyXT1cInBvcG92ZXJcIlxuICBjb250YWluZXI9XCJib2R5XCJcbiAgW2lzT3Blbl09XCJpc09wZW5cIlxuICBbcG9wb3ZlclRpdGxlXT1cInRpdGxlIHwgdHJhbnNsYXRlXCJcbiAgW3BsYWNlbWVudF09XCJwbGFjZW1lbnRcIlxuICBbY29udGFpbmVyQ2xhc3NdPVwiY29udGFpbmVyQ2xhc3NcIlxuICBbb3V0c2lkZUNsaWNrXT1cIm91dHNpZGVDbGlja1wiXG4gIChvbkhpZGRlbik9XCJoYW5kbGVPdXRzaWRlQ2xpY2soKVwiXG4+PC9zcGFuPlxuPG5nLXRlbXBsYXRlICNwb3BvdmVyPlxuICA8cCBjbGFzcz1cIm0tYi04XCI+XG4gICAge3sgbWVzc2FnZSB8IHRyYW5zbGF0ZSB9fVxuICA8L3A+XG4gIDxkaXYgY2xhc3M9XCJwb3BvdmVyLWZvb3RlclwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGJ1dHRvbiBvZiBidXR0b25zXCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHRpdGxlPVwie3sgYnV0dG9uLmxhYmVsIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgW2F0dHIuZGF0YS1jeV09XCIncG9wb3Zlci1jb25maXJtLS0nICsgKGJ1dHRvbi5sYWJlbCB8IHRyYW5zbGF0ZSlcIlxuICAgICAgICBjbGFzcz1cImJ0biBidG4tc20gbS1yLTE2XCJcbiAgICAgICAgW25nQ2xhc3NdPVwiYnV0dG9uU3RhdHVzKGJ1dHRvbi5zdGF0dXMpXCJcbiAgICAgICAgKGNsaWNrKT1cImNsaWNrKGJ1dHRvbi5hY3Rpb24pXCJcbiAgICAgID5cbiAgICAgICAge3sgYnV0dG9uLmxhYmVsIHwgdHJhbnNsYXRlIH19XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPlxuIl19
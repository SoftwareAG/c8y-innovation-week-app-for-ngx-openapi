import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import { GainsightService } from '../product-experience/gainsight.service';
import { ConfirmModalComponent } from './modal-confirm.component';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "../product-experience/gainsight.service";
/**
 * Service to show a modal.
 */
export class ModalService {
    constructor(modalService, gainsightService) {
        this.modalService = modalService;
        this.gainsightService = gainsightService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     * @param confirmOptions Selection options to display as checkbox list.
     * @param productExperienceEvent Additional data to attach to custom product experience events.
     */
    async confirm(title, body, status = Status.INFO, labels = {}, confirmOptions = {}, productExperienceEvent = { eventName: 'confirmModal' }) {
        const modalLabels = {
            ok: labels.ok || gettext('Confirm'),
            cancel: labels.cancel || gettext('Cancel')
        };
        const modalRef = this.modalService.show(ConfirmModalComponent, {
            initialState: { title, body, labels: modalLabels, status, confirmOptions },
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            ignoreBackdropClick: true
        });
        if (productExperienceEvent) {
            productExperienceEvent.data = { ...productExperienceEvent.data, title };
        }
        this.triggerEvent(modalRef.content.result, modalLabels, productExperienceEvent);
        return await modalRef.content.result;
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     * @param productExperienceEvent Additional data to attach to custom product experience events.
     */
    async acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm'), productExperienceEvent = { eventName: 'confirmModal' }) {
        const labels = { ok: acknowledgeLabel, cancel: null };
        const modalRef = this.modalService.show(ConfirmModalComponent, {
            initialState: { title, body, labels, status },
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            ignoreBackdropClick: true
        });
        if (productExperienceEvent) {
            productExperienceEvent.data = { ...productExperienceEvent.data, title };
        }
        this.triggerEvent(modalRef.content.result, labels, productExperienceEvent);
        return await modalRef.content.result;
    }
    /**
     * Shows a quick logout confirmation modal.
     * @param body The text body to display. Default: 'You will be logged out to apply your changes. Do you want to proceed?'
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm and log out', cancel: 'Cancel' }
     */
    async confirmLogout(body, status = Status.WARNING, labels = {}) {
        const modalLabels = {
            ok: labels.ok || gettext('Confirm and log out'),
            cancel: labels.cancel || gettext('Cancel')
        };
        const modalBody = body || gettext('You must log out to apply your changes. Do you want to proceed?');
        return await this.confirm(gettext('Logout required'), modalBody, status, modalLabels);
    }
    triggerEvent(result, labels, productExperienceEvent) {
        const data = { ...productExperienceEvent.data, url: window.location.href };
        result
            .then(() => {
            this.gainsightService.triggerEvent(productExperienceEvent.eventName, {
                ...data,
                result: labels.ok
            });
        })
            .catch(() => {
            this.gainsightService.triggerEvent(productExperienceEvent.eventName, {
                ...data,
                result: labels.cancel
            });
        });
    }
}
ModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ModalService, deps: [{ token: i1.BsModalService }, { token: i2.GainsightService }], target: i0.ɵɵFactoryTarget.Injectable });
ModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ModalService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ModalService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.BsModalService }, { type: i2.GainsightService }]; } });
//# sourceMappingURL=data:application/json;base64,
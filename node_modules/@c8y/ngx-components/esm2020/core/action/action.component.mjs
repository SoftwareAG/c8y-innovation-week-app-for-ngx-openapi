import { Component, EnvironmentInjector, Injector, Input, ViewChild } from '@angular/core';
import { ActionService } from './action.service';
import * as i0 from "@angular/core";
import * as i1 from "./action.service";
/**
 * A <c8y-action> can be added with content projection.
 *
 * @example
 * ```html
 * <c8y-action>
 *   <button class="btn" (click)="myAction()">My action</button>
 * </c8y-action>
 * ```
 */
export class ActionComponent {
    constructor(actionService, _injector) {
        this.actionService = actionService;
        /**
         * Is this action disabled.
         */
        this.disabled = false;
        /**
         * The priority of this action (the higher the number, the higher the action will be displayed; optional)
         */
        this.priority = 0;
        this.injector = _injector;
    }
    /**
     * After page view is initialized, component adds itself to global action list.
     */
    ngAfterViewInit() {
        this.viewInitTimeout = setTimeout(() => this.actionService.add(this));
    }
    /**
     * Action is removed from global action list, if component is not used anymore.
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.actionService.remove(this);
    }
}
ActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActionComponent, deps: [{ token: i1.ActionService }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Component });
ActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ActionComponent, selector: "c8y-action", inputs: { disabled: "disabled", priority: "priority", icon: "icon", injector: "injector" }, viewQueries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true }], ngImport: i0, template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-action', template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>" }]
        }], ctorParameters: function () { return [{ type: i1.ActionService }, { type: i0.EnvironmentInjector }]; }, propDecorators: { disabled: [{
                type: Input
            }], priority: [{
                type: Input
            }], icon: [{
                type: Input
            }], template: [{
                type: ViewChild,
                args: ['template', { static: false }]
            }], injector: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvYWN0aW9uL2FjdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2FjdGlvbi9hY3Rpb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUVqRDs7Ozs7Ozs7O0dBU0c7QUFLSCxNQUFNLE9BQU8sZUFBZTtJQW9CMUIsWUFBb0IsYUFBNEIsRUFBRSxTQUE4QjtRQUE1RCxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQW5CaEQ7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sYUFBUSxHQUFHLENBQUMsQ0FBQztRQWFwQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBYyxDQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs0R0FyQ1UsZUFBZTtnR0FBZixlQUFlLG9QQ2xCNUIseUZBSWM7MkZEY0QsZUFBZTtrQkFKM0IsU0FBUzsrQkFDRSxZQUFZO3NJQU9iLFFBQVE7c0JBQWhCLEtBQUs7Z0JBSUcsUUFBUTtzQkFBaEIsS0FBSztnQkFJRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRW9DLFFBQVE7c0JBQWpELFNBQVM7dUJBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQkFFL0IsUUFBUTtzQkFBaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRW52aXJvbm1lbnRJbmplY3RvciwgSW5qZWN0b3IsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uV2l0aFRlbXBsYXRlIH0gZnJvbSAnLi9hY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgQWN0aW9uU2VydmljZSB9IGZyb20gJy4vYWN0aW9uLnNlcnZpY2UnO1xuXG4vKipcbiAqIEEgPGM4eS1hY3Rpb24+IGNhbiBiZSBhZGRlZCB3aXRoIGNvbnRlbnQgcHJvamVjdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1hY3Rpb24+XG4gKiAgIDxidXR0b24gY2xhc3M9XCJidG5cIiAoY2xpY2spPVwibXlBY3Rpb24oKVwiPk15IGFjdGlvbjwvYnV0dG9uPlxuICogPC9jOHktYWN0aW9uPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYWN0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBBY3Rpb25XaXRoVGVtcGxhdGUge1xuICAvKipcbiAgICogSXMgdGhpcyBhY3Rpb24gZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIHByaW9yaXR5IG9mIHRoaXMgYWN0aW9uICh0aGUgaGlnaGVyIHRoZSBudW1iZXIsIHRoZSBoaWdoZXIgdGhlIGFjdGlvbiB3aWxsIGJlIGRpc3BsYXllZDsgb3B0aW9uYWwpXG4gICAqL1xuICBASW5wdXQoKSBwcmlvcml0eSA9IDA7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBzaG93IG9uIHRoaXMgYWN0aW9uXG4gICAqL1xuICBASW5wdXQoKSBpY29uOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgndGVtcGxhdGUnLCB7IHN0YXRpYzogZmFsc2UgfSkgdGVtcGxhdGU6IGFueTtcblxuICBASW5wdXQoKSBpbmplY3RvcjogSW5qZWN0b3I7XG5cbiAgcHJpdmF0ZSB2aWV3SW5pdFRpbWVvdXQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpb25TZXJ2aWNlOiBBY3Rpb25TZXJ2aWNlLCBfaW5qZWN0b3I6IEVudmlyb25tZW50SW5qZWN0b3IpIHtcbiAgICB0aGlzLmluamVjdG9yID0gX2luamVjdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHBhZ2UgdmlldyBpcyBpbml0aWFsaXplZCwgY29tcG9uZW50IGFkZHMgaXRzZWxmIHRvIGdsb2JhbCBhY3Rpb24gbGlzdC5cbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnZpZXdJbml0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5hY3Rpb25TZXJ2aWNlLmFkZCh0aGlzIGFzIEFjdGlvbikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGlvbiBpcyByZW1vdmVkIGZyb20gZ2xvYmFsIGFjdGlvbiBsaXN0LCBpZiBjb21wb25lbnQgaXMgbm90IHVzZWQgYW55bW9yZS5cbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnZpZXdJbml0VGltZW91dCk7XG4gICAgdGhpcy5hY3Rpb25TZXJ2aWNlLnJlbW92ZSh0aGlzIGFzIEFjdGlvbik7XG4gIH1cbn1cbiIsIjxuZy10ZW1wbGF0ZSAjdGVtcGxhdGU+XG4gIDxsaT5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIDwvbGk+XG48L25nLXRlbXBsYXRlPiJdfQ==
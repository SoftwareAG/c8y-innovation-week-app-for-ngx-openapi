import { Component, Output, EventEmitter, Input } from '@angular/core';
import { UserService } from '@c8y/client';
import { LoginService } from '../login/login.service';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../login/login.service";
import * as i2 from "@c8y/client";
import * as i3 from "../alert/alert.service";
import * as i4 from "@angular/forms";
import * as i5 from "../forms/form-group.component";
import * as i6 from "../forms/required-input-placeholder.directive";
import * as i7 from "../i18n/c8y-translate.directive";
import * as i8 from "@angular/common";
import * as i9 from "../i18n/c8y-translate.pipe";
export class SmsChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.model = {
            smsToken: ''
        };
        this.isLoading = false;
        this.resendTfa = '0';
    }
    async verifyTFACode() {
        this.isLoading = true;
        if (await this.usesOAuthInternal()) {
            await this.verifyCodeWithOauth();
        }
        else {
            await this.verifyCodeWithBasicAuth();
        }
        this.isLoading = false;
    }
    async resendTFASms() {
        try {
            this.isLoading = true;
            await this.users.verifyTFACode(this.resendTfa);
        }
        catch (e) {
            if (e.res.status === 403) {
                this.loginService.cleanMessages();
                this.loginService.addSuccessMessage('resend_sms');
            }
            else {
                this.alert.addServerFailure(e);
            }
        }
        finally {
            this.isLoading = false;
        }
    }
    async usesOAuthInternal() {
        return this.loginService.isPasswordGrantLogin(this.credentials);
    }
    async verifyCodeWithOauth() {
        try {
            const { credentials } = this;
            await this.loginService.switchLoginMode({ ...credentials, tfa: this.model.smsToken });
            await this.loginService.verifyAppAccess();
            await this.loginService.authFulfilled();
        }
        catch (e) {
            const resStatus = e.res && e.res.status;
            if (resStatus === 401) {
                // it is assumed that the user and password are correct so it must be the tfa code
                this.alert.danger(gettext('Invalid code'));
            }
            else {
                this.alert.addServerFailure(e);
            }
        }
    }
    async verifyCodeWithBasicAuth() {
        try {
            const { res } = await this.users.verifyTFACode(this.model.smsToken);
            const tfaToken = res.headers.get('tfatoken');
            this.credentials.tfa = tfaToken;
            await this.loginWithTFA(tfaToken);
        }
        catch (e) {
            const resStatus = e.res && e.res.status;
            // BE returns 403 in case of invalid tfa code
            if (resStatus === 403) {
                this.alert.danger(gettext('Invalid code'));
            }
            else {
                this.alert.addServerFailure(e);
            }
        }
    }
    async loginWithTFA(tfaToken) {
        try {
            await this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials);
            this.loginService.saveTFAToken(tfaToken, sessionStorage);
            if (this.loginService.rememberMe) {
                this.loginService.saveTFAToken(tfaToken, localStorage);
            }
        }
        catch (e) {
            this.alert.addServerFailure(e);
        }
    }
}
SmsChallengeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmsChallengeComponent, deps: [{ token: i1.LoginService }, { token: i2.UserService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Component });
SmsChallengeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SmsChallengeComponent, selector: "c8y-sms-challenge", inputs: { credentials: "credentials" }, outputs: { onCancel: "onCancel" }, ngImport: i0, template: "<form #twoFactorForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Two-factor authentication</div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autofocus\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n    <p *ngIf=\"!twoFactorForm.form.valid || isLoading\" class=\"help-block\" translate>\n      Insert the code received via SMS.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Verify' | translate }}\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"resendTFASms()\"\n    >\n      {{ 'Send new code' | translate }}\n    </button>\n    <button\n      type=\"button\"\n      title=\"{{ 'Log in' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onCancel.emit()\"\n    >\n      {{ 'Log in' | translate }}\n    </button>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i5.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i6.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "directive", type: i7.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i9.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmsChallengeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-sms-challenge', template: "<form #twoFactorForm=\"ngForm\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Two-factor authentication</div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autofocus\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} 624327\"\n      required\n    />\n    <p *ngIf=\"!twoFactorForm.form.valid || isLoading\" class=\"help-block\" translate>\n      Insert the code received via SMS.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Verify' | translate }}\n  </button>\n\n  <div class=\"d-flex m-t-8\">\n    <button\n      type=\"button\"\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"resendTFASms()\"\n    >\n      {{ 'Send new code' | translate }}\n    </button>\n    <button\n      type=\"button\"\n      title=\"{{ 'Log in' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onCancel.emit()\"\n    >\n      {{ 'Log in' | translate }}\n    </button>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LoginService }, { type: i2.UserService }, { type: i3.AlertService }]; }, propDecorators: { credentials: [{
                type: Input
            }], onCancel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../login/login.service";
import * as i2 from "./password.service";
import * as i3 from "../common/icon.directive";
import * as i4 from "../i18n/c8y-translate.directive";
import * as i5 from "@angular/common";
import * as i6 from "../i18n/c8y-translate.pipe";
export class PasswordCheckListComponent {
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (for example, abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (for example, ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (for example, 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (for example, !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: password => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    async ngOnInit() {
        this.minGreenLength = await this.loginService.getGreenMinLength();
        if (!this.minGreenLength) {
            this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
        }
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, requirement => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasswordCheckListComponent, deps: [{ token: i1.LoginService }, { token: i2.PasswordService }, { token: i2.PasswordService }], target: i0.ɵɵFactoryTarget.Component });
PasswordCheckListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PasswordCheckListComponent, selector: "c8y-password-check-list", inputs: { password: "password" }, ngImport: i0, template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: i6.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasswordCheckListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-password-check-list', template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LoginService }, { type: i2.PasswordService }, { type: i2.PasswordService }]; }, propDecorators: { password: [{
                type: Input,
                args: ['password']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNoZWNrLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7OztBQU8xQyxNQUFNLE9BQU8sMEJBQTBCO0lBQ3JDLElBQ0ksUUFBUSxDQUFDLFFBQWdCO1FBQzNCLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFxQ0QsWUFDUyxZQUEwQixFQUN6Qix1QkFBd0MsRUFDeEMsZUFBZ0M7UUFGakMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDekIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFpQjtRQUN4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUF0QzFDLG1CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLGNBQVMsR0FBRztZQUNWO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsb0RBQW9ELENBQUM7Z0JBQ3BFLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWTtnQkFDaEQsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLG9EQUFvRCxDQUFDO2dCQUNwRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVk7Z0JBQ2hELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztnQkFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVO2dCQUM5QyxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7Z0JBQ3ZELEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZTtnQkFDbkQsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO2dCQUMxRCxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjO2dCQUN6RCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtTQUNGLENBQUM7SUFNQyxDQUFDO0lBRUosS0FBSyxDQUFDLFFBQVE7UUFDWixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1NBQzFFO0lBQ0gsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBUTtRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQ2pELE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtnQkFDbEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNuQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVk7YUFDN0MsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzt1SEF2RVUsMEJBQTBCOzJHQUExQiwwQkFBMEIsaUdDWHZDLG9lQWFBOzJGREZhLDBCQUEwQjtrQkFMdEMsU0FBUzsrQkFDRSx5QkFBeUI7K0pBTS9CLFFBQVE7c0JBRFgsS0FBSzt1QkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXNzd29yZFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBhc3NpZ24sIG1hcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXBhc3N3b3JkLWNoZWNrLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRDaGVja0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoJ3Bhc3N3b3JkJylcbiAgc2V0IHBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5vblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKTtcbiAgICB9XG4gIH1cblxuICBtaW5HcmVlbkxlbmd0aCA9IDA7XG5cbiAgY2hlY2tsaXN0ID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIGxvd2VyY2FzZSBjaGFyYWN0ZXJzIChmb3IgZXhhbXBsZSwgYWJjZGVmKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTG93ZXJDYXNlLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSB1cHBlcmNhc2UgY2hhcmFjdGVycyAoZm9yIGV4YW1wbGUsIEFCQ0RFRiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1VwcGVyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbnVtYmVycyAoZm9yIGV4YW1wbGUsIDEyMzQ1NiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc051bWJlcnMsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIHN5bWJvbHMgKGZvciBleGFtcGxlLCAhQCMkJV4pJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNTcGVjaWFsQ2hhcnMsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdNdXN0IGhhdmUgYXQgbGVhc3Qge3tsZW5ndGh9fSBjaGFyYWN0ZXJzJyksXG4gICAgICBjaGVjazogcGFzc3dvcmQgPT4gcGFzc3dvcmQubGVuZ3RoID49IHRoaXMubWluR3JlZW5MZW5ndGgsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9XG4gIF07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aENoZWNrZXI6IFBhc3N3b3JkU2VydmljZSxcbiAgICBwcml2YXRlIHBhc3N3b3JkU2VydmljZTogUGFzc3dvcmRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1pbkdyZWVuTGVuZ3RoID0gYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuZ2V0R3JlZW5NaW5MZW5ndGgoKTtcbiAgICBpZiAoIXRoaXMubWluR3JlZW5MZW5ndGgpIHtcbiAgICAgIHRoaXMubWluR3JlZW5MZW5ndGggPSB0aGlzLnBhc3N3b3JkU2VydmljZS5nZXREZWZhdWx0UGFzc3dvcmRNaW5MZW5ndGgoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdHJhbnNsYXRlUGFyYW1zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZW5ndGg6IHRoaXMubWluR3JlZW5MZW5ndGhcbiAgICB9O1xuICB9XG5cbiAgb25QYXNzd29yZENoYW5nZShwYXNzd29yZCkge1xuICAgIHRoaXMuY2hlY2tsaXN0ID0gbWFwKHRoaXMuY2hlY2tsaXN0LCByZXF1aXJlbWVudCA9PiB7XG4gICAgICBjb25zdCBjaGVja2VkID0gcmVxdWlyZW1lbnQuY2hlY2socGFzc3dvcmQpO1xuICAgICAgYXNzaWduKHJlcXVpcmVtZW50LCB7XG4gICAgICAgIGljb246IGNoZWNrZWQgPyAnY2hlY2stY2lyY2xlJyA6ICcnLFxuICAgICAgICBjb250ZXh0dWFsQ29sb3I6IGNoZWNrZWQgPyAnJyA6ICd0ZXh0LW11dGVkJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWlyZW1lbnQ7XG4gICAgfSk7XG4gIH1cbn1cbiIsIjxkaXY+XG4gIDxzcGFuIGNsYXNzPVwic21hbGxcIj57eyAnUGxlYXNlIG1lZXQgNSBvdXQgb2YgdGhlIDUgY29uZGl0aW9ucyBiZWxvdycgfCB0cmFuc2xhdGUgfX06PC9zcGFuPlxuICA8dWwgY2xhc3M9XCJsaXN0LXVuc3R5bGVkXCI+XG4gICAgPGxpIGNsYXNzPVwic21hbGxcIiAqbmdGb3I9XCJsZXQgcmVxdWlyZW1lbnQgb2YgY2hlY2tsaXN0XCI+XG4gICAgICA8aSBbYzh5SWNvbl09XCJyZXF1aXJlbWVudC5pY29uXCIgY2xhc3M9XCJ0ZXh0LXN1Y2Nlc3NcIj48L2k+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cInNtYWxsIHt7IHJlcXVpcmVtZW50LmNvbnRleHR1YWxDb2xvciB9fVwiXG4gICAgICAgIFt0cmFuc2xhdGVdPVwicmVxdWlyZW1lbnQubGFiZWxcIlxuICAgICAgICBbdHJhbnNsYXRlUGFyYW1zXT1cInRoaXMudHJhbnNsYXRlUGFyYW1zXCJcbiAgICAgID48L3NwYW4+XG4gICAgPC9saT5cbiAgPC91bD5cbjwvZGl2PlxuIl19
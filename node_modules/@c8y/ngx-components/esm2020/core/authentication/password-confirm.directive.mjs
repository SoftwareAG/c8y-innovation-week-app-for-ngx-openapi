import { Directive, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
export class PasswordConfirm {
    constructor(passwordConfirm) {
        this.passwordConfirm = passwordConfirm;
    }
    validate(abControl) {
        const value = abControl.value;
        const controlToCompareWith = abControl.root.get(this.passwordConfirm);
        if (controlToCompareWith && value !== controlToCompareWith.value) {
            return { passwordConfirm: true };
        }
        return null;
    }
}
PasswordConfirm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasswordConfirm, deps: [{ token: 'passwordConfirm', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
PasswordConfirm.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: PasswordConfirm, selector: "[passwordConfirm]", providers: [
        {
            provide: NG_VALIDATORS,
            useExisting: PasswordConfirm,
            multi: true
        }
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasswordConfirm, decorators: [{
            type: Directive,
            args: [{
                    selector: '[passwordConfirm]',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: PasswordConfirm,
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['passwordConfirm']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNvbmZpcm0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQThCLE1BQU0sZ0JBQWdCLENBQUM7O0FBWTNFLE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQWlELGVBQXVCO1FBQXZCLG9CQUFlLEdBQWYsZUFBZSxDQUFRO0lBQUcsQ0FBQztJQUU1RSxRQUFRLENBQUMsU0FBMEI7UUFDakMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM5QixNQUFNLG9CQUFvQixHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxJQUFJLG9CQUFvQixJQUFJLEtBQUssS0FBSyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUU7WUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNsQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7NEdBVlUsZUFBZSxrQkFDSCxpQkFBaUI7Z0dBRDdCLGVBQWUsNENBUmY7UUFDVDtZQUNFLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFdBQVcsRUFBRSxlQUFlO1lBQzVCLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRjsyRkFFVSxlQUFlO2tCQVYzQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsYUFBYTs0QkFDdEIsV0FBVyxpQkFBaUI7NEJBQzVCLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO2lCQUNGOzswQkFFYyxTQUFTOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbcGFzc3dvcmRDb25maXJtXScsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICAgIHVzZUV4aXN0aW5nOiBQYXNzd29yZENvbmZpcm0sXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRDb25maXJtIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCdwYXNzd29yZENvbmZpcm0nKSBwdWJsaWMgcGFzc3dvcmRDb25maXJtOiBzdHJpbmcpIHt9XHJcblxyXG4gIHZhbGlkYXRlKGFiQ29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGFiQ29udHJvbC52YWx1ZTtcclxuICAgIGNvbnN0IGNvbnRyb2xUb0NvbXBhcmVXaXRoID0gYWJDb250cm9sLnJvb3QuZ2V0KHRoaXMucGFzc3dvcmRDb25maXJtKTtcclxuICAgIGlmIChjb250cm9sVG9Db21wYXJlV2l0aCAmJiB2YWx1ZSAhPT0gY29udHJvbFRvQ29tcGFyZVdpdGgudmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHsgcGFzc3dvcmRDb25maXJtOiB0cnVlIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIl19
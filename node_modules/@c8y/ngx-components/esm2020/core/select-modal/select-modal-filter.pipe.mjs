import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class SelectModalFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => {
                const allValues = this.extractValues(item);
                const filteredValues = allValues.filter(value => this.filterContainString(value, filterTerm));
                return filteredValues.length > 0;
            });
    }
    filterContainString(value, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    }
    extractValues(item) {
        let values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach(key => {
            if (Array.isArray(item[key])) {
                item[key].forEach(obj => values.concat(this.extractValues(obj)));
            }
            if (item[key] instanceof Object) {
                values = values.concat(this.extractValues(item[key]));
            }
        });
        return values;
    }
}
SelectModalFilterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectModalFilterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
SelectModalFilterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: SelectModalFilterPipe, name: "selectModalFilterPipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectModalFilterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'selectModalFilterPipe'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9zZWxlY3QtbW9kYWwvc2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQU1wRCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFNBQVMsQ0FBQyxLQUEyQixFQUFFLFVBQWtCO1FBQ3ZELE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUF3QixFQUFFLEVBQUU7Z0JBQ3hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNDLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDOUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FDNUMsQ0FBQztnQkFDRixPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVPLG1CQUFtQixDQUFDLEtBQWEsRUFBRSxVQUFrQjtRQUMzRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0MsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sYUFBYSxDQUFDLElBQUk7UUFDeEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsRTtZQUNELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLE1BQU0sRUFBRTtnQkFDL0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztrSEFoQ1UscUJBQXFCO2dIQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFIakMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsdUJBQXVCO2lCQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElTZWxlY3RNb2RhbE9iamVjdCB9IGZyb20gJy4vc2VsZWN0LW1vZGFsLm1vZGVsJztcblxuQFBpcGUoe1xuICBuYW1lOiAnc2VsZWN0TW9kYWxGaWx0ZXJQaXBlJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RNb2RhbEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGl0ZW1zOiBJU2VsZWN0TW9kYWxPYmplY3RbXSwgZmlsdGVyVGVybTogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gZmlsdGVyVGVybS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICA/IGl0ZW1zXG4gICAgICA6IGl0ZW1zLmZpbHRlcigoaXRlbTogSVNlbGVjdE1vZGFsT2JqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgYWxsVmFsdWVzID0gdGhpcy5leHRyYWN0VmFsdWVzKGl0ZW0pO1xuICAgICAgICAgIGNvbnN0IGZpbHRlcmVkVmFsdWVzID0gYWxsVmFsdWVzLmZpbHRlcih2YWx1ZSA9PlxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDb250YWluU3RyaW5nKHZhbHVlLCBmaWx0ZXJUZXJtKVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGZpbHRlcmVkVmFsdWVzLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJDb250YWluU3RyaW5nKHZhbHVlOiBzdHJpbmcsIGZpbHRlclRlcm06IHN0cmluZykge1xuICAgIGNvbnN0IHRlcm0gPSBmaWx0ZXJUZXJtLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGVybSkgPiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFZhbHVlcyhpdGVtKSB7XG4gICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgIGlmIChpdGVtLnZhbHVlKSB7XG4gICAgICB2YWx1ZXMucHVzaChpdGVtLnZhbHVlKTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbVtrZXldKSkge1xuICAgICAgICBpdGVtW2tleV0uZm9yRWFjaChvYmogPT4gdmFsdWVzLmNvbmNhdCh0aGlzLmV4dHJhY3RWYWx1ZXMob2JqKSkpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1ba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHRoaXMuZXh0cmFjdFZhbHVlcyhpdGVtW2tleV0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG4iXX0=
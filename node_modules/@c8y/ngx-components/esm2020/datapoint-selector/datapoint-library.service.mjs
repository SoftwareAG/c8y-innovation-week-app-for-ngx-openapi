import { Injectable } from '@angular/core';
import { InventoryService, MeasurementService } from '@c8y/client';
import { AppStateService, ColorService, MAX_PAGE_SIZE } from '@c8y/ngx-components';
import { get, sortBy, uniq } from 'lodash-es';
import { filter } from 'rxjs/operators';
import { DATAPOINT_LIBRARY_FRAGMENT } from './datapoint-selection.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class DatapointLibraryService {
    constructor(inventory, appState, measurements, color) {
        this.inventory = inventory;
        this.appState = appState;
        this.measurements = measurements;
        this.color = color;
        this.appState.currentUser.pipe(filter(user => !user)).subscribe(() => {
            this.cache = undefined;
        });
    }
    async getAllDatapointLibraryEntriesCached(forceCacheRenew = false) {
        if (forceCacheRenew) {
            this.cache = undefined;
        }
        if (!this.cache) {
            this.cache = this.getAllDatapointLibraryEntries();
        }
        return this.cache;
    }
    async getFirstDatapointLibraryPage() {
        const filterObj = {
            currentPage: 1,
            pageSize: 50,
            fragmentType: DATAPOINT_LIBRARY_FRAGMENT,
            withTotalPages: true
        };
        return (await this.inventory.list(filterObj));
    }
    async getAllDatapointLibraryItemsCached() {
        if (!this.cache) {
            this.cache = this.getAllDatapointLibraryEntries();
        }
        const res = await this.cache;
        return res.map(tmp => tmp[DATAPOINT_LIBRARY_FRAGMENT]);
    }
    async updateDatapoints(datapoints, skipUpdatingTarget = false) {
        if (!Array.isArray(datapoints)) {
            return datapoints;
        }
        const currentTargetsPromise = !skipUpdatingTarget
            ? this.getCurrentVersionOfTargetsFromDatapoints(datapoints)
            : Promise.resolve([]);
        const [currentTemplates, currentTargets] = await Promise.all([
            this.getCurrentTemplatesFromDatapoints(datapoints),
            currentTargetsPromise
        ]);
        const currentTemplateVersions = currentTemplates
            .map(tmp => this.mapDatapointLibraryEntry(tmp))
            .filter(tmp => !!tmp);
        for (const datapoint of datapoints) {
            const { fragment, series, __active, __target, color, label, __template } = datapoint;
            const foundCurrentTemplateVersion = currentTemplateVersions.find(tmp => tmp.__template === datapoint.__template);
            if (foundCurrentTemplateVersion) {
                Object.assign(datapoint, foundCurrentTemplateVersion);
                Object.assign(datapoint, {
                    fragment,
                    series,
                    __active,
                    __target,
                    color,
                    label,
                    __template
                });
            }
            const foundCurrentTarget = currentTargets.find(target => target.id === __target?.id);
            if (foundCurrentTarget) {
                const { id, name } = foundCurrentTarget;
                datapoint.__target = { id, name };
            }
        }
        return datapoints;
    }
    async getDatapointsOfAsset(parentReference, ignoreDatapointTemplates) {
        const [kpiResponse, details] = await Promise.all([
            (ignoreDatapointTemplates
                ? Promise.resolve(null)
                : this.inventory.assetKPIsList(parentReference, { pageSize: MAX_PAGE_SIZE })),
            this.inventory.getMeasurementsAndSeries(parentReference)
        ]);
        const kpis = kpiResponse && kpiResponse.data ? kpiResponse.data : [];
        const sortedDetails = sortBy(details, ['fragment', 'series']);
        return await this.combineFragmentSeriesTuplesWithDetails(sortedDetails, parentReference, kpis);
    }
    /**
     * Requests the last measurement with the given fragment and series to extract it's unit.
     * If the source attribute is provided, it will check the last measurement for this specific source.
     * @returns found unit or an empty string instead
     */
    async guessUnitOfDatapoint(fragment, series, source) {
        const measurementfilter = {
            valueFragmentSeries: series,
            valueFragmentType: fragment,
            pageSize: 1,
            revert: true,
            dateFrom: '1970-01-01'
        };
        if (source?.id) {
            measurementfilter.source = source?.id;
        }
        try {
            const { data: lastMeasurements } = await this.measurements.list(measurementfilter);
            const measurement = lastMeasurements[0];
            if (measurement) {
                const pathToUnit = `${fragment}.${series}.unit`;
                const unit = get(measurement, pathToUnit);
                if (unit?.length && typeof unit === 'string') {
                    return unit;
                }
            }
        }
        catch {
            // nothing to do
        }
        return '';
    }
    async combineFragmentSeriesTuplesWithDetails(tuples, target, kpis) {
        const datapoints = tuples.map(tuple => {
            const foundDatapointLibraryEntry = kpis.find(kpi => kpi[DATAPOINT_LIBRARY_FRAGMENT] &&
                kpi[DATAPOINT_LIBRARY_FRAGMENT].fragment === tuple.fragment &&
                kpi[DATAPOINT_LIBRARY_FRAGMENT].series === tuple.series);
            const datapoint = this.mapDatapointLibraryEntry(foundDatapointLibraryEntry) || tuple;
            if (!datapoint.label) {
                datapoint.label = `${datapoint.fragment} → ${datapoint.series}`;
            }
            if (!datapoint.unit?.length) {
                datapoint.unit = '';
            }
            datapoint.__target = target;
            return datapoint;
        });
        await this.assignColorToDatapoints(datapoints);
        return datapoints;
    }
    async assignColorToDatapoints(datapoints) {
        const datapointsWithoutColor = datapoints.filter(datapoint => !datapoint.color);
        await Promise.all(datapointsWithoutColor.map(datapoint => this.color
            .generateColorForDatapoint(datapoint.fragment, datapoint.series)
            .then(color => (datapoint.color = color))));
    }
    async getAllDatapointLibraryEntries() {
        const entries = new Array();
        const filterObj = {
            currentPage: 1,
            pageSize: MAX_PAGE_SIZE,
            fragmentType: DATAPOINT_LIBRARY_FRAGMENT
        };
        let res = await this.inventory.list(filterObj);
        while (res.data.length) {
            entries.push(...res.data);
            if (res.data.length < res.paging.pageSize) {
                break;
            }
            if (!res.paging.nextPage) {
                break;
            }
            res = await res.paging.next();
        }
        return entries;
    }
    mapDatapointLibraryEntry(entry) {
        if (!entry || !entry[DATAPOINT_LIBRARY_FRAGMENT]) {
            return null;
        }
        const datapoint = entry[DATAPOINT_LIBRARY_FRAGMENT];
        datapoint.__template = entry.id;
        return datapoint;
    }
    async getCurrentTemplatesFromDatapoints(datapoints) {
        const datapointsWithTemplateId = datapoints.filter(dp => !!dp.__template);
        const usedTemplateIds = datapointsWithTemplateId.map(dp => dp.__template);
        return await this.getMOsByIds(usedTemplateIds);
    }
    async getCurrentVersionOfTargetsFromDatapoints(datapoints) {
        const datapointsWithTarget = datapoints.filter(dp => !!dp.__target?.id);
        const usedTargetIds = datapointsWithTarget.map(dp => dp.__target.id);
        return await this.getMOsByIds(usedTargetIds);
    }
    async getMOsByIds(ids) {
        const uniqManagedObjectIds = uniq(ids);
        if (!uniqManagedObjectIds.length) {
            return [];
        }
        try {
            const { data: managedObjects } = await this.inventory.list({
                ids: uniqManagedObjectIds.join(),
                pageSize: MAX_PAGE_SIZE
            });
            return managedObjects;
        }
        catch {
            // Fail silently in case we are not able to talk to the inventory API.
            // Should only be reached in case of an server side error.
            // instead of failing, pretend like we didn't receive any items.
            console.warn(`Failed to get the current version of the following managedObjects: ${uniqManagedObjectIds.join()}.`);
            return [];
        }
    }
}
DatapointLibraryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointLibraryService, deps: [{ token: i1.InventoryService }, { token: i2.AppStateService }, { token: i1.MeasurementService }, { token: i2.ColorService }], target: i0.ɵɵFactoryTarget.Injectable });
DatapointLibraryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointLibraryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointLibraryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2.AppStateService }, { type: i1.MeasurementService }, { type: i2.ColorService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class FilterDatapointsPipe {
    transform(datapoints, searchString) {
        if (!searchString || !datapoints || !Array.isArray(datapoints)) {
            return datapoints;
        }
        const lowerCaseSearchString = searchString.toLowerCase().trim();
        return datapoints.filter(datapoint => this.includesSearchStringIgnoringCasing(datapoint, lowerCaseSearchString));
    }
    includesSearchStringIgnoringCasing(datapoint, lowerCaseSearchString) {
        const label = datapoint.label?.toLowerCase();
        if (label && label.includes(lowerCaseSearchString)) {
            return true;
        }
        const fragment = datapoint.fragment?.toLowerCase();
        if (fragment && fragment.includes(lowerCaseSearchString)) {
            return true;
        }
        const series = datapoint.series?.toLowerCase();
        if (series && series.includes(lowerCaseSearchString)) {
            return true;
        }
        return false;
    }
}
FilterDatapointsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterDatapointsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FilterDatapointsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: FilterDatapointsPipe, name: "filterDatapoints" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilterDatapointsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'filterDatapoints'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWRhdGFwb2ludHMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RhdGFwb2ludC1zZWxlY3Rvci9waXBlcy9maWx0ZXItZGF0YXBvaW50cy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQU1wRCxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFNBQVMsQ0FBQyxVQUF3QixFQUFFLFlBQW9CO1FBQ3RELElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzlELE9BQU8sVUFBVSxDQUFDO1NBQ25CO1FBQ0QsTUFBTSxxQkFBcUIsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQ25DLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxTQUFTLEVBQUUscUJBQXFCLENBQUMsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFFTyxrQ0FBa0MsQ0FDeEMsU0FBcUIsRUFDckIscUJBQTZCO1FBRTdCLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFDN0MsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1lBQ2xELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ25ELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUN4RCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQztRQUMvQyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDcEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7aUhBL0JVLG9CQUFvQjsrR0FBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBSGhDLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGtCQUFrQjtpQkFDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLUElEZXRhaWxzIH0gZnJvbSAnLi4vZGF0YXBvaW50LXNlbGVjdGlvbi5tb2RlbCc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2ZpbHRlckRhdGFwb2ludHMnXG59KVxuZXhwb3J0IGNsYXNzIEZpbHRlckRhdGFwb2ludHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShkYXRhcG9pbnRzOiBLUElEZXRhaWxzW10sIHNlYXJjaFN0cmluZzogc3RyaW5nKTogS1BJRGV0YWlsc1tdIHtcbiAgICBpZiAoIXNlYXJjaFN0cmluZyB8fCAhZGF0YXBvaW50cyB8fCAhQXJyYXkuaXNBcnJheShkYXRhcG9pbnRzKSkge1xuICAgICAgcmV0dXJuIGRhdGFwb2ludHM7XG4gICAgfVxuICAgIGNvbnN0IGxvd2VyQ2FzZVNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZy50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICByZXR1cm4gZGF0YXBvaW50cy5maWx0ZXIoZGF0YXBvaW50ID0+XG4gICAgICB0aGlzLmluY2x1ZGVzU2VhcmNoU3RyaW5nSWdub3JpbmdDYXNpbmcoZGF0YXBvaW50LCBsb3dlckNhc2VTZWFyY2hTdHJpbmcpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5jbHVkZXNTZWFyY2hTdHJpbmdJZ25vcmluZ0Nhc2luZyhcbiAgICBkYXRhcG9pbnQ6IEtQSURldGFpbHMsXG4gICAgbG93ZXJDYXNlU2VhcmNoU3RyaW5nOiBzdHJpbmdcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGFiZWwgPSBkYXRhcG9pbnQubGFiZWw/LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxhYmVsICYmIGxhYmVsLmluY2x1ZGVzKGxvd2VyQ2FzZVNlYXJjaFN0cmluZykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGZyYWdtZW50ID0gZGF0YXBvaW50LmZyYWdtZW50Py50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChmcmFnbWVudCAmJiBmcmFnbWVudC5pbmNsdWRlcyhsb3dlckNhc2VTZWFyY2hTdHJpbmcpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpZXMgPSBkYXRhcG9pbnQuc2VyaWVzPy50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChzZXJpZXMgJiYgc2VyaWVzLmluY2x1ZGVzKGxvd2VyQ2FzZVNlYXJjaFN0cmluZykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19
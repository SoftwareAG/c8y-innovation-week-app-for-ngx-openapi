import { Injectable } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { C8yValidators } from '@c8y/ngx-components';
import { AXIS_TYPES, CHART_LINE_TYPES, CHART_RENDER_TYPES } from './datapoint-attributes.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class DatapointAttributesFormValidationService {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
    }
    getDefaultFormGroup(fieldsToRemove = []) {
        const formFields = {
            __active: [true, []],
            __target: this.getTargetFormGroup(),
            __template: [undefined, []],
            color: ['', this.getColorValidators()],
            label: ['', this.getLabelValidators()],
            description: ['', this.getDescriptionValidators()],
            fragment: ['', this.getFragmentValidators()],
            series: ['', this.getSeriesValidators()],
            range: this.getMinMaxFormGroup(),
            unit: [undefined, this.getUnitValidators()],
            target: [undefined, this.getTargetValidators()],
            redRange: this.getMinMaxFormGroup(),
            yellowRange: this.getMinMaxFormGroup(),
            chart: this.getChartFormGroup()
        };
        if (fieldsToRemove.length) {
            for (const field of fieldsToRemove) {
                delete formFields[field];
            }
        }
        return this.formBuilder.group(formFields, {
            validators: this.getOverallValidators()
        });
    }
    convertToBackendFormat(formDataStructure) {
        if (!formDataStructure) {
            return {};
        }
        const { __active, __target, __template, color, label, description, fragment, series, range, unit, target, redRange, yellowRange, chart } = formDataStructure;
        const obj = {
            __active,
            __target,
            __template,
            color,
            label,
            description,
            fragment,
            series,
            min: range?.min,
            max: range?.max,
            unit,
            target,
            redRangeMin: redRange?.min,
            redRangeMax: redRange?.max,
            yellowRangeMin: yellowRange?.min,
            yellowRangeMax: yellowRange?.max,
            renderType: chart?.renderType,
            lineType: chart?.lineType,
            yAxisType: chart?.yAxisType
        };
        return obj;
    }
    convertToFormGroupFormat(backendDataStructure) {
        if (!backendDataStructure) {
            return {};
        }
        const { __active, __target, __template, color, label, description, fragment, series, min, max, unit, target, redRangeMin, redRangeMax, yellowRangeMin, yellowRangeMax, renderType, lineType, yAxisType } = backendDataStructure;
        const obj = {
            __active,
            __target,
            __template,
            color,
            label,
            description,
            fragment,
            series,
            range: {
                min: this.convertStringToNumber(min),
                max: this.convertStringToNumber(max)
            },
            unit,
            target: this.convertStringToNumber(target),
            redRange: {
                min: this.convertStringToNumber(redRangeMin),
                max: this.convertStringToNumber(redRangeMax)
            },
            yellowRange: {
                min: this.convertStringToNumber(yellowRangeMin),
                max: this.convertStringToNumber(yellowRangeMax)
            },
            chart: renderType || lineType || yAxisType ? { renderType, lineType, yAxisType } : undefined
        };
        return obj;
    }
    getColorValidators() {
        return [Validators.required, Validators.minLength(4)];
    }
    getLabelValidators() {
        return [Validators.required, Validators.minLength(1), Validators.maxLength(120)];
    }
    getDescriptionValidators() {
        return [];
    }
    getFragmentValidators() {
        return [
            Validators.required,
            Validators.minLength(1),
            Validators.maxLength(120),
            Validators.pattern(/^[^.]*$/)
        ];
    }
    getSeriesValidators() {
        return [
            Validators.required,
            Validators.minLength(1),
            Validators.maxLength(120),
            Validators.pattern(/^[^.]*$/)
        ];
    }
    getMinMaxValidators() {
        return [C8yValidators.minMaxValidator(), C8yValidators.requireBothMinAndMax()];
    }
    getUnitValidators() {
        return [];
    }
    getTargetValidators() {
        return [];
    }
    getOverallValidators() {
        return [
            C8yValidators.withinScale('redRange.min'),
            C8yValidators.withinScale('redRange.max'),
            C8yValidators.withinScale('yellowRange.min'),
            C8yValidators.withinScale('yellowRange.max'),
            C8yValidators.withinScale('target')
        ];
    }
    getMinMaxFormGroup() {
        return this.formBuilder.group({ min: [undefined, []], max: [undefined, []] }, { validators: this.getMinMaxValidators() });
    }
    getChartFormGroup() {
        return this.formBuilder.group({
            renderType: [CHART_RENDER_TYPES[0].val, []],
            lineType: [CHART_LINE_TYPES[0].val, []],
            yAxisType: [AXIS_TYPES[0].val, []]
        });
    }
    getTargetFormGroup() {
        return this.formBuilder.group({
            id: [undefined, []],
            name: [undefined, []]
        });
    }
    convertStringToNumber(possibleString) {
        if (typeof possibleString === 'string') {
            try {
                return Number.parseFloat(possibleString);
            }
            catch {
                return undefined;
            }
        }
        else {
            return possibleString;
        }
    }
}
DatapointAttributesFormValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointAttributesFormValidationService, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Injectable });
DatapointAttributesFormValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointAttributesFormValidationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DatapointAttributesFormValidationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,
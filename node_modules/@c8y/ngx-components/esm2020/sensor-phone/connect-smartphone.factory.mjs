import { Injectable } from '@angular/core';
import { gettext, OptionsService } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "ngx-bootstrap/modal";
export class ConnectSmartphoneFactory {
    constructor(optionsService, bsModalService) {
        this.optionsService = optionsService;
        this.bsModalService = bsModalService;
    }
    get() {
        if (this.optionsService.get('sensorPhone', false)) {
            return of([
                {
                    icon: 'c8y-icon c8y-icon-mobile-add',
                    type: 'quicklink',
                    label: gettext('Connect smartphone'),
                    url: undefined,
                    click: async () => {
                        const { SensorPhoneModalComponent } = await import('@c8y/ngx-components/sensor-phone/sensor-phone-modal');
                        this.bsModalService.show(SensorPhoneModalComponent, {
                            backdrop: 'static',
                            ariaDescribedby: 'modal-body',
                            ariaLabelledBy: 'modal-title',
                            class: 'lg'
                        });
                    }
                }
            ]);
        }
    }
}
ConnectSmartphoneFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ConnectSmartphoneFactory, deps: [{ token: i1.OptionsService }, { token: i2.BsModalService }], target: i0.ɵɵFactoryTarget.Injectable });
ConnectSmartphoneFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ConnectSmartphoneFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ConnectSmartphoneFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.OptionsService }, { type: i2.BsModalService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC1zbWFydHBob25lLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zZW5zb3ItcGhvbmUvY29ubmVjdC1zbWFydHBob25lLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQTZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQUcxQixNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLFlBQW9CLGNBQThCLEVBQVUsY0FBOEI7UUFBdEUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQUcsQ0FBQztJQUM5RixHQUFHO1FBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDakQsT0FBTyxFQUFFLENBQUM7Z0JBQ1I7b0JBQ0UsSUFBSSxFQUFFLDhCQUE4QjtvQkFDcEMsSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLEtBQUssRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7b0JBQ3BDLEdBQUcsRUFBRSxTQUFTO29CQUNkLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRTt3QkFDaEIsTUFBTSxFQUFFLHlCQUF5QixFQUFFLEdBQUcsTUFBTSxNQUFNLENBQ2hELHFEQUFxRCxDQUN0RCxDQUFDO3dCQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFOzRCQUNsRCxRQUFRLEVBQUUsUUFBUTs0QkFDbEIsZUFBZSxFQUFFLFlBQVk7NEJBQzdCLGNBQWMsRUFBRSxhQUFhOzRCQUM3QixLQUFLLEVBQUUsSUFBSTt5QkFDWixDQUFDLENBQUM7b0JBQ0wsQ0FBQztpQkFDUzthQUNiLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7cUhBeEJVLHdCQUF3Qjt5SEFBeEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBRHBDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb2NMaW5rLCBFeHRlbnNpb25GYWN0b3J5LCBnZXR0ZXh0LCBPcHRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25uZWN0U21hcnRwaG9uZUZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PERvY0xpbms+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zU2VydmljZTogT3B0aW9uc1NlcnZpY2UsIHByaXZhdGUgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuICBnZXQoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9uc1NlcnZpY2UuZ2V0KCdzZW5zb3JQaG9uZScsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuIG9mKFtcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdjOHktaWNvbiBjOHktaWNvbi1tb2JpbGUtYWRkJyxcbiAgICAgICAgICB0eXBlOiAncXVpY2tsaW5rJyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQ29ubmVjdCBzbWFydHBob25lJyksXG4gICAgICAgICAgdXJsOiB1bmRlZmluZWQsXG4gICAgICAgICAgY2xpY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgU2Vuc29yUGhvbmVNb2RhbENvbXBvbmVudCB9ID0gYXdhaXQgaW1wb3J0KFxuICAgICAgICAgICAgICAnQGM4eS9uZ3gtY29tcG9uZW50cy9zZW5zb3ItcGhvbmUvc2Vuc29yLXBob25lLW1vZGFsJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhTZW5zb3JQaG9uZU1vZGFsQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgYXJpYURlc2NyaWJlZGJ5OiAnbW9kYWwtYm9keScsXG4gICAgICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5OiAnbW9kYWwtdGl0bGUnLFxuICAgICAgICAgICAgICBjbGFzczogJ2xnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIERvY0xpbmtcbiAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuIl19
import { NgModule } from '@angular/core';
import { CoreModule, gettext, hookRoute, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { ChildDevicesComponent } from './child-devices.component';
import { ChildDevicesTabGuard } from './child-devices.guard';
import * as i0 from "@angular/core";
export class ChildDevicesModule {
}
ChildDevicesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChildDevicesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, declarations: [ChildDevicesComponent], imports: [CoreModule, DeviceGridModule, PopoverModule] });
ChildDevicesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, providers: [
        ChildDevicesTabGuard,
        hookRoute({
            context: ViewContext.Device,
            path: 'child-devices',
            priority: 1000,
            icon: 'code-fork',
            label: gettext('Child devices'),
            component: ChildDevicesComponent,
            canActivate: [ChildDevicesTabGuard]
        })
    ], imports: [CoreModule, DeviceGridModule, PopoverModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChildDevicesComponent],
                    imports: [CoreModule, DeviceGridModule, PopoverModule],
                    entryComponents: [ChildDevicesComponent],
                    providers: [
                        ChildDevicesTabGuard,
                        hookRoute({
                            context: ViewContext.Device,
                            path: 'child-devices',
                            priority: 1000,
                            icon: 'code-fork',
                            label: gettext('Child devices'),
                            component: ChildDevicesComponent,
                            canActivate: [ChildDevicesTabGuard]
                        })
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpbGQtZGV2aWNlcy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jaGlsZC1kZXZpY2VzL2NoaWxkLWRldmljZXMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFtQjdELE1BQU0sT0FBTyxrQkFBa0I7OytHQUFsQixrQkFBa0I7Z0hBQWxCLGtCQUFrQixpQkFoQmQscUJBQXFCLGFBQzFCLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhO2dIQWUxQyxrQkFBa0IsYUFibEI7UUFDVCxvQkFBb0I7UUFDcEIsU0FBUyxDQUFDO1lBQ1IsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO1lBQzNCLElBQUksRUFBRSxlQUFlO1lBQ3JCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsSUFBSSxFQUFFLFdBQVc7WUFDakIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDL0IsU0FBUyxFQUFFLHFCQUFxQjtZQUNoQyxXQUFXLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztTQUNwQyxDQUFDO0tBQ0gsWUFiUyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYTsyRkFlMUMsa0JBQWtCO2tCQWpCOUIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDckMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQztvQkFDdEQsZUFBZSxFQUFFLENBQUMscUJBQXFCLENBQUM7b0JBQ3hDLFNBQVMsRUFBRTt3QkFDVCxvQkFBb0I7d0JBQ3BCLFNBQVMsQ0FBQzs0QkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07NEJBQzNCLElBQUksRUFBRSxlQUFlOzRCQUNyQixRQUFRLEVBQUUsSUFBSTs0QkFDZCxJQUFJLEVBQUUsV0FBVzs0QkFDakIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7NEJBQy9CLFNBQVMsRUFBRSxxQkFBcUI7NEJBQ2hDLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDO3lCQUNwQyxDQUFDO3FCQUNIO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIGhvb2tSb3V0ZSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQ2hpbGREZXZpY2VzQ29tcG9uZW50IH0gZnJvbSAnLi9jaGlsZC1kZXZpY2VzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDaGlsZERldmljZXNUYWJHdWFyZCB9IGZyb20gJy4vY2hpbGQtZGV2aWNlcy5ndWFyZCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0NoaWxkRGV2aWNlc0NvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBEZXZpY2VHcmlkTW9kdWxlLCBQb3BvdmVyTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbQ2hpbGREZXZpY2VzQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ2hpbGREZXZpY2VzVGFiR3VhcmQsXG4gICAgaG9va1JvdXRlKHtcbiAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LkRldmljZSxcbiAgICAgIHBhdGg6ICdjaGlsZC1kZXZpY2VzJyxcbiAgICAgIHByaW9yaXR5OiAxMDAwLFxuICAgICAgaWNvbjogJ2NvZGUtZm9yaycsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnQ2hpbGQgZGV2aWNlcycpLFxuICAgICAgY29tcG9uZW50OiBDaGlsZERldmljZXNDb21wb25lbnQsXG4gICAgICBjYW5BY3RpdmF0ZTogW0NoaWxkRGV2aWNlc1RhYkd1YXJkXVxuICAgIH0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ2hpbGREZXZpY2VzTW9kdWxlIHt9XG4iXX0=
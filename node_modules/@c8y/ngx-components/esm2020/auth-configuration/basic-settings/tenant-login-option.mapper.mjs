import { Injectable } from '@angular/core';
import { UserAgent, isBasic, isOauthInternal } from './basic-settings.model';
import { defaults, isEmpty, omitBy, omit } from 'lodash-es';
import * as i0 from "@angular/core";
export class TenantLoginOptionMapper {
    mapTo(tenantLoginOption) {
        const loginOption = omit(this.prapareTenantLoginOption(tenantLoginOption), 'authenticationRestrictions');
        if (isBasic(loginOption)) {
            loginOption.authenticationRestrictions = this.mapAuthenticationRestrictionsTo(tenantLoginOption.authenticationRestrictions);
        }
        return loginOption;
    }
    mapFrom(originalLoginOption, newLoginOption) {
        if (isBasic(originalLoginOption)) {
            return this.mapBasicLoginOption(originalLoginOption, newLoginOption);
        }
        if (isOauthInternal(originalLoginOption)) {
            return this.mapOauthInternalLoginOption(originalLoginOption, newLoginOption);
        }
        throw new Error(`TenantLoginOptionMapper: The tenant login option cannot be mapped. Login option with type: ${originalLoginOption.type} is not supported.`);
    }
    mapAuthenticationRestrictionsTo(authenticationRestrictions) {
        const restrictions = defaults({}, omitBy(authenticationRestrictions, isEmpty), {
            forbiddenUserAgents: [''],
            trustedUserAgents: [''],
            forbiddenClients: []
        });
        restrictions.forbiddenUserAgents = restrictions.forbiddenUserAgents.map(val => new UserAgent(val));
        restrictions.trustedUserAgents = restrictions.trustedUserAgents.map(val => new UserAgent(val));
        return restrictions;
    }
    mapBasicLoginOption(originalLoginOption, newLoginOption) {
        const loginOption = omit(originalLoginOption, ['sessionConfiguration']);
        loginOption.authenticationRestrictions = this.mapAuthenticationRestrictionsFrom(newLoginOption.authenticationRestrictions);
        return loginOption;
    }
    mapOauthInternalLoginOption(originalLoginOption, newLoginOption) {
        const loginOption = omit(originalLoginOption, ['authenticationRestrictions']);
        newLoginOption.sessionConfiguration !== null
            ? (loginOption.sessionConfiguration = newLoginOption.sessionConfiguration)
            : delete loginOption.sessionConfiguration;
        return loginOption;
    }
    mapAuthenticationRestrictionsFrom(authenticationRestrictions) {
        return {
            trustedUserAgents: authenticationRestrictions.trustedUserAgents
                .filter(({ value }) => value)
                .map(({ value }) => value),
            forbiddenUserAgents: authenticationRestrictions.forbiddenUserAgents
                .filter(({ value }) => value)
                .map(({ value }) => value),
            forbiddenClients: authenticationRestrictions.forbiddenClients.filter(value => value)
        };
    }
    prapareTenantLoginOption(tenantLoginOption) {
        return omit(tenantLoginOption, [
            'self',
            'strengthValidity',
            'tfaStrategy',
            'greenMinLength',
            'enforceStrength',
            'strengthValidity',
            '_type'
        ]);
    }
}
TenantLoginOptionMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantLoginOptionMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TenantLoginOptionMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantLoginOptionMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TenantLoginOptionMapper, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
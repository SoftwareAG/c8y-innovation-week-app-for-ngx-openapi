import { Injectable } from '@angular/core';
import { GrantType, SystemOptionsService, TenantLoginOptionsService, TenantLoginOptionType, TenantOptionsService, UserManagementSource, TenantService } from '@c8y/client';
import { catchError, map } from 'rxjs/operators';
import { forkJoin, from, of } from 'rxjs';
import { defaults } from 'lodash-es';
import { AppStateService, TenantUiService } from '@c8y/ngx-components';
import { TypedOption } from './typed-option';
import { TenantLoginOptionMapper } from './tenant-login-option.mapper';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "./tenant-login-option.mapper";
export class AuthConfigurationService {
    constructor(tenantLoginOptionsService, tenantOptionsService, systemOptionsService, appState, tenantUiService, tenantLoginOptionMapper, tenantService) {
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantOptionsService = tenantOptionsService;
        this.systemOptionsService = systemOptionsService;
        this.appState = appState;
        this.tenantUiService = tenantUiService;
        this.tenantLoginOptionMapper = tenantLoginOptionMapper;
        this.tenantService = tenantService;
        this.systemOptionsWithDefaultValue = [
            new TypedOption('password', 'limit.validity', 'number', null),
            new TypedOption('password', 'enforce.strength', 'boolean', false),
            new TypedOption('two-factor-authentication', 'tenant-scope-settings.enabled', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enabled', 'boolean', false),
            // note: this definition is inconsistent with backend and is overridden in getSystemOptions$
            new TypedOption('two-factor-authentication', 'enforced', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enforced.group', 'string', '')
        ];
        this.tenantOptionsWithDefaultValue = [
            new TypedOption('password', 'limit.validity', 'number', 0),
            new TypedOption('password', 'strength.validity', 'boolean', false),
            new TypedOption('two-factor-authentication', 'enabled', 'boolean', false),
            new TypedOption('two-factor-authentication', 'token.validity', 'number', 43200),
            new TypedOption('two-factor-authentication', 'pin.validity', 'number', 30),
            new TypedOption('two-factor-authentication', 'enforced', 'boolean', false),
            new TypedOption('two-factor-authentication', 'strategy', 'string', 'SMS'),
            new TypedOption('oauth.internal', 'basic-token.lifespan.seconds', 'number', null)
        ];
    }
    getAuthConfiguration$() {
        const loginOptions$ = this.getLoginOptions$();
        return forkJoin({
            loginOptions: this.map(loginOptions$),
            tenantOptions: this.getTenantOptions$(),
            systemOptions: this.getSystemOptions$(),
            smsGatewayAvailable: this.isSmsApplicationAvailable$(),
            preferredLoginOptionType: this.getPreferredLoginOptionType$(loginOptions$)
        });
    }
    save(newAuthConfiguration, previousAuthConfiguration) {
        const tenantOptions = this.prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration);
        const updateTenantOptions = tenantOptions.map(tenantOption => this.tenantOptionsService.create(tenantOption));
        const basicLoginOption = this.prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration);
        const oauthInternalLoginOption = this.prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration);
        return Promise.all([
            this.saveOrUpdateLoginOption(basicLoginOption),
            this.saveOrUpdateLoginOption(oauthInternalLoginOption),
            updateTenantOptions
        ]);
    }
    map(loginOptions$) {
        return loginOptions$.pipe(map(loginOptions => loginOptions.map(loginOption => this.tenantLoginOptionMapper.mapTo(loginOption))));
    }
    saveOrUpdateLoginOption(loginOption) {
        return loginOption.id
            ? this.tenantLoginOptionsService.update(loginOption)
            : this.tenantLoginOptionsService.create(loginOption);
    }
    prepareBasicLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        const basicLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.BASIC);
        basicLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.BASIC);
        return this.tenantLoginOptionMapper.mapFrom(basicLoginOption, this.getLoginOptionFromAuthConfiguration(newAuthConfiguration, TenantLoginOptionType.BASIC));
    }
    prepareOauthInternalLoginOption(newAuthConfiguration, previousAuthConfiguration) {
        const oauthInternalLoginOption = this.originalLoginOptionWithDefaults(previousAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        oauthInternalLoginOption.visibleOnLoginPage = this.visibleOnLoginPage(newAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL);
        return this.tenantLoginOptionMapper.mapFrom(oauthInternalLoginOption, this.getLoginOptionFromAuthConfiguration(newAuthConfiguration, TenantLoginOptionType.OAUTH2_INTERNAL));
    }
    originalLoginOptionWithDefaults(previousAuthConfiguration, loginOptionType) {
        return defaults({}, this.getLoginOptionFromAuthConfiguration(previousAuthConfiguration, loginOptionType), this.getDefaultLoginOption(loginOptionType));
    }
    getLoginOptionFromAuthConfiguration(authConfiguration, loginOptionType) {
        return authConfiguration.loginOptions.find(loginOption => loginOption.type === loginOptionType);
    }
    visibleOnLoginPage(authConfiguration, loginOptionType) {
        return authConfiguration.preferredLoginOptionType === loginOptionType;
    }
    prepareTenantOptions(newAuthConfiguration, previousAuthConfiguration) {
        const getValue = (authCfg, tenantOption) => authCfg.tenantOptions[tenantOption.category][tenantOption.key];
        const hasChanged = tenantOption => getValue(newAuthConfiguration, tenantOption) !==
            getValue(previousAuthConfiguration, tenantOption);
        return this.tenantOptionsWithDefaultValue
            .filter(tenantOption => getValue(newAuthConfiguration, tenantOption) !== null)
            .filter(tenantOption => hasChanged(tenantOption))
            .map(tenantOption => ({
            category: tenantOption.category,
            key: tenantOption.key,
            value: getValue(newAuthConfiguration, tenantOption).toString()
        }));
    }
    getLoginOptions$() {
        return from(this.tenantLoginOptionsService.listForCurrentTenant()).pipe(map(res => res.data), map(loginOptions => this.addDefaultLoginOptions(loginOptions)));
    }
    getPreferredLoginOptionType$(loginOptions$) {
        return loginOptions$.pipe(map(loginOptions => {
            return this.tenantUiService.getPreferredLoginOption(loginOptions).type;
        }));
    }
    addDefaultLoginOptions(loginOptions) {
        if (!loginOptions.find(this.tenantUiService.isBasic)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.BASIC));
        }
        if (!loginOptions.find(this.tenantUiService.isOauthInternal)) {
            loginOptions.push(this.getDefaultLoginOption(TenantLoginOptionType.OAUTH2_INTERNAL));
        }
        return loginOptions;
    }
    getTenantOptions$() {
        return forkJoin(this.tenantOptionsWithDefaultValue.map((option) => from(this.tenantOptionsService.detail(option)).pipe(map(res => {
            option.apply(res.data);
            return option;
        }), catchError(() => of(option))))).pipe(map(options => this.getOptionsObject(options)));
    }
    getSystemOptions$() {
        return forkJoin(this.systemOptionsWithDefaultValue.map((option) => {
            const fixedOption = this.fixTfaEnforcedSystemOption(option);
            if (fixedOption) {
                return fixedOption;
            }
            return from(this.systemOptionsService.detail(option)).pipe(map(res => {
                option.apply(res.data);
                return option;
            }), catchError(() => of(option)));
        })).pipe(map(options => this.getOptionsObject(options)));
    }
    /**
     * Returns an observable with fixed `two-factor-authentication.enforced` system option or null.
     * This method fixes problem with inconsistent value. System option `two-factor-authentication.enforced` is list of tenants when UI using boolean value.
     * This part will be removed after implementing new endpoint in MTM-50490.
     */
    fixTfaEnforcedSystemOption(option) {
        if (option.category === 'two-factor-authentication' && option.key === 'enforced') {
            return from(this.tenantService.getTfaSettings(this.tenantUiService.currentTenant)).pipe(map(tfaSettings => {
                option.value = tfaSettings.enforcedOnSystemLevel.toString();
                return option;
            }));
        }
        return null;
    }
    isSmsApplicationAvailable$() {
        return from(this.appState.isApplicationAvailable('sms-gateway'));
    }
    getOptionsObject(options) {
        return options.reduce((optionsObject, option) => {
            optionsObject[option.category] = optionsObject[option.category] || {};
            optionsObject[option.category][option.key] = option.getValue();
            return optionsObject;
        }, {});
    }
    getDefaultLoginOption(tenantLoginOptionType) {
        return {
            userManagementSource: UserManagementSource.INTERNAL,
            grantType: GrantType.PASSWORD,
            providerName: 'Cumulocity',
            visibleOnLoginPage: false,
            type: tenantLoginOptionType
        };
    }
}
AuthConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AuthConfigurationService, deps: [{ token: i1.TenantLoginOptionsService }, { token: i1.TenantOptionsService }, { token: i1.SystemOptionsService }, { token: i2.AppStateService }, { token: i2.TenantUiService }, { token: i3.TenantLoginOptionMapper }, { token: i1.TenantService }], target: i0.ɵɵFactoryTarget.Injectable });
AuthConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AuthConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AuthConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TenantLoginOptionsService }, { type: i1.TenantOptionsService }, { type: i1.SystemOptionsService }, { type: i2.AppStateService }, { type: i2.TenantUiService }, { type: i3.TenantLoginOptionMapper }, { type: i1.TenantService }]; } });
//# sourceMappingURL=data:application/json;base64,
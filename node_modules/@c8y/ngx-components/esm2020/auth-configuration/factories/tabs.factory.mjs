import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { SsoConfigurationService } from '../sso-configuration/sso-configuration.service';
import { catchError, mapTo, mergeAll, toArray } from 'rxjs/operators';
import { of, EMPTY, merge } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../sso-configuration/sso-configuration.service";
export class TabsFactory {
    constructor(router, ssoConfigurationService) {
        this.router = router;
        this.ssoConfigurationService = ssoConfigurationService;
    }
    get() {
        if (!this.router.url.match(/auth-configuration/g)) {
            return of([]);
        }
        const basicSettingsTab$ = of({
            path: 'auth-configuration/basic_settings',
            label: gettext('Basic settings'),
            icon: 'unlock-alt',
            priority: 1100,
            orientation: 'horizontal'
        });
        const ssoTab$ = this.ssoConfigurationService.getSsoConfiguration$().pipe(mapTo({
            path: 'auth-configuration/single_sign-on',
            label: gettext('Single sign-on'),
            icon: 'sign-in',
            priority: 1050,
            orientation: 'horizontal'
        }), catchError(() => EMPTY));
        return merge([basicSettingsTab$, ssoTab$]).pipe(mergeAll(), toArray());
    }
}
TabsFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsFactory, deps: [{ token: i1.Router }, { token: i2.SsoConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
TabsFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TabsFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.SsoConfigurationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL2ZhY3Rvcmllcy90YWJzLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN6RixPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7O0FBR3BELE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQW1CLE1BQWMsRUFBVSx1QkFBZ0Q7UUFBeEUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBRyxDQUFDO0lBQy9GLEdBQUc7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDakQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjtRQUVELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO1lBQzNCLElBQUksRUFBRSxtQ0FBbUM7WUFDekMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNoQyxJQUFJLEVBQUUsWUFBWTtZQUNsQixRQUFRLEVBQUUsSUFBSTtZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQ25CLENBQUMsQ0FBQztRQUNWLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FDdEUsS0FBSyxDQUFDO1lBQ0osSUFBSSxFQUFFLG1DQUFtQztZQUN6QyxLQUFLLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1lBQ2hDLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLElBQUk7WUFDZCxXQUFXLEVBQUUsWUFBWTtTQUNuQixDQUFDLEVBQ1QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUN4QixDQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7O3dHQXpCVSxXQUFXOzRHQUFYLFdBQVc7MkZBQVgsV0FBVztrQkFEdkIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBnZXR0ZXh0LCBUYWIsIFRhYkZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc3NvLWNvbmZpZ3VyYXRpb24vc3NvLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXBUbywgbWVyZ2VBbGwsIHRvQXJyYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgRU1QVFksIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUYWJzRmFjdG9yeSBpbXBsZW1lbnRzIFRhYkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgc3NvQ29uZmlndXJhdGlvblNlcnZpY2U6IFNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlKSB7fVxuICBnZXQoKTogT2JzZXJ2YWJsZTxUYWJbXT4ge1xuICAgIGlmICghdGhpcy5yb3V0ZXIudXJsLm1hdGNoKC9hdXRoLWNvbmZpZ3VyYXRpb24vZykpIHtcbiAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfVxuXG4gICAgY29uc3QgYmFzaWNTZXR0aW5nc1RhYiQgPSBvZih7XG4gICAgICBwYXRoOiAnYXV0aC1jb25maWd1cmF0aW9uL2Jhc2ljX3NldHRpbmdzJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdCYXNpYyBzZXR0aW5ncycpLFxuICAgICAgaWNvbjogJ3VubG9jay1hbHQnLFxuICAgICAgcHJpb3JpdHk6IDExMDAsXG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnXG4gICAgfSBhcyBUYWIpO1xuICAgIGNvbnN0IHNzb1RhYiQgPSB0aGlzLnNzb0NvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFNzb0NvbmZpZ3VyYXRpb24kKCkucGlwZShcbiAgICAgIG1hcFRvKHtcbiAgICAgICAgcGF0aDogJ2F1dGgtY29uZmlndXJhdGlvbi9zaW5nbGVfc2lnbi1vbicsXG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdTaW5nbGUgc2lnbi1vbicpLFxuICAgICAgICBpY29uOiAnc2lnbi1pbicsXG4gICAgICAgIHByaW9yaXR5OiAxMDUwLFxuICAgICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnXG4gICAgICB9IGFzIFRhYiksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IEVNUFRZKVxuICAgICk7XG4gICAgcmV0dXJuIG1lcmdlKFtiYXNpY1NldHRpbmdzVGFiJCwgc3NvVGFiJF0pLnBpcGUobWVyZ2VBbGwoKSwgdG9BcnJheSgpKTtcbiAgfVxufVxuIl19
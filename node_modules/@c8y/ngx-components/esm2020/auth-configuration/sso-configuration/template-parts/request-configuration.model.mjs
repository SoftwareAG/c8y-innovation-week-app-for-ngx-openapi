import { map, pickBy, identity } from 'lodash-es';
export class RequestConfiguration {
    constructor(requestConfiguration) {
        this.headers = new RequestConfigurationDynamicArray(requestConfiguration.headers);
        this.method = requestConfiguration.method;
        this.operation = requestConfiguration.operation;
        this.requestParams = new RequestConfigurationDynamicArray(requestConfiguration.requestParams);
        this.body = requestConfiguration.body;
        this.url = requestConfiguration.url;
    }
    toRequest() {
        return pickBy({
            body: this.method === 'GET' ? '' : this.body,
            headers: this.headers.toObject(),
            method: this.method,
            operation: this.operation,
            requestParams: this.requestParams.toObject(),
            url: this.url
        }, identity);
    }
}
// tslint:disable-next-line:max-classes-per-file
export class RequestConfigurationDynamicArray extends Array {
    constructor(obj) {
        super();
        this.push(...map(obj, (value, key) => ({
            key,
            value
        })));
    }
    toObject() {
        return this.reduce((obj, element) => {
            obj[element.key] = element.value;
            return obj;
        }, {});
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jb25maWd1cmF0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL3Nzby1jb25maWd1cmF0aW9uL3RlbXBsYXRlLXBhcnRzL3JlcXVlc3QtY29uZmlndXJhdGlvbi5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbEQsTUFBTSxPQUFPLG9CQUFvQjtJQVEvQixZQUFZLG9CQUE2QjtRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksZ0NBQWdDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdDQUFnQyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlGLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxHQUFHLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxNQUFNLENBQ1g7WUFDRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2hDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO1lBQzVDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztTQUNkLEVBQ0QsUUFBUSxDQUNFLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFFRCxnREFBZ0Q7QUFDaEQsTUFBTSxPQUFPLGdDQUFpQyxTQUFRLEtBQUs7SUFDekQsWUFBWSxHQUE0QjtRQUN0QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxJQUFJLENBQ1AsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMzQixHQUFHO1lBQ0gsS0FBSztTQUNOLENBQUMsQ0FBQyxDQUNKLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNsQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0UGFyYW1zLCBIZWFkZXJzLCBSZXF1ZXN0IH0gZnJvbSAnLi4vc3NvLWNvbmZpZ3VyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgbWFwLCBwaWNrQnksIGlkZW50aXR5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuZXhwb3J0IGNsYXNzIFJlcXVlc3RDb25maWd1cmF0aW9uIHtcbiAgYm9keT86IHN0cmluZztcbiAgaGVhZGVyczogUmVxdWVzdENvbmZpZ3VyYXRpb25EeW5hbWljQXJyYXk7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBvcGVyYXRpb246IHN0cmluZztcbiAgcmVxdWVzdFBhcmFtczogUmVxdWVzdENvbmZpZ3VyYXRpb25EeW5hbWljQXJyYXk7XG4gIHVybD86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0Q29uZmlndXJhdGlvbjogUmVxdWVzdCkge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBSZXF1ZXN0Q29uZmlndXJhdGlvbkR5bmFtaWNBcnJheShyZXF1ZXN0Q29uZmlndXJhdGlvbi5oZWFkZXJzKTtcbiAgICB0aGlzLm1ldGhvZCA9IHJlcXVlc3RDb25maWd1cmF0aW9uLm1ldGhvZDtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IHJlcXVlc3RDb25maWd1cmF0aW9uLm9wZXJhdGlvbjtcbiAgICB0aGlzLnJlcXVlc3RQYXJhbXMgPSBuZXcgUmVxdWVzdENvbmZpZ3VyYXRpb25EeW5hbWljQXJyYXkocmVxdWVzdENvbmZpZ3VyYXRpb24ucmVxdWVzdFBhcmFtcyk7XG4gICAgdGhpcy5ib2R5ID0gcmVxdWVzdENvbmZpZ3VyYXRpb24uYm9keTtcbiAgICB0aGlzLnVybCA9IHJlcXVlc3RDb25maWd1cmF0aW9uLnVybDtcbiAgfVxuXG4gIHRvUmVxdWVzdCgpOiBSZXF1ZXN0IHtcbiAgICByZXR1cm4gcGlja0J5KFxuICAgICAge1xuICAgICAgICBib2R5OiB0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgPyAnJyA6IHRoaXMuYm9keSxcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLnRvT2JqZWN0KCksXG4gICAgICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgICAgIG9wZXJhdGlvbjogdGhpcy5vcGVyYXRpb24sXG4gICAgICAgIHJlcXVlc3RQYXJhbXM6IHRoaXMucmVxdWVzdFBhcmFtcy50b09iamVjdCgpLFxuICAgICAgICB1cmw6IHRoaXMudXJsXG4gICAgICB9LFxuICAgICAgaWRlbnRpdHlcbiAgICApIGFzIFJlcXVlc3Q7XG4gIH1cbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgUmVxdWVzdENvbmZpZ3VyYXRpb25EeW5hbWljQXJyYXkgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKG9iajogUmVxdWVzdFBhcmFtcyB8IEhlYWRlcnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHVzaChcbiAgICAgIC4uLm1hcChvYmosICh2YWx1ZSwga2V5KSA9PiAoe1xuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlXG4gICAgICB9KSlcbiAgICApO1xuICB9XG5cbiAgdG9PYmplY3QoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIHRoaXMucmVkdWNlKChvYmosIGVsZW1lbnQpID0+IHtcbiAgICAgIG9ialtlbGVtZW50LmtleV0gPSBlbGVtZW50LnZhbHVlO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gIH1cbn1cbiJdfQ==
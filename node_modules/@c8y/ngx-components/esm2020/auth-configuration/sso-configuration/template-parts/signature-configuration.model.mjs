import { pick, findKey, get, has, reduce, map, omit } from 'lodash-es';
import { gettext } from '@c8y/ngx-components';
export var AlgorithmType;
(function (AlgorithmType) {
    AlgorithmType["PCKS"] = "PCKS";
    AlgorithmType["RSA"] = "RSA";
})(AlgorithmType || (AlgorithmType = {}));
export const algorithmTypeConfig = {
    [AlgorithmType.PCKS]: {
        name: 'PCKS',
        value: 'PCKS',
        label: gettext('X.509 certificate (PEM format)')
    },
    [AlgorithmType.RSA]: {
        name: 'RSA',
        value: 'RSA',
        label: gettext('RSA public key (X.509 Subject Public Key Info)')
    }
};
export var CertificateType;
(function (CertificateType) {
    CertificateType["CUSTOM"] = "CUSTOM";
    CertificateType["AZURE"] = "AZURE";
    CertificateType["ADFS"] = "ADFS";
    CertificateType["JWKS"] = "JWKS";
})(CertificateType || (CertificateType = {}));
export const certificateTypeConfig = {
    [CertificateType.CUSTOM]: {
        name: 'CUSTOM',
        label: gettext('Custom'),
        value: 'CUSTOM',
        signatureVerificationConfigFragment: 'manual',
        ordinal: 0
    },
    [CertificateType.AZURE]: {
        name: 'AZURE',
        label: 'Azure',
        value: 'AZURE',
        signatureVerificationConfigFragment: 'aad',
        ordinal: 1
    },
    [CertificateType.ADFS]: {
        name: 'ADFS',
        label: gettext('ADFS manifest'),
        value: 'ADFS',
        signatureVerificationConfigFragment: 'adfsManifest',
        ordinal: 2
    },
    [CertificateType.JWKS]: {
        name: 'JWKS',
        label: 'JWKS',
        value: 'JWKS',
        signatureVerificationConfigFragment: 'jwks',
        ordinal: 3
    }
};
export class SignatureConfiguration {
    constructor(signatureVerificationConfig) {
        this.manual = new CustomSignatureVerification(signatureVerificationConfig.manual || { certIdFromField: false });
        this.aad = signatureVerificationConfig.aad || { publicKeyDiscoveryUrl: '' };
        this.jwks = signatureVerificationConfig.jwks || { jwksUri: '' };
        this.adfsManifest = signatureVerificationConfig.adfsManifest || { manifestUrl: '' };
        this.certificateTypeChosen = this.getCertificateType(signatureVerificationConfig);
    }
    toSignatureVerificationConfig() {
        const result = {
            manual: this.manual.toManual(),
            aad: this.aad,
            jwks: this.jwks,
            adfsManifest: this.adfsManifest
        };
        return pick(result, certificateTypeConfig[this.certificateTypeChosen].signatureVerificationConfigFragment);
    }
    getCertificateType(signatureVerificationConfig) {
        const templateCertificateType = findKey(certificateTypeConfig, certificateType => has(signatureVerificationConfig, certificateType.signatureVerificationConfigFragment));
        return templateCertificateType || CertificateType.CUSTOM;
    }
}
// tslint:disable-next-line:max-classes-per-file
class CustomSignatureVerification {
    constructor(manual) {
        this.customCertificates = [];
        this.certIdFromField = manual.certIdFromField;
        this.certIdField = manual.certIdField;
        this.customCertificates = this.getCustomCertificates(manual);
    }
    getCustomCertificates(manual) {
        const certificates = get(manual, 'certificates', []);
        const customCertificates = map(certificates, (certificate, key) => ({
            ...certificate,
            key,
            validFrom: new Date(certificate.validFrom),
            validTill: new Date(certificate.validTill)
        }));
        if (customCertificates.length === 0) {
            const newCustomCertificate = { alg: 'RSA' };
            customCertificates.push(newCustomCertificate);
        }
        return customCertificates;
    }
    addCustomCertificate() {
        const newCustomCertificate = { alg: AlgorithmType.RSA, key: '', publicKey: '' };
        this.customCertificates.push(newCustomCertificate);
    }
    removeCustomCertificate(customCertificate) {
        const indexOfCustomCertificate = this.customCertificates.indexOf(customCertificate);
        this.customCertificates.splice(indexOfCustomCertificate, 1);
    }
    toManual() {
        const manual = this.getManualSignatureVerificationConfig();
        manual.certificates = this.getSignatureCertificates();
        return manual;
    }
    getSignatureCertificates() {
        if (this.customCertificates.length < 2) {
            this.customCertificates[0].key = 'default';
        }
        return reduce(this.customCertificates, (signatureCertificates, customCertificate) => ({
            ...signatureCertificates,
            [customCertificate.key]: {
                alg: customCertificate.alg,
                publicKey: customCertificate.publicKey,
                validFrom: customCertificate.validFrom,
                validTill: customCertificate.validTill
            }
        }), {});
    }
    getManualSignatureVerificationConfig() {
        let manual = {
            certIdFromField: this.customCertificates.length > 1,
            certIdField: this.certIdField
        };
        if (!manual.certIdFromField) {
            manual = omit(manual, 'certIdField');
        }
        return manual;
    }
}
//# sourceMappingURL=data:application/json;base64,
import { ValidationMethod } from '../sso-configuration.model';
import { gettext } from '@c8y/ngx-components';
import { RequestConfiguration } from './request-configuration.model';
export const validationMethodConfig = {
    [ValidationMethod.INTROSPECTION]: {
        name: 'INTROSPECTION',
        value: 'INTROSPECTION',
        label: gettext('Introspection`Method of validating access token from external IAM system`'),
        defaults: {
            method: 'POST',
            body: 'token=${accessToken}&client_id=${clientId}&client_secret=',
            url: '',
            headers: {},
            operation: 'EXECUTE',
            requestParams: {}
        }
    },
    [ValidationMethod.USERINFO]: {
        name: 'USERINFO',
        value: 'USERINFO',
        label: gettext('User info`Method of validating access token from external IAM system`'),
        defaults: {
            url: '',
            method: 'GET',
            body: '',
            headers: { Authorization: 'Bearer ${accessToken}' },
            operation: 'EXECUTE',
            requestParams: {}
        }
    }
};
const defaultTokenValidationRequest = {
    body: 'token=${accessToken}&client_id=${clientId}&client_secret=',
    url: '',
    headers: {},
    method: 'POST',
    operation: 'EXECUTE',
    requestParams: {}
};
const defaultUserIdConfig = {
    jwtField: '',
    useConstantValue: true
};
export class ExternalToken {
    constructor(externalTokenConfig) {
        const _externalTokenConfig = Object.assign({ enabled: false }, externalTokenConfig);
        this.userOrAppIdConfig = _externalTokenConfig.userOrAppIdConfig || defaultUserIdConfig;
        this.validationMethod = _externalTokenConfig.validationMethod || ValidationMethod.INTROSPECTION;
        this.validationRequired = _externalTokenConfig.validationRequired;
        this.enabled = _externalTokenConfig.enabled;
        this.tokenValidationRequest = new RequestConfiguration(_externalTokenConfig.tokenValidationRequest || defaultTokenValidationRequest);
        this.accessTokenValidityCheckIntervalInMinutes =
            _externalTokenConfig.accessTokenValidityCheckIntervalInMinutes || 1;
    }
    toExternalTokenConfig() {
        if (!this.enabled) {
            return { enabled: this.enabled };
        }
        const externalTokenConfig = {
            userOrAppIdConfig: this.userOrAppIdConfig,
            validationRequired: this.validationRequired,
            enabled: this.enabled
        };
        if (this.validationRequired) {
            externalTokenConfig.validationMethod = this.validationMethod;
            externalTokenConfig.tokenValidationRequest = this.tokenValidationRequest.toRequest();
            externalTokenConfig.accessTokenValidityCheckIntervalInMinutes =
                this.accessTokenValidityCheckIntervalInMinutes;
        }
        return externalTokenConfig;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtdG9rZW4tY29uZmlnLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL3Nzby1jb25maWd1cmF0aW9uL3RlbXBsYXRlLXBhcnRzL2V4dGVybmFsLXRva2VuLWNvbmZpZy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBSUwsZ0JBQWdCLEVBQ2pCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXJFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHO0lBQ3BDLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDaEMsSUFBSSxFQUFFLGVBQWU7UUFDckIsS0FBSyxFQUFFLGVBQWU7UUFDdEIsS0FBSyxFQUFFLE9BQU8sQ0FBQywyRUFBMkUsQ0FBQztRQUMzRixRQUFRLEVBQUU7WUFDUixNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSwyREFBMkQ7WUFDakUsR0FBRyxFQUFFLEVBQUU7WUFDUCxPQUFPLEVBQUUsRUFBRTtZQUNYLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLGFBQWEsRUFBRSxFQUFFO1NBQ2xCO0tBQ0Y7SUFDRCxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzNCLElBQUksRUFBRSxVQUFVO1FBQ2hCLEtBQUssRUFBRSxVQUFVO1FBQ2pCLEtBQUssRUFBRSxPQUFPLENBQUMsdUVBQXVFLENBQUM7UUFDdkYsUUFBUSxFQUFFO1lBQ1IsR0FBRyxFQUFFLEVBQUU7WUFDUCxNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxFQUFFO1lBQ1IsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFO1lBQ25ELFNBQVMsRUFBRSxTQUFTO1lBQ3BCLGFBQWEsRUFBRSxFQUFFO1NBQ2xCO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsTUFBTSw2QkFBNkIsR0FBWTtJQUM3QyxJQUFJLEVBQUUsMkRBQTJEO0lBQ2pFLEdBQUcsRUFBRSxFQUFFO0lBQ1AsT0FBTyxFQUFFLEVBQUU7SUFDWCxNQUFNLEVBQUUsTUFBTTtJQUNkLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLGFBQWEsRUFBRSxFQUFFO0NBQ2xCLENBQUM7QUFFRixNQUFNLG1CQUFtQixHQUFpQjtJQUN4QyxRQUFRLEVBQUUsRUFBRTtJQUNaLGdCQUFnQixFQUFFLElBQUk7Q0FDdkIsQ0FBQztBQUVGLE1BQU0sT0FBTyxhQUFhO0lBUXhCLFlBQVksbUJBQXdDO1FBQ2xELE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxpQkFBaUIsSUFBSSxtQkFBbUIsQ0FBQztRQUN2RixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsYUFBYSxDQUFDO1FBQ2hHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNsRSxJQUFJLENBQUMsT0FBTyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztRQUM1QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxvQkFBb0IsQ0FDcEQsb0JBQW9CLENBQUMsc0JBQXNCLElBQUksNkJBQTZCLENBQzdFLENBQUM7UUFDRixJQUFJLENBQUMseUNBQXlDO1lBQzVDLG9CQUFvQixDQUFDLHlDQUF5QyxJQUFJLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsTUFBTSxtQkFBbUIsR0FBd0I7WUFDL0MsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUN6QyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsbUJBQW1CLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1lBQzdELG1CQUFtQixDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNyRixtQkFBbUIsQ0FBQyx5Q0FBeUM7Z0JBQzNELElBQUksQ0FBQyx5Q0FBeUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRXh0ZXJuYWxUb2tlbkNvbmZpZyxcbiAgUmVxdWVzdCxcbiAgVXNlcklkQ29uZmlnLFxuICBWYWxpZGF0aW9uTWV0aG9kXG59IGZyb20gJy4uL3Nzby1jb25maWd1cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcXVlc3RDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9yZXF1ZXN0LWNvbmZpZ3VyYXRpb24ubW9kZWwnO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbk1ldGhvZENvbmZpZyA9IHtcbiAgW1ZhbGlkYXRpb25NZXRob2QuSU5UUk9TUEVDVElPTl06IHtcbiAgICBuYW1lOiAnSU5UUk9TUEVDVElPTicsXG4gICAgdmFsdWU6ICdJTlRST1NQRUNUSU9OJyxcbiAgICBsYWJlbDogZ2V0dGV4dCgnSW50cm9zcGVjdGlvbmBNZXRob2Qgb2YgdmFsaWRhdGluZyBhY2Nlc3MgdG9rZW4gZnJvbSBleHRlcm5hbCBJQU0gc3lzdGVtYCcpLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6ICd0b2tlbj0ke2FjY2Vzc1Rva2VufSZjbGllbnRfaWQ9JHtjbGllbnRJZH0mY2xpZW50X3NlY3JldD0nLFxuICAgICAgdXJsOiAnJyxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgb3BlcmF0aW9uOiAnRVhFQ1VURScsXG4gICAgICByZXF1ZXN0UGFyYW1zOiB7fVxuICAgIH1cbiAgfSxcbiAgW1ZhbGlkYXRpb25NZXRob2QuVVNFUklORk9dOiB7XG4gICAgbmFtZTogJ1VTRVJJTkZPJyxcbiAgICB2YWx1ZTogJ1VTRVJJTkZPJyxcbiAgICBsYWJlbDogZ2V0dGV4dCgnVXNlciBpbmZvYE1ldGhvZCBvZiB2YWxpZGF0aW5nIGFjY2VzcyB0b2tlbiBmcm9tIGV4dGVybmFsIElBTSBzeXN0ZW1gJyksXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIHVybDogJycsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgYm9keTogJycsXG4gICAgICBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246ICdCZWFyZXIgJHthY2Nlc3NUb2tlbn0nIH0sXG4gICAgICBvcGVyYXRpb246ICdFWEVDVVRFJyxcbiAgICAgIHJlcXVlc3RQYXJhbXM6IHt9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBkZWZhdWx0VG9rZW5WYWxpZGF0aW9uUmVxdWVzdDogUmVxdWVzdCA9IHtcbiAgYm9keTogJ3Rva2VuPSR7YWNjZXNzVG9rZW59JmNsaWVudF9pZD0ke2NsaWVudElkfSZjbGllbnRfc2VjcmV0PScsXG4gIHVybDogJycsXG4gIGhlYWRlcnM6IHt9LFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgb3BlcmF0aW9uOiAnRVhFQ1VURScsXG4gIHJlcXVlc3RQYXJhbXM6IHt9XG59O1xuXG5jb25zdCBkZWZhdWx0VXNlcklkQ29uZmlnOiBVc2VySWRDb25maWcgPSB7XG4gIGp3dEZpZWxkOiAnJyxcbiAgdXNlQ29uc3RhbnRWYWx1ZTogdHJ1ZVxufTtcblxuZXhwb3J0IGNsYXNzIEV4dGVybmFsVG9rZW4ge1xuICB1c2VyT3JBcHBJZENvbmZpZzogVXNlcklkQ29uZmlnO1xuICB2YWxpZGF0aW9uTWV0aG9kOiBWYWxpZGF0aW9uTWV0aG9kO1xuICB2YWxpZGF0aW9uUmVxdWlyZWQ6IGJvb2xlYW47XG4gIGVuYWJsZWQ6IGJvb2xlYW47XG4gIHRva2VuVmFsaWRhdGlvblJlcXVlc3Q6IFJlcXVlc3RDb25maWd1cmF0aW9uO1xuICBhY2Nlc3NUb2tlblZhbGlkaXR5Q2hlY2tJbnRlcnZhbEluTWludXRlczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGV4dGVybmFsVG9rZW5Db25maWc6IEV4dGVybmFsVG9rZW5Db25maWcpIHtcbiAgICBjb25zdCBfZXh0ZXJuYWxUb2tlbkNvbmZpZyA9IE9iamVjdC5hc3NpZ24oeyBlbmFibGVkOiBmYWxzZSB9LCBleHRlcm5hbFRva2VuQ29uZmlnKTtcbiAgICB0aGlzLnVzZXJPckFwcElkQ29uZmlnID0gX2V4dGVybmFsVG9rZW5Db25maWcudXNlck9yQXBwSWRDb25maWcgfHwgZGVmYXVsdFVzZXJJZENvbmZpZztcbiAgICB0aGlzLnZhbGlkYXRpb25NZXRob2QgPSBfZXh0ZXJuYWxUb2tlbkNvbmZpZy52YWxpZGF0aW9uTWV0aG9kIHx8IFZhbGlkYXRpb25NZXRob2QuSU5UUk9TUEVDVElPTjtcbiAgICB0aGlzLnZhbGlkYXRpb25SZXF1aXJlZCA9IF9leHRlcm5hbFRva2VuQ29uZmlnLnZhbGlkYXRpb25SZXF1aXJlZDtcbiAgICB0aGlzLmVuYWJsZWQgPSBfZXh0ZXJuYWxUb2tlbkNvbmZpZy5lbmFibGVkO1xuICAgIHRoaXMudG9rZW5WYWxpZGF0aW9uUmVxdWVzdCA9IG5ldyBSZXF1ZXN0Q29uZmlndXJhdGlvbihcbiAgICAgIF9leHRlcm5hbFRva2VuQ29uZmlnLnRva2VuVmFsaWRhdGlvblJlcXVlc3QgfHwgZGVmYXVsdFRva2VuVmFsaWRhdGlvblJlcXVlc3RcbiAgICApO1xuICAgIHRoaXMuYWNjZXNzVG9rZW5WYWxpZGl0eUNoZWNrSW50ZXJ2YWxJbk1pbnV0ZXMgPVxuICAgICAgX2V4dGVybmFsVG9rZW5Db25maWcuYWNjZXNzVG9rZW5WYWxpZGl0eUNoZWNrSW50ZXJ2YWxJbk1pbnV0ZXMgfHwgMTtcbiAgfVxuXG4gIHRvRXh0ZXJuYWxUb2tlbkNvbmZpZygpOiBFeHRlcm5hbFRva2VuQ29uZmlnIHtcbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuIHsgZW5hYmxlZDogdGhpcy5lbmFibGVkIH07XG4gICAgfVxuICAgIGNvbnN0IGV4dGVybmFsVG9rZW5Db25maWc6IEV4dGVybmFsVG9rZW5Db25maWcgPSB7XG4gICAgICB1c2VyT3JBcHBJZENvbmZpZzogdGhpcy51c2VyT3JBcHBJZENvbmZpZyxcbiAgICAgIHZhbGlkYXRpb25SZXF1aXJlZDogdGhpcy52YWxpZGF0aW9uUmVxdWlyZWQsXG4gICAgICBlbmFibGVkOiB0aGlzLmVuYWJsZWRcbiAgICB9O1xuICAgIGlmICh0aGlzLnZhbGlkYXRpb25SZXF1aXJlZCkge1xuICAgICAgZXh0ZXJuYWxUb2tlbkNvbmZpZy52YWxpZGF0aW9uTWV0aG9kID0gdGhpcy52YWxpZGF0aW9uTWV0aG9kO1xuICAgICAgZXh0ZXJuYWxUb2tlbkNvbmZpZy50b2tlblZhbGlkYXRpb25SZXF1ZXN0ID0gdGhpcy50b2tlblZhbGlkYXRpb25SZXF1ZXN0LnRvUmVxdWVzdCgpO1xuICAgICAgZXh0ZXJuYWxUb2tlbkNvbmZpZy5hY2Nlc3NUb2tlblZhbGlkaXR5Q2hlY2tJbnRlcnZhbEluTWludXRlcyA9XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5WYWxpZGl0eUNoZWNrSW50ZXJ2YWxJbk1pbnV0ZXM7XG4gICAgfVxuICAgIHJldHVybiBleHRlcm5hbFRva2VuQ29uZmlnO1xuICB9XG59XG4iXX0=
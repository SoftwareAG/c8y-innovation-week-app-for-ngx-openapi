import { Injectable } from '@angular/core';
import { GrantType, TenantLoginOptionsService, TenantLoginOptionType, UserManagementSource } from '@c8y/client';
import { TemplateType } from './sso-configuration.model';
import { defer, of, throwError } from 'rxjs';
import { catchError, map, publishReplay, refCount, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
export class SsoConfigurationService {
    constructor(loginOptionsService) {
        this.loginOptionsService = loginOptionsService;
        this.ssoConfiguration$ = defer(() => this.loginOptionsService.detail(TenantLoginOptionType.OAUTH2)).pipe(map(res => res.data), catchError(({ res }) => {
            if (res.status === 403 /* HttpStatusCode.Forbidden */)
                return throwError(new Error());
            else
                return of(this.defaultConfiguration);
        }), publishReplay(1, 1000), refCount(), take(1));
        this.defaultConfiguration = {
            authorizationRequest: {
                body: '',
                headers: {},
                method: 'GET',
                operation: 'REDIRECT',
                requestParams: {
                    response_type: 'code',
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    scope: ''
                }
            },
            tokenRequest: {
                body: 'grant_type=authorization_code&code=${code}&redirect_uri=${redirectUri}&client_id=${clientId}',
                headers: {},
                method: 'POST',
                operation: 'EXECUTE',
                requestParams: {
                    response_type: 'code',
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    scope: ''
                }
            },
            refreshRequest: {
                body: 'grant_type=refresh_token&refresh_token=${refreshToken}&client_id=${clientId}',
                headers: {
                    Authorization: ''
                },
                method: 'POST',
                operation: 'EXECUTE',
                requestParams: {
                    response_type: 'refresh',
                    client_id: '${clientId}'
                }
            },
            logoutRequest: {
                headers: {},
                method: 'POST',
                operation: 'REDIRECT',
                requestParams: {}
            },
            type: TenantLoginOptionType.OAUTH2,
            grantType: GrantType.AUTHORIZATION_CODE,
            userManagementSource: UserManagementSource.REMOTE,
            onNewUser: {
                dynamicMapping: {
                    mappings: [],
                    inventoryMappings: [],
                    configuration: {
                        mapRolesOnlyForNewUser: false,
                        manageRolesOnlyFromAccessMapping: false
                    }
                }
            },
            userIdConfig: {
                jwtField: '',
                useConstantValue: true
            },
            signatureVerificationConfig: {
                manual: {
                    certIdFromField: false
                }
            },
            template: TemplateType.CUSTOM,
            clientId: '',
            audience: '',
            issuer: '',
            buttonName: '',
            redirectToPlatform: '',
            providerName: '',
            visibleOnLoginPage: true,
            accessTokenToUserDataMappings: {},
            externalTokenConfig: {
                enabled: false
            }
        };
    }
    getSsoConfiguration$() {
        return this.ssoConfiguration$;
    }
    save(ssoConfiguration) {
        return this.loginOptionsService.save(ssoConfiguration);
    }
}
SsoConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SsoConfigurationService, deps: [{ token: i1.TenantLoginOptionsService }], target: i0.ɵɵFactoryTarget.Injectable });
SsoConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SsoConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SsoConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.TenantLoginOptionsService }]; } });
//# sourceMappingURL=data:application/json;base64,
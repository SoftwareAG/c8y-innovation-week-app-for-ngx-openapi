import { TemplateType } from '../sso-configuration.model';
import { assign, defaults, set, at, map, defaultsDeep, has, head, reject, isUndefined } from 'lodash-es';
import { GrantType, TenantLoginOptionType, UserManagementSource } from '@c8y/client';
import { SignatureConfiguration } from '../template-parts/signature-configuration.model';
import { Injectable } from '@angular/core';
import { ExternalToken } from '../template-parts/external-token-config.model';
import * as i0 from "@angular/core";
export class AadConfigurationMapper {
    constructor() {
        this.defaults = {
            visibleOnLoginPage: true
        };
        this.constants = {
            providerName: 'Azure AD',
            type: 'oauth2',
            grantType: 'AUTHORIZATION_CODE'
        };
        this.urlPattern = /^(.+)\/((.+?)\/oauth2\/authorize)$/;
    }
    mapFrom(templateModel) {
        const baseUrl = `${templateModel.aadAddress}/${templateModel.tenant}/oauth2`;
        const ssoConfiguration = {
            audience: templateModel.applicationId,
            clientId: templateModel.applicationId,
            logoutRequest: templateModel.redirectAfterLogout
                ? {
                    method: 'POST',
                    url: `${baseUrl}/logout`,
                    requestParams: {
                        post_logout_redirect_uri: templateModel.redirectAfterLogoutUrl
                    },
                    headers: {},
                    body: '',
                    operation: 'REDIRECT'
                }
                : {
                    method: 'POST',
                    headers: {},
                    operation: 'REDIRECT',
                    requestParams: {}
                },
            authorizationRequest: {
                method: 'GET',
                url: `${baseUrl}/authorize`,
                requestParams: {
                    redirect_uri: '${redirectUri}',
                    client_id: '${clientId}',
                    response_type: 'code'
                },
                headers: {},
                body: '',
                operation: 'REDIRECT'
            },
            tokenRequest: {
                method: 'POST',
                url: `${baseUrl}/token`,
                requestParams: {},
                headers: {},
                body: this.getQueryString({
                    grant_type: 'authorization_code',
                    code: '${code}',
                    redirect_uri: '${redirectUri}',
                    resource: '${clientId}',
                    client_id: '${clientId}',
                    client_secret: encodeURIComponent(templateModel.clientSecret)
                }),
                operation: 'EXECUTE'
            },
            refreshRequest: {
                method: 'POST',
                url: `${baseUrl}/token`,
                requestParams: {},
                headers: {},
                body: this.getQueryString({
                    grant_type: 'refresh_token',
                    refresh_token: '${refreshToken}',
                    resource: '${clientId}',
                    client_id: '${clientId}',
                    client_secret: encodeURIComponent(templateModel.clientSecret)
                }),
                operation: 'EXECUTE'
            },
            buttonName: templateModel.buttonName,
            providerName: 'Azure AD',
            issuer: templateModel.issuer,
            onNewUser: templateModel.onNewUser,
            accessTokenToUserDataMappings: templateModel.accessTokenToUserDataMappings,
            redirectToPlatform: templateModel.redirectToPlatform,
            template: TemplateType.AZURE,
            userIdConfig: {
                useConstantValue: false,
                jwtField: templateModel.userIdConfig.jwtField
            },
            visibleOnLoginPage: templateModel.visibleOnLoginPage,
            signatureVerificationConfig: templateModel.signatureVerificationConfig.toSignatureVerificationConfig(),
            userManagementSource: UserManagementSource.REMOTE,
            type: TenantLoginOptionType.OAUTH2,
            grantType: GrantType.AUTHORIZATION_CODE,
            externalTokenConfig: templateModel.externalTokenConfig.toExternalTokenConfig()
        };
        return ssoConfiguration;
    }
    mapTo(ssoConfiguration) {
        const applicationsId = at(ssoConfiguration, ['audience', 'clientId']);
        this.setupDefaults(ssoConfiguration);
        this.setupConstants(ssoConfiguration);
        this.setupAadAddressAndTenant(ssoConfiguration);
        this.setupClientSecret(ssoConfiguration);
        this.setupUserIdConfig(ssoConfiguration);
        this.setupSignatureVerificationConfig(ssoConfiguration);
        const aadConfiguration = {
            aadAddress: this.getAadAddressFromUrl(ssoConfiguration.authorizationRequest.url),
            tenant: this.getTenantFromUrl(ssoConfiguration.authorizationRequest.url),
            applicationId: this.getFirstDefined(applicationsId),
            redirectToPlatform: ssoConfiguration.redirectToPlatform,
            clientSecret: ssoConfiguration.authorizationRequest.requestParams.client_id,
            issuer: ssoConfiguration.issuer,
            buttonName: ssoConfiguration.buttonName,
            visibleOnLoginPage: ssoConfiguration.visibleOnLoginPage,
            redirectAfterLogout: this.getRedirectAfterLogout(ssoConfiguration),
            redirectAfterLogoutUrl: this.getRedirectAfterLogoutUrl(ssoConfiguration),
            accessTokenToUserDataMappings: ssoConfiguration.accessTokenToUserDataMappings,
            userIdConfig: {
                jwtField: ssoConfiguration.userIdConfig.jwtField
            },
            publicKeyDiscoveryUrl: ssoConfiguration.signatureVerificationConfig.aad.publicKeyDiscoveryUrl,
            signatureVerificationConfig: new SignatureConfiguration(ssoConfiguration.signatureVerificationConfig),
            onNewUser: ssoConfiguration.onNewUser,
            externalTokenConfig: new ExternalToken(ssoConfiguration.externalTokenConfig)
        };
        return aadConfiguration;
    }
    setupDefaults(ssoConfiguration) {
        defaults(ssoConfiguration, this.defaults);
    }
    setupConstants(ssoConfiguration) {
        assign(ssoConfiguration, this.constants);
    }
    setupAadAddressAndTenant(ssoConfiguration) {
        const urls = at(ssoConfiguration, [
            'authorizationRequest.url',
            'tokenRequest.url',
            'refreshRequest.url'
        ]);
        const aadAddresses = map(urls, url => this.getAadAddressFromUrl(url));
        set(ssoConfiguration, 'aadAddress', this.getFirstDefined(aadAddresses));
        const tenants = map(urls, url => this.getTenantFromUrl(url));
        set(ssoConfiguration, 'tenant', this.getFirstDefined(tenants));
    }
    getAadAddressFromUrl(url) {
        const [, aadAddress] = (url || '').match(this.urlPattern) || [];
        return aadAddress;
    }
    getTenantFromUrl(url) {
        const [, , , tenant] = (url || '').match(this.urlPattern) || [];
        return tenant;
    }
    setupClientSecret(ssoConfiguration) {
        const bodies = at(ssoConfiguration, ['tokenRequest.body', 'refreshRequest.body']);
        const clientSecrets = map(bodies, body => this.getClientSecretFromBody(body));
        set(ssoConfiguration, 'clientSecret', this.getFirstDefined(clientSecrets));
    }
    getClientSecretFromBody(body) {
        const [, clientSecret] = (body || '').match(/client_secret=([^&]+)/) || [];
        return decodeURIComponent(clientSecret);
    }
    setupUserIdConfig(ssoConfiguration) {
        defaultsDeep(ssoConfiguration, { userIdConfig: { jwtField: 'upn' } });
        set(ssoConfiguration, 'userIdConfig.useConstantValue', false);
    }
    setupSignatureVerificationConfig(ssoConfiguration) {
        defaultsDeep(ssoConfiguration, { signatureVerificationConfig: { aad: {} } });
    }
    getRedirectAfterLogout(ssoConfiguration) {
        return has(ssoConfiguration, 'logoutRequest.requestParams.post_logout_redirect_uri')
            ? true
            : false;
    }
    getRedirectAfterLogoutUrl(ssoConfiguration) {
        return ssoConfiguration.logoutRequest.requestParams.post_logout_redirect_uri
            ? ssoConfiguration.logoutRequest.requestParams.post_logout_redirect_uri
            : null;
    }
    getFirstDefined(values) {
        return head(reject(values, isUndefined));
    }
    getQueryString(params) {
        return map(params, (value, key) => `${key}=${value}`).join('&');
    }
}
AadConfigurationMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AadConfigurationMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AadConfigurationMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AadConfigurationMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AadConfigurationMapper, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { TemplateType } from '../sso-configuration.model';
import { at, get, head, isUndefined, map, reject } from 'lodash-es';
import { GrantType, TenantLoginOptionType, UserManagementSource } from '@c8y/client';
import { RequestConfiguration } from '../template-parts/request-configuration.model';
import { Injectable } from '@angular/core';
import { ExternalToken } from '../template-parts/external-token-config.model';
import * as i0 from "@angular/core";
export class KeyCloakConfigurationMapper {
    constructor() {
        this.urlPattern = /^(.+)\/auth\/realms\/((.+?))$/;
    }
    mapFrom(templateModel) {
        const ssoConfiguration = {
            template: TemplateType.KEYCLOAK,
            buttonName: templateModel.buttonName,
            userIdConfig: templateModel.userIdConfig,
            userManagementSource: UserManagementSource.REMOTE,
            type: TenantLoginOptionType.OAUTH2,
            onNewUser: templateModel.onNewUser,
            issuer: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}`,
            redirectToPlatform: templateModel.redirectToPlatform,
            providerName: 'keycloak',
            audience: templateModel.audience,
            clientId: templateModel.clientId,
            logoutRequest: templateModel.logoutRequest.toRequest(),
            visibleOnLoginPage: templateModel.visibleOnLoginPage,
            signatureVerificationConfig: {
                jwks: {
                    jwksUri: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/certs`
                }
            },
            tokenRequest: {
                headers: {},
                method: 'POST',
                requestParams: {},
                operation: 'EXECUTE',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/token`,
                body: 'grant_type=authorization_code&code=${code}&redirect_uri=${redirectUri}&client_id=${clientId}&client_secret=' +
                    templateModel.clientSecret
            },
            authorizationRequest: {
                headers: {},
                method: 'GET',
                requestParams: {
                    scope: templateModel.scopeId,
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    response_type: 'code'
                },
                operation: 'REDIRECT',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/auth`,
                body: ''
            },
            refreshRequest: {
                headers: {},
                method: 'POST',
                requestParams: {
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    response_type: 'refresh'
                },
                operation: 'EXECUTE',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/token`,
                body: 'grant_type=refresh_token&refresh_token=${refreshToken}&client_id=${clientId}&client_secret=' +
                    templateModel.clientSecret
            },
            grantType: GrantType.AUTHORIZATION_CODE,
            accessTokenToUserDataMappings: templateModel.accessTokenToUserDataMappings,
            externalTokenConfig: templateModel.externalTokenConfig.toExternalTokenConfig()
        };
        return ssoConfiguration;
    }
    mapTo(ssoConfiguration) {
        return {
            keyCloakAddress: this.getKeyCloakAddressFromUrl(ssoConfiguration.issuer),
            realmName: this.getRealmName(ssoConfiguration.issuer),
            clientId: ssoConfiguration.clientId,
            clientSecret: this.getClientSecret(ssoConfiguration),
            scopeId: this.getScopeId(ssoConfiguration),
            buttonName: ssoConfiguration.buttonName,
            userIdConfig: ssoConfiguration.userIdConfig,
            onNewUser: ssoConfiguration.onNewUser,
            redirectToPlatform: ssoConfiguration.redirectToPlatform,
            audience: ssoConfiguration.audience,
            logoutRequest: new RequestConfiguration(ssoConfiguration.logoutRequest),
            visibleOnLoginPage: ssoConfiguration.visibleOnLoginPage,
            accessTokenToUserDataMappings: ssoConfiguration.accessTokenToUserDataMappings,
            externalTokenConfig: new ExternalToken(ssoConfiguration.externalTokenConfig)
        };
    }
    getKeyCloakAddressFromUrl(url) {
        const [, keyCloakAddress] = (url || '').match(this.urlPattern) || [];
        return keyCloakAddress;
    }
    getRealmName(url) {
        const [, , realmName] = (url || '').match(this.urlPattern) || [];
        return realmName;
    }
    getClientSecret(ssoConfiguration) {
        const bodies = at(ssoConfiguration, ['tokenRequest.body', 'refreshRequest.body']);
        const clientSecrets = map(bodies, body => this.getClientSecretFromBody(body));
        const clientSecret = this.getFirstDefined(clientSecrets);
        return clientSecret ? decodeURIComponent(clientSecret) : '';
    }
    getClientSecretFromBody(body) {
        const [, clientSecret] = (body || '').match(/client_secret=([^&]+)/) || [];
        return clientSecret;
    }
    getFirstDefined(values) {
        return head(reject(values, isUndefined));
    }
    getScopeId(ssoConfiguration) {
        return get(ssoConfiguration, 'authorizationRequest.requestParams.scope', '');
    }
}
KeyCloakConfigurationMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: KeyCloakConfigurationMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
KeyCloakConfigurationMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: KeyCloakConfigurationMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: KeyCloakConfigurationMapper, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWNsb2FrLWNvbmZpZ3VyYXRpb24tbWFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL3Nzby1jb25maWd1cmF0aW9uL3RlbXBsYXRlcy9rZXktY2xvYWstY29uZmlndXJhdGlvbi1tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFvQixZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQzs7QUFLOUUsTUFBTSxPQUFPLDJCQUEyQjtJQUh4QztRQUlVLGVBQVUsR0FBRywrQkFBK0IsQ0FBQztLQWtIdEQ7SUFoSEMsT0FBTyxDQUFDLGFBQW9DO1FBQzFDLE1BQU0sZ0JBQWdCLEdBQXFCO1lBQ3pDLFFBQVEsRUFBRSxZQUFZLENBQUMsUUFBUTtZQUMvQixVQUFVLEVBQUUsYUFBYSxDQUFDLFVBQVU7WUFDcEMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxZQUFZO1lBQ3hDLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLE1BQU07WUFDakQsSUFBSSxFQUFFLHFCQUFxQixDQUFDLE1BQU07WUFDbEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTO1lBQ2xDLE1BQU0sRUFBRSxHQUFHLGFBQWEsQ0FBQyxlQUFlLGdCQUFnQixhQUFhLENBQUMsU0FBUyxFQUFFO1lB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Q0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0UsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVPLGVBQWUsQ0FBQyxNQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sVUFBVSxDQUFDLGdCQUFnQjtRQUNqQyxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSwwQ0FBMEMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDOzt3SEFsSFUsMkJBQTJCOzRIQUEzQiwyQkFBMkIsY0FGMUIsTUFBTTsyRkFFUCwyQkFBMkI7a0JBSHZDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3NvQ29uZmlndXJhdGlvbk1hcHBlciB9IGZyb20gJy4vc3NvLWNvbmZpZ3VyYXRpb24ubWFwcGVyJztcbmltcG9ydCB7IEtleUNsb2FrQ29uZmlndXJhdGlvbiB9IGZyb20gJy4va2V5LWNsb2FrLm1vZGVsJztcbmltcG9ydCB7IFNzb0NvbmZpZ3VyYXRpb24sIFRlbXBsYXRlVHlwZSB9IGZyb20gJy4uL3Nzby1jb25maWd1cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IGF0LCBnZXQsIGhlYWQsIGlzVW5kZWZpbmVkLCBtYXAsIHJlamVjdCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBHcmFudFR5cGUsIFRlbmFudExvZ2luT3B0aW9uVHlwZSwgVXNlck1hbmFnZW1lbnRTb3VyY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBSZXF1ZXN0Q29uZmlndXJhdGlvbiB9IGZyb20gJy4uL3RlbXBsYXRlLXBhcnRzL3JlcXVlc3QtY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHRlcm5hbFRva2VuIH0gZnJvbSAnLi4vdGVtcGxhdGUtcGFydHMvZXh0ZXJuYWwtdG9rZW4tY29uZmlnLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgS2V5Q2xvYWtDb25maWd1cmF0aW9uTWFwcGVyIGltcGxlbWVudHMgU3NvQ29uZmlndXJhdGlvbk1hcHBlcjxLZXlDbG9ha0NvbmZpZ3VyYXRpb24+IHtcbiAgcHJpdmF0ZSB1cmxQYXR0ZXJuID0gL14oLispXFwvYXV0aFxcL3JlYWxtc1xcLygoLis/KSkkLztcblxuICBtYXBGcm9tKHRlbXBsYXRlTW9kZWw6IEtleUNsb2FrQ29uZmlndXJhdGlvbik6IFNzb0NvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0IHNzb0NvbmZpZ3VyYXRpb246IFNzb0NvbmZpZ3VyYXRpb24gPSB7XG4gICAgICB0ZW1wbGF0ZTogVGVtcGxhdGVUeXBlLktFWUNMT0FLLFxuICAgICAgYnV0dG9uTmFtZTogdGVtcGxhdGVNb2RlbC5idXR0b25OYW1lLFxuICAgICAgdXNlcklkQ29uZmlnOiB0ZW1wbGF0ZU1vZGVsLnVzZXJJZENvbmZpZyxcbiAgICAgIHVzZXJNYW5hZ2VtZW50U291cmNlOiBVc2VyTWFuYWdlbWVudFNvdXJjZS5SRU1PVEUsXG4gICAgICB0eXBlOiBUZW5hbnRMb2dpbk9wdGlvblR5cGUuT0FVVEgyLFxuICAgICAgb25OZXdVc2VyOiB0ZW1wbGF0ZU1vZGVsLm9uTmV3VXNlcixcbiAgICAgIGlzc3VlcjogYCR7dGVtcGxhdGVNb2RlbC5rZXlDbG9ha0FkZHJlc3N9L2F1dGgvcmVhbG1zLyR7dGVtcGxhdGVNb2RlbC5yZWFsbU5hbWV9YCxcbiAgICAgIHJlZGlyZWN0VG9QbGF0Zm9ybTogdGVtcGxhdGVNb2RlbC5yZWRpcmVjdFRvUGxhdGZvcm0sXG4gICAgICBwcm92aWRlck5hbWU6ICdrZXljbG9haycsXG4gICAgICBhdWRpZW5jZTogdGVtcGxhdGVNb2RlbC5hdWRpZW5jZSxcbiAgICAgIGNsaWVudElkOiB0ZW1wbGF0ZU1vZGVsLmNsaWVudElkLFxuICAgICAgbG9nb3V0UmVxdWVzdDogdGVtcGxhdGVNb2RlbC5sb2dvdXRSZXF1ZXN0LnRvUmVxdWVzdCgpLFxuICAgICAgdmlzaWJsZU9uTG9naW5QYWdlOiB0ZW1wbGF0ZU1vZGVsLnZpc2libGVPbkxvZ2luUGFnZSxcbiAgICAgIHNpZ25hdHVyZVZlcmlmaWNhdGlvbkNvbmZpZzoge1xuICAgICAgICBqd2tzOiB7XG4gICAgICAgICAgandrc1VyaTogYCR7dGVtcGxhdGVNb2RlbC5rZXlDbG9ha0FkZHJlc3N9L2F1dGgvcmVhbG1zLyR7dGVtcGxhdGVNb2RlbC5yZWFsbU5hbWV9L3Byb3RvY29sL29wZW5pZC1jb25uZWN0L2NlcnRzYFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9rZW5SZXF1ZXN0OiB7XG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgcmVxdWVzdFBhcmFtczoge30sXG4gICAgICAgIG9wZXJhdGlvbjogJ0VYRUNVVEUnLFxuICAgICAgICB1cmw6IGAke3RlbXBsYXRlTW9kZWwua2V5Q2xvYWtBZGRyZXNzfS9hdXRoL3JlYWxtcy8ke3RlbXBsYXRlTW9kZWwucmVhbG1OYW1lfS9wcm90b2NvbC9vcGVuaWQtY29ubmVjdC90b2tlbmAsXG4gICAgICAgIGJvZHk6XG4gICAgICAgICAgJ2dyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJmNvZGU9JHtjb2RlfSZyZWRpcmVjdF91cmk9JHtyZWRpcmVjdFVyaX0mY2xpZW50X2lkPSR7Y2xpZW50SWR9JmNsaWVudF9zZWNyZXQ9JyArXG4gICAgICAgICAgdGVtcGxhdGVNb2RlbC5jbGllbnRTZWNyZXRcbiAgICAgIH0sXG4gICAgICBhdXRob3JpemF0aW9uUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcmVxdWVzdFBhcmFtczoge1xuICAgICAgICAgIHNjb3BlOiB0ZW1wbGF0ZU1vZGVsLnNjb3BlSWQsXG4gICAgICAgICAgY2xpZW50X2lkOiAnJHtjbGllbnRJZH0nLFxuICAgICAgICAgIHJlZGlyZWN0X3VyaTogJyR7cmVkaXJlY3RVcml9JyxcbiAgICAgICAgICByZXNwb25zZV90eXBlOiAnY29kZSdcbiAgICAgICAgfSxcbiAgICAgICAgb3BlcmF0aW9uOiAnUkVESVJFQ1QnLFxuICAgICAgICB1cmw6IGAke3RlbXBsYXRlTW9kZWwua2V5Q2xvYWtBZGRyZXNzfS9hdXRoL3JlYWxtcy8ke3RlbXBsYXRlTW9kZWwucmVhbG1OYW1lfS9wcm90b2NvbC9vcGVuaWQtY29ubmVjdC9hdXRoYCxcbiAgICAgICAgYm9keTogJydcbiAgICAgIH0sXG4gICAgICByZWZyZXNoUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHJlcXVlc3RQYXJhbXM6IHtcbiAgICAgICAgICBjbGllbnRfaWQ6ICcke2NsaWVudElkfScsXG4gICAgICAgICAgcmVkaXJlY3RfdXJpOiAnJHtyZWRpcmVjdFVyaX0nLFxuICAgICAgICAgIHJlc3BvbnNlX3R5cGU6ICdyZWZyZXNoJ1xuICAgICAgICB9LFxuICAgICAgICBvcGVyYXRpb246ICdFWEVDVVRFJyxcbiAgICAgICAgdXJsOiBgJHt0ZW1wbGF0ZU1vZGVsLmtleUNsb2FrQWRkcmVzc30vYXV0aC9yZWFsbXMvJHt0ZW1wbGF0ZU1vZGVsLnJlYWxtTmFtZX0vcHJvdG9jb2wvb3BlbmlkLWNvbm5lY3QvdG9rZW5gLFxuICAgICAgICBib2R5OlxuICAgICAgICAgICdncmFudF90eXBlPXJlZnJlc2hfdG9rZW4mcmVmcmVzaF90b2tlbj0ke3JlZnJlc2hUb2tlbn0mY2xpZW50X2lkPSR7Y2xpZW50SWR9JmNsaWVudF9zZWNyZXQ9JyArXG4gICAgICAgICAgdGVtcGxhdGVNb2RlbC5jbGllbnRTZWNyZXRcbiAgICAgIH0sXG4gICAgICBncmFudFR5cGU6IEdyYW50VHlwZS5BVVRIT1JJWkFUSU9OX0NPREUsXG4gICAgICBhY2Nlc3NUb2tlblRvVXNlckRhdGFNYXBwaW5nczogdGVtcGxhdGVNb2RlbC5hY2Nlc3NUb2tlblRvVXNlckRhdGFNYXBwaW5ncyxcbiAgICAgIGV4dGVybmFsVG9rZW5Db25maWc6IHRlbXBsYXRlTW9kZWwuZXh0ZXJuYWxUb2tlbkNvbmZpZy50b0V4dGVybmFsVG9rZW5Db25maWcoKVxuICAgIH07XG4gICAgcmV0dXJuIHNzb0NvbmZpZ3VyYXRpb247XG4gIH1cblxuICBtYXBUbyhzc29Db25maWd1cmF0aW9uOiBTc29Db25maWd1cmF0aW9uKTogS2V5Q2xvYWtDb25maWd1cmF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5Q2xvYWtBZGRyZXNzOiB0aGlzLmdldEtleUNsb2FrQWRkcmVzc0Zyb21Vcmwoc3NvQ29uZmlndXJhdGlvbi5pc3N1ZXIpLFxuICAgICAgcmVhbG1OYW1lOiB0aGlzLmdldFJlYWxtTmFtZShzc29Db25maWd1cmF0aW9uLmlzc3VlciksXG4gICAgICBjbGllbnRJZDogc3NvQ29uZmlndXJhdGlvbi5jbGllbnRJZCxcbiAgICAgIGNsaWVudFNlY3JldDogdGhpcy5nZXRDbGllbnRTZWNyZXQoc3NvQ29uZmlndXJhdGlvbiksXG4gICAgICBzY29wZUlkOiB0aGlzLmdldFNjb3BlSWQoc3NvQ29uZmlndXJhdGlvbiksXG4gICAgICBidXR0b25OYW1lOiBzc29Db25maWd1cmF0aW9uLmJ1dHRvbk5hbWUsXG4gICAgICB1c2VySWRDb25maWc6IHNzb0NvbmZpZ3VyYXRpb24udXNlcklkQ29uZmlnLFxuICAgICAgb25OZXdVc2VyOiBzc29Db25maWd1cmF0aW9uLm9uTmV3VXNlcixcbiAgICAgIHJlZGlyZWN0VG9QbGF0Zm9ybTogc3NvQ29uZmlndXJhdGlvbi5yZWRpcmVjdFRvUGxhdGZvcm0sXG4gICAgICBhdWRpZW5jZTogc3NvQ29uZmlndXJhdGlvbi5hdWRpZW5jZSxcbiAgICAgIGxvZ291dFJlcXVlc3Q6IG5ldyBSZXF1ZXN0Q29uZmlndXJhdGlvbihzc29Db25maWd1cmF0aW9uLmxvZ291dFJlcXVlc3QpLFxuICAgICAgdmlzaWJsZU9uTG9naW5QYWdlOiBzc29Db25maWd1cmF0aW9uLnZpc2libGVPbkxvZ2luUGFnZSxcbiAgICAgIGFjY2Vzc1Rva2VuVG9Vc2VyRGF0YU1hcHBpbmdzOiBzc29Db25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuVG9Vc2VyRGF0YU1hcHBpbmdzLFxuICAgICAgZXh0ZXJuYWxUb2tlbkNvbmZpZzogbmV3IEV4dGVybmFsVG9rZW4oc3NvQ29uZmlndXJhdGlvbi5leHRlcm5hbFRva2VuQ29uZmlnKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldEtleUNsb2FrQWRkcmVzc0Zyb21VcmwodXJsKSB7XG4gICAgY29uc3QgWywga2V5Q2xvYWtBZGRyZXNzXSA9ICh1cmwgfHwgJycpLm1hdGNoKHRoaXMudXJsUGF0dGVybikgfHwgW107XG4gICAgcmV0dXJuIGtleUNsb2FrQWRkcmVzcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVhbG1OYW1lKHVybCkge1xuICAgIGNvbnN0IFssICwgcmVhbG1OYW1lXSA9ICh1cmwgfHwgJycpLm1hdGNoKHRoaXMudXJsUGF0dGVybikgfHwgW107XG4gICAgcmV0dXJuIHJlYWxtTmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2xpZW50U2VjcmV0KHNzb0NvbmZpZ3VyYXRpb24pOiBzdHJpbmcge1xuICAgIGNvbnN0IGJvZGllcyA9IGF0KHNzb0NvbmZpZ3VyYXRpb24sIFsndG9rZW5SZXF1ZXN0LmJvZHknLCAncmVmcmVzaFJlcXVlc3QuYm9keSddKTtcbiAgICBjb25zdCBjbGllbnRTZWNyZXRzID0gbWFwKGJvZGllcywgYm9keSA9PiB0aGlzLmdldENsaWVudFNlY3JldEZyb21Cb2R5KGJvZHkpKTtcbiAgICBjb25zdCBjbGllbnRTZWNyZXQgPSB0aGlzLmdldEZpcnN0RGVmaW5lZChjbGllbnRTZWNyZXRzKTtcbiAgICByZXR1cm4gY2xpZW50U2VjcmV0ID8gZGVjb2RlVVJJQ29tcG9uZW50KGNsaWVudFNlY3JldCkgOiAnJztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2xpZW50U2VjcmV0RnJvbUJvZHkoYm9keSkge1xuICAgIGNvbnN0IFssIGNsaWVudFNlY3JldF0gPSAoYm9keSB8fCAnJykubWF0Y2goL2NsaWVudF9zZWNyZXQ9KFteJl0rKS8pIHx8IFtdO1xuICAgIHJldHVybiBjbGllbnRTZWNyZXQ7XG4gIH1cblxuICBwcml2YXRlIGdldEZpcnN0RGVmaW5lZCh2YWx1ZXMpIHtcbiAgICByZXR1cm4gaGVhZChyZWplY3QodmFsdWVzLCBpc1VuZGVmaW5lZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTY29wZUlkKHNzb0NvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4gZ2V0KHNzb0NvbmZpZ3VyYXRpb24sICdhdXRob3JpemF0aW9uUmVxdWVzdC5yZXF1ZXN0UGFyYW1zLnNjb3BlJywgJycpO1xuICB9XG59XG4iXX0=
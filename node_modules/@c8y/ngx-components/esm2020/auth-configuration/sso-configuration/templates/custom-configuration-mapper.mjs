import { TemplateType } from '../sso-configuration.model';
import { GrantType, TenantLoginOptionType } from '@c8y/client';
import { RequestConfiguration } from '../template-parts/request-configuration.model';
import { CertificateType, SignatureConfiguration } from '../template-parts/signature-configuration.model';
import { Injectable } from '@angular/core';
import { ExternalToken } from '../template-parts/external-token-config.model';
import * as i0 from "@angular/core";
export class CustomConfigurationMapper {
    mapFrom(templateModel) {
        const ssoConfiguration = {
            accessTokenToUserDataMappings: templateModel.accessTokenToUserDataMappings,
            audience: templateModel.audience,
            authorizationRequest: templateModel.authorizationRequest.toRequest(),
            buttonName: templateModel.buttonName,
            clientId: templateModel.clientId,
            issuer: templateModel.issuer,
            logoutRequest: templateModel.logoutRequest.toRequest(),
            onNewUser: templateModel.onNewUser,
            providerName: templateModel.providerName,
            redirectToPlatform: templateModel.redirectToPlatform,
            refreshRequest: templateModel.refreshRequest.toRequest(),
            signatureVerificationConfig: templateModel.signatureVerificationConfig.toSignatureVerificationConfig(),
            template: TemplateType.CUSTOM,
            tokenRequest: templateModel.tokenRequest.toRequest(),
            userIdConfig: templateModel.userIdConfig,
            userManagementSource: templateModel.userManagementSource,
            visibleOnLoginPage: templateModel.visibleOnLoginPage,
            type: TenantLoginOptionType.OAUTH2,
            grantType: GrantType.AUTHORIZATION_CODE,
            externalTokenConfig: templateModel.externalTokenConfig.toExternalTokenConfig()
        };
        return ssoConfiguration;
    }
    mapTo(ssoConfiguration) {
        return {
            accessTokenToUserDataMappings: ssoConfiguration.accessTokenToUserDataMappings,
            audience: ssoConfiguration.audience,
            authorizationRequest: new RequestConfiguration(ssoConfiguration.authorizationRequest),
            buttonName: ssoConfiguration.buttonName,
            clientId: ssoConfiguration.clientId,
            issuer: ssoConfiguration.issuer,
            logoutRequest: new RequestConfiguration(ssoConfiguration.logoutRequest),
            onNewUser: ssoConfiguration.onNewUser,
            providerName: ssoConfiguration.providerName,
            redirectToPlatform: ssoConfiguration.redirectToPlatform,
            refreshRequest: new RequestConfiguration(ssoConfiguration.refreshRequest),
            signatureVerificationConfig: new SignatureConfiguration(ssoConfiguration.signatureVerificationConfig),
            template: TemplateType.CUSTOM,
            tokenRequest: new RequestConfiguration(ssoConfiguration.tokenRequest),
            userIdConfig: ssoConfiguration.userIdConfig,
            userManagementSource: ssoConfiguration.userManagementSource,
            visibleOnLoginPage: ssoConfiguration.visibleOnLoginPage,
            certificateType: CertificateType.CUSTOM,
            externalTokenConfig: new ExternalToken(ssoConfiguration.externalTokenConfig)
        };
    }
}
CustomConfigurationMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CustomConfigurationMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CustomConfigurationMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CustomConfigurationMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CustomConfigurationMapper, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWNvbmZpZ3VyYXRpb24tbWFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYXV0aC1jb25maWd1cmF0aW9uL3Nzby1jb25maWd1cmF0aW9uL3RlbXBsYXRlcy9jdXN0b20tY29uZmlndXJhdGlvbi1tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3JGLE9BQU8sRUFDTCxlQUFlLEVBQ2Ysc0JBQXNCLEVBQ3ZCLE1BQU0saURBQWlELENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0NBQStDLENBQUM7O0FBSzlFLE1BQU0sT0FBTyx5QkFBeUI7SUFDcEMsT0FBTyxDQUFDLGFBQXFDO1FBQzNDLE1BQU0sZ0JBQWdCLEdBQXFCO1lBQ3pDLDZCQUE2QixFQUFFLGFBQWEsQ0FBQyw2QkFBNkI7WUFDMUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxRQUFRO1lBQ2hDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7WUFDcEUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxVQUFVO1lBQ3BDLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUTtZQUNoQyxNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU07WUFDNUIsYUFBYSxFQUFFLGFBQWEsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFO1lBQ3RELFNBQVMsRUFBRSxhQUFhLENBQUMsU0FBUztZQUNsQyxZQUFZLEVBQUUsYUFBYSxDQUFDLFlBQVk7WUFDeEMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLGtCQUFrQjtZQUNwRCxjQUFjLEVBQUUsYUFBYSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUU7WUFDeEQsMkJBQTJCLEVBQ3pCLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyw2QkFBNkIsRUFBRTtZQUMzRSxRQUFRLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDN0IsWUFBWSxFQUFFLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFO1lBQ3BELFlBQVksRUFBRSxhQUFhLENBQUMsWUFBWTtZQUN4QyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsb0JBQW9CO1lBQ3hELGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxrQkFBa0I7WUFDcEQsSUFBSSxFQUFFLHFCQUFxQixDQUFDLE1BQU07WUFDbEMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxrQkFBa0I7WUFDdkMsbUJBQW1CLEVBQUUsYUFBYSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQixFQUFFO1NBQy9FLENBQUM7UUFDRixPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLLENBQUMsZ0JBQWtDO1FBQ3RDLE9BQU87WUFDTCw2QkFBNkIsRUFBRSxnQkFBZ0IsQ0FBQyw2QkFBNkI7WUFDN0UsUUFBUSxFQUFFLGdCQUFnQixDQUFDLFFBQVE7WUFDbkMsb0JBQW9CLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQztZQUNyRixVQUFVLEVBQUUsZ0JBQWdCLENBQUMsVUFBVTtZQUN2QyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsUUFBUTtZQUNuQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsTUFBTTtZQUMvQixhQUFhLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7WUFDdkUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLFNBQVM7WUFDckMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLFlBQVk7WUFDM0Msa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsa0JBQWtCO1lBQ3ZELGNBQWMsRUFBRSxJQUFJLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztZQUN6RSwyQkFBMkIsRUFBRSxJQUFJLHNCQUFzQixDQUNyRCxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FDN0M7WUFDRCxRQUFRLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDN0IsWUFBWSxFQUFFLElBQUksb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDO1lBQ3JFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZO1lBQzNDLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLG9CQUFvQjtZQUMzRCxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxrQkFBa0I7WUFDdkQsZUFBZSxFQUFFLGVBQWUsQ0FBQyxNQUFNO1lBQ3ZDLG1CQUFtQixFQUFFLElBQUksYUFBYSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1NBQzdFLENBQUM7SUFDSixDQUFDOztzSEFwRFUseUJBQXlCOzBIQUF6Qix5QkFBeUIsY0FGeEIsTUFBTTsyRkFFUCx5QkFBeUI7a0JBSHJDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3NvQ29uZmlndXJhdGlvbiwgVGVtcGxhdGVUeXBlIH0gZnJvbSAnLi4vc3NvLWNvbmZpZ3VyYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgU3NvQ29uZmlndXJhdGlvbk1hcHBlciB9IGZyb20gJy4vc3NvLWNvbmZpZ3VyYXRpb24ubWFwcGVyJztcbmltcG9ydCB7IEdyYW50VHlwZSwgVGVuYW50TG9naW5PcHRpb25UeXBlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQ3VzdG9tU3NvQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vY3VzdG9tLm1vZGVsJztcbmltcG9ydCB7IFJlcXVlc3RDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vdGVtcGxhdGUtcGFydHMvcmVxdWVzdC1jb25maWd1cmF0aW9uLm1vZGVsJztcbmltcG9ydCB7XG4gIENlcnRpZmljYXRlVHlwZSxcbiAgU2lnbmF0dXJlQ29uZmlndXJhdGlvblxufSBmcm9tICcuLi90ZW1wbGF0ZS1wYXJ0cy9zaWduYXR1cmUtY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHRlcm5hbFRva2VuIH0gZnJvbSAnLi4vdGVtcGxhdGUtcGFydHMvZXh0ZXJuYWwtdG9rZW4tY29uZmlnLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tQ29uZmlndXJhdGlvbk1hcHBlciBpbXBsZW1lbnRzIFNzb0NvbmZpZ3VyYXRpb25NYXBwZXI8Q3VzdG9tU3NvQ29uZmlndXJhdGlvbj4ge1xuICBtYXBGcm9tKHRlbXBsYXRlTW9kZWw6IEN1c3RvbVNzb0NvbmZpZ3VyYXRpb24pOiBTc29Db25maWd1cmF0aW9uIHtcbiAgICBjb25zdCBzc29Db25maWd1cmF0aW9uOiBTc29Db25maWd1cmF0aW9uID0ge1xuICAgICAgYWNjZXNzVG9rZW5Ub1VzZXJEYXRhTWFwcGluZ3M6IHRlbXBsYXRlTW9kZWwuYWNjZXNzVG9rZW5Ub1VzZXJEYXRhTWFwcGluZ3MsXG4gICAgICBhdWRpZW5jZTogdGVtcGxhdGVNb2RlbC5hdWRpZW5jZSxcbiAgICAgIGF1dGhvcml6YXRpb25SZXF1ZXN0OiB0ZW1wbGF0ZU1vZGVsLmF1dGhvcml6YXRpb25SZXF1ZXN0LnRvUmVxdWVzdCgpLFxuICAgICAgYnV0dG9uTmFtZTogdGVtcGxhdGVNb2RlbC5idXR0b25OYW1lLFxuICAgICAgY2xpZW50SWQ6IHRlbXBsYXRlTW9kZWwuY2xpZW50SWQsXG4gICAgICBpc3N1ZXI6IHRlbXBsYXRlTW9kZWwuaXNzdWVyLFxuICAgICAgbG9nb3V0UmVxdWVzdDogdGVtcGxhdGVNb2RlbC5sb2dvdXRSZXF1ZXN0LnRvUmVxdWVzdCgpLFxuICAgICAgb25OZXdVc2VyOiB0ZW1wbGF0ZU1vZGVsLm9uTmV3VXNlcixcbiAgICAgIHByb3ZpZGVyTmFtZTogdGVtcGxhdGVNb2RlbC5wcm92aWRlck5hbWUsXG4gICAgICByZWRpcmVjdFRvUGxhdGZvcm06IHRlbXBsYXRlTW9kZWwucmVkaXJlY3RUb1BsYXRmb3JtLFxuICAgICAgcmVmcmVzaFJlcXVlc3Q6IHRlbXBsYXRlTW9kZWwucmVmcmVzaFJlcXVlc3QudG9SZXF1ZXN0KCksXG4gICAgICBzaWduYXR1cmVWZXJpZmljYXRpb25Db25maWc6XG4gICAgICAgIHRlbXBsYXRlTW9kZWwuc2lnbmF0dXJlVmVyaWZpY2F0aW9uQ29uZmlnLnRvU2lnbmF0dXJlVmVyaWZpY2F0aW9uQ29uZmlnKCksXG4gICAgICB0ZW1wbGF0ZTogVGVtcGxhdGVUeXBlLkNVU1RPTSxcbiAgICAgIHRva2VuUmVxdWVzdDogdGVtcGxhdGVNb2RlbC50b2tlblJlcXVlc3QudG9SZXF1ZXN0KCksXG4gICAgICB1c2VySWRDb25maWc6IHRlbXBsYXRlTW9kZWwudXNlcklkQ29uZmlnLFxuICAgICAgdXNlck1hbmFnZW1lbnRTb3VyY2U6IHRlbXBsYXRlTW9kZWwudXNlck1hbmFnZW1lbnRTb3VyY2UsXG4gICAgICB2aXNpYmxlT25Mb2dpblBhZ2U6IHRlbXBsYXRlTW9kZWwudmlzaWJsZU9uTG9naW5QYWdlLFxuICAgICAgdHlwZTogVGVuYW50TG9naW5PcHRpb25UeXBlLk9BVVRIMixcbiAgICAgIGdyYW50VHlwZTogR3JhbnRUeXBlLkFVVEhPUklaQVRJT05fQ09ERSxcbiAgICAgIGV4dGVybmFsVG9rZW5Db25maWc6IHRlbXBsYXRlTW9kZWwuZXh0ZXJuYWxUb2tlbkNvbmZpZy50b0V4dGVybmFsVG9rZW5Db25maWcoKVxuICAgIH07XG4gICAgcmV0dXJuIHNzb0NvbmZpZ3VyYXRpb247XG4gIH1cblxuICBtYXBUbyhzc29Db25maWd1cmF0aW9uOiBTc29Db25maWd1cmF0aW9uKTogQ3VzdG9tU3NvQ29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY2Vzc1Rva2VuVG9Vc2VyRGF0YU1hcHBpbmdzOiBzc29Db25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuVG9Vc2VyRGF0YU1hcHBpbmdzLFxuICAgICAgYXVkaWVuY2U6IHNzb0NvbmZpZ3VyYXRpb24uYXVkaWVuY2UsXG4gICAgICBhdXRob3JpemF0aW9uUmVxdWVzdDogbmV3IFJlcXVlc3RDb25maWd1cmF0aW9uKHNzb0NvbmZpZ3VyYXRpb24uYXV0aG9yaXphdGlvblJlcXVlc3QpLFxuICAgICAgYnV0dG9uTmFtZTogc3NvQ29uZmlndXJhdGlvbi5idXR0b25OYW1lLFxuICAgICAgY2xpZW50SWQ6IHNzb0NvbmZpZ3VyYXRpb24uY2xpZW50SWQsXG4gICAgICBpc3N1ZXI6IHNzb0NvbmZpZ3VyYXRpb24uaXNzdWVyLFxuICAgICAgbG9nb3V0UmVxdWVzdDogbmV3IFJlcXVlc3RDb25maWd1cmF0aW9uKHNzb0NvbmZpZ3VyYXRpb24ubG9nb3V0UmVxdWVzdCksXG4gICAgICBvbk5ld1VzZXI6IHNzb0NvbmZpZ3VyYXRpb24ub25OZXdVc2VyLFxuICAgICAgcHJvdmlkZXJOYW1lOiBzc29Db25maWd1cmF0aW9uLnByb3ZpZGVyTmFtZSxcbiAgICAgIHJlZGlyZWN0VG9QbGF0Zm9ybTogc3NvQ29uZmlndXJhdGlvbi5yZWRpcmVjdFRvUGxhdGZvcm0sXG4gICAgICByZWZyZXNoUmVxdWVzdDogbmV3IFJlcXVlc3RDb25maWd1cmF0aW9uKHNzb0NvbmZpZ3VyYXRpb24ucmVmcmVzaFJlcXVlc3QpLFxuICAgICAgc2lnbmF0dXJlVmVyaWZpY2F0aW9uQ29uZmlnOiBuZXcgU2lnbmF0dXJlQ29uZmlndXJhdGlvbihcbiAgICAgICAgc3NvQ29uZmlndXJhdGlvbi5zaWduYXR1cmVWZXJpZmljYXRpb25Db25maWdcbiAgICAgICksXG4gICAgICB0ZW1wbGF0ZTogVGVtcGxhdGVUeXBlLkNVU1RPTSxcbiAgICAgIHRva2VuUmVxdWVzdDogbmV3IFJlcXVlc3RDb25maWd1cmF0aW9uKHNzb0NvbmZpZ3VyYXRpb24udG9rZW5SZXF1ZXN0KSxcbiAgICAgIHVzZXJJZENvbmZpZzogc3NvQ29uZmlndXJhdGlvbi51c2VySWRDb25maWcsXG4gICAgICB1c2VyTWFuYWdlbWVudFNvdXJjZTogc3NvQ29uZmlndXJhdGlvbi51c2VyTWFuYWdlbWVudFNvdXJjZSxcbiAgICAgIHZpc2libGVPbkxvZ2luUGFnZTogc3NvQ29uZmlndXJhdGlvbi52aXNpYmxlT25Mb2dpblBhZ2UsXG4gICAgICBjZXJ0aWZpY2F0ZVR5cGU6IENlcnRpZmljYXRlVHlwZS5DVVNUT00sXG4gICAgICBleHRlcm5hbFRva2VuQ29uZmlnOiBuZXcgRXh0ZXJuYWxUb2tlbihzc29Db25maWd1cmF0aW9uLmV4dGVybmFsVG9rZW5Db25maWcpXG4gICAgfTtcbiAgfVxufVxuIl19
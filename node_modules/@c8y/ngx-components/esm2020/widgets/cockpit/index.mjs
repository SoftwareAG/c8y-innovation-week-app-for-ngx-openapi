import { WidgetsModule } from '@c8y/ngx-components/widgets';
import { legacyCockpitWelcomeWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/cockpit-legacy-welcome';
import { cockpitWelcomeWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/cockpit-welcome';
import { kpiWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/kpi';
import { markdownWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/markdown';
import { imageWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/image';
import { helpAndServiceWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/help-and-service';
import { threeDRotationWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/three-d-rotation';
import { mapWidgetDefinition } from '@c8y/ngx-components/widgets/definitions/map';
export const cockpitDefaultWidgets = [
    imageWidgetDefinition,
    kpiWidgetDefinition,
    markdownWidgetDefinition,
    cockpitWelcomeWidgetDefinition,
    legacyCockpitWelcomeWidgetDefinition,
    helpAndServiceWidgetDefinition,
    threeDRotationWidgetDefinition,
    mapWidgetDefinition
];
/**
 * Widgets module to be imported in your app module. The exclude list allows to exclude certain widgets.
 * Calls `WidgetsModule.config` under the hood with the `cockpitDefaultWidgets`.
 * ***
 * NOTE:
 * The excluded widgets will still be part of your bundle.
 * But as they are lazy loaded should not increase loading duration.
 * ***
 * @param excludeList allows to exclude specific widgets by their id.
 * @returns An empty module with some providers.
 */
export function cockpitWidgets(excludeList) {
    return WidgetsModule.config({ widgets: cockpitDefaultWidgets, excludeList });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi93aWRnZXRzL2NvY2twaXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTVELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGdFQUFnRSxDQUFDO0FBQ3RILE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzFHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzFHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRWxGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFpQztJQUNqRSxxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4Qiw4QkFBOEI7SUFDOUIsb0NBQW9DO0lBQ3BDLDhCQUE4QjtJQUM5Qiw4QkFBOEI7SUFDOUIsbUJBQW1CO0NBQ3BCLENBQUM7QUFFRjs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxXQUFxQztJQUNsRSxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUMvRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbiB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgV2lkZ2V0c01vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvd2lkZ2V0cyc7XG5pbXBvcnQgdHlwZSB7IERlZmF1bHRXaWRnZXRJZFZhbHVlcyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvd2lkZ2V0cy9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBsZWdhY3lDb2NrcGl0V2VsY29tZVdpZGdldERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3dpZGdldHMvZGVmaW5pdGlvbnMvY29ja3BpdC1sZWdhY3ktd2VsY29tZSc7XG5pbXBvcnQgeyBjb2NrcGl0V2VsY29tZVdpZGdldERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3dpZGdldHMvZGVmaW5pdGlvbnMvY29ja3BpdC13ZWxjb21lJztcbmltcG9ydCB7IGtwaVdpZGdldERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3dpZGdldHMvZGVmaW5pdGlvbnMva3BpJztcbmltcG9ydCB7IG1hcmtkb3duV2lkZ2V0RGVmaW5pdGlvbiB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvd2lkZ2V0cy9kZWZpbml0aW9ucy9tYXJrZG93bic7XG5pbXBvcnQgeyBpbWFnZVdpZGdldERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3dpZGdldHMvZGVmaW5pdGlvbnMvaW1hZ2UnO1xuaW1wb3J0IHsgaGVscEFuZFNlcnZpY2VXaWRnZXREZWZpbml0aW9uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy93aWRnZXRzL2RlZmluaXRpb25zL2hlbHAtYW5kLXNlcnZpY2UnO1xuaW1wb3J0IHsgdGhyZWVEUm90YXRpb25XaWRnZXREZWZpbml0aW9uIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy93aWRnZXRzL2RlZmluaXRpb25zL3RocmVlLWQtcm90YXRpb24nO1xuaW1wb3J0IHsgbWFwV2lkZ2V0RGVmaW5pdGlvbiB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvd2lkZ2V0cy9kZWZpbml0aW9ucy9tYXAnO1xuXG5leHBvcnQgY29uc3QgY29ja3BpdERlZmF1bHRXaWRnZXRzOiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdID0gW1xuICBpbWFnZVdpZGdldERlZmluaXRpb24sXG4gIGtwaVdpZGdldERlZmluaXRpb24sXG4gIG1hcmtkb3duV2lkZ2V0RGVmaW5pdGlvbixcbiAgY29ja3BpdFdlbGNvbWVXaWRnZXREZWZpbml0aW9uLFxuICBsZWdhY3lDb2NrcGl0V2VsY29tZVdpZGdldERlZmluaXRpb24sXG4gIGhlbHBBbmRTZXJ2aWNlV2lkZ2V0RGVmaW5pdGlvbixcbiAgdGhyZWVEUm90YXRpb25XaWRnZXREZWZpbml0aW9uLFxuICBtYXBXaWRnZXREZWZpbml0aW9uXG5dO1xuXG4vKipcbiAqIFdpZGdldHMgbW9kdWxlIHRvIGJlIGltcG9ydGVkIGluIHlvdXIgYXBwIG1vZHVsZS4gVGhlIGV4Y2x1ZGUgbGlzdCBhbGxvd3MgdG8gZXhjbHVkZSBjZXJ0YWluIHdpZGdldHMuXG4gKiBDYWxscyBgV2lkZ2V0c01vZHVsZS5jb25maWdgIHVuZGVyIHRoZSBob29kIHdpdGggdGhlIGBjb2NrcGl0RGVmYXVsdFdpZGdldHNgLlxuICogKioqXG4gKiBOT1RFOlxuICogVGhlIGV4Y2x1ZGVkIHdpZGdldHMgd2lsbCBzdGlsbCBiZSBwYXJ0IG9mIHlvdXIgYnVuZGxlLlxuICogQnV0IGFzIHRoZXkgYXJlIGxhenkgbG9hZGVkIHNob3VsZCBub3QgaW5jcmVhc2UgbG9hZGluZyBkdXJhdGlvbi5cbiAqICoqKlxuICogQHBhcmFtIGV4Y2x1ZGVMaXN0IGFsbG93cyB0byBleGNsdWRlIHNwZWNpZmljIHdpZGdldHMgYnkgdGhlaXIgaWQuXG4gKiBAcmV0dXJucyBBbiBlbXB0eSBtb2R1bGUgd2l0aCBzb21lIHByb3ZpZGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvY2twaXRXaWRnZXRzKGV4Y2x1ZGVMaXN0PzogRGVmYXVsdFdpZGdldElkVmFsdWVzW10pIHtcbiAgcmV0dXJuIFdpZGdldHNNb2R1bGUuY29uZmlnKHsgd2lkZ2V0czogY29ja3BpdERlZmF1bHRXaWRnZXRzLCBleGNsdWRlTGlzdCB9KTtcbn1cbiJdfQ==
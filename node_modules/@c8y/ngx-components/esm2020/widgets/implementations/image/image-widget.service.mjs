import { Injectable } from '@angular/core';
import { InventoryBinaryService } from '@c8y/client';
import { InventoryService } from '@c8y/client';
import { AlertService, FilesService, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { defaultObjectPositionValue } from './image-widget.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@ngx-translate/core";
export class ImageWidgetService {
    constructor(inventory, fileService, alert, translate, binary) {
        this.inventory = inventory;
        this.fileService = fileService;
        this.alert = alert;
        this.translate = translate;
        this.binary = binary;
    }
    async getImageDetails(imageBinaryId) {
        if (!imageBinaryId) {
            return null;
        }
        try {
            const { data: imageBinaryMo } = await this.inventory.detail(imageBinaryId);
            const file = await this.fileService.getFile(imageBinaryMo);
            const base64 = await this.fileService.toBase64(file);
            return {
                file,
                base64: base64
            };
        }
        catch (e) {
            const text = this.translate.instant(gettext('Unable to retrieve image with id: {{ imageBinaryId }}'), { imageBinaryId });
            this.alert.danger(text, e?.data);
        }
        return null;
    }
    async uploadFile(file, options = {}) {
        const hash = await this.fileService.getHashSumOfFile(file);
        const fileDetails = { c8y_SHA256: hash };
        const globalImage = !options?.dashboardMoId || options?.isDeviceTypeDashboard;
        const partialBinaryMo = !globalImage
            ? { ...fileDetails }
            : { ...fileDetails, c8y_Global: {} };
        const { data: mo } = await this.binary.create(file, partialBinaryMo);
        if (options?.dashboardMoId) {
            await this.inventory.childAdditionsAdd(mo, options?.dashboardMoId);
        }
        return mo.id;
    }
    getStyling(config) {
        if (!config.styling?.objectFit || config.styling?.objectFit === 'full-width') {
            return null;
        }
        return {
            'object-fit': config.styling.objectFit,
            'object-position': `${config.styling?.objectPositionX || defaultObjectPositionValue} ${config.styling?.objectPositionY || defaultObjectPositionValue}`
        };
    }
}
ImageWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImageWidgetService, deps: [{ token: i1.InventoryService }, { token: i2.FilesService }, { token: i2.AlertService }, { token: i3.TranslateService }, { token: i1.InventoryBinaryService }], target: i0.ɵɵFactoryTarget.Injectable });
ImageWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImageWidgetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImageWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2.FilesService }, { type: i2.AlertService }, { type: i3.TranslateService }, { type: i1.InventoryBinaryService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2lkZ2V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi93aWRnZXRzL2ltcGxlbWVudGF0aW9ucy9pbWFnZS9pbWFnZS13aWRnZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyRCxPQUFPLEVBQXdCLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFDTCwwQkFBMEIsRUFHM0IsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7QUFHOUIsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixZQUNVLFNBQTJCLEVBQzNCLFdBQXlCLEVBQ3pCLEtBQW1CLEVBQ25CLFNBQTJCLEVBQzNCLE1BQThCO1FBSjlCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBQ3pCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBd0I7SUFDckMsQ0FBQztJQUVKLEtBQUssQ0FBQyxlQUFlLENBQUMsYUFBNEI7UUFDaEQsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSTtZQUNGLE1BQU0sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMzRSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQXFDLENBQUMsQ0FBQztZQUNuRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELE9BQU87Z0JBQ0wsSUFBSTtnQkFDSixNQUFNLEVBQUUsTUFBZ0I7YUFDekIsQ0FBQztTQUNIO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FDakMsT0FBTyxDQUFDLHVEQUF1RCxDQUFDLEVBQ2hFLEVBQUUsYUFBYSxFQUFFLENBQ2xCLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FDZCxJQUFVLEVBQ1YsVUFHSSxFQUFFO1FBRU4sTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNELE1BQU0sV0FBVyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsSUFBSSxPQUFPLEVBQUUscUJBQXFCLENBQUM7UUFDOUUsTUFBTSxlQUFlLEdBQTRCLENBQUMsV0FBVztZQUMzRCxDQUFDLENBQUMsRUFBRSxHQUFHLFdBQVcsRUFBRTtZQUNwQixDQUFDLENBQUMsRUFBRSxHQUFHLFdBQVcsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDdkMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNyRSxJQUFJLE9BQU8sRUFBRSxhQUFhLEVBQUU7WUFDMUIsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDcEU7UUFDRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQXlCO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFNBQVMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLFNBQVMsS0FBSyxZQUFZLEVBQUU7WUFDNUUsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU87WUFDTCxZQUFZLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1lBQ3RDLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxlQUFlLElBQUksMEJBQTBCLElBQ2pGLE1BQU0sQ0FBQyxPQUFPLEVBQUUsZUFBZSxJQUFJLDBCQUNyQyxFQUFFO1NBQ0gsQ0FBQztJQUNKLENBQUM7OytHQS9EVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQURMLE1BQU07MkZBQ25CLGtCQUFrQjtrQkFEOUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEludmVudG9yeUJpbmFyeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdEJpbmFyeSwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgRmlsZXNTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQge1xuICBkZWZhdWx0T2JqZWN0UG9zaXRpb25WYWx1ZSxcbiAgSW1hZ2VXaWRnZXRDb25maWcsXG4gIEltYWdlV2lkZ2V0U3R5bGVcbn0gZnJvbSAnLi9pbWFnZS13aWRnZXQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEltYWdlV2lkZ2V0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgZmlsZVNlcnZpY2U6IEZpbGVzU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBiaW5hcnk6IEludmVudG9yeUJpbmFyeVNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGdldEltYWdlRGV0YWlscyhpbWFnZUJpbmFyeUlkOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx7IGZpbGU6IEZpbGU7IGJhc2U2NDogc3RyaW5nIH0+IHtcbiAgICBpZiAoIWltYWdlQmluYXJ5SWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IGltYWdlQmluYXJ5TW8gfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5LmRldGFpbChpbWFnZUJpbmFyeUlkKTtcbiAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLmZpbGVTZXJ2aWNlLmdldEZpbGUoaW1hZ2VCaW5hcnlNbyBhcyBJTWFuYWdlZE9iamVjdEJpbmFyeSk7XG4gICAgICBjb25zdCBiYXNlNjQgPSBhd2FpdCB0aGlzLmZpbGVTZXJ2aWNlLnRvQmFzZTY0KGZpbGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZSxcbiAgICAgICAgYmFzZTY0OiBiYXNlNjQgYXMgc3RyaW5nXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KFxuICAgICAgICBnZXR0ZXh0KCdVbmFibGUgdG8gcmV0cmlldmUgaW1hZ2Ugd2l0aCBpZDoge3sgaW1hZ2VCaW5hcnlJZCB9fScpLFxuICAgICAgICB7IGltYWdlQmluYXJ5SWQgfVxuICAgICAgKTtcbiAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKHRleHQsIGU/LmRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgdXBsb2FkRmlsZShcbiAgICBmaWxlOiBGaWxlLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGRhc2hib2FyZE1vSWQ/OiBzdHJpbmc7XG4gICAgICBpc0RldmljZVR5cGVEYXNoYm9hcmQ/OiBib29sZWFuO1xuICAgIH0gPSB7fVxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLmZpbGVTZXJ2aWNlLmdldEhhc2hTdW1PZkZpbGUoZmlsZSk7XG4gICAgY29uc3QgZmlsZURldGFpbHMgPSB7IGM4eV9TSEEyNTY6IGhhc2ggfTtcbiAgICBjb25zdCBnbG9iYWxJbWFnZSA9ICFvcHRpb25zPy5kYXNoYm9hcmRNb0lkIHx8IG9wdGlvbnM/LmlzRGV2aWNlVHlwZURhc2hib2FyZDtcbiAgICBjb25zdCBwYXJ0aWFsQmluYXJ5TW86IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+ID0gIWdsb2JhbEltYWdlXG4gICAgICA/IHsgLi4uZmlsZURldGFpbHMgfVxuICAgICAgOiB7IC4uLmZpbGVEZXRhaWxzLCBjOHlfR2xvYmFsOiB7fSB9O1xuICAgIGNvbnN0IHsgZGF0YTogbW8gfSA9IGF3YWl0IHRoaXMuYmluYXJ5LmNyZWF0ZShmaWxlLCBwYXJ0aWFsQmluYXJ5TW8pO1xuICAgIGlmIChvcHRpb25zPy5kYXNoYm9hcmRNb0lkKSB7XG4gICAgICBhd2FpdCB0aGlzLmludmVudG9yeS5jaGlsZEFkZGl0aW9uc0FkZChtbywgb3B0aW9ucz8uZGFzaGJvYXJkTW9JZCk7XG4gICAgfVxuICAgIHJldHVybiBtby5pZDtcbiAgfVxuXG4gIGdldFN0eWxpbmcoY29uZmlnOiBJbWFnZVdpZGdldENvbmZpZyk6IEltYWdlV2lkZ2V0U3R5bGUgfCBudWxsIHtcbiAgICBpZiAoIWNvbmZpZy5zdHlsaW5nPy5vYmplY3RGaXQgfHwgY29uZmlnLnN0eWxpbmc/Lm9iamVjdEZpdCA9PT0gJ2Z1bGwtd2lkdGgnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICdvYmplY3QtZml0JzogY29uZmlnLnN0eWxpbmcub2JqZWN0Rml0LFxuICAgICAgJ29iamVjdC1wb3NpdGlvbic6IGAke2NvbmZpZy5zdHlsaW5nPy5vYmplY3RQb3NpdGlvblggfHwgZGVmYXVsdE9iamVjdFBvc2l0aW9uVmFsdWV9ICR7XG4gICAgICAgIGNvbmZpZy5zdHlsaW5nPy5vYmplY3RQb3NpdGlvblkgfHwgZGVmYXVsdE9iamVjdFBvc2l0aW9uVmFsdWVcbiAgICAgIH1gXG4gICAgfTtcbiAgfVxufVxuIl19
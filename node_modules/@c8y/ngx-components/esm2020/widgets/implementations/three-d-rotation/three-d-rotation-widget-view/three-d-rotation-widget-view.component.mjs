import { Component, Input, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map, shareReplay, switchMap, distinctUntilChanged, startWith } from 'rxjs/operators';
import { MeasurementRealtimeService } from '@c8y/ngx-components';
import { loadBoxModel } from '@c8y/ngx-components/widgets/implementations/three-d-rotation/lazy-box-model';
import { loadPhoneModel } from '@c8y/ngx-components/widgets/implementations/three-d-rotation/lazy-phone-model';
import { ContextDashboardComponent } from '@c8y/ngx-components/context-dashboard';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/context-dashboard";
import * as i3 from "../three-d-rotation/three-d-rotation.component";
export class ThreeDRotationWidgetViewComponent {
    constructor(measurementRealtime, dashboard) {
        this.measurementRealtime = measurementRealtime;
        this.dashboard = dashboard;
        this.deviceId$ = new BehaviorSubject(null);
        this.modelName$ = new BehaviorSubject(null);
        this.cameraType$ = new BehaviorSubject('PC');
        this.isWireframe$ = new BehaviorSubject(true);
        this.modelObj$ = this.modelName$.pipe(filter(name => !!name), distinctUntilChanged(), switchMap(name => this.getModelUrl(name)), shareReplay(1));
        this.angles$ = this.deviceId$.pipe(filter(id => !!id), distinctUntilChanged(), switchMap(id => this.getAnglesOfDevice$(id)), startWith({ x: 0, y: 0, z: 0 }));
    }
    ngOnChanges(changes) {
        if (changes.config && this.config) {
            this.onConfigChange();
        }
    }
    onConfigChange() {
        if (this.config.device?.id) {
            this.deviceId$.next(`${this.config.device.id}`);
        }
        else if (this.dashboard?.context?.id) {
            this.deviceId$.next(`${this.dashboard.context?.id}`);
        }
        if (this.config.objectModel) {
            this.modelName$.next(this.config.objectModel);
        }
        if (this.config.cameraType) {
            this.cameraType$.next(this.config.cameraType);
        }
        if (this.config.isWireframe !== undefined) {
            this.isWireframe$.next(this.config.isWireframe);
        }
    }
    async getModelUrl(model) {
        // The name *.min.json still exist for backwards compatibility
        // it might be stored in certain widget configs.
        if (model === 'box.min.json') {
            return await loadBoxModel();
        }
        else {
            return await loadPhoneModel();
        }
    }
    getAnglesOfDevice$(deviceId) {
        const fragment = 'c8y_Acceleration';
        const series = ['accelerationX', 'accelerationY', 'accelerationZ'];
        return this.measurementRealtime
            .latestValueOfSpecificMeasurement$(fragment, series[0], deviceId, 1)
            .pipe(filter(m => !!m && m[fragment] && series.every(axisSeries => m[fragment][axisSeries])), map(measurement => {
            const [xAxisValue, yAxisValue, zAxisValue] = series.map(axisSeries => Math.round(measurement[fragment][axisSeries].value));
            return this.convertValues(xAxisValue, yAxisValue, zAxisValue);
        }));
    }
    convertValues(x, y, z) {
        let rotateX = Math.atan2(y, z);
        let rotateY = Math.atan2(x, Math.sqrt(y * y + z * z));
        rotateX = rotateX ? rotateX % (Math.PI * 2) : 0;
        rotateY = rotateY ? rotateY % (Math.PI * 2) : 0;
        return {
            x: rotateX,
            y: 0,
            z: rotateY
        };
    }
}
ThreeDRotationWidgetViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ThreeDRotationWidgetViewComponent, deps: [{ token: i1.MeasurementRealtimeService }, { token: i2.ContextDashboardComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ThreeDRotationWidgetViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ThreeDRotationWidgetViewComponent, selector: "c8y-three-d-rotation-widget-view", inputs: { config: "config" }, providers: [MeasurementRealtimeService], usesOnChanges: true, ngImport: i0, template: "<c8y-three-d-rotation\n  [modelObj$]=\"modelObj$\"\n  [angles$]=\"angles$\"\n  [cameraType$]=\"cameraType$\"\n  [isWireframe$]=\"isWireframe$\"\n></c8y-three-d-rotation>\n", dependencies: [{ kind: "component", type: i3.ThreeDRotationComponent, selector: "c8y-three-d-rotation", inputs: ["angles$", "modelObj$", "cameraType$", "isWireframe$"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ThreeDRotationWidgetViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-three-d-rotation-widget-view', providers: [MeasurementRealtimeService], template: "<c8y-three-d-rotation\n  [modelObj$]=\"modelObj$\"\n  [angles$]=\"angles$\"\n  [cameraType$]=\"cameraType$\"\n  [isWireframe$]=\"isWireframe$\"\n></c8y-three-d-rotation>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MeasurementRealtimeService }, { type: i2.ContextDashboardComponent, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { config: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
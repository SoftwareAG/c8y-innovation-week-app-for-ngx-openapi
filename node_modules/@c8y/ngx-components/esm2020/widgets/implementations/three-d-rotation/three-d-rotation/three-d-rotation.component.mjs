import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { combineLatest, from, Observable, of, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, switchMap } from 'rxjs/operators';
import { loadThree } from '@c8y/ngx-components/lazy/three';
import { loadOrbitControls } from '@c8y/ngx-components/lazy/three-orbit-controls';
import * as i0 from "@angular/core";
export class ThreeDRotationComponent {
    constructor() {
        this.angles$ = of({ x: 0, y: 0, z: 0 });
        this.cameraType$ = of('PC');
        this.isWireframe$ = of(true);
        this.afterViewInit$ = new Subject();
    }
    get canvas() {
        return this.canvasRef?.nativeElement;
    }
    ngOnInit() {
        const three$ = from(loadThree()).pipe(shareReplay(1));
        const model$ = combineLatest([three$, this.modelObj$]).pipe(filter(([, modelObj]) => !!modelObj), switchMap(([three, modelObj]) => this.loadModel(modelObj, three)));
        const modelWithWireframe$ = combineLatest([model$, this.isWireframe$]).pipe(map(([model, isWireframe]) => this.setWireframe(model, isWireframe)));
        const rotatedModel$ = combineLatest([modelWithWireframe$, this.angles$]).pipe(filter(([, angles]) => !!angles), map(([model, angles]) => {
            Object.assign(model.rotation, angles);
            return model;
        }));
        const cameraType$ = this.cameraType$.pipe(filter(type => !!type), distinctUntilChanged());
        let previousCameraType;
        this.renderSubscription = combineLatest([
            three$,
            rotatedModel$,
            cameraType$,
            this.afterViewInit$
        ])
            .pipe(filter(([, model]) => !!model))
            .subscribe(async ([three, model, cameraType]) => {
            if (model !== this.model || previousCameraType !== cameraType) {
                this.model = model;
                previousCameraType = cameraType;
                this.createScene(three, model, cameraType);
            }
            if (!this.renderer) {
                await this.setupRenderer(three);
            }
            this.render();
        });
    }
    ngOnDestroy() {
        this.renderSubscription?.unsubscribe();
        this.controls?.dispose();
    }
    ngAfterViewInit() {
        this.afterViewInit$.next();
    }
    async loadModel(modelObj, three) {
        const loader = new three.ObjectLoader();
        const parsedModel = await loader.parse(modelObj);
        return parsedModel;
    }
    async setupRenderer(three) {
        //* Renderer
        // Use canvas element in template
        this.renderer = new three.WebGLRenderer({ canvas: this.canvas });
        this.renderer.setPixelRatio(devicePixelRatio);
        this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);
        const { OrbitControls } = await loadOrbitControls();
        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.25;
        this.controls.rotateSpeed = 0.35;
        this.controls.addEventListener('change', () => this.render());
    }
    setWireframe(parsedModel, isWireframe) {
        parsedModel.children.forEach((child) => {
            if (child.material) {
                child.material.wireframe = isWireframe;
            }
        });
        return parsedModel;
    }
    render() {
        this.renderer?.render(this.scene, this.camera);
    }
    createScene(three, model, cameraType) {
        //* Scene
        this.scene = new three.Scene();
        this.scene.background = new three.Color(0xffffff);
        this.scene.add(model);
        const light = new three.AmbientLight(0xffffff, 0.5);
        const lightDirectional = new three.DirectionalLight(0xffffff);
        const lightDirectional2 = new three.DirectionalLight(0xffffff);
        lightDirectional.position.set(20, 25, 30);
        lightDirectional2.position.set(-20, -25, -30);
        this.scene.add(lightDirectional);
        this.scene.add(lightDirectional2);
        this.scene.add(light);
        this.camera = this.createCamera(three, cameraType);
    }
    createCamera(three, cameraType) {
        let camera;
        switch (cameraType) {
            case 'OC':
                camera = new three.OrthographicCamera(30 / -2, 30 / 2, 30 / 2, 30 / -2, 1, 1000);
                break;
            case 'PC':
            default:
                camera = new three.PerspectiveCamera(30, this.getAspectRatio(), 0.1, 1000);
                break;
        }
        camera.rotateX(Math.PI / 2);
        camera.rotateY(Math.PI / 2);
        camera.position.z = 23;
        camera.position.x = 14;
        camera.position.y = 7;
        return camera;
    }
    getAspectRatio() {
        return this.canvas.clientWidth / this.canvas.clientHeight;
    }
}
ThreeDRotationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ThreeDRotationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ThreeDRotationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ThreeDRotationComponent, selector: "c8y-three-d-rotation", inputs: { angles$: "angles$", modelObj$: "modelObj$", cameraType$: "cameraType$", isWireframe$: "isWireframe$" }, viewQueries: [{ propertyName: "canvasRef", first: true, predicate: ["canvas"], descendants: true }], ngImport: i0, template: "<canvas #canvas class=\"fit-w fit-h\"></canvas>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ThreeDRotationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-three-d-rotation', template: "<canvas #canvas class=\"fit-w fit-h\"></canvas>\n" }]
        }], propDecorators: { canvasRef: [{
                type: ViewChild,
                args: ['canvas']
            }], angles$: [{
                type: Input
            }], modelObj$: [{
                type: Input
            }], cameraType$: [{
                type: Input
            }], isWireframe$: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
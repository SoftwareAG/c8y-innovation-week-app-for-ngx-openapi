import { Component, Input } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { AppStateService } from '@c8y/ngx-components';
import { MarkdownWidgetService } from '../markdown-widget.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/client";
import * as i3 from "../markdown-widget.service";
import * as i4 from "@angular/common";
export class MarkdownWidgetViewComponent {
    constructor(appState, client, markdownWidgetService) {
        this.appState = appState;
        this.client = client;
        this.markdownWidgetService = markdownWidgetService;
        this.headers = { 'Content-Type': 'text/markdown', responseType: 'blob' };
    }
    async ngOnInit() {
        this.contextPath = this.appState.getCurrentContextPath();
        if (this.config.markdownBinaryId) {
            const readmeContent = await (await this.markdownWidgetService.getFile(this.config.markdownBinaryId)).text();
            this.markdown = readmeContent;
        }
        else if (this.config.contentUrl?.toLowerCase() === '/readme.md') {
            this.markdown = await this.getReadmeFileContent();
        }
        else {
            this.setContentFromUrl(this.config.contentUrl);
        }
    }
    setContentFromUrl(url) {
        const req = new XMLHttpRequest();
        req.onreadystatechange = () => this.render(req);
        req.addEventListener('load', () => this.render(req));
        req.open('GET', url);
        req.responseType = 'text';
        req.setRequestHeader('Accept', 'text/html');
        req.send();
    }
    async render(req) {
        if (req.readyState === 4 && req.status === 200) {
            this.markdown = req.response;
        }
    }
    async getReadmeFileContent() {
        const readmeFile = await this.getReadmeFile();
        if (readmeFile.status === 200) {
            return await readmeFile.text();
        }
        return '';
    }
    async getReadmeFile() {
        const options = {
            method: 'GET',
            headers: this.headers
        };
        const result = await this.client.fetch(`/apps/${this.contextPath}${this.config.contentUrl}`, options);
        return result;
    }
}
MarkdownWidgetViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MarkdownWidgetViewComponent, deps: [{ token: i1.AppStateService }, { token: i2.FetchClient }, { token: i3.MarkdownWidgetService }], target: i0.ɵɵFactoryTarget.Component });
MarkdownWidgetViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MarkdownWidgetViewComponent, selector: "c8y-markdown-widget-view", inputs: { config: "config" }, ngImport: i0, template: "<div id=\"helpContent\" class=\"p-16 p-t-0 markdown-content\" [innerHTML]=\"markdown | markdownToHtml | async\"></div>\n", dependencies: [{ kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.MarkdownToHtmlPipe, name: "markdownToHtml" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MarkdownWidgetViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-markdown-widget-view', template: "<div id=\"helpContent\" class=\"p-16 p-t-0 markdown-content\" [innerHTML]=\"markdown | markdownToHtml | async\"></div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AppStateService }, { type: i2.FetchClient }, { type: i3.MarkdownWidgetService }]; }, propDecorators: { config: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24td2lkZ2V0LXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vd2lkZ2V0cy9pbXBsZW1lbnRhdGlvbnMvbWFya2Rvd24vbWFya2Rvd24td2lkZ2V0LXZpZXcvbWFya2Rvd24td2lkZ2V0LXZpZXcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vd2lkZ2V0cy9pbXBsZW1lbnRhdGlvbnMvbWFya2Rvd24vbWFya2Rvd24td2lkZ2V0LXZpZXcvbWFya2Rvd24td2lkZ2V0LXZpZXcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFpQixXQUFXLEVBQWtCLE1BQU0sYUFBYSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7O0FBTW5FLE1BQU0sT0FBTywyQkFBMkI7SUFPdEMsWUFDVSxRQUF5QixFQUN6QixNQUFtQixFQUNuQixxQkFBNEM7UUFGNUMsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNuQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBTHJDLFlBQU8sR0FBUSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBTXZGLENBQUM7SUFFSixLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUNoQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQzFCLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQ3ZFLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQztTQUMvQjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssWUFBWSxFQUFFO1lBQ2pFLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUNuRDthQUFNO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsR0FBVztRQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBRWpDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVPLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBbUI7UUFDdEMsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLG9CQUFvQjtRQUNoQyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU5QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQzdCLE9BQU8sTUFBTSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDaEM7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxLQUFLLENBQUMsYUFBYTtRQUN6QixNQUFNLE9BQU8sR0FBa0I7WUFDN0IsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFtQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNwRCxTQUFTLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFDcEQsT0FBTyxDQUNSLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzt3SEEvRFUsMkJBQTJCOzRHQUEzQiwyQkFBMkIsOEZDVnhDLDBIQUNBOzJGRFNhLDJCQUEyQjtrQkFKdkMsU0FBUzsrQkFDRSwwQkFBMEI7b0tBSTNCLE1BQU07c0JBQWQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUZldGNoT3B0aW9ucywgRmV0Y2hDbGllbnQsIElGZXRjaFJlc3BvbnNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBNYXJrZG93bldpZGdldENvbmZpZyB9IGZyb20gJy4uL21hcmtkb3duLXdpZGdldC5tb2RlbCc7XG5pbXBvcnQgeyBNYXJrZG93bldpZGdldFNlcnZpY2UgfSBmcm9tICcuLi9tYXJrZG93bi13aWRnZXQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1tYXJrZG93bi13aWRnZXQtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXJrZG93bi13aWRnZXQtdmlldy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTWFya2Rvd25XaWRnZXRWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29uZmlnOiBNYXJrZG93bldpZGdldENvbmZpZztcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgbWFya2Rvd246IHN0cmluZztcbiAgY29udGV4dFBhdGg6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBoZWFkZXJzOiBhbnkgPSB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9tYXJrZG93bicsIHJlc3BvbnNlVHlwZTogJ2Jsb2InIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudCxcbiAgICBwcml2YXRlIG1hcmtkb3duV2lkZ2V0U2VydmljZTogTWFya2Rvd25XaWRnZXRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNvbnRleHRQYXRoID0gdGhpcy5hcHBTdGF0ZS5nZXRDdXJyZW50Q29udGV4dFBhdGgoKTtcbiAgICBpZiAodGhpcy5jb25maWcubWFya2Rvd25CaW5hcnlJZCkge1xuICAgICAgY29uc3QgcmVhZG1lQ29udGVudCA9IGF3YWl0IChcbiAgICAgICAgYXdhaXQgdGhpcy5tYXJrZG93bldpZGdldFNlcnZpY2UuZ2V0RmlsZSh0aGlzLmNvbmZpZy5tYXJrZG93bkJpbmFyeUlkKVxuICAgICAgKS50ZXh0KCk7XG4gICAgICB0aGlzLm1hcmtkb3duID0gcmVhZG1lQ29udGVudDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29uZmlnLmNvbnRlbnRVcmw/LnRvTG93ZXJDYXNlKCkgPT09ICcvcmVhZG1lLm1kJykge1xuICAgICAgdGhpcy5tYXJrZG93biA9IGF3YWl0IHRoaXMuZ2V0UmVhZG1lRmlsZUNvbnRlbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRDb250ZW50RnJvbVVybCh0aGlzLmNvbmZpZy5jb250ZW50VXJsKTtcbiAgICB9XG4gIH1cblxuICBzZXRDb250ZW50RnJvbVVybCh1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHRoaXMucmVuZGVyKHJlcSk7XG4gICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB0aGlzLnJlbmRlcihyZXEpKTtcbiAgICByZXEub3BlbignR0VUJywgdXJsKTtcbiAgICByZXEucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAndGV4dC9odG1sJyk7XG4gICAgcmVxLnNlbmQoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVuZGVyKHJlcTogWE1MSHR0cFJlcXVlc3QpIHtcbiAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT09IDQgJiYgcmVxLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICB0aGlzLm1hcmtkb3duID0gcmVxLnJlc3BvbnNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0UmVhZG1lRmlsZUNvbnRlbnQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCByZWFkbWVGaWxlID0gYXdhaXQgdGhpcy5nZXRSZWFkbWVGaWxlKCk7XG5cbiAgICBpZiAocmVhZG1lRmlsZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHJlYWRtZUZpbGUudGV4dCgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFJlYWRtZUZpbGUoKTogUHJvbWlzZTxJRmV0Y2hSZXNwb25zZT4ge1xuICAgIGNvbnN0IG9wdGlvbnM6IElGZXRjaE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzXG4gICAgfTtcbiAgICBjb25zdCByZXN1bHQ6IElGZXRjaFJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2goXG4gICAgICBgL2FwcHMvJHt0aGlzLmNvbnRleHRQYXRofSR7dGhpcy5jb25maWcuY29udGVudFVybH1gLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIiwiPGRpdiBpZD1cImhlbHBDb250ZW50XCIgY2xhc3M9XCJwLTE2IHAtdC0wIG1hcmtkb3duLWNvbnRlbnRcIiBbaW5uZXJIVE1MXT1cIm1hcmtkb3duIHwgbWFya2Rvd25Ub0h0bWwgfCBhc3luY1wiPjwvZGl2PlxuIl19
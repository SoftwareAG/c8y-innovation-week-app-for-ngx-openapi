import { Component, ViewChild } from '@angular/core';
import { ClusterMapComponent } from '@c8y/ngx-components/map';
import { DashboardChildComponent } from '@c8y/ngx-components';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@angular/common";
import * as i3 from "@c8y/ngx-components/map";
import * as i4 from "@angular/router";
import * as i5 from "./map-event-info.component";
export class MapWidgetComponent {
    constructor(dashboardChild) {
        this.mapConfig = { center: [0, 0] };
        this.destroy$ = new Subject();
        this.listenToWidgetResizeEvent(dashboardChild);
    }
    ngOnInit() {
        if (this.config.device) {
            this.rootNode = this.config.device;
        }
        this.mapConfig = { ...this.config.mapConfig };
        this.savedNode = this.rootNode;
    }
    startFollow(context) {
        if (context.id !== this.rootNode?.id) {
            this.rootNode = context;
        }
        this.mapConfig = {
            ...this.config.mapConfig,
            follow: true,
            realtime: true
        };
    }
    stopFollow() {
        this.mapConfig = {
            ...this.config.mapConfig,
            follow: false
        };
        this.rootNode = this.savedNode;
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    listenToWidgetResizeEvent(dashboardChild) {
        dashboardChild.changeEnd
            .pipe(filter(child => child.lastChange === 'resize'), takeUntil(this.destroy$))
            .subscribe(() => {
            this.clusterMap.reset();
        });
    }
}
MapWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetComponent, deps: [{ token: i1.DashboardChildComponent }], target: i0.ɵɵFactoryTarget.Component });
MapWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MapWidgetComponent, selector: "c8y-map-widget", viewQueries: [{ propertyName: "clusterMap", first: true, predicate: ClusterMapComponent, descendants: true }], ngImport: i0, template: "<c8y-map-status\n  [clusterMap]=\"mapWidget\"\n  [(config)]=\"mapConfig\"\n  (onUnfollow)=\"stopFollow()\"\n></c8y-map-status>\n<c8y-cluster-map #mapWidget [rootNode]=\"rootNode\" [config]=\"mapConfig\">\n  <div *c8yMapPopup=\"let context\" class=\"map-marker\">\n    <a class=\"text-truncate deviceLink text-12\" routerLink=\"/device/{{ context.id }}\">\n      <strong>{{ context.name }}</strong>\n    </a>\n    <c8y-map-event-info [asset]=\"context\">\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"startFollow(context)\"\n        [title]=\"'Activate realtime on this asset and follow it if it moves' | translate\"\n        *ngIf=\"!mapConfig.follow\"\n        translate\n      >\n        Follow\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"stopFollow()\"\n        [title]=\"'Stop following this asset.' | translate\"\n        *ngIf=\"mapConfig.follow\"\n        translate\n      >\n        Unfollow\n      </button>\n    </c8y-map-event-info>\n  </div>\n</c8y-cluster-map>\n", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i3.MapStatusComponent, selector: "c8y-map-status", inputs: ["config", "clusterMap"], outputs: ["configChange", "onUnfollow"] }, { kind: "component", type: i3.ClusterMapComponent, selector: "c8y-cluster-map", inputs: ["config", "rootNode", "asset", "showClusterColor"], outputs: ["mapChange"] }, { kind: "directive", type: i3.MapPopupDirective, selector: "[c8yMapPopup]" }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i5.MapEventInfoComponent, selector: "c8y-map-event-info", inputs: ["asset"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map-widget', template: "<c8y-map-status\n  [clusterMap]=\"mapWidget\"\n  [(config)]=\"mapConfig\"\n  (onUnfollow)=\"stopFollow()\"\n></c8y-map-status>\n<c8y-cluster-map #mapWidget [rootNode]=\"rootNode\" [config]=\"mapConfig\">\n  <div *c8yMapPopup=\"let context\" class=\"map-marker\">\n    <a class=\"text-truncate deviceLink text-12\" routerLink=\"/device/{{ context.id }}\">\n      <strong>{{ context.name }}</strong>\n    </a>\n    <c8y-map-event-info [asset]=\"context\">\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"startFollow(context)\"\n        [title]=\"'Activate realtime on this asset and follow it if it moves' | translate\"\n        *ngIf=\"!mapConfig.follow\"\n        translate\n      >\n        Follow\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"stopFollow()\"\n        [title]=\"'Stop following this asset.' | translate\"\n        *ngIf=\"mapConfig.follow\"\n        translate\n      >\n        Unfollow\n      </button>\n    </c8y-map-event-info>\n  </div>\n</c8y-cluster-map>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DashboardChildComponent }]; }, propDecorators: { clusterMap: [{
                type: ViewChild,
                args: [ClusterMapComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi93aWRnZXRzL2ltcGxlbWVudGF0aW9ucy9tYXAvbWFwLXdpZGdldC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi93aWRnZXRzL2ltcGxlbWVudGF0aW9ucy9tYXAvbWFwLXdpZGdldC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFvQixNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlELE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7OztBQU0vQixNQUFNLE9BQU8sa0JBQWtCO0lBVzdCLFlBQVksY0FBdUM7UUFWbkQsY0FBUyxHQUFxQixFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBUXpDLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRy9CLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBTztRQUNqQixJQUFJLE9BQU8sQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHO1lBQ2YsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7WUFDeEIsTUFBTSxFQUFFLElBQUk7WUFDWixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUc7WUFDZixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUztZQUN4QixNQUFNLEVBQUUsS0FBSztTQUNkLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDakMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyx5QkFBeUIsQ0FBQyxjQUF1QztRQUN2RSxjQUFjLENBQUMsU0FBUzthQUNyQixJQUFJLENBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxRQUFRLENBQUMsRUFDOUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDekI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OytHQXZEVSxrQkFBa0I7bUdBQWxCLGtCQUFrQixrR0FLbEIsbUJBQW1CLGdEQ2pCaEMsa25DQWtDQTsyRkR0QmEsa0JBQWtCO2tCQUo5QixTQUFTOytCQUNFLGdCQUFnQjs4R0FTMUIsVUFBVTtzQkFEVCxTQUFTO3VCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBDbHVzdGVyTWFwQ29tcG9uZW50LCBDbHVzdGVyTWFwQ29uZmlnIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9tYXAnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQ2hpbGRDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE1hcFdpZGdldENvbmZpZyB9IGZyb20gJy4vbWFwLXdpZGdldC5tb2RlbCc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW1hcC13aWRnZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFwLXdpZGdldC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTWFwV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBtYXBDb25maWc6IENsdXN0ZXJNYXBDb25maWcgPSB7IGNlbnRlcjogWzAsIDBdIH07XG4gIHJvb3ROb2RlOiBJTWFuYWdlZE9iamVjdDtcbiAgY29uZmlnOiBNYXBXaWRnZXRDb25maWc7XG5cbiAgQFZpZXdDaGlsZChDbHVzdGVyTWFwQ29tcG9uZW50KVxuICBjbHVzdGVyTWFwOiBDbHVzdGVyTWFwQ29tcG9uZW50O1xuXG4gIHByaXZhdGUgc2F2ZWROb2RlOiBJTWFuYWdlZE9iamVjdDtcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IoZGFzaGJvYXJkQ2hpbGQ6IERhc2hib2FyZENoaWxkQ29tcG9uZW50KSB7XG4gICAgdGhpcy5saXN0ZW5Ub1dpZGdldFJlc2l6ZUV2ZW50KGRhc2hib2FyZENoaWxkKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbmZpZy5kZXZpY2UpIHtcbiAgICAgIHRoaXMucm9vdE5vZGUgPSB0aGlzLmNvbmZpZy5kZXZpY2U7XG4gICAgfVxuICAgIHRoaXMubWFwQ29uZmlnID0geyAuLi50aGlzLmNvbmZpZy5tYXBDb25maWcgfTtcbiAgICB0aGlzLnNhdmVkTm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gIH1cblxuICBzdGFydEZvbGxvdyhjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQuaWQgIT09IHRoaXMucm9vdE5vZGU/LmlkKSB7XG4gICAgICB0aGlzLnJvb3ROb2RlID0gY29udGV4dDtcbiAgICB9XG4gICAgdGhpcy5tYXBDb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbmZpZy5tYXBDb25maWcsXG4gICAgICBmb2xsb3c6IHRydWUsXG4gICAgICByZWFsdGltZTogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBzdG9wRm9sbG93KCkge1xuICAgIHRoaXMubWFwQ29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25maWcubWFwQ29uZmlnLFxuICAgICAgZm9sbG93OiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5yb290Tm9kZSA9IHRoaXMuc2F2ZWROb2RlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gIH1cblxuICBwcml2YXRlIGxpc3RlblRvV2lkZ2V0UmVzaXplRXZlbnQoZGFzaGJvYXJkQ2hpbGQ6IERhc2hib2FyZENoaWxkQ29tcG9uZW50KSB7XG4gICAgZGFzaGJvYXJkQ2hpbGQuY2hhbmdlRW5kXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKGNoaWxkID0+IGNoaWxkLmxhc3RDaGFuZ2UgPT09ICdyZXNpemUnKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5jbHVzdGVyTWFwLnJlc2V0KCk7XG4gICAgICB9KTtcbiAgfVxufVxuIiwiPGM4eS1tYXAtc3RhdHVzXG4gIFtjbHVzdGVyTWFwXT1cIm1hcFdpZGdldFwiXG4gIFsoY29uZmlnKV09XCJtYXBDb25maWdcIlxuICAob25VbmZvbGxvdyk9XCJzdG9wRm9sbG93KClcIlxuPjwvYzh5LW1hcC1zdGF0dXM+XG48Yzh5LWNsdXN0ZXItbWFwICNtYXBXaWRnZXQgW3Jvb3ROb2RlXT1cInJvb3ROb2RlXCIgW2NvbmZpZ109XCJtYXBDb25maWdcIj5cbiAgPGRpdiAqYzh5TWFwUG9wdXA9XCJsZXQgY29udGV4dFwiIGNsYXNzPVwibWFwLW1hcmtlclwiPlxuICAgIDxhIGNsYXNzPVwidGV4dC10cnVuY2F0ZSBkZXZpY2VMaW5rIHRleHQtMTJcIiByb3V0ZXJMaW5rPVwiL2RldmljZS97eyBjb250ZXh0LmlkIH19XCI+XG4gICAgICA8c3Ryb25nPnt7IGNvbnRleHQubmFtZSB9fTwvc3Ryb25nPlxuICAgIDwvYT5cbiAgICA8Yzh5LW1hcC1ldmVudC1pbmZvIFthc3NldF09XCJjb250ZXh0XCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4teHMgYnRuLWJsb2NrIG0tdC04XCJcbiAgICAgICAgKGNsaWNrKT1cInN0YXJ0Rm9sbG93KGNvbnRleHQpXCJcbiAgICAgICAgW3RpdGxlXT1cIidBY3RpdmF0ZSByZWFsdGltZSBvbiB0aGlzIGFzc2V0IGFuZCBmb2xsb3cgaXQgaWYgaXQgbW92ZXMnIHwgdHJhbnNsYXRlXCJcbiAgICAgICAgKm5nSWY9XCIhbWFwQ29uZmlnLmZvbGxvd1wiXG4gICAgICAgIHRyYW5zbGF0ZVxuICAgICAgPlxuICAgICAgICBGb2xsb3dcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGJ0bi1ibG9jayBtLXQtOFwiXG4gICAgICAgIChjbGljayk9XCJzdG9wRm9sbG93KClcIlxuICAgICAgICBbdGl0bGVdPVwiJ1N0b3AgZm9sbG93aW5nIHRoaXMgYXNzZXQuJyB8IHRyYW5zbGF0ZVwiXG4gICAgICAgICpuZ0lmPVwibWFwQ29uZmlnLmZvbGxvd1wiXG4gICAgICAgIHRyYW5zbGF0ZVxuICAgICAgPlxuICAgICAgICBVbmZvbGxvd1xuICAgICAgPC9idXR0b24+XG4gICAgPC9jOHktbWFwLWV2ZW50LWluZm8+XG4gIDwvZGl2PlxuPC9jOHktY2x1c3Rlci1tYXA+XG4iXX0=
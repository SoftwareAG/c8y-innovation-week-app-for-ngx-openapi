import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { AppStateService, NavigatorService, OptionsService, Permissions, SearchService, TabsService } from '@c8y/ngx-components';
import { AssetNodeService, ASSET_NAVIGATOR_CONFIG } from '@c8y/ngx-components/assets-navigator';
import { isUndefined, startCase } from 'lodash-es';
import { map } from 'rxjs/operators';
import { DEFAULT_CONFIG, DEFAULT_HOME_DASHBOARD_NAME } from './cockpit-config.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
import * as i3 from "@c8y/client";
export class CockpitConfigService {
    get excludedFeatureKeys() {
        return Object.keys(this.currentConfig.features).filter(key => !this.currentConfig.features[key]);
    }
    constructor(navigatorService, tabsService, searchService, assetNodeService, inventoryService, appState, optionsService, permissions, moduleConfig) {
        this.navigatorService = navigatorService;
        this.tabsService = tabsService;
        this.searchService = searchService;
        this.assetNodeService = assetNodeService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.optionsService = optionsService;
        this.permissions = permissions;
        this.moduleConfig = moduleConfig;
        this.currentConfig = DEFAULT_CONFIG;
        this.nodes = [];
        this.navigationFactory = {
            get: () => this.nodes
        };
        this.DEFAULT_NODE_PRIORITY = 2000;
        this.registerFilterForFeatures();
        this.init();
    }
    init() {
        this.appState.currentApplicationConfig.subscribe(config => {
            if (config) {
                this.currentConfig = { ...DEFAULT_CONFIG, ...config };
                this.setRootNodes();
            }
        });
    }
    async saveConfig(config) {
        this.currentConfig = config;
        await this.storeApplicationConfig(this.currentConfig);
    }
    refresh() {
        this.optionsService.hideNavigator = this.currentConfig.hideNavigator;
        this.navigatorService.refresh();
        this.searchService.refresh();
    }
    async setRootNodes() {
        this.addNodesToFactories();
        this.nodes.length = 0;
        for (const node of this.currentConfig.rootNodes) {
            try {
                const { data } = await this.inventoryService.detail(node.id);
                if (data) {
                    this.nodes.push(this.assetNodeService.createAssetNode({
                        mo: data,
                        hideDevices: node.hideDevices,
                        priority: isUndefined(this.moduleConfig?.rootNodePriority)
                            ? this.DEFAULT_NODE_PRIORITY
                            : this.moduleConfig.rootNodePriority
                    }));
                }
            }
            catch (error) {
                // do nothing
            }
        }
        this.refresh();
    }
    getAppDashboardName() {
        return `${DEFAULT_HOME_DASHBOARD_NAME.substring(0, DEFAULT_HOME_DASHBOARD_NAME.length - 1)}_${this.appState.state.app.id}`;
    }
    async storeApplicationConfig(config) {
        await this.appState.updateCurrentApplicationConfig(config);
    }
    addNodesToFactories() {
        const nodeInFactories = this.navigatorService.factories.find(fatcory => fatcory === this.navigationFactory);
        if (!nodeInFactories) {
            this.navigatorService.factories.push(this.navigationFactory);
        }
    }
    registerFilterForFeatures() {
        this.navigatorService.items$ = this.navigatorService.items$.pipe(map(nodes => this.setHiddenAttrLock(nodes)), map(nodes => this.filterNavigatorNode(nodes)));
        this.tabsService.items$ = this.tabsService.items$.pipe(map(tabs => this.filterTabs(tabs)));
        this.searchService.items$ = this.searchService.items$.pipe(map(search => (this.currentConfig.features.search ? search : [])));
    }
    setHiddenAttrLock(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (!this.permissions.hasRole('ROLE_APPLICATION_MANAGEMENT_ADMIN') &&
                        childNode.lockHiddenAttr === undefined &&
                        childNode.hidden === true) {
                        childNode.lockHiddenAttr = childNode.hidden;
                    }
                }
            });
        });
        return nodes;
    }
    filterTabs(tabs) {
        return tabs.filter(tab => !this.excludedFeatureKeys.some(key => tab.featureId === key));
    }
    filterNavigatorNode(nodes) {
        if (!this.currentConfig) {
            return nodes;
        }
        const disabledFeatures = this.excludedFeatureKeys;
        const filteredNodes = nodes.filter(node => !disabledFeatures.some(key => node.featureId === key));
        this.showAllChildrenNodes(nodes);
        this.hideChildrenNodesThatAreDisabled(nodes, disabledFeatures);
        return filteredNodes;
    }
    hideChildrenNodesThatAreDisabled(nodes, disabledFeatures) {
        nodes.forEach(node => disabledFeatures.forEach(key => {
            const childNode = node.find(key, 'featureId');
            if (childNode) {
                childNode.hidden = true;
            }
        }));
    }
    showAllChildrenNodes(nodes) {
        nodes.forEach(node => {
            Object.keys(this.currentConfig.features).forEach(key => {
                const childNode = node.find(startCase(key).toLowerCase());
                if (childNode) {
                    if (childNode.lockHiddenAttr === true) {
                        return;
                    }
                    childNode.hidden = false;
                }
            });
        });
    }
}
CockpitConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitConfigService, deps: [{ token: i1.NavigatorService }, { token: i1.TabsService }, { token: i1.SearchService }, { token: i2.AssetNodeService }, { token: i3.InventoryService }, { token: i1.AppStateService }, { token: i1.OptionsService }, { token: i1.Permissions }, { token: ASSET_NAVIGATOR_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CockpitConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NavigatorService }, { type: i1.TabsService }, { type: i1.SearchService }, { type: i2.AssetNodeService }, { type: i3.InventoryService }, { type: i1.AppStateService }, { type: i1.OptionsService }, { type: i1.Permissions }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ASSET_NAVIGATOR_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
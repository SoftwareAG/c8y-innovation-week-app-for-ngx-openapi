import { Injectable } from '@angular/core';
import { isUndefined, sortBy } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { ApplicationType, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';
import { HumanizeAppNamePipe } from '@c8y/ngx-components';
import { DefaultSubscriptionsContext as DefaultSubscriptionsContextTenant } from './default-subscriptions.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class DefaultSubscriptionsService {
    constructor(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    async getSubscribableTenantApps() {
        const currentTenant = (await this.tenantService.current()).data;
        const allApps = (await this.applicationService.listByTenant(null, { pageSize: 2000 })).data;
        const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);
        const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);
        const filteredApps = [...ownApps];
        inheritedApps.forEach(inheritedApp => {
            if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {
                filteredApps.push(inheritedApp);
            }
        });
        const filteredAppsWithHumanizedNames = await Promise.all(filteredApps.map(async (app) => {
            const humanizedName = await this.humanizeAppNamePipe
                .transform(app.name)
                .pipe(debounceTime(250), take(1))
                .toPromise();
            return { app, humanizedName };
        }));
        const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
        const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);
        return sortedApps;
    }
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    async getDefaultSubscriptionsEvaluatedFromParentTenant() {
        return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.PARENT_TENANT);
    }
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    async getDefaultSubscriptionsFromCurrentTenant() {
        return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.CURRENT_TENANT);
    }
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    async saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions) {
        await this.saveOnCreationSubscriptions(defaultSubscriptions);
        await this.saveOnUpgradeSubscriptions(defaultSubscriptions);
    }
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    async getDefaultSubscriptions(contextTenant) {
        let tenantOptionsParams;
        let overridable;
        switch (contextTenant) {
            case DefaultSubscriptionsContextTenant.CURRENT_TENANT:
                tenantOptionsParams = { evaluate: 'current' };
                overridable = true;
                break;
            case DefaultSubscriptionsContextTenant.PARENT_TENANT:
                tenantOptionsParams = { evaluate: 'inherited' };
                overridable = false;
                break;
        }
        const { onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices } = await this.getTenantOptions(tenantOptionsParams);
        const onCreationSubscriptions = this.namesToPartialApps({
            appsNamesStr: onCreationApps,
            microservicesNamesStr: onCreationMicroservices
        });
        const onUpgradeAppsDefault = overridable ? null : onCreationApps;
        const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
        const onUpgradeSubscriptions = this.namesToPartialApps({
            appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
            microservicesNamesStr: onUpgradeMicroservicesEnabled
                ? onUpgradeMicroservices
                : onUpgradeMicroservicesDefault
        });
        const defaultSubscriptions = {
            onCreationSubscriptions,
            onUpgradeSubscriptions
        };
        if (overridable) {
            defaultSubscriptions.overrideOnCreationSubscriptions =
                onCreationApps !== null || onCreationMicroservices !== null;
            defaultSubscriptions.overrideOnUpgradeSubscriptions =
                onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
        }
        return defaultSubscriptions;
    }
    async getTenantOptions(params = {}) {
        return {
            onCreationApps: await this.getTenantOption({
                category: 'configuration',
                key: 'default.tenant.applications'
            }, null, params),
            onCreationMicroservices: await this.getTenantOption({
                category: 'configuration',
                key: 'default.tenant.microservices'
            }, null, params),
            onUpgradeAppsEnabled: await this.getTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications.enabled'
            }, false, params),
            onUpgradeApps: await this.getTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications'
            }, null, params),
            onUpgradeMicroservicesEnabled: await this.getTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices.enabled'
            }, false, params),
            onUpgradeMicroservices: await this.getTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices'
            }, null, params)
        };
    }
    async saveOnCreationSubscriptions(defaultSubscriptions) {
        if (defaultSubscriptions.overrideOnCreationSubscriptions) {
            await this.setTenantOption({
                category: 'configuration',
                key: 'default.tenant.applications',
                value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
            });
            await this.setTenantOption({
                category: 'configuration',
                key: 'default.tenant.microservices',
                value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
            });
        }
        else {
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'default.tenant.applications'
            });
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'default.tenant.microservices'
            });
        }
    }
    async saveOnUpgradeSubscriptions(defaultSubscriptions) {
        if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {
            await this.setTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications.enabled',
                value: 'true'
            });
            await this.setTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices.enabled',
                value: 'true'
            });
            await this.setTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications',
                value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
            });
            await this.setTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices',
                value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
            });
        }
        else {
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications.enabled'
            });
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices.enabled'
            });
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.applications'
            });
            await this.unsetTenantOption({
                category: 'configuration',
                key: 'on-update.tenant.microservices'
            });
        }
    }
    async getTenantOption(option, defaultValue = null, params = {}) {
        let value;
        try {
            value = (await this.tenantOptionsService.detail(option, params)).data.value;
            value = JSON.parse(value);
        }
        catch (ex) {
            value = !isUndefined(value) ? value : defaultValue;
        }
        return value;
    }
    async setTenantOption(option) {
        return this.tenantOptionsService.update(option);
    }
    async unsetTenantOption(option) {
        try {
            await this.tenantOptionsService.delete(option);
        }
        catch (ex) {
            if (!ex || !ex.res || ex.res.status !== 404) {
                throw ex;
            }
        }
    }
    namesToPartialApps({ appsNamesStr, microservicesNamesStr }) {
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return [
            ...(appsNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({ name: name.trim() })),
            ...(microservicesNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({
                name: name.trim(),
                type: ApplicationType.MICROSERVICE
            }))
        ];
    }
    partialAppsListToAppsNames(apps) {
        return apps
            .filter(app => app.type !== ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
    partialAppsToMicroservicesNames(apps) {
        return apps
            .filter(app => app.type === ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
}
DefaultSubscriptionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DefaultSubscriptionsService, deps: [{ token: i1.ApplicationService }, { token: i1.TenantService }, { token: i1.TenantOptionsService }, { token: i2.HumanizeAppNamePipe }], target: i0.ɵɵFactoryTarget.Injectable });
DefaultSubscriptionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DefaultSubscriptionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DefaultSubscriptionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }, { type: i1.TenantService }, { type: i1.TenantOptionsService }, { type: i2.HumanizeAppNamePipe }]; } });
//# sourceMappingURL=data:application/json;base64,
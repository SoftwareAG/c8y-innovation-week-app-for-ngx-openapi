import { DeviceRegistrationStatus } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
import { DataBrokerConnectorStatus } from '../model/data-broker.subscription.model';
export class SubscriptionStatusViewModelFactory {
    build(status) {
        let statusViewModel = null;
        switch (status) {
            case DataBrokerConnectorStatus.ACTIVE: // dataBrokerConnectorsSvc.STATUS.ACTIVE.value
                statusViewModel = {
                    icon: 'check-circle',
                    textClass: 'text-success',
                    text: gettext('Active`data broker subscription`')
                };
                break;
            case DataBrokerConnectorStatus.SUSPENDED: // dataBrokerConnectorsSvc.STATUS.SUSPENDED.value
                statusViewModel = {
                    icon: 'exclamation-triangle',
                    textClass: 'text-warning',
                    text: gettext('Inactive`data broker subscription`')
                };
                break;
            case DataBrokerConnectorStatus.WAITING: // dataBrokerConnectorsSvc.STATUS.WAITING.value
                statusViewModel = {
                    icon: 'spinner',
                    iconClass: 'icon-spin',
                    textClass: 'text-warning',
                    text: gettext('Waiting`data broker subscription`')
                };
                break;
            default:
                break;
        }
        return statusViewModel;
    }
}
export class NewDeviceRequestStatusFactory {
    build(status) {
        let result = null;
        switch (status) {
            case DeviceRegistrationStatus.WAITING_FOR_CONNECTION:
                result = {
                    name: DeviceRegistrationStatus.WAITING_FOR_CONNECTION,
                    label: gettext('Waiting for connection`data broker subscription`'),
                    value: DeviceRegistrationStatus.WAITING_FOR_CONNECTION
                };
                break;
            case DeviceRegistrationStatus.PENDING_ACCEPTANCE:
                result = {
                    name: DeviceRegistrationStatus.PENDING_ACCEPTANCE,
                    label: gettext('Pending acceptance`data broker subscription`'),
                    value: DeviceRegistrationStatus.PENDING_ACCEPTANCE
                };
                break;
            case DeviceRegistrationStatus.ACCEPTED:
                result = {
                    name: DeviceRegistrationStatus.ACCEPTED,
                    label: gettext('Accepted`data broker subscription`'),
                    value: DeviceRegistrationStatus.ACCEPTED
                };
            case DeviceRegistrationStatus.BLOCKED:
                result = {
                    name: DeviceRegistrationStatus.BLOCKED,
                    label: gettext('Blocked`data broker subscription`'),
                    value: DeviceRegistrationStatus.BLOCKED
                };
                break;
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1icm9rZXIuc3Vic2NyaXB0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kYXRhLWJyb2tlci9mYWN0b3JpZXMvZGF0YS1icm9rZXIuc3Vic2NyaXB0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBRUwseUJBQXlCLEVBRTFCLE1BQU0seUNBQXlDLENBQUM7QUFFakQsTUFBTSxPQUFPLGtDQUFrQztJQUM3QyxLQUFLLENBQUMsTUFBaUM7UUFDckMsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzNCLFFBQVEsTUFBTSxFQUFFO1lBQ2QsS0FBSyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsOENBQThDO2dCQUNuRixlQUFlLEdBQUc7b0JBQ2hCLElBQUksRUFBRSxjQUFjO29CQUNwQixTQUFTLEVBQUUsY0FBYztvQkFDekIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztpQkFDbEQsQ0FBQztnQkFDRixNQUFNO1lBQ1IsS0FBSyx5QkFBeUIsQ0FBQyxTQUFTLEVBQUUsaURBQWlEO2dCQUN6RixlQUFlLEdBQUc7b0JBQ2hCLElBQUksRUFBRSxzQkFBc0I7b0JBQzVCLFNBQVMsRUFBRSxjQUFjO29CQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO2lCQUNwRCxDQUFDO2dCQUNGLE1BQU07WUFDUixLQUFLLHlCQUF5QixDQUFDLE9BQU8sRUFBRSwrQ0FBK0M7Z0JBQ3JGLGVBQWUsR0FBRztvQkFDaEIsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsU0FBUyxFQUFFLFdBQVc7b0JBQ3RCLFNBQVMsRUFBRSxjQUFjO29CQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLG1DQUFtQyxDQUFDO2lCQUNuRCxDQUFDO2dCQUNGLE1BQU07WUFDUjtnQkFDRSxNQUFNO1NBQ1Q7UUFDRCxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sNkJBQTZCO0lBQ3hDLEtBQUssQ0FBQyxNQUFnQztRQUNwQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsUUFBUSxNQUFNLEVBQUU7WUFDZCxLQUFLLHdCQUF3QixDQUFDLHNCQUFzQjtnQkFDbEQsTUFBTSxHQUFHO29CQUNQLElBQUksRUFBRSx3QkFBd0IsQ0FBQyxzQkFBc0I7b0JBQ3JELEtBQUssRUFBRSxPQUFPLENBQUMsa0RBQWtELENBQUM7b0JBQ2xFLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxzQkFBc0I7aUJBQ3ZELENBQUM7Z0JBQ0YsTUFBTTtZQUNSLEtBQUssd0JBQXdCLENBQUMsa0JBQWtCO2dCQUM5QyxNQUFNLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLHdCQUF3QixDQUFDLGtCQUFrQjtvQkFDakQsS0FBSyxFQUFFLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztvQkFDOUQsS0FBSyxFQUFFLHdCQUF3QixDQUFDLGtCQUFrQjtpQkFDbkQsQ0FBQztnQkFDRixNQUFNO1lBQ1IsS0FBSyx3QkFBd0IsQ0FBQyxRQUFRO2dCQUNwQyxNQUFNLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLHdCQUF3QixDQUFDLFFBQVE7b0JBQ3ZDLEtBQUssRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7b0JBQ3BELEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxRQUFRO2lCQUN6QyxDQUFDO1lBQ0osS0FBSyx3QkFBd0IsQ0FBQyxPQUFPO2dCQUNuQyxNQUFNLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLHdCQUF3QixDQUFDLE9BQU87b0JBQ3RDLEtBQUssRUFBRSxPQUFPLENBQUMsbUNBQW1DLENBQUM7b0JBQ25ELEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxPQUFPO2lCQUN4QyxDQUFDO2dCQUNGLE1BQU07U0FDVDtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIFN1YnNjcmlwdGlvblN0YXR1c1ZpZXdNb2RlbCxcbiAgRGF0YUJyb2tlckNvbm5lY3RvclN0YXR1cyxcbiAgTmV3RGV2aWNlUmVxdWVzdFN0YXR1c1xufSBmcm9tICcuLi9tb2RlbC9kYXRhLWJyb2tlci5zdWJzY3JpcHRpb24ubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uU3RhdHVzVmlld01vZGVsRmFjdG9yeSB7XG4gIGJ1aWxkKHN0YXR1czogRGF0YUJyb2tlckNvbm5lY3RvclN0YXR1cyk6IFN1YnNjcmlwdGlvblN0YXR1c1ZpZXdNb2RlbCB7XG4gICAgbGV0IHN0YXR1c1ZpZXdNb2RlbCA9IG51bGw7XG4gICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgIGNhc2UgRGF0YUJyb2tlckNvbm5lY3RvclN0YXR1cy5BQ1RJVkU6IC8vIGRhdGFCcm9rZXJDb25uZWN0b3JzU3ZjLlNUQVRVUy5BQ1RJVkUudmFsdWVcbiAgICAgICAgc3RhdHVzVmlld01vZGVsID0ge1xuICAgICAgICAgIGljb246ICdjaGVjay1jaXJjbGUnLFxuICAgICAgICAgIHRleHRDbGFzczogJ3RleHQtc3VjY2VzcycsXG4gICAgICAgICAgdGV4dDogZ2V0dGV4dCgnQWN0aXZlYGRhdGEgYnJva2VyIHN1YnNjcmlwdGlvbmAnKVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0YUJyb2tlckNvbm5lY3RvclN0YXR1cy5TVVNQRU5ERUQ6IC8vIGRhdGFCcm9rZXJDb25uZWN0b3JzU3ZjLlNUQVRVUy5TVVNQRU5ERUQudmFsdWVcbiAgICAgICAgc3RhdHVzVmlld01vZGVsID0ge1xuICAgICAgICAgIGljb246ICdleGNsYW1hdGlvbi10cmlhbmdsZScsXG4gICAgICAgICAgdGV4dENsYXNzOiAndGV4dC13YXJuaW5nJyxcbiAgICAgICAgICB0ZXh0OiBnZXR0ZXh0KCdJbmFjdGl2ZWBkYXRhIGJyb2tlciBzdWJzY3JpcHRpb25gJylcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFCcm9rZXJDb25uZWN0b3JTdGF0dXMuV0FJVElORzogLy8gZGF0YUJyb2tlckNvbm5lY3RvcnNTdmMuU1RBVFVTLldBSVRJTkcudmFsdWVcbiAgICAgICAgc3RhdHVzVmlld01vZGVsID0ge1xuICAgICAgICAgIGljb246ICdzcGlubmVyJyxcbiAgICAgICAgICBpY29uQ2xhc3M6ICdpY29uLXNwaW4nLFxuICAgICAgICAgIHRleHRDbGFzczogJ3RleHQtd2FybmluZycsXG4gICAgICAgICAgdGV4dDogZ2V0dGV4dCgnV2FpdGluZ2BkYXRhIGJyb2tlciBzdWJzY3JpcHRpb25gJylcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN0YXR1c1ZpZXdNb2RlbDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmV3RGV2aWNlUmVxdWVzdFN0YXR1c0ZhY3Rvcnkge1xuICBidWlsZChzdGF0dXM6IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cyk6IE5ld0RldmljZVJlcXVlc3RTdGF0dXMge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICBjYXNlIERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5XQUlUSU5HX0ZPUl9DT05ORUNUSU9OOlxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgbmFtZTogRGV2aWNlUmVnaXN0cmF0aW9uU3RhdHVzLldBSVRJTkdfRk9SX0NPTk5FQ1RJT04sXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1dhaXRpbmcgZm9yIGNvbm5lY3Rpb25gZGF0YSBicm9rZXIgc3Vic2NyaXB0aW9uYCcpLFxuICAgICAgICAgIHZhbHVlOiBEZXZpY2VSZWdpc3RyYXRpb25TdGF0dXMuV0FJVElOR19GT1JfQ09OTkVDVElPTlxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGV2aWNlUmVnaXN0cmF0aW9uU3RhdHVzLlBFTkRJTkdfQUNDRVBUQU5DRTpcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIG5hbWU6IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5QRU5ESU5HX0FDQ0VQVEFOQ0UsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1BlbmRpbmcgYWNjZXB0YW5jZWBkYXRhIGJyb2tlciBzdWJzY3JpcHRpb25gJyksXG4gICAgICAgICAgdmFsdWU6IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5QRU5ESU5HX0FDQ0VQVEFOQ0VcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5BQ0NFUFRFRDpcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIG5hbWU6IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5BQ0NFUFRFRCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQWNjZXB0ZWRgZGF0YSBicm9rZXIgc3Vic2NyaXB0aW9uYCcpLFxuICAgICAgICAgIHZhbHVlOiBEZXZpY2VSZWdpc3RyYXRpb25TdGF0dXMuQUNDRVBURURcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgRGV2aWNlUmVnaXN0cmF0aW9uU3RhdHVzLkJMT0NLRUQ6XG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICBuYW1lOiBEZXZpY2VSZWdpc3RyYXRpb25TdGF0dXMuQkxPQ0tFRCxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQmxvY2tlZGBkYXRhIGJyb2tlciBzdWJzY3JpcHRpb25gJyksXG4gICAgICAgICAgdmFsdWU6IERldmljZVJlZ2lzdHJhdGlvblN0YXR1cy5CTE9DS0VEXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=
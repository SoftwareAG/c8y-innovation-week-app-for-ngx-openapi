import { Injectable } from '@angular/core';
import { ApplicationAvailability, ApplicationService } from '@c8y/client';
import { AlertService, AppStateService, GainsightService, ModalService, gettext } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE } from '@c8y/ngx-components/ecosystem/shared';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/client";
export class PackageAvailabilityService {
    constructor(appState, alert, modal, application, gainsightService) {
        this.appState = appState;
        this.alert = alert;
        this.modal = modal;
        this.application = application;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
    }
    async askIfAvailabilityShouldBeSetTo(applicationPackage, availability) {
        // availability does not matter for tenant that do not have or can create subtenants
        if (!this.appState.currentTenant.value?.allowCreateTenants) {
            return applicationPackage;
        }
        try {
            await this.openAvailabilityModal(availability);
        }
        catch {
            // modal closed
            return applicationPackage;
        }
        try {
            const { data: app } = await this.application.updateApplicationAvailability(applicationPackage, availability);
            this.alert.success(gettext('Updated package availability.'));
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.AVAILABILITY, {
                action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.AVAILABILITY_CHANGE,
                result: availability.toString().toLocaleLowerCase(),
                url: this.CURRENT_LOCATION
            });
            return app;
        }
        catch (e) {
            this.alert.warning(gettext('Failed to set package availability.'));
            this.alert.addServerFailure(e);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.AVAILABILITY, {
                action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.AVAILABILITY_CHANGE,
                result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                url: this.CURRENT_LOCATION
            });
            return applicationPackage;
        }
    }
    async openAvailabilityModal(availability) {
        const body = this.getConfirmationBody(availability);
        await this.modal.confirm(gettext('Package availability'), body, 'info', {
            ok: gettext('Yes'),
            cancel: gettext('No')
        });
    }
    getConfirmationBody(availability) {
        switch (availability) {
            case ApplicationAvailability.SHARED:
                return gettext('Do you want to set the package availability to "Shared"? This will make the package available to all subtenants without explicitly subscribing the package.');
            case ApplicationAvailability.MARKET:
                return gettext('Do you want to set the package availability to "Market"? This will make the package available to your own tenant and needs to be subscribed to subtenants individually.');
            case ApplicationAvailability.PRIVATE:
                return gettext('Do you want to set the package availability to "Private"? This will make the package only available to your own tenant.');
            default:
                return '';
        }
    }
}
PackageAvailabilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PackageAvailabilityService, deps: [{ token: i1.AppStateService }, { token: i1.AlertService }, { token: i1.ModalService }, { token: i2.ApplicationService }, { token: i1.GainsightService }], target: i0.ɵɵFactoryTarget.Injectable });
PackageAvailabilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PackageAvailabilityService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PackageAvailabilityService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.AppStateService }, { type: i1.AlertService }, { type: i1.ModalService }, { type: i2.ApplicationService }, { type: i1.GainsightService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS1hdmFpbGFiaWxpdHkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Vjb3N5c3RlbS9wYWNrYWdlcy9wYWNrYWdlLWF2YWlsYWJpbGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGtCQUFrQixFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUN4RixPQUFPLEVBQ0wsWUFBWSxFQUNaLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLE9BQU8sRUFDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7O0FBRzFFLE1BQU0sT0FBTywwQkFBMEI7SUFHckMsWUFDVSxRQUF5QixFQUN6QixLQUFtQixFQUNuQixLQUFtQixFQUNuQixXQUErQixFQUMvQixnQkFBa0M7UUFKbEMsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUMvQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBUDVDLHFCQUFnQixHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFROUIsQ0FBQztJQUVKLEtBQUssQ0FBQyw4QkFBOEIsQ0FDbEMsa0JBQWdDLEVBQ2hDLFlBQXFDO1FBRXJDLG9GQUFvRjtRQUNwRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO1lBQzFELE9BQU8sa0JBQWtCLENBQUM7U0FDM0I7UUFDRCxJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEQ7UUFBQyxNQUFNO1lBQ04sZUFBZTtZQUNmLE9BQU8sa0JBQWtCLENBQUM7U0FDM0I7UUFFRCxJQUFJO1lBQ0YsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsNkJBQTZCLENBQ3hFLGtCQUFrQixFQUNsQixZQUFZLENBQ2IsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDdEYsTUFBTSxFQUFFLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsbUJBQW1CO2dCQUNuRSxNQUFNLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLGlCQUFpQixFQUFFO2dCQUNuRCxHQUFHLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjthQUMzQixDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMscUNBQXFDLENBQUMsQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDdEYsTUFBTSxFQUFFLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsbUJBQW1CO2dCQUNuRSxNQUFNLEVBQUUsa0JBQWtCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjO2dCQUM5RCxHQUFHLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjthQUMzQixDQUFDLENBQUM7WUFDSCxPQUFPLGtCQUFrQixDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxZQUFxQztRQUN2RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFcEQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO1lBQ3RFLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxZQUFxQztRQUMvRCxRQUFRLFlBQVksRUFBRTtZQUNwQixLQUFLLHVCQUF1QixDQUFDLE1BQU07Z0JBQ2pDLE9BQU8sT0FBTyxDQUNaLDZKQUE2SixDQUM5SixDQUFDO1lBQ0osS0FBSyx1QkFBdUIsQ0FBQyxNQUFNO2dCQUNqQyxPQUFPLE9BQU8sQ0FDWix5S0FBeUssQ0FDMUssQ0FBQztZQUNKLEtBQUssdUJBQXVCLENBQUMsT0FBTztnQkFDbEMsT0FBTyxPQUFPLENBQ1oseUhBQXlILENBQzFILENBQUM7WUFDSjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7dUhBNUVVLDBCQUEwQjsySEFBMUIsMEJBQTBCLGNBRGIsTUFBTTsyRkFDbkIsMEJBQTBCO2tCQUR0QyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uQXZhaWxhYmlsaXR5LCBBcHBsaWNhdGlvblNlcnZpY2UsIElBcHBsaWNhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7XG4gIEFsZXJ0U2VydmljZSxcbiAgQXBwU3RhdGVTZXJ2aWNlLFxuICBHYWluc2lnaHRTZXJ2aWNlLFxuICBNb2RhbFNlcnZpY2UsXG4gIGdldHRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBQUk9EVUNUX0VYUEVSSUVOQ0UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2Vjb3N5c3RlbS9zaGFyZWQnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFBhY2thZ2VBdmFpbGFiaWxpdHlTZXJ2aWNlIHtcbiAgQ1VSUkVOVF9MT0NBVElPTiA9IGxvY2F0aW9uLmhyZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsOiBNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcHBsaWNhdGlvbjogQXBwbGljYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgZ2FpbnNpZ2h0U2VydmljZTogR2FpbnNpZ2h0U2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgYXNrSWZBdmFpbGFiaWxpdHlTaG91bGRCZVNldFRvKFxuICAgIGFwcGxpY2F0aW9uUGFja2FnZTogSUFwcGxpY2F0aW9uLFxuICAgIGF2YWlsYWJpbGl0eTogQXBwbGljYXRpb25BdmFpbGFiaWxpdHlcbiAgKSB7XG4gICAgLy8gYXZhaWxhYmlsaXR5IGRvZXMgbm90IG1hdHRlciBmb3IgdGVuYW50IHRoYXQgZG8gbm90IGhhdmUgb3IgY2FuIGNyZWF0ZSBzdWJ0ZW5hbnRzXG4gICAgaWYgKCF0aGlzLmFwcFN0YXRlLmN1cnJlbnRUZW5hbnQudmFsdWU/LmFsbG93Q3JlYXRlVGVuYW50cykge1xuICAgICAgcmV0dXJuIGFwcGxpY2F0aW9uUGFja2FnZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMub3BlbkF2YWlsYWJpbGl0eU1vZGFsKGF2YWlsYWJpbGl0eSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBtb2RhbCBjbG9zZWRcbiAgICAgIHJldHVybiBhcHBsaWNhdGlvblBhY2thZ2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogYXBwIH0gPSBhd2FpdCB0aGlzLmFwcGxpY2F0aW9uLnVwZGF0ZUFwcGxpY2F0aW9uQXZhaWxhYmlsaXR5KFxuICAgICAgICBhcHBsaWNhdGlvblBhY2thZ2UsXG4gICAgICAgIGF2YWlsYWJpbGl0eVxuICAgICAgKTtcbiAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhnZXR0ZXh0KCdVcGRhdGVkIHBhY2thZ2UgYXZhaWxhYmlsaXR5LicpKTtcbiAgICAgIHRoaXMuZ2FpbnNpZ2h0U2VydmljZS50cmlnZ2VyRXZlbnQoUFJPRFVDVF9FWFBFUklFTkNFLkFQUExJQ0FUSU9OUy5FVkVOVFMuQVZBSUxBQklMSVRZLCB7XG4gICAgICAgIGFjdGlvbjogUFJPRFVDVF9FWFBFUklFTkNFLkFQUExJQ0FUSU9OUy5BQ1RJT05TLkFWQUlMQUJJTElUWV9DSEFOR0UsXG4gICAgICAgIHJlc3VsdDogYXZhaWxhYmlsaXR5LnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKSxcbiAgICAgICAgdXJsOiB0aGlzLkNVUlJFTlRfTE9DQVRJT05cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFwcDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmFsZXJ0Lndhcm5pbmcoZ2V0dGV4dCgnRmFpbGVkIHRvIHNldCBwYWNrYWdlIGF2YWlsYWJpbGl0eS4nKSk7XG4gICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuRVZFTlRTLkFWQUlMQUJJTElUWSwge1xuICAgICAgICBhY3Rpb246IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuQUNUSU9OUy5BVkFJTEFCSUxJVFlfQ0hBTkdFLFxuICAgICAgICByZXN1bHQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuUkVTVUxUUy5TRVJWRVJfRkFJTFVSRSxcbiAgICAgICAgdXJsOiB0aGlzLkNVUlJFTlRfTE9DQVRJT05cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFwcGxpY2F0aW9uUGFja2FnZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG9wZW5BdmFpbGFiaWxpdHlNb2RhbChhdmFpbGFiaWxpdHk6IEFwcGxpY2F0aW9uQXZhaWxhYmlsaXR5KSB7XG4gICAgY29uc3QgYm9keSA9IHRoaXMuZ2V0Q29uZmlybWF0aW9uQm9keShhdmFpbGFiaWxpdHkpO1xuXG4gICAgYXdhaXQgdGhpcy5tb2RhbC5jb25maXJtKGdldHRleHQoJ1BhY2thZ2UgYXZhaWxhYmlsaXR5JyksIGJvZHksICdpbmZvJywge1xuICAgICAgb2s6IGdldHRleHQoJ1llcycpLFxuICAgICAgY2FuY2VsOiBnZXR0ZXh0KCdObycpXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbmZpcm1hdGlvbkJvZHkoYXZhaWxhYmlsaXR5OiBBcHBsaWNhdGlvbkF2YWlsYWJpbGl0eSk6IHN0cmluZyB7XG4gICAgc3dpdGNoIChhdmFpbGFiaWxpdHkpIHtcbiAgICAgIGNhc2UgQXBwbGljYXRpb25BdmFpbGFiaWxpdHkuU0hBUkVEOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dChcbiAgICAgICAgICAnRG8geW91IHdhbnQgdG8gc2V0IHRoZSBwYWNrYWdlIGF2YWlsYWJpbGl0eSB0byBcIlNoYXJlZFwiPyBUaGlzIHdpbGwgbWFrZSB0aGUgcGFja2FnZSBhdmFpbGFibGUgdG8gYWxsIHN1YnRlbmFudHMgd2l0aG91dCBleHBsaWNpdGx5IHN1YnNjcmliaW5nIHRoZSBwYWNrYWdlLidcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgQXBwbGljYXRpb25BdmFpbGFiaWxpdHkuTUFSS0VUOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dChcbiAgICAgICAgICAnRG8geW91IHdhbnQgdG8gc2V0IHRoZSBwYWNrYWdlIGF2YWlsYWJpbGl0eSB0byBcIk1hcmtldFwiPyBUaGlzIHdpbGwgbWFrZSB0aGUgcGFja2FnZSBhdmFpbGFibGUgdG8geW91ciBvd24gdGVuYW50IGFuZCBuZWVkcyB0byBiZSBzdWJzY3JpYmVkIHRvIHN1YnRlbmFudHMgaW5kaXZpZHVhbGx5LidcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgQXBwbGljYXRpb25BdmFpbGFiaWxpdHkuUFJJVkFURTpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoXG4gICAgICAgICAgJ0RvIHlvdSB3YW50IHRvIHNldCB0aGUgcGFja2FnZSBhdmFpbGFiaWxpdHkgdG8gXCJQcml2YXRlXCI/IFRoaXMgd2lsbCBtYWtlIHRoZSBwYWNrYWdlIG9ubHkgYXZhaWxhYmxlIHRvIHlvdXIgb3duIHRlbmFudC4nXG4gICAgICAgICk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iXX0=
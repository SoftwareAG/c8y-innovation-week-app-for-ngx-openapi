import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { C8yStepper, GainsightService } from '@c8y/ngx-components';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilKeyChanged, map, tap } from 'rxjs/operators';
import { APP_STATE } from '../../ecosystem.constants';
import { EcosystemService } from '../../ecosystem.service';
import { ApplicationPropertiesFormComponent } from '../../../shared/application-properties-form.component';
import { PRODUCT_EXPERIENCE } from '../../ecosystem.model';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "../../ecosystem.service";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "../../application-properties-form.component";
export class DuplicateApplicationPropertiesComponent {
    constructor(bsModalRef, ecosystemService, applicationService, gainsightService) {
        this.bsModalRef = bsModalRef;
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.isFirstStep = false;
        this.duplicatedApp = new EventEmitter();
        this.disableForm = false;
        this.inProgress = false;
    }
    ngOnInit() {
        this.isSubscribedApp$ = this.selectedApp.pipe(distinctUntilKeyChanged('id'), map(app => (app ? this.ecosystemService.getAppState(app) === APP_STATE.SUBSCRIBED : true)), tap(isSubscribed => {
            this.disableForm = isSubscribed;
            this.getAppConfig();
        }));
        this.getAppConfig();
    }
    async duplicateApp() {
        const formGroupValue = this.applicationPropertiesForm.formGroup.getRawValue();
        this.inProgress = true;
        let { data: clonedApp } = await this.applicationService.clone(this.selectedApp.value);
        // TODO: remove once MTM-48474 has been merged
        clonedApp = this.ecosystemService.setAvailabilityToPrivateIfNotSetAlready(clonedApp);
        Object.assign(clonedApp, formGroupValue);
        delete clonedApp.type;
        await this.updateApp(clonedApp);
        this.inProgress = false;
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.DUPLICATE_APPLICATION, {
            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.DUPLICATE_APPLICATION_PROPERTIES,
            result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.DUPLICATED,
            url: this.CURRENT_LOCATION
        });
    }
    cancel() {
        this.bsModalRef.hide();
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.DUPLICATE_APPLICATION, {
            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.DUPLICATE_APPLICATION_PROPERTIES,
            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.CANCEL,
            url: this.CURRENT_LOCATION
        });
    }
    back() {
        this.stepper.previous();
    }
    getAppConfig() {
        if (this.disableForm) {
            const { name, key, contextPath } = this.selectedApp.value;
            this.newAppConfig = { name, key, contextPath };
        }
        else {
            this.newAppConfig = this.ecosystemService.getUniqueAppConfig(this.selectedApp.value, this.existingApps);
        }
    }
    async updateApp(clonedAppConfig) {
        try {
            const { data: app } = await this.ecosystemService.updateApp(clonedAppConfig, true);
            const manifest = await this.getAppManifest(app);
            if (manifest) {
                await this.updateManifest(app, manifest);
            }
            this.duplicatedApp.emit(app);
            this.stepper.next();
        }
        catch (err) {
            this.inProgress = false;
        }
    }
    async updateManifest(app, manifest) {
        const keysToUpdate = ['name', 'key', 'contextPath'];
        const someKeyDiffers = keysToUpdate.some(key => app[key] !== manifest[key]);
        if (someKeyDiffers) {
            keysToUpdate.forEach(key => {
                manifest[key] = app[key];
            });
            await this.applicationService.storeAppManifest(app, manifest);
        }
    }
    async getAppManifest(app) {
        if (!app?.contextPath) {
            return;
        }
        try {
            const manifest = await this.applicationService.getAppManifest(app);
            return manifest;
        }
        catch (ex) {
            return;
        }
    }
}
DuplicateApplicationPropertiesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DuplicateApplicationPropertiesComponent, deps: [{ token: i1.BsModalRef }, { token: i2.EcosystemService }, { token: i3.ApplicationService }, { token: i4.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
DuplicateApplicationPropertiesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DuplicateApplicationPropertiesComponent, selector: "c8y-duplicate-application-properties", inputs: { stepper: "stepper", existingApps: "existingApps", selectedApp: "selectedApp", isFirstStep: "isFirstStep" }, outputs: { duplicatedApp: "duplicatedApp" }, viewQueries: [{ propertyName: "applicationPropertiesForm", first: true, predicate: ApplicationPropertiesFormComponent, descendants: true }], ngImport: i0, template: "<p\n  class=\"p-16 text-center text-medium separator-bottom sticky-top bg-level-0 fit-w\"\n  *ngIf=\"!inProgress\"\n>\n  {{ 'Provide application details' | translate }}\n</p>\n\n<ng-container *ngIf=\"!inProgress\">\n  <label class=\"c8y-switch\" *ngIf=\"isSubscribedApp$ | async\">\n    <input type=\"checkbox\" [(ngModel)]=\"disableForm\" (change)=\"getAppConfig()\" />\n    <span></span> {{ 'Overrule subscribed application' | translate }}\n  </label>\n\n  <c8y-application-properties-form\n    [application]=\"newAppConfig\"\n    class=\"d-block fit-w\"\n    [disabled]=\"disableForm\"\n  ></c8y-application-properties-form>\n</ng-container>\n<c8y-progress-bar\n  *ngIf=\"inProgress\"\n  [message]=\"'Duplicating\u2026' | translate\"\n  class=\"text-center d-block\"\n></c8y-progress-bar>\n\n<c8y-wizard-footer>\n  <button\n    *ngIf=\"!isFirstStep\"\n    (click)=\"back()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Back' | translate }}\"\n  >\n    {{ 'Back' | translate }}\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    (click)=\"duplicateApp()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Duplicate' | translate }}\"\n  >\n    {{ 'Duplicate' | translate }}\n  </button>\n</c8y-wizard-footer>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.ProgressBarComponent, selector: "c8y-progress-bar", inputs: ["message", "progress"] }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.WizardFooterComponent, selector: "c8y-wizard-footer" }, { kind: "component", type: i7.ApplicationPropertiesFormComponent, selector: "c8y-application-properties-form", inputs: ["application", "disabled"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DuplicateApplicationPropertiesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-duplicate-application-properties', template: "<p\n  class=\"p-16 text-center text-medium separator-bottom sticky-top bg-level-0 fit-w\"\n  *ngIf=\"!inProgress\"\n>\n  {{ 'Provide application details' | translate }}\n</p>\n\n<ng-container *ngIf=\"!inProgress\">\n  <label class=\"c8y-switch\" *ngIf=\"isSubscribedApp$ | async\">\n    <input type=\"checkbox\" [(ngModel)]=\"disableForm\" (change)=\"getAppConfig()\" />\n    <span></span> {{ 'Overrule subscribed application' | translate }}\n  </label>\n\n  <c8y-application-properties-form\n    [application]=\"newAppConfig\"\n    class=\"d-block fit-w\"\n    [disabled]=\"disableForm\"\n  ></c8y-application-properties-form>\n</ng-container>\n<c8y-progress-bar\n  *ngIf=\"inProgress\"\n  [message]=\"'Duplicating\u2026' | translate\"\n  class=\"text-center d-block\"\n></c8y-progress-bar>\n\n<c8y-wizard-footer>\n  <button\n    *ngIf=\"!isFirstStep\"\n    (click)=\"back()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Back' | translate }}\"\n  >\n    {{ 'Back' | translate }}\n  </button>\n  <button (click)=\"cancel()\" class=\"btn btn-default\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    (click)=\"duplicateApp()\"\n    [disabled]=\"inProgress\"\n    class=\"btn btn-primary\"\n    type=\"button\"\n    title=\"{{ 'Duplicate' | translate }}\"\n  >\n    {{ 'Duplicate' | translate }}\n  </button>\n</c8y-wizard-footer>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BsModalRef }, { type: i2.EcosystemService }, { type: i3.ApplicationService }, { type: i4.GainsightService }]; }, propDecorators: { stepper: [{
                type: Input
            }], existingApps: [{
                type: Input
            }], selectedApp: [{
                type: Input
            }], isFirstStep: [{
                type: Input
            }], duplicatedApp: [{
                type: Output
            }], applicationPropertiesForm: [{
                type: ViewChild,
                args: [ApplicationPropertiesFormComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,
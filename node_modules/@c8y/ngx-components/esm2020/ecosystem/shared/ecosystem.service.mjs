import { EventEmitter, Injectable } from '@angular/core';
import { ApplicationAvailability, ApplicationService, ApplicationType, InventoryService, TenantService } from '@c8y/client';
import { AlertService, AppStateService, gettext, HumanizeAppNamePipe, ModalService, PackageType, Status, WizardModalService, ZipService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { saveAs } from 'file-saver';
import { cloneDeep, get, groupBy, kebabCase, pick, uniqBy } from 'lodash-es';
import { BehaviorSubject, defer } from 'rxjs';
import { debounceTime, take, map, filter, shareReplay } from 'rxjs/operators';
import { gt, coerce, satisfies } from 'semver';
import { EcosystemError } from './ecosystem-error';
import { APP_STATE, ERROR_MESSAGES } from './ecosystem.constants';
import { EcosystemWizards, ERROR_TYPE } from './ecosystem.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/client";
const CUMULOCITY_JSON = 'cumulocity.json';
const MICROSERVICE_NAME_MAX_LENGTH = 23;
export class EcosystemService {
    constructor(modal, alertService, humanizeAppName, translateService, applicationService, appStateService, zipService, tenantService, inventoryService, wizardModalService) {
        this.modal = modal;
        this.alertService = alertService;
        this.humanizeAppName = humanizeAppName;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.appStateService = appStateService;
        this.zipService = zipService;
        this.tenantService = tenantService;
        this.inventoryService = inventoryService;
        this.wizardModalService = wizardModalService;
        this.appDeleted = new EventEmitter();
        this.progress = new BehaviorSubject(null);
        this.appsGroupedByContextPath$ = defer(() => this.getWebApplications()).pipe(map(webApps => groupBy(webApps, 'contextPath')), shareReplay({ bufferSize: 1, refCount: true }));
    }
    getUniqueAppConfig(srcApp, existingApps) {
        let app = {
            name: srcApp.name,
            key: srcApp.key,
            contextPath: srcApp.contextPath
        };
        for (let retryNo = 0; retryNo < 9;) {
            if (this.checkIfAppNameKeyPathExists(existingApps, app, retryNo)) {
                retryNo++;
                app = {
                    name: [srcApp.name, retryNo].join('-'),
                    key: [srcApp.key, retryNo].join('-'),
                    contextPath: [srcApp.contextPath, retryNo].join('-')
                };
            }
            else {
                return app;
            }
        }
        return app;
    }
    /**
     * Verify versions compatibility for blueprints. If a blueprint version
     * is not compatible, a warning is shown.
     *
     * @param blueprint The blueprint to install.
     * @returns true if the installation can continue or false if it should be aborted.
     */
    async verifyBlueprintVersionsCompatibility(blueprint) {
        const api = await this.getPlatformVersion();
        if (blueprint.versioningMatrix) {
            try {
                const pluginApiVersion = blueprint.versioningMatrix[blueprint.version].api;
                if (!satisfies(api, pluginApiVersion)) {
                    return await this.showModal(blueprint, false);
                }
            }
            catch {
                return await this.showModal(blueprint, false);
            }
        }
        return true;
    }
    /**
     * Verify versions compatibility for plugins. In case a version does not exist in the
     * versioningMatrix we don't do anything due to backward compatibility. If a plugin version
     * is not compatible, a warning is shown.
     *
     * @param pluginsToInstall The list of plugins to install.
     * @returns true if the installation can continue or false if it should be aborted.
     */
    async verifyPluginVersionsCompatibility(pluginsToInstall, app) {
        const api = await this.getPlatformVersion();
        const sdk = app.manifest?.webSDKversion;
        for (const plugin of pluginsToInstall) {
            if (plugin.versioningMatrix) {
                try {
                    const pluginSdkVersion = plugin.versioningMatrix[plugin.version].sdk;
                    const pluginApiVersion = plugin.versioningMatrix[plugin.version].api;
                    if (!satisfies(sdk, pluginSdkVersion) || !satisfies(api, pluginApiVersion)) {
                        return await this.showModal(plugin, true);
                    }
                }
                catch {
                    return await this.showModal(plugin, false);
                }
            }
        }
        return true;
    }
    /**
     * Community plugins need to verify the license agreement. If a package is a community
     * package, the license is shown.
     *
     * @param pluginsToInstall The list of plugins to install.
     * @returns true if the installation can continue.
     */
    async verifyLicenses(pluginsToInstall) {
        let _resolve;
        const result = new Promise(resolve => {
            _resolve = resolve;
        });
        pluginsToInstall = pluginsToInstall.filter(plugin => plugin.type !== PackageType.CUSTOM);
        if (pluginsToInstall.length === 0) {
            return Promise.resolve(true);
        }
        const initialState = {
            id: EcosystemWizards.LICENSE_CONFIRM,
            componentInitialState: {
                pluginsToInstall
            }
        };
        const modalOptions = { initialState };
        const wizard = this.wizardModalService.show(modalOptions);
        wizard.content.onClose.subscribe(confirmed => {
            _resolve(confirmed);
        });
        return result;
    }
    /**
     * @description
     * Compares currently deployed application version with application version tagged as "latest"
     *
     * @param {string} currentApplicationVersion Deployed application version
     * @param {object} latestApp Latest application version object
     *
     * @returns {boolean} Returns true if latest version is greater than current, otherwise false
     */
    shouldUpgradePackage(currentApplicationVersion, latestApp) {
        const latestApplicationVersion = latestApp?.version;
        if (!latestApplicationVersion || !currentApplicationVersion) {
            return false;
        }
        return gt(coerce(latestApplicationVersion), coerce(currentApplicationVersion));
    }
    /**
     * @description
     * Gets an object that contains searched tag
     *
     * @param {array} applicationVersions Array with all available versions
     * @param {string} tagName Searched tag
     *
     * @returns {object} Returns an object with searched tag
     */
    getApplicationVersionObjectByTag(applicationVersions, tagName) {
        return applicationVersions?.find(element => element.tags.includes(tagName));
    }
    async getApplication(appId) {
        return (await this.applicationService.detail(appId)).data;
    }
    getApplications(customFilter = {}) {
        const filter = {
            pageSize: 2000,
            withTotalPages: true
        };
        Object.assign(filter, customFilter);
        const currentTenant = this.appStateService.currentTenant.value;
        return this.applicationService.listByTenant(currentTenant.name, filter);
    }
    async getMicroservices() {
        const apps = (await this.getApplications()).data;
        const microservices = apps.filter(app => this.isMicroservice(app));
        return microservices.sort((a, b) => a.name.localeCompare(b.name));
    }
    async getWebApplications(customFilter = {}) {
        const apps = (await this.getApplications(customFilter)).data;
        const webApps = apps.filter(app => this.isApplication(app));
        return webApps.sort((a, b) => a.name.localeCompare(b.name));
    }
    async getFeatureApplications(customFilter = {}) {
        const apps = (await this.getApplications(customFilter)).data;
        const webApps = apps.filter(app => this.isFeature(app));
        return webApps.sort((a, b) => a.name.localeCompare(b.name));
    }
    async getPackageApplications(customFilter = {}) {
        const filter = Object.assign({}, customFilter);
        const sharedFilter = Object.assign({
            availability: ApplicationAvailability.SHARED,
            type: 'HOSTED',
            pageSize: 2000
        }, customFilter);
        const [{ data: apps }, { data: shared }] = await Promise.all([
            this.getApplications(filter),
            this.applicationService.list(sharedFilter)
        ]);
        const webApps = [...apps, ...shared].filter(app => this.isPackage(app));
        // an app could be subscribed to a tenant, but also have it's availability set to SHARED, in that case it would occur twice.
        const uniqWebApps = uniqBy(webApps, (app) => app.id);
        return uniqWebApps.sort((a, b) => a.name.localeCompare(b.name));
    }
    async isMicroserviceHostingAllowed() {
        const { data: apps } = await this.applicationService.listByName('feature-microservice-hosting');
        return !!apps.filter(app => app.owner?.tenant?.id === 'management').length;
    }
    canOpenAppInBrowser(app) {
        const isNotAFeature = !this.isFeature(app);
        const hasProperType = [ApplicationType.HOSTED, ApplicationType.EXTERNAL].includes(app.type);
        const isNotPackage = !this.isPackage(app);
        return isNotAFeature && hasProperType && isNotPackage;
    }
    openApp(app) {
        window.open(this.applicationService.getHref(app), '_blank', 'noopener,noreferrer');
    }
    async canDeleteApp(app) {
        return (this.isOwner(app) && (!this.isCurrentApp(app) || (await this.hasSubscribedAppParent(app))));
    }
    isOwner(app) {
        const currentTenant = this.appStateService.currentTenant.value;
        const appOwner = get(app, 'owner.tenant.id');
        return currentTenant.name === appOwner;
    }
    isFeature(app) {
        return !!app.name.match(/feature-/);
    }
    isMicroservice(app) {
        return app.type === 'MICROSERVICE';
    }
    isExternal(app) {
        return app.type === 'EXTERNAL';
    }
    isPackage(app) {
        return app.manifest?.isPackage === true;
    }
    isPlugin(app) {
        return app.manifest?.package === 'plugin';
    }
    cancelAppCreation(app) {
        if (this.xhr) {
            this.xhr.abort();
        }
        if (app) {
            this.applicationService.delete(app);
        }
    }
    updateUploadProgress(event) {
        if (event.lengthComputable) {
            const currentProgress = this.progress.value;
            this.progress.next(currentProgress + (event.loaded / event.total) * (95 - currentProgress));
        }
    }
    setAppActiveVersion(app, activeVersionId) {
        return this.applicationService.update({ id: app.id, activeVersionId });
    }
    setPackageVersionTag(app, version, tags) {
        return this.applicationService.setPackageVersionTag(app, version, tags);
    }
    deletePackageVersion(app, params) {
        return this.applicationService.deleteVersionPackage(app, params);
    }
    getHumanizedAppName(app) {
        return this.humanizeAppName.transform(app.name).pipe(debounceTime(250), take(1)).toPromise();
    }
    createConfig(app, formGroupValue) {
        const { id, type, availability } = app;
        let config = pick(formGroupValue, ['name', 'key', 'contextPath']);
        config = {
            ...config,
            isSetup: true,
            id,
            type,
            availability
        };
        return config;
    }
    async updateAppManifest(application, sourcePackage) {
        const { id } = application;
        const cleanedApp = this.removeAppProperties(application);
        if (!cleanedApp.manifest) {
            cleanedApp.manifest = {};
        }
        cleanedApp.manifest.isPackage = false;
        cleanedApp.manifest.source = sourcePackage.id;
        return await this.applicationService
            .binary(id)
            .updateFiles([{ path: CUMULOCITY_JSON, contents: JSON.stringify(cleanedApp) }]);
    }
    async listArchives(appId) {
        const filter = {
            pageSize: 100
        };
        return (await this.applicationService.binary(appId).list(filter)).data;
    }
    async deleteArchive(archive, app) {
        const humanizedArchiveName = await this.getHumanizedAppName(archive);
        try {
            await this.modal.confirm(gettext('Delete archive'), this.translateService.instant(gettext(`You are about to delete archive "{{ humanizedArchiveName }}". Do you want to proceed?`), { humanizedArchiveName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
            await this.applicationService.binary(app).delete(archive.id);
            this.alertService.success(gettext('Archive deleted.'));
        }
        catch (ex) {
            if (ex) {
                this.alertService.danger(get(ex, 'data.message'), ex.data);
            }
            throw new Error('Cancelled');
        }
    }
    async getArchiveManagedObject(binaryId) {
        return (await this.inventoryService.detail(binaryId)).data;
    }
    async downloadArchive(app, archive) {
        try {
            const binary = await this.getBinary(app, archive);
            const fileBinary = new Blob([binary], { type: 'application/x-zip-compressed' });
            saveAs(fileBinary, archive.name);
        }
        catch (e) {
            // empty
        }
    }
    async updateApp(app, deleteOnFailure = false) {
        try {
            return await this.applicationService.update(app);
        }
        catch (ex) {
            this.alertError(ex);
            if (deleteOnFailure) {
                await this.applicationService.delete(app.id);
                throw new EcosystemError(ERROR_TYPE.APPLICATION_CREATION_FAILED);
            }
        }
    }
    async deleteApp(app, silent = false) {
        const humanizedAppName = await this.getHumanizedAppName(app);
        if (!silent) {
            await this.modal.confirm(gettext('Delete application'), this.translateService.instant(gettext(`You are about to delete application "{{ humanizedAppName }}". Do you want to proceed?`), { humanizedAppName }), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
        }
        await this.applicationService.delete(app.id);
        if (!silent) {
            this.alertService.success(gettext('Application deleted.'));
        }
        this.appDeleted.emit(app);
    }
    async checkIfSubscribed(app) {
        const currentTenant = await this.tenantService.current();
        const subscribedApps = currentTenant.data.applications.references;
        return subscribedApps.some(application => application.application.id === app.id);
    }
    async subscribeApp(app) {
        const currentTenant = this.appStateService.currentTenant.value;
        try {
            await this.tenantService.subscribeApplication(currentTenant, app);
            this.alertService.success(gettext('Successfully subscribed to application.'));
        }
        catch (ex) {
            this.alertError(ex);
        }
    }
    async unsubscribeApp(app) {
        const currentTenant = this.appStateService.currentTenant.value;
        try {
            await this.tenantService.unsubscribeApplication(currentTenant, app);
            this.alertService.success(gettext('Successfully unsubscribed from application.'));
        }
        catch (ex) {
            this.alertError(ex);
        }
    }
    async isValidAppType(archive, appType) {
        try {
            const currentType = await this.getAppType(archive);
            if (currentType !== appType) {
                throw new EcosystemError(ERROR_TYPE.TYPE_VALIDATION);
            }
            else {
                this.progress.next(this.progress.value + 10);
                return true;
            }
        }
        catch (ex) {
            throw new EcosystemError(ERROR_TYPE.TYPE_VALIDATION);
        }
    }
    async uploadArchiveToApp(archive, app, isNewVersion = false) {
        let uploadOverrides;
        if (isNewVersion) {
            uploadOverrides = await this.getUploadOverrides(archive, app);
        }
        const binaryService = this.applicationService.binary(app);
        this.xhr = binaryService.uploadWithProgressXhr(archive, this.updateUploadProgress.bind(this), '', uploadOverrides);
        const binaryMo = await binaryService.getXMLHttpResponse(this.xhr);
        // TODO commented it due to: https://cumulocity.atlassian.net/browse/MTM-48553
        // Add it back when BE fixes issues with activeVersion.
        // if (isNewVersion) {
        //   return await this.getApplication(app);
        // }
        return (await this.setAppActiveVersion(app, (binaryMo.binaryId || binaryMo.id))).data;
    }
    async validateArchiveToAppCompatibility(archive, app) {
        const appType = await this.getAppType(archive);
        if (appType !== app.type) {
            throw new EcosystemError(ERROR_TYPE.INVALID_APPLICATION);
        }
        else {
            this.progress.next(this.progress.value + 10);
        }
        if (this.isMicroservice(app)) {
            return;
        }
        const manifest = await this.getCumulocityJson(archive);
        // A user can upload an app without a Cumulocity JSON file (e.g. a react app).
        // This is allowed and should not trigger a validation error.
        if (!manifest) {
            return;
        }
        await this.validatePackageKeyAndContextPath(manifest, app);
    }
    async getCumulocityJson(archive) {
        try {
            const c8yManifest = await this.getCumulocityJson$(archive).toPromise();
            return c8yManifest;
        }
        catch (ex) {
            return null;
        }
    }
    async createAppForArchive(archive, isPackageTypeArchive = false) {
        let isPackage = false;
        const appType = await this.getAppType(archive);
        let appModel = {};
        const supportedAppTypes = [ApplicationType.HOSTED, ApplicationType.MICROSERVICE];
        if (supportedAppTypes.includes(appType)) {
            try {
                appModel = await this.getCumulocityJson$(archive).toPromise();
                isPackage = appModel.isPackage;
            }
            catch (e) {
                // do nothing, we allow having HOSTED applications without the manifest file
            }
        }
        const name = this.getBaseNameFromArchiveOrAppModel(archive, appType, appModel);
        const clearedName = this.removeForbiddenCharacters(name);
        const key = this.getAppKey(appModel, clearedName);
        const contextPath = this.getContextPath(appModel, name);
        const appToSave = {
            type: appType,
            name,
            key,
            contextPath
        };
        if (isPackageTypeArchive && !isPackage) {
            throw new EcosystemError(ERROR_TYPE.INVALID_PACKAGE);
        }
        else if (!isPackageTypeArchive && isPackage) {
            throw new EcosystemError(ERROR_TYPE.INVALID_APPLICATION);
        }
        else if (this.isNameLengthExceeded(name, appType)) {
            const error = new Error();
            error.name = ERROR_TYPE.MICROSERVICE_NAME_TOO_LONG;
            error.message = this.translateService.instant(ERROR_MESSAGES[error.name], {
                name,
                maxChars: MICROSERVICE_NAME_MAX_LENGTH
            });
            throw error;
        }
        return (await this.applicationService.create({
            ...appToSave,
            manifest: {
                isPackage,
                ...(appModel?.package && { package: appModel.package })
            }
        })).data;
    }
    async reactivateArchive(app) {
        try {
            await this.applicationService.reactivateArchive(app.id);
            this.alertService.success(gettext('Application reactivated.'));
        }
        catch (ex) {
            this.alertError(ex);
        }
    }
    async removeOldestArchive(app, archives) {
        try {
            await this.modal.confirm(gettext('Delete oldest archive and continue'), gettext('Up to 6 archives can be saved in the platform. If you upload a new archive, the oldest archive that is not active will be deleted. Do you want to proceed?'), Status.INFO, { ok: gettext('Delete and continue') });
            const archiveToDelete = archives[archives.length - 2];
            await this.applicationService.binary(app).delete(archiveToDelete.id);
            this.alertService.success(gettext('Archive deleted.'));
        }
        catch (ex) {
            this.alertError(ex);
        }
    }
    async deployApp(selectedPackage, formGroupValue, model) {
        // Create new app config
        const config = this.createConfig(selectedPackage, formGroupValue);
        config.version = model.selected.version;
        config.isSetup = true;
        if (!config.manifest) {
            config.manifest = {};
        }
        config.manifest.isPackage = false;
        config.manifest.source = selectedPackage.id;
        config.manifest.package = 'blueprint';
        // Create new app
        const newApp = (await this.applicationService.create(config)).data;
        // Binary
        try {
            // Get binary details
            const { data: binaryDetails } = await this.inventoryService.detail(model.selected.binaryId);
            // Get binary from specific package version
            const binary = await this.getBinary(selectedPackage, {
                id: model.selected.binaryId
            });
            // Create zip
            const fileBinary = new Blob([binary], { type: binaryDetails.contentType });
            const file = new File([fileBinary], binaryDetails.name, {
                type: binaryDetails.contentType
            });
            // Upload binary to new app
            await this.uploadArchiveToApp(file, newApp);
            // Update manifest
            await this.updateAppManifest(newApp, selectedPackage);
        }
        catch (error) {
            if (error?.res?.status === 404) {
                await this.applicationService.delete(newApp.id);
                await this.fallbackToCloneLatest(config, selectedPackage);
            }
        }
    }
    async fallbackToCloneLatest(config, selectedPackage) {
        let clonedPkg;
        try {
            clonedPkg = (await this.applicationService.clone(selectedPackage)).data;
            // clean out all falsely cloned applicationVersions, we don't need them
            for (const appVersion of clonedPkg.applicationVersions) {
                if (appVersion.tags.includes('latest')) {
                    await this.setPackageVersionTag(clonedPkg, appVersion.version, []);
                }
                await this.deletePackageVersion(clonedPkg, {
                    version: appVersion.version
                });
            }
            delete config.type;
            config.isPackage = false;
            const { data: newApp } = await this.updateApp({
                id: clonedPkg.id,
                activeVersionId: clonedPkg.activeVersionId,
                ...config
            }, false);
            await this.updateAppManifest(newApp, selectedPackage);
        }
        catch (error) {
            await this.deleteApp(clonedPkg.id, true);
        }
    }
    getAppState(app) {
        if (!this.isOwner(app)) {
            return APP_STATE.SUBSCRIBED;
        }
        else if (this.isUnpacked(app)) {
            return APP_STATE.UNPACKED;
        }
        else if (app.type === ApplicationType.EXTERNAL) {
            return APP_STATE.EXTERNAL;
        }
        return APP_STATE.CUSTOM;
    }
    getPackageContentState(app) {
        if (!this.isPackage(app)) {
            return;
        }
        if (this.isPackageBlueprint(app)) {
            return APP_STATE.PACKAGE_BLUEPRINT;
        }
        if (this.isPluginsPackage(app)) {
            return APP_STATE.PACKAGE_PLUGIN;
        }
        return APP_STATE.PACKAGE_UNKNOWN;
    }
    isPackageBlueprint(app) {
        return this.isPackage(app) && app.manifest.package === 'blueprint';
    }
    isPluginsPackage(app) {
        return this.isPackage(app) && app.manifest.package === 'plugin';
    }
    isUnpacked(app) {
        return !!app.manifest?.source;
    }
    hasExports(app) {
        return !!app.manifest?.exports?.length;
    }
    isApplication(app) {
        return (app.type !== ApplicationType.MICROSERVICE && !this.isFeature(app) && !this.isPackage(app));
    }
    isCustomMicroservice(app) {
        return this.isOwner(app) && app.type === ApplicationType.MICROSERVICE;
    }
    async getBinary(app, archive) {
        let binary;
        try {
            const res = await this.applicationService.binary(app).downloadArchive(archive.id);
            binary = await res.arrayBuffer();
        }
        catch (ex) {
            const msg = gettext('Could not get the binary.');
            this.alertService.danger(msg);
        }
        return binary;
    }
    async isOverwrittenByCustomApp(app) {
        return !this.isOwner(app) && (await this.hasSubscribedAppParent(app));
    }
    async hasSubscribedAppParent(app) {
        const appsGroupedByContextPath = await this.appsGroupedByContextPath$.pipe(take(1)).toPromise();
        return app.contextPath && appsGroupedByContextPath[app.contextPath]?.length === 2;
    }
    /**
     * @deprecated
     */
    setAvailabilityToPrivateIfNotSetAlready(app) {
        app.availability = ApplicationAvailability.PRIVATE;
        return app;
    }
    /**
     * Shows an error dialog.
     * @param error Either a server error or an internal [[EcosystemError]].
     */
    alertError(error) {
        if (error instanceof EcosystemError) {
            this.alertService.danger(error.message);
        }
        else {
            this.alertService.addServerFailure(error);
        }
    }
    async validatePackageKeyAndContextPath(manifest, app) {
        const contextPath = get(manifest, 'contextPath');
        const appKey = get(manifest, 'key');
        if (contextPath !== app.contextPath || appKey !== app.key) {
            throw new EcosystemError(ERROR_TYPE.KEY_OR_CONTEXT_PATH_MISMATCH);
        }
    }
    filterContainString(name, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    }
    async showModal(packageType, isPlugin) {
        try {
            let message;
            if (packageType.name) {
                message = gettext(`The current version of the package "{{ name }}" that you are trying to install is not compatible with the platform version. Do you want to proceed?`);
            }
            else if (isPlugin) {
                message = gettext(`The current version of the plugin that you are trying to install is not compatible with the platform version. Do you want to proceed?`);
            }
            else {
                message = gettext(`The current version of the blueprint that you are trying to install is not compatible with the platform version. Do you want to proceed?`);
            }
            const translatedBody = this.translateService.instant(message, {
                name: packageType.name
            });
            await this.modal.confirm(gettext('Blueprint installation'), translatedBody, 'warning', {
                ok: gettext('Continue'),
                cancel: gettext('Cancel')
            });
        }
        catch {
            // modal canceled
            return false;
        }
        return true;
    }
    async getPlatformVersion() {
        return await this.appStateService.state$
            .pipe(take(1), map(state => state?.versions?.backend), filter(backendVersion => !!backendVersion))
            .toPromise();
    }
    getAppKey(appModel, name) {
        let key = appModel?.key;
        if (!key) {
            key = `${kebabCase(name)}-key`;
        }
        return key;
    }
    getContextPath(appModel, name) {
        return appModel?.contextPath || name.toLowerCase();
    }
    removeForbiddenCharacters(str) {
        return str.replace(/[^a-zA-Z0-9-_]/g, '');
    }
    isCurrentApp(app) {
        const currentApp = this.appStateService.state.app;
        return currentApp.contextPath === app.contextPath;
    }
    getCumulocityJson$(archive) {
        return this.zipService.getJsonData(archive, {
            filename: CUMULOCITY_JSON
        });
    }
    getAppType(archive) {
        return this.getCumulocityJson$(archive)
            .toPromise()
            .then(data => get(data, 'type') ||
            (get(data, 'apiVersion') ? ApplicationType.MICROSERVICE : ApplicationType.HOSTED))
            .catch(() => ApplicationType.HOSTED);
    }
    getBaseNameFromArchiveOrAppModel(archive, appType, appModel) {
        let baseName = appModel?.name || archive.name.replace(/\.zip$/i, '');
        if (appType === 'MICROSERVICE') {
            baseName = this.removeVersionFromName(baseName);
        }
        return baseName;
    }
    checkIfAppNameKeyPathExists(existingApps, app, retryNo) {
        return existingApps.find(existingApp => existingApp.name === app.name ||
            existingApp.key === app.key ||
            existingApp.contextPath === app.contextPath ||
            existingApp.name === [app.name, retryNo].join('-') ||
            existingApp.key === [app.key, retryNo].join('-') ||
            existingApp.contextPath === [app.contextPath, retryNo].join('-'));
    }
    removeAppProperties(app) {
        const tempApp = cloneDeep(app);
        const propertiesToRemove = ['id', 'owner', 'activeVersionId', 'self'];
        propertiesToRemove.forEach(prop => delete tempApp[prop]);
        return tempApp;
    }
    async getUploadOverrides(archive, app) {
        const { version } = await this.getCumulocityJson$(archive).toPromise();
        const isInitialPackage = app.applicationVersions?.length === 0;
        return {
            listUrl: 'versions',
            headers: {
                Accept: 'application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9'
            },
            bodyFileProperty: 'applicationBinary',
            requestBody: {
                applicationVersion: { version, ...(isInitialPackage && { tags: ['latest'] }) }
            }
        };
    }
    removeVersionFromName(name) {
        const versionRegExp = /-\d+\.\d+\.\d+(\.\d+)?(-\d+)?(.*)$/;
        return name.replace(versionRegExp, '');
    }
    isNameLengthExceeded(name, appType) {
        return name.length > MICROSERVICE_NAME_MAX_LENGTH && appType === ApplicationType.MICROSERVICE;
    }
}
EcosystemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: EcosystemService, deps: [{ token: i1.ModalService }, { token: i1.AlertService }, { token: i1.HumanizeAppNamePipe }, { token: i2.TranslateService }, { token: i3.ApplicationService }, { token: i1.AppStateService }, { token: i1.ZipService }, { token: i3.TenantService }, { token: i3.InventoryService }, { token: i1.WizardModalService }], target: i0.ɵɵFactoryTarget.Injectable });
EcosystemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: EcosystemService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: EcosystemService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.ModalService }, { type: i1.AlertService }, { type: i1.HumanizeAppNamePipe }, { type: i2.TranslateService }, { type: i3.ApplicationService }, { type: i1.AppStateService }, { type: i1.ZipService }, { type: i3.TenantService }, { type: i3.InventoryService }, { type: i1.WizardModalService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Component, ViewChild } from '@angular/core';
import { ApplicationService, InventoryService } from '@c8y/client';
import { AlertService } from '@c8y/ngx-components';
import { EcosystemService } from '@c8y/ngx-components/ecosystem/shared';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components/ecosystem/shared";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@angular/common";
export class UpdateApplicationModalComponent {
    constructor(inventoryService, ecosystemService, applicationService, alertService) {
        this.inventoryService = inventoryService;
        this.ecosystemService = ecosystemService;
        this.applicationService = applicationService;
        this.alertService = alertService;
        this.isUpdateOngoing = true;
        this.updateFailure = false;
        this.result = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    ngOnInit() {
        this.updateApplication();
    }
    done() {
        if (!this.updateFailure) {
            this._resolve();
            this.modal._dismiss();
            return;
        }
        this._reject();
        this.modal._dismiss();
    }
    async updateApplication() {
        try {
            const binaryMoId = this.sourcePackage.activeVersionId;
            await this.uploadNewBinary(binaryMoId);
        }
        catch (e) {
            if (e.res?.status === 404) {
                await this.fallBackToCloneUpdate();
            }
            else {
                this.updateFailure = true;
                this.alertService.addServerFailure(e);
            }
        }
        finally {
            this.isUpdateOngoing = false;
        }
    }
    async uploadNewBinary(binaryMoId) {
        const { data: binaryMo } = await this.inventoryService.detail(binaryMoId);
        const binary = await this.inventoryService.binary.download(binaryMo.id);
        const blob = await binary.blob();
        const file = new File([blob], binaryMo.name);
        const app = await this.ecosystemService.uploadArchiveToApp(file, this.application, false);
        await this.ecosystemService.updateAppManifest(app, this.sourcePackage);
    }
    async fallBackToCloneUpdate() {
        try {
            const { data: clonedApp } = await this.applicationService.clone(this.sourcePackage);
            await this.uploadNewBinary(clonedApp.activeVersionId);
            await this.ecosystemService.deleteApp(clonedApp, true);
        }
        catch (e) {
            this.alertService.addServerFailure(e);
        }
    }
}
UpdateApplicationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdateApplicationModalComponent, deps: [{ token: i1.InventoryService }, { token: i2.EcosystemService }, { token: i1.ApplicationService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Component });
UpdateApplicationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: UpdateApplicationModalComponent, selector: "c8y-update-application-modal", viewQueries: [{ propertyName: "modal", first: true, predicate: ["modal"], descendants: true }], ngImport: i0, template: "<c8y-modal\n  [title]=\"'Update application' | translate\"\n  [headerClasses]=\"'dialog-header'\"\n  [customFooter]=\"true\"\n  #modal\n>\n  <ng-container c8y-modal-title>\n    <span class=\"dlt-c8y-icon-installing-updates\"></span>\n  </ng-container>\n\n  <c8y-progress-bar\n    *ngIf=\"isUpdateOngoing\"\n    [message]=\"'Updating\u2026' | translate\"\n    class=\"text-center d-block p-t-56 p-b-56 m-t-4 m-b-4\"\n    style=\"min-height: 180px\"\n  ></c8y-progress-bar>\n\n  <c8y-operation-result\n    *ngIf=\"!isUpdateOngoing && !updateFailure\"\n    text=\"{{ 'Update completed' | translate }}\"\n    [size]=\"120\"\n    [vertical]=\"true\"\n    type=\"success\"\n  ></c8y-operation-result>\n  <c8y-operation-result\n    *ngIf=\"!isUpdateOngoing && updateFailure\"\n    text=\"{{ 'Failed to update application.' | translate }}\"\n    [size]=\"120\"\n    [vertical]=\"true\"\n    type=\"error\"\n  ></c8y-operation-result>\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ 'Close' | translate }}\"\n      [disabled]=\"isUpdateOngoing\"\n      class=\"btn btn-default\"\n      (click)=\"done()\"\n    >\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</c8y-modal>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ProgressBarComponent, selector: "c8y-progress-bar", inputs: ["message", "progress"] }, { kind: "component", type: i3.OperationResultComponent, selector: "c8y-operation-result", inputs: ["text", "vertical", "size", "type"] }, { kind: "component", type: i3.ModalComponent, selector: "c8y-modal", inputs: ["disabled", "close", "dismiss", "title", "body", "customFooter", "headerClasses", "labels"], outputs: ["onDismiss", "onClose"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdateApplicationModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-update-application-modal', template: "<c8y-modal\n  [title]=\"'Update application' | translate\"\n  [headerClasses]=\"'dialog-header'\"\n  [customFooter]=\"true\"\n  #modal\n>\n  <ng-container c8y-modal-title>\n    <span class=\"dlt-c8y-icon-installing-updates\"></span>\n  </ng-container>\n\n  <c8y-progress-bar\n    *ngIf=\"isUpdateOngoing\"\n    [message]=\"'Updating\u2026' | translate\"\n    class=\"text-center d-block p-t-56 p-b-56 m-t-4 m-b-4\"\n    style=\"min-height: 180px\"\n  ></c8y-progress-bar>\n\n  <c8y-operation-result\n    *ngIf=\"!isUpdateOngoing && !updateFailure\"\n    text=\"{{ 'Update completed' | translate }}\"\n    [size]=\"120\"\n    [vertical]=\"true\"\n    type=\"success\"\n  ></c8y-operation-result>\n  <c8y-operation-result\n    *ngIf=\"!isUpdateOngoing && updateFailure\"\n    text=\"{{ 'Failed to update application.' | translate }}\"\n    [size]=\"120\"\n    [vertical]=\"true\"\n    type=\"error\"\n  ></c8y-operation-result>\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ 'Close' | translate }}\"\n      [disabled]=\"isUpdateOngoing\"\n      class=\"btn btn-default\"\n      (click)=\"done()\"\n    >\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</c8y-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2.EcosystemService }, { type: i1.ApplicationService }, { type: i3.AlertService }]; }, propDecorators: { modal: [{
                type: ViewChild,
                args: ['modal', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
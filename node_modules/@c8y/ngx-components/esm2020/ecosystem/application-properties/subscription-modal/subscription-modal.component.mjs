import { Component } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { AlertService, ContextRouteService, gettext, ModalService, Status, TabsService } from '@c8y/ngx-components';
import { isEmpty } from 'lodash';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { EcosystemService } from '@c8y/ngx-components/ecosystem/shared';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "@c8y/ngx-components/ecosystem/shared";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@c8y/client";
import * as i5 from "@angular/common";
export class SubscriptionModalComponent {
    constructor(bsModalRef, ecosystemService, tabsService, modal, applicationService, alertService, contextRouteService) {
        this.bsModalRef = bsModalRef;
        this.ecosystemService = ecosystemService;
        this.tabsService = tabsService;
        this.modal = modal;
        this.applicationService = applicationService;
        this.alertService = alertService;
        this.contextRouteService = contextRouteService;
        this.RETRY_TIMEOUT = 3000;
        this.isLoading = false;
        this.result = new Promise(resolve => {
            this._resolve = resolve;
        });
        this.retryCounter = 0;
        this.TABS = ['Logs', 'Status'];
    }
    ngOnInit() {
        if (this.isSubscribed) {
            this.unsubscribe();
        }
        else {
            this.subscribe();
        }
    }
    async subscribe() {
        this.retryCounter = 0;
        this.isLoading = true;
        this.message = gettext('Subscribing…');
        await this.ecosystemService.subscribeApp(this.application);
        this.getStatusDetails('subscribe');
    }
    async unsubscribe() {
        this.retryCounter = 0;
        this.isLoading = true;
        this.message = gettext('Unsubscribing…');
        await this.ecosystemService.unsubscribeApp(this.application);
        this.getStatusDetails('unsubscribe');
    }
    async getStatusDetails(action) {
        this.contextRouteService.refreshContext();
        const actionSuccessful = action === 'subscribe' ? await this.onSubscribe() : this.onUnsubscribe();
        if (actionSuccessful) {
            return this.hideSubscriptionModal();
        }
        if (this.retryCounter === 4) {
            this.showWarningModal(action);
            return this.hideSubscriptionModal();
        }
        this.retryCounter += 1;
        setTimeout(async () => {
            this.getStatusDetails(action);
        }, this.RETRY_TIMEOUT);
    }
    async onSubscribe() {
        try {
            const res = (await this.applicationService.getStatusDetails(this.application)).data[0];
            return this.shouldShowMSSpecificTabs(res);
        }
        catch (er) {
            this.alertService.addServerFailure(er);
        }
    }
    // Checks if the UI should show tabs with logs and status
    shouldShowMSSpecificTabs(mo) {
        return !isEmpty(mo.c8y_Status?.instances) && !!mo.c8y_SupportedLogs;
    }
    onUnsubscribe() {
        return !this.tabsService.areAvailable(this.TABS);
    }
    hideSubscriptionModal() {
        this._resolve();
        this.bsModalRef.hide();
        this.isLoading = false;
    }
    showWarningModal(action) {
        const title = gettext('Warning');
        const body = action === 'subscribe'
            ? gettext('Something went wrong, please refresh the page or resubscribe the application.')
            : gettext('Something went wrong, please refresh the page or retry to unsubscribe from the application.');
        this.modal.acknowledge(title, body, Status.WARNING, gettext('Close'));
    }
}
SubscriptionModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SubscriptionModalComponent, deps: [{ token: i1.BsModalRef }, { token: i2.EcosystemService }, { token: i3.TabsService }, { token: i3.ModalService }, { token: i4.ApplicationService }, { token: i3.AlertService }, { token: i3.ContextRouteService }], target: i0.ɵɵFactoryTarget.Component });
SubscriptionModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SubscriptionModalComponent, selector: "c8y-subscription-modal", ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"c8y-atom\"></i>\n    <h4 id=\"modal-title\">{{ message }}</h4>\n  </div>\n  <div class=\"modal-body\" id=\"modal-body\" *ngIf=\"isLoading\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.LoadingComponent, selector: "c8y-loading" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SubscriptionModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-subscription-modal', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"c8y-atom\"></i>\n    <h4 id=\"modal-title\">{{ message }}</h4>\n  </div>\n  <div class=\"modal-body\" id=\"modal-body\" *ngIf=\"isLoading\">\n    <div class=\"p-16 text-center\">\n      <c8y-loading></c8y-loading>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BsModalRef }, { type: i2.EcosystemService }, { type: i3.TabsService }, { type: i3.ModalService }, { type: i4.ApplicationService }, { type: i3.AlertService }, { type: i3.ContextRouteService }]; } });
//# sourceMappingURL=data:application/json;base64,
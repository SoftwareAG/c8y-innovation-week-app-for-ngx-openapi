import { Component } from '@angular/core';
import { gettext, ModalService, Status } from '@c8y/ngx-components';
import { ApplicationType, TenantService } from '@c8y/client';
import { EcosystemService, ERROR_TYPE } from '@c8y/ngx-components/ecosystem/shared';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/ecosystem/shared";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@c8y/client";
export class AddMicroserviceComponent {
    constructor(ecosystemService, modal, tenantService) {
        this.ecosystemService = ecosystemService;
        this.modal = modal;
        this.tenantService = tenantService;
        this.headerText = gettext('Add microservice');
        this.successText = gettext('Microservice created');
        this.createMicroserviceApplicationHandler = (f) => this.createMicroserviceApplication(f);
        this.uploadMicroserviceHandler = (f, app) => this.uploadMicroservice(f, app);
    }
    async createMicroserviceApplication(file) {
        await this.ecosystemService.isValidAppType(file, ApplicationType.MICROSERVICE);
        return this.ecosystemService.createAppForArchive(file);
    }
    async uploadMicroservice(file, microservice) {
        const subscribeToCurrentTenant = await this.askIfActivationAfterUploadNeeded();
        await this.ecosystemService.uploadArchiveToApp(file, microservice);
        await this.subscribeMicroservice(microservice, subscribeToCurrentTenant);
    }
    async askIfActivationAfterUploadNeeded() {
        try {
            await this.modal.confirm(gettext('Subscribe to microservice'), gettext('You are about to subscribe to the microservice after upload. Do you want to subscribe to it?'), Status.INFO, { ok: gettext('Subscribe'), cancel: gettext("Don't subscribe") });
            return true;
        }
        catch (ex) {
            return false;
        }
    }
    async subscribeMicroservice(app, subscribeToCurrentTenant) {
        const tenant = (await this.tenantService.current()).data;
        const applications = tenant.applications.references;
        const isSubscribed = applications.some(({ application }) => application.id === app.id);
        if (!isSubscribed && subscribeToCurrentTenant) {
            try {
                return await this.tenantService.subscribeApplication(tenant, app);
            }
            catch (res) {
                if (res.status === 409) {
                    throw Error(ERROR_TYPE.ALREADY_SUBSCRIBED);
                }
            }
        }
        else if (isSubscribed && !subscribeToCurrentTenant) {
            return this.tenantService.unsubscribeApplication(tenant, app);
        }
    }
}
AddMicroserviceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddMicroserviceComponent, deps: [{ token: i1.EcosystemService }, { token: i2.ModalService }, { token: i3.TenantService }], target: i0.ɵɵFactoryTarget.Component });
AddMicroserviceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AddMicroserviceComponent, selector: "c8y-add-microservice", ngImport: i0, template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'microchip'"
    [successText]="successText"
    [createApplicationHandler]="createMicroserviceApplicationHandler"
    [uploadApplicationHandler]="uploadMicroserviceHandler"
  ></c8y-add-application>`, isInline: true, dependencies: [{ kind: "component", type: i1.AddApplicationComponent, selector: "c8y-add-application", inputs: ["headerText", "headerIcon", "successText", "createApplicationHandler", "uploadApplicationHandler", "canGoBack"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddMicroserviceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c8y-add-microservice',
                    template: `<c8y-add-application
    [headerText]="headerText"
    [headerIcon]="'microchip'"
    [successText]="successText"
    [createApplicationHandler]="createMicroserviceApplicationHandler"
    [uploadApplicationHandler]="uploadMicroserviceHandler"
  ></c8y-add-application>`
                }]
        }], ctorParameters: function () { return [{ type: i1.EcosystemService }, { type: i2.ModalService }, { type: i3.TenantService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pY3Jvc2VydmljZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9lY29zeXN0ZW0vbWljcm9zZXJ2aWNlcy9hZGQtbWljcm9zZXJ2aWNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQWdCLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7O0FBWXBGLE1BQU0sT0FBTyx3QkFBd0I7SUFJbkMsWUFDVSxnQkFBa0MsRUFDbEMsS0FBbUIsRUFDbkIsYUFBNEI7UUFGNUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBTnRDLGVBQVUsR0FBVyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNqRCxnQkFBVyxHQUFXLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBUXRELHlDQUFvQyxHQUFHLENBQUMsQ0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUYsOEJBQXlCLEdBQUcsQ0FBQyxDQUFPLEVBQUUsR0FBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUh6RixDQUFDO0lBS0osS0FBSyxDQUFDLDZCQUE2QixDQUFDLElBQVU7UUFDNUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFVLEVBQUUsWUFBMEI7UUFDN0QsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1FBQy9FLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRSxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRU8sS0FBSyxDQUFDLGdDQUFnQztRQUM1QyxJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDdEIsT0FBTyxDQUFDLDJCQUEyQixDQUFDLEVBQ3BDLE9BQU8sQ0FDTCw4RkFBOEYsQ0FDL0YsRUFDRCxNQUFNLENBQUMsSUFBSSxFQUNYLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FDakUsQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLHFCQUFxQixDQUNqQyxHQUFpQixFQUNqQix3QkFBaUM7UUFFakMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFFcEQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxZQUFZLElBQUksd0JBQXdCLEVBQUU7WUFDN0MsSUFBSTtnQkFDRixPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDbkU7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO29CQUN0QixNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztpQkFDNUM7YUFDRjtTQUNGO2FBQU0sSUFBSSxZQUFZLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUNwRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQzs7cUhBM0RVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLDREQVJ6Qjs7Ozs7OzBCQU1jOzJGQUViLHdCQUF3QjtrQkFWcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUU7Ozs7OzswQkFNYztpQkFDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIE1vZGFsU2VydmljZSwgU3RhdHVzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblR5cGUsIElBcHBsaWNhdGlvbiwgVGVuYW50U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEVjb3N5c3RlbVNlcnZpY2UsIEVSUk9SX1RZUEUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2Vjb3N5c3RlbS9zaGFyZWQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWRkLW1pY3Jvc2VydmljZScsXG4gIHRlbXBsYXRlOiBgPGM4eS1hZGQtYXBwbGljYXRpb25cbiAgICBbaGVhZGVyVGV4dF09XCJoZWFkZXJUZXh0XCJcbiAgICBbaGVhZGVySWNvbl09XCInbWljcm9jaGlwJ1wiXG4gICAgW3N1Y2Nlc3NUZXh0XT1cInN1Y2Nlc3NUZXh0XCJcbiAgICBbY3JlYXRlQXBwbGljYXRpb25IYW5kbGVyXT1cImNyZWF0ZU1pY3Jvc2VydmljZUFwcGxpY2F0aW9uSGFuZGxlclwiXG4gICAgW3VwbG9hZEFwcGxpY2F0aW9uSGFuZGxlcl09XCJ1cGxvYWRNaWNyb3NlcnZpY2VIYW5kbGVyXCJcbiAgPjwvYzh5LWFkZC1hcHBsaWNhdGlvbj5gXG59KVxuZXhwb3J0IGNsYXNzIEFkZE1pY3Jvc2VydmljZUNvbXBvbmVudCB7XG4gIGhlYWRlclRleHQ6IHN0cmluZyA9IGdldHRleHQoJ0FkZCBtaWNyb3NlcnZpY2UnKTtcbiAgc3VjY2Vzc1RleHQ6IHN0cmluZyA9IGdldHRleHQoJ01pY3Jvc2VydmljZSBjcmVhdGVkJyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlY29zeXN0ZW1TZXJ2aWNlOiBFY29zeXN0ZW1TZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWw6IE1vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IFRlbmFudFNlcnZpY2VcbiAgKSB7fVxuXG4gIGNyZWF0ZU1pY3Jvc2VydmljZUFwcGxpY2F0aW9uSGFuZGxlciA9IChmOiBGaWxlKSA9PiB0aGlzLmNyZWF0ZU1pY3Jvc2VydmljZUFwcGxpY2F0aW9uKGYpO1xuICB1cGxvYWRNaWNyb3NlcnZpY2VIYW5kbGVyID0gKGY6IEZpbGUsIGFwcDogSUFwcGxpY2F0aW9uKSA9PiB0aGlzLnVwbG9hZE1pY3Jvc2VydmljZShmLCBhcHApO1xuXG4gIGFzeW5jIGNyZWF0ZU1pY3Jvc2VydmljZUFwcGxpY2F0aW9uKGZpbGU6IEZpbGUpOiBQcm9taXNlPElBcHBsaWNhdGlvbj4ge1xuICAgIGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS5pc1ZhbGlkQXBwVHlwZShmaWxlLCBBcHBsaWNhdGlvblR5cGUuTUlDUk9TRVJWSUNFKTtcbiAgICByZXR1cm4gdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLmNyZWF0ZUFwcEZvckFyY2hpdmUoZmlsZSk7XG4gIH1cblxuICBhc3luYyB1cGxvYWRNaWNyb3NlcnZpY2UoZmlsZTogRmlsZSwgbWljcm9zZXJ2aWNlOiBJQXBwbGljYXRpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzdWJzY3JpYmVUb0N1cnJlbnRUZW5hbnQgPSBhd2FpdCB0aGlzLmFza0lmQWN0aXZhdGlvbkFmdGVyVXBsb2FkTmVlZGVkKCk7XG4gICAgYXdhaXQgdGhpcy5lY29zeXN0ZW1TZXJ2aWNlLnVwbG9hZEFyY2hpdmVUb0FwcChmaWxlLCBtaWNyb3NlcnZpY2UpO1xuICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlTWljcm9zZXJ2aWNlKG1pY3Jvc2VydmljZSwgc3Vic2NyaWJlVG9DdXJyZW50VGVuYW50KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYXNrSWZBY3RpdmF0aW9uQWZ0ZXJVcGxvYWROZWVkZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWwuY29uZmlybShcbiAgICAgICAgZ2V0dGV4dCgnU3Vic2NyaWJlIHRvIG1pY3Jvc2VydmljZScpLFxuICAgICAgICBnZXR0ZXh0KFxuICAgICAgICAgICdZb3UgYXJlIGFib3V0IHRvIHN1YnNjcmliZSB0byB0aGUgbWljcm9zZXJ2aWNlIGFmdGVyIHVwbG9hZC4gRG8geW91IHdhbnQgdG8gc3Vic2NyaWJlIHRvIGl0PydcbiAgICAgICAgKSxcbiAgICAgICAgU3RhdHVzLklORk8sXG4gICAgICAgIHsgb2s6IGdldHRleHQoJ1N1YnNjcmliZScpLCBjYW5jZWw6IGdldHRleHQoXCJEb24ndCBzdWJzY3JpYmVcIikgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzdWJzY3JpYmVNaWNyb3NlcnZpY2UoXG4gICAgYXBwOiBJQXBwbGljYXRpb24sXG4gICAgc3Vic2NyaWJlVG9DdXJyZW50VGVuYW50OiBib29sZWFuXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgdGVuYW50ID0gKGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5jdXJyZW50KCkpLmRhdGE7XG4gICAgY29uc3QgYXBwbGljYXRpb25zID0gdGVuYW50LmFwcGxpY2F0aW9ucy5yZWZlcmVuY2VzO1xuXG4gICAgY29uc3QgaXNTdWJzY3JpYmVkID0gYXBwbGljYXRpb25zLnNvbWUoKHsgYXBwbGljYXRpb24gfSkgPT4gYXBwbGljYXRpb24uaWQgPT09IGFwcC5pZCk7XG4gICAgaWYgKCFpc1N1YnNjcmliZWQgJiYgc3Vic2NyaWJlVG9DdXJyZW50VGVuYW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50ZW5hbnRTZXJ2aWNlLnN1YnNjcmliZUFwcGxpY2F0aW9uKHRlbmFudCwgYXBwKTtcbiAgICAgIH0gY2F0Y2ggKHJlcykge1xuICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDA5KSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoRVJST1JfVFlQRS5BTFJFQURZX1NVQlNDUklCRUQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1N1YnNjcmliZWQgJiYgIXN1YnNjcmliZVRvQ3VycmVudFRlbmFudCkge1xuICAgICAgcmV0dXJuIHRoaXMudGVuYW50U2VydmljZS51bnN1YnNjcmliZUFwcGxpY2F0aW9uKHRlbmFudCwgYXBwKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
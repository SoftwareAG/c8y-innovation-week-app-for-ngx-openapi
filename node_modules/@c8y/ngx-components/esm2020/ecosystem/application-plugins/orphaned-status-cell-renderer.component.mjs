import { Component } from '@angular/core';
import { ApplicationPluginStatus, CellRendererContext, gettext } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@angular/common";
export class OrphanedStatusCellRendererComponent {
    constructor(context) {
        this.context = context;
        this.label = this.getLabel(context.value);
    }
    getLabel(statusValue) {
        switch (statusValue) {
            case ApplicationPluginStatus.OUTDATED:
                return {
                    value: statusValue,
                    text: gettext('OUTDATED`plugin status`'),
                    class: 'label-warning'
                };
            case ApplicationPluginStatus.ORPHANED:
                return {
                    value: statusValue,
                    text: gettext('ORPHANED`plugin status`'),
                    class: 'label-danger'
                };
            case ApplicationPluginStatus.REVOKED:
                return {
                    value: statusValue,
                    text: gettext('REVOKED`plugin status`'),
                    class: 'label-danger'
                };
            case ApplicationPluginStatus.LATEST:
                return {
                    value: statusValue,
                    text: gettext('LATEST`plugin status`'),
                    class: 'label-success'
                };
            default:
                return null;
        }
    }
}
OrphanedStatusCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OrphanedStatusCellRendererComponent, deps: [{ token: i1.CellRendererContext }], target: i0.ɵɵFactoryTarget.Component });
OrphanedStatusCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OrphanedStatusCellRendererComponent, selector: "c8y-orphaned-status-cell-renderer", ngImport: i0, template: "<span\n  *ngIf=\"label\"\n  class=\"label\"\n  [ngClass]=\"label.class\"\n  [title]=\"label.text | translate\"\n>\n  {{ label.text | translate }}\n</span>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OrphanedStatusCellRendererComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-orphaned-status-cell-renderer', template: "<span\n  *ngIf=\"label\"\n  class=\"label\"\n  [ngClass]=\"label.class\"\n  [title]=\"label.text | translate\"\n>\n  {{ label.text | translate }}\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JwaGFuZWQtc3RhdHVzLWNlbGwtcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZWNvc3lzdGVtL2FwcGxpY2F0aW9uLXBsdWdpbnMvb3JwaGFuZWQtc3RhdHVzLWNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vZWNvc3lzdGVtL2FwcGxpY2F0aW9uLXBsdWdpbnMvb3JwaGFuZWQtc3RhdHVzLWNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFNNUYsTUFBTSxPQUFPLG1DQUFtQztJQUU5QyxZQUFtQixPQUE0QjtRQUE1QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxRQUFRLENBQUMsV0FBb0M7UUFLbkQsUUFBUSxXQUFXLEVBQUU7WUFDbkIsS0FBSyx1QkFBdUIsQ0FBQyxRQUFRO2dCQUNuQyxPQUFPO29CQUNMLEtBQUssRUFBRSxXQUFXO29CQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO29CQUN4QyxLQUFLLEVBQUUsZUFBZTtpQkFDdkIsQ0FBQztZQUNKLEtBQUssdUJBQXVCLENBQUMsUUFBUTtnQkFDbkMsT0FBTztvQkFDTCxLQUFLLEVBQUUsV0FBVztvQkFDbEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztvQkFDeEMsS0FBSyxFQUFFLGNBQWM7aUJBQ3RCLENBQUM7WUFDSixLQUFLLHVCQUF1QixDQUFDLE9BQU87Z0JBQ2xDLE9BQU87b0JBQ0wsS0FBSyxFQUFFLFdBQVc7b0JBQ2xCLElBQUksRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7b0JBQ3ZDLEtBQUssRUFBRSxjQUFjO2lCQUN0QixDQUFDO1lBQ0osS0FBSyx1QkFBdUIsQ0FBQyxNQUFNO2dCQUNqQyxPQUFPO29CQUNMLEtBQUssRUFBRSxXQUFXO29CQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO29CQUN0QyxLQUFLLEVBQUUsZUFBZTtpQkFDdkIsQ0FBQztZQUNKO2dCQUNFLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOztnSUF2Q1UsbUNBQW1DO29IQUFuQyxtQ0FBbUMseUVDUGhELDhKQVFBOzJGRERhLG1DQUFtQztrQkFKL0MsU0FBUzsrQkFDRSxtQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUGx1Z2luU3RhdHVzLCBDZWxsUmVuZGVyZXJDb250ZXh0LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1vcnBoYW5lZC1zdGF0dXMtY2VsbC1yZW5kZXJlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9vcnBoYW5lZC1zdGF0dXMtY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgT3JwaGFuZWRTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQge1xuICBsYWJlbDogeyB2YWx1ZTogc3RyaW5nOyBjbGFzczogc3RyaW5nOyB0ZXh0OiBzdHJpbmcgfSB8IG51bGw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgdGhpcy5sYWJlbCA9IHRoaXMuZ2V0TGFiZWwoY29udGV4dC52YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldExhYmVsKHN0YXR1c1ZhbHVlOiBBcHBsaWNhdGlvblBsdWdpblN0YXR1cyk6IHtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIGNsYXNzOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xuICB9IHwgbnVsbCB7XG4gICAgc3dpdGNoIChzdGF0dXNWYWx1ZSkge1xuICAgICAgY2FzZSBBcHBsaWNhdGlvblBsdWdpblN0YXR1cy5PVVREQVRFRDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogc3RhdHVzVmFsdWUsXG4gICAgICAgICAgdGV4dDogZ2V0dGV4dCgnT1VUREFURURgcGx1Z2luIHN0YXR1c2AnKSxcbiAgICAgICAgICBjbGFzczogJ2xhYmVsLXdhcm5pbmcnXG4gICAgICAgIH07XG4gICAgICBjYXNlIEFwcGxpY2F0aW9uUGx1Z2luU3RhdHVzLk9SUEhBTkVEOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBzdGF0dXNWYWx1ZSxcbiAgICAgICAgICB0ZXh0OiBnZXR0ZXh0KCdPUlBIQU5FRGBwbHVnaW4gc3RhdHVzYCcpLFxuICAgICAgICAgIGNsYXNzOiAnbGFiZWwtZGFuZ2VyJ1xuICAgICAgICB9O1xuICAgICAgY2FzZSBBcHBsaWNhdGlvblBsdWdpblN0YXR1cy5SRVZPS0VEOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBzdGF0dXNWYWx1ZSxcbiAgICAgICAgICB0ZXh0OiBnZXR0ZXh0KCdSRVZPS0VEYHBsdWdpbiBzdGF0dXNgJyksXG4gICAgICAgICAgY2xhc3M6ICdsYWJlbC1kYW5nZXInXG4gICAgICAgIH07XG4gICAgICBjYXNlIEFwcGxpY2F0aW9uUGx1Z2luU3RhdHVzLkxBVEVTVDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogc3RhdHVzVmFsdWUsXG4gICAgICAgICAgdGV4dDogZ2V0dGV4dCgnTEFURVNUYHBsdWdpbiBzdGF0dXNgJyksXG4gICAgICAgICAgY2xhc3M6ICdsYWJlbC1zdWNjZXNzJ1xuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCI8c3BhblxuICAqbmdJZj1cImxhYmVsXCJcbiAgY2xhc3M9XCJsYWJlbFwiXG4gIFtuZ0NsYXNzXT1cImxhYmVsLmNsYXNzXCJcbiAgW3RpdGxlXT1cImxhYmVsLnRleHQgfCB0cmFuc2xhdGVcIlxuPlxuICB7eyBsYWJlbC50ZXh0IHwgdHJhbnNsYXRlIH19XG48L3NwYW4+XG4iXX0=
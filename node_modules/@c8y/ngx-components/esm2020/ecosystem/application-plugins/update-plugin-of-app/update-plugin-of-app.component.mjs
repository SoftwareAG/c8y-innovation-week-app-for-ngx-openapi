import { Component } from '@angular/core';
import { AlertService, GainsightService, PluginsService, gettext } from '@c8y/ngx-components';
import { uniq } from 'lodash-es';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { EcosystemService, PRODUCT_EXPERIENCE } from '@c8y/ngx-components/ecosystem/shared';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@c8y/ngx-components/ecosystem/shared";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
export class UpdatePluginOfAppComponent {
    constructor(bsModalRef, pluginsService, alert, ecosystemService, gainsightService) {
        this.bsModalRef = bsModalRef;
        this.pluginsService = pluginsService;
        this.alert = alert;
        this.ecosystemService = ecosystemService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.result = new Promise((resolve, reject) => {
            this._install = resolve;
            this._cancel = reject;
        });
        this.updateAll = true;
    }
    async update() {
        const remotes = this.pluginsService.getMFRemotes(this.app);
        const oldRemotePath = `${this.plugin.contextPath}@${this.plugin.version}`;
        const newRemotePath = `${this.plugin.contextPath}@${this.applicationVersion.version}`;
        let oldRemoteModules = [...(remotes[oldRemotePath] || [])];
        if (!oldRemoteModules.length) {
            this.alert.warning(gettext('Could not change the version of plugin.'));
            this.cancel();
            return;
        }
        const result = await this.ecosystemService.verifyLicenses([this.plugin]);
        if (!result) {
            this.alert.warning(gettext('Plugin update aborted by user.'));
            this.cancel();
            return;
        }
        let remoteModulesOfNewVersion = [...(remotes[newRemotePath] || [])];
        let olderVersions = {};
        if (this.updateAll) {
            olderVersions = Object.keys(remotes)
                .filter(key => key.startsWith(`${this.plugin.contextPath}@`))
                .reduceRight((prev, curr) => {
                prev[curr] = undefined;
                return prev;
            }, {});
            oldRemoteModules = Object.keys(olderVersions)
                .map(version => remotes[version])
                .reduceRight((prev, curr) => {
                prev.push(...curr);
                return prev;
            }, []);
            remoteModulesOfNewVersion.push(...oldRemoteModules);
        }
        else {
            remoteModulesOfNewVersion.push(this.plugin.module);
            olderVersions[oldRemotePath] = oldRemoteModules.filter(module => module !== this.plugin.module);
            if (!olderVersions[oldRemotePath].length) {
                olderVersions[oldRemotePath] = undefined;
            }
        }
        remoteModulesOfNewVersion = uniq(remoteModulesOfNewVersion);
        const newRemotes = {
            ...remotes,
            ...olderVersions,
            [newRemotePath]: remoteModulesOfNewVersion
        };
        try {
            await this.pluginsService.updateRemotesInAppConfig(this.app, newRemotes);
            this.alert.success(gettext(`Switched the version of plugin.`));
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.UPDATE_PLUGIN_OF_APP,
                action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.CHANGE_PLUGIN_VERSION,
                result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_VERSION_CHANGED,
                url: this.CURRENT_LOCATION
            });
        }
        catch (e) {
            this.alert.addServerFailure(e);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.UPDATE_PLUGIN_OF_APP,
                action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.CHANGE_PLUGIN_VERSION,
                result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                url: this.CURRENT_LOCATION
            });
        }
        this.bsModalRef.hide();
        this._install();
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
}
UpdatePluginOfAppComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdatePluginOfAppComponent, deps: [{ token: i1.BsModalRef }, { token: i2.PluginsService }, { token: i2.AlertService }, { token: i3.EcosystemService }, { token: i2.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
UpdatePluginOfAppComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: UpdatePluginOfAppComponent, selector: "c8y-update-plugin-of-app", ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <h4 *ngIf=\"!downgrade\" id=\"modal-title\" translate>Update plugin</h4>\n    <h4 *ngIf=\"downgrade\" id=\"modal-title\" translate>Downgrade plugin</h4>\n  </div>\n  <div class=\"inner-scroll\" id=\"modal-body\">\n    <div class=\"p-16\">\n      <div class=\"d-block fit-w bg-gray-white\">\n        <c8y-package-version-select\n          [packageContextPath]=\"plugin?.contextPath\"\n          [(ngModel)]=\"applicationVersion\"\n        ></c8y-package-version-select>\n        <div\n          *ngIf=\"plugin?.version && plugin.version === applicationVersion?.version\"\n          class=\"alert alert-info\"\n          role=\"alert\"\n        >\n          <span translate ngNonBindable [translateParams]=\"applicationVersion\">\n            Select another version, as {{ version }} is currently used.\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"c8y-checkbox\">\n          <input [(ngModel)]=\"updateAll\" type=\"checkbox\" />\n          <span></span>\n          <span translate ngNonBindable [translateParams]=\"plugin\">\n            Set version for all plugins using the same context path \"{{ contextPath }}\".\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Set version' | translate }}\"\n      [disabled]=\"!applicationVersion || plugin?.version === applicationVersion?.version\"\n      (click)=\"update()\"\n    >\n      {{ 'Set version' | translate }}\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.PackageVersionSelectComponent, selector: "c8y-package-version-select", inputs: ["label", "packageContextPath", "packageId"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdatePluginOfAppComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-update-plugin-of-app', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <h4 *ngIf=\"!downgrade\" id=\"modal-title\" translate>Update plugin</h4>\n    <h4 *ngIf=\"downgrade\" id=\"modal-title\" translate>Downgrade plugin</h4>\n  </div>\n  <div class=\"inner-scroll\" id=\"modal-body\">\n    <div class=\"p-16\">\n      <div class=\"d-block fit-w bg-gray-white\">\n        <c8y-package-version-select\n          [packageContextPath]=\"plugin?.contextPath\"\n          [(ngModel)]=\"applicationVersion\"\n        ></c8y-package-version-select>\n        <div\n          *ngIf=\"plugin?.version && plugin.version === applicationVersion?.version\"\n          class=\"alert alert-info\"\n          role=\"alert\"\n        >\n          <span translate ngNonBindable [translateParams]=\"applicationVersion\">\n            Select another version, as {{ version }} is currently used.\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"c8y-checkbox\">\n          <input [(ngModel)]=\"updateAll\" type=\"checkbox\" />\n          <span></span>\n          <span translate ngNonBindable [translateParams]=\"plugin\">\n            Set version for all plugins using the same context path \"{{ contextPath }}\".\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Set version' | translate }}\"\n      [disabled]=\"!applicationVersion || plugin?.version === applicationVersion?.version\"\n      (click)=\"update()\"\n    >\n      {{ 'Set version' | translate }}\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BsModalRef }, { type: i2.PluginsService }, { type: i2.AlertService }, { type: i3.EcosystemService }, { type: i2.GainsightService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXBsdWdpbi1vZi1hcHAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZWNvc3lzdGVtL2FwcGxpY2F0aW9uLXBsdWdpbnMvdXBkYXRlLXBsdWdpbi1vZi1hcHAvdXBkYXRlLXBsdWdpbi1vZi1hcHAuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vZWNvc3lzdGVtL2FwcGxpY2F0aW9uLXBsdWdpbnMvdXBkYXRlLXBsdWdpbi1vZi1hcHAvdXBkYXRlLXBsdWdpbi1vZi1hcHAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQ0wsWUFBWSxFQUVaLGdCQUFnQixFQUNoQixjQUFjLEVBQ2QsT0FBTyxFQUNSLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7Ozs7QUFNNUYsTUFBTSxPQUFPLDBCQUEwQjtJQWdCckMsWUFDVSxVQUFzQixFQUN0QixjQUE4QixFQUM5QixLQUFtQixFQUNuQixnQkFBa0MsRUFDbEMsZ0JBQWtDO1FBSmxDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBcEI1QyxxQkFBZ0IsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBS2pDLFdBQU0sR0FBa0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFB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QUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0I7Z0JBQzFFLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLHFCQUFxQjtnQkFDckUsTUFBTSxFQUFFLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYztnQkFDOUQsR0FBRyxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7YUFDM0IsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7O3VIQXRHVSwwQkFBMEI7MkdBQTFCLDBCQUEwQixnRUNqQnZDLDgyREFzREE7MkZEckNhLDBCQUEwQjtrQkFKdEMsU0FBUzsrQkFDRSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVtb3RlUGx1Z2lucywgSUFwcGxpY2F0aW9uLCBJQXBwbGljYXRpb25WZXJzaW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQWxlcnRTZXJ2aWNlLFxuICBBcHBsaWNhdGlvblBsdWdpbixcbiAgR2FpbnNpZ2h0U2VydmljZSxcbiAgUGx1Z2luc1NlcnZpY2UsXG4gIGdldHRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyB1bmlxIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IEVjb3N5c3RlbVNlcnZpY2UsIFBST0RVQ1RfRVhQRVJJRU5DRSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZWNvc3lzdGVtL3NoYXJlZCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS11cGRhdGUtcGx1Z2luLW9mLWFwcCcsXG4gIHRlbXBsYXRlVXJsOiAnLi91cGRhdGUtcGx1Z2luLW9mLWFwcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVXBkYXRlUGx1Z2luT2ZBcHBDb21wb25lbnQge1xuICBDVVJSRU5UX0xPQ0FUSU9OID0gbG9jYXRpb24uaHJlZjtcblxuICBhcHA6IElBcHBsaWNhdGlvbjtcbiAgcGx1Z2luOiBBcHBsaWNhdGlvblBsdWdpbjtcbiAgZG93bmdyYWRlOiBib29sZWFuO1xuICByZXN1bHQ6IFByb21pc2U8dm9pZD4gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhpcy5faW5zdGFsbCA9IHJlc29sdmU7XG4gICAgdGhpcy5fY2FuY2VsID0gcmVqZWN0O1xuICB9KTtcbiAgYXBwbGljYXRpb25WZXJzaW9uOiBJQXBwbGljYXRpb25WZXJzaW9uO1xuICB1cGRhdGVBbGwgPSB0cnVlO1xuXG4gIHByaXZhdGUgX2luc3RhbGw6ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgX2NhbmNlbDogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJzTW9kYWxSZWY6IEJzTW9kYWxSZWYsXG4gICAgcHJpdmF0ZSBwbHVnaW5zU2VydmljZTogUGx1Z2luc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWNvc3lzdGVtU2VydmljZTogRWNvc3lzdGVtU2VydmljZSxcbiAgICBwcml2YXRlIGdhaW5zaWdodFNlcnZpY2U6IEdhaW5zaWdodFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHVwZGF0ZSgpIHtcbiAgICBjb25zdCByZW1vdGVzID0gdGhpcy5wbHVnaW5zU2VydmljZS5nZXRNRlJlbW90ZXModGhpcy5hcHApO1xuICAgIGNvbnN0IG9sZFJlbW90ZVBhdGggPSBgJHt0aGlzLnBsdWdpbi5jb250ZXh0UGF0aH1AJHt0aGlzLnBsdWdpbi52ZXJzaW9ufWA7XG4gICAgY29uc3QgbmV3UmVtb3RlUGF0aCA9IGAke3RoaXMucGx1Z2luLmNvbnRleHRQYXRofUAke3RoaXMuYXBwbGljYXRpb25WZXJzaW9uLnZlcnNpb259YDtcbiAgICBsZXQgb2xkUmVtb3RlTW9kdWxlcyA9IFsuLi4ocmVtb3Rlc1tvbGRSZW1vdGVQYXRoXSB8fCBbXSldO1xuICAgIGlmICghb2xkUmVtb3RlTW9kdWxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYWxlcnQud2FybmluZyhnZXR0ZXh0KCdDb3VsZCBub3QgY2hhbmdlIHRoZSB2ZXJzaW9uIG9mIHBsdWdpbi4nKSk7XG4gICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZWNvc3lzdGVtU2VydmljZS52ZXJpZnlMaWNlbnNlcyhbdGhpcy5wbHVnaW5dKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhpcy5hbGVydC53YXJuaW5nKGdldHRleHQoJ1BsdWdpbiB1cGRhdGUgYWJvcnRlZCBieSB1c2VyLicpKTtcbiAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlbW90ZU1vZHVsZXNPZk5ld1ZlcnNpb24gPSBbLi4uKHJlbW90ZXNbbmV3UmVtb3RlUGF0aF0gfHwgW10pXTtcbiAgICBsZXQgb2xkZXJWZXJzaW9uczogQXBwbGljYXRpb25SZW1vdGVQbHVnaW5zID0ge307XG4gICAgaWYgKHRoaXMudXBkYXRlQWxsKSB7XG4gICAgICBvbGRlclZlcnNpb25zID0gT2JqZWN0LmtleXMocmVtb3RlcylcbiAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoYCR7dGhpcy5wbHVnaW4uY29udGV4dFBhdGh9QGApKVxuICAgICAgICAucmVkdWNlUmlnaHQoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgICBwcmV2W2N1cnJdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCB7fSk7XG5cbiAgICAgIG9sZFJlbW90ZU1vZHVsZXMgPSBPYmplY3Qua2V5cyhvbGRlclZlcnNpb25zKVxuICAgICAgICAubWFwKHZlcnNpb24gPT4gcmVtb3Rlc1t2ZXJzaW9uXSlcbiAgICAgICAgLnJlZHVjZVJpZ2h0KChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICAgICAgcHJldi5wdXNoKC4uLmN1cnIpO1xuICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCBbXSk7XG4gICAgICByZW1vdGVNb2R1bGVzT2ZOZXdWZXJzaW9uLnB1c2goLi4ub2xkUmVtb3RlTW9kdWxlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW90ZU1vZHVsZXNPZk5ld1ZlcnNpb24ucHVzaCh0aGlzLnBsdWdpbi5tb2R1bGUpO1xuICAgICAgb2xkZXJWZXJzaW9uc1tvbGRSZW1vdGVQYXRoXSA9IG9sZFJlbW90ZU1vZHVsZXMuZmlsdGVyKFxuICAgICAgICBtb2R1bGUgPT4gbW9kdWxlICE9PSB0aGlzLnBsdWdpbi5tb2R1bGVcbiAgICAgICk7XG4gICAgICBpZiAoIW9sZGVyVmVyc2lvbnNbb2xkUmVtb3RlUGF0aF0ubGVuZ3RoKSB7XG4gICAgICAgIG9sZGVyVmVyc2lvbnNbb2xkUmVtb3RlUGF0aF0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3RlTW9kdWxlc09mTmV3VmVyc2lvbiA9IHVuaXEocmVtb3RlTW9kdWxlc09mTmV3VmVyc2lvbik7XG4gICAgY29uc3QgbmV3UmVtb3RlczogQXBwbGljYXRpb25SZW1vdGVQbHVnaW5zID0ge1xuICAgICAgLi4ucmVtb3RlcyxcbiAgICAgIC4uLm9sZGVyVmVyc2lvbnMsXG4gICAgICBbbmV3UmVtb3RlUGF0aF06IHJlbW90ZU1vZHVsZXNPZk5ld1ZlcnNpb25cbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucGx1Z2luc1NlcnZpY2UudXBkYXRlUmVtb3Rlc0luQXBwQ29uZmlnKHRoaXMuYXBwLCBuZXdSZW1vdGVzKTtcbiAgICAgIHRoaXMuYWxlcnQuc3VjY2VzcyhnZXR0ZXh0KGBTd2l0Y2hlZCB0aGUgdmVyc2lvbiBvZiBwbHVnaW4uYCkpO1xuICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudChQUk9EVUNUX0VYUEVSSUVOQ0UuQVBQTElDQVRJT05TLkVWRU5UUy5JTlNUQUxMRURfUExVR0lOUywge1xuICAgICAgICBjb21wb25lbnQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuQ09NUE9ORU5UUy5VUERBVEVfUExVR0lOX09GX0FQUCxcbiAgICAgICAgYWN0aW9uOiBQUk9EVUNUX0VYUEVSSUVOQ0UuQVBQTElDQVRJT05TLkFDVElPTlMuQ0hBTkdFX1BMVUdJTl9WRVJTSU9OLFxuICAgICAgICByZXN1bHQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuUkVTVUxUUy5QTFVHSU5fVkVSU0lPTl9DSEFOR0VELFxuICAgICAgICB1cmw6IHRoaXMuQ1VSUkVOVF9MT0NBVElPTlxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGUpO1xuICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudChQUk9EVUNUX0VYUEVSSUVOQ0UuQVBQTElDQVRJT05TLkVWRU5UUy5JTlNUQUxMRURfUExVR0lOUywge1xuICAgICAgICBjb21wb25lbnQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuQ09NUE9ORU5UUy5VUERBVEVfUExVR0lOX09GX0FQUCxcbiAgICAgICAgYWN0aW9uOiBQUk9EVUNUX0VYUEVSSUVOQ0UuQVBQTElDQVRJT05TLkFDVElPTlMuQ0hBTkdFX1BMVUdJTl9WRVJTSU9OLFxuICAgICAgICByZXN1bHQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5BUFBMSUNBVElPTlMuUkVTVUxUUy5TRVJWRVJfRkFJTFVSRSxcbiAgICAgICAgdXJsOiB0aGlzLkNVUlJFTlRfTE9DQVRJT05cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuYnNNb2RhbFJlZi5oaWRlKCk7XG4gICAgdGhpcy5faW5zdGFsbCgpO1xuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuYnNNb2RhbFJlZi5oaWRlKCk7XG4gICAgdGhpcy5fY2FuY2VsKCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJ2aWV3cG9ydC1tb2RhbFwiPlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyIGRpYWxvZy1oZWFkZXJcIj5cbiAgICA8aSBbYzh5SWNvbl09XCInYzh5LW1vZHVsZXMnXCI+PC9pPlxuICAgIDxoNCAqbmdJZj1cIiFkb3duZ3JhZGVcIiBpZD1cIm1vZGFsLXRpdGxlXCIgdHJhbnNsYXRlPlVwZGF0ZSBwbHVnaW48L2g0PlxuICAgIDxoNCAqbmdJZj1cImRvd25ncmFkZVwiIGlkPVwibW9kYWwtdGl0bGVcIiB0cmFuc2xhdGU+RG93bmdyYWRlIHBsdWdpbjwvaDQ+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiaW5uZXItc2Nyb2xsXCIgaWQ9XCJtb2RhbC1ib2R5XCI+XG4gICAgPGRpdiBjbGFzcz1cInAtMTZcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkLWJsb2NrIGZpdC13IGJnLWdyYXktd2hpdGVcIj5cbiAgICAgICAgPGM4eS1wYWNrYWdlLXZlcnNpb24tc2VsZWN0XG4gICAgICAgICAgW3BhY2thZ2VDb250ZXh0UGF0aF09XCJwbHVnaW4/LmNvbnRleHRQYXRoXCJcbiAgICAgICAgICBbKG5nTW9kZWwpXT1cImFwcGxpY2F0aW9uVmVyc2lvblwiXG4gICAgICAgID48L2M4eS1wYWNrYWdlLXZlcnNpb24tc2VsZWN0PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgKm5nSWY9XCJwbHVnaW4/LnZlcnNpb24gJiYgcGx1Z2luLnZlcnNpb24gPT09IGFwcGxpY2F0aW9uVmVyc2lvbj8udmVyc2lvblwiXG4gICAgICAgICAgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCJcbiAgICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gdHJhbnNsYXRlIG5nTm9uQmluZGFibGUgW3RyYW5zbGF0ZVBhcmFtc109XCJhcHBsaWNhdGlvblZlcnNpb25cIj5cbiAgICAgICAgICAgIFNlbGVjdCBhbm90aGVyIHZlcnNpb24sIGFzIHt7IHZlcnNpb24gfX0gaXMgY3VycmVudGx5IHVzZWQuXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjOHktY2hlY2tib3hcIj5cbiAgICAgICAgICA8aW5wdXQgWyhuZ01vZGVsKV09XCJ1cGRhdGVBbGxcIiB0eXBlPVwiY2hlY2tib3hcIiAvPlxuICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiB0cmFuc2xhdGUgbmdOb25CaW5kYWJsZSBbdHJhbnNsYXRlUGFyYW1zXT1cInBsdWdpblwiPlxuICAgICAgICAgICAgU2V0IHZlcnNpb24gZm9yIGFsbCBwbHVnaW5zIHVzaW5nIHRoZSBzYW1lIGNvbnRleHQgcGF0aCBcInt7IGNvbnRleHRQYXRoIH19XCIuXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIlxuICAgICAgdGl0bGU9XCJ7eyAnQ2FuY2VsJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIChjbGljayk9XCJjYW5jZWwoKVwiXG4gICAgPlxuICAgICAge3sgJ0NhbmNlbCcgfCB0cmFuc2xhdGUgfX1cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICB0aXRsZT1cInt7ICdTZXQgdmVyc2lvbicgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgW2Rpc2FibGVkXT1cIiFhcHBsaWNhdGlvblZlcnNpb24gfHwgcGx1Z2luPy52ZXJzaW9uID09PSBhcHBsaWNhdGlvblZlcnNpb24/LnZlcnNpb25cIlxuICAgICAgKGNsaWNrKT1cInVwZGF0ZSgpXCJcbiAgICA+XG4gICAgICB7eyAnU2V0IHZlcnNpb24nIHwgdHJhbnNsYXRlIH19XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=
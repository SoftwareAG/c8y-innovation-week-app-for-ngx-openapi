import { Component, Input, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AlertService, ApplicationPluginStatus, DataGridComponent, GainsightService, PluginsService, gettext } from '@c8y/ngx-components';
import { EcosystemService, PRODUCT_EXPERIENCE } from '@c8y/ngx-components/ecosystem/shared';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { InstallPluginComponent } from './install-plugin.component';
import { LabelCellRendererComponent } from './label-cell-renderer.component';
import { OrphanedStatusCellRendererComponent } from './orphaned-status-cell-renderer.component';
import { UpdatePluginOfAppComponent } from './update-plugin-of-app/update-plugin-of-app.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/ngx-components/ecosystem/shared";
import * as i3 from "ngx-bootstrap/modal";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@angular/common";
export class ApplicationPluginsComponent {
    constructor(activatedRoute, ecosystemService, bsModalService, pluginsService, alertService, gainsightService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.gainsightService = gainsightService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.CURRENT_LOCATION = location.href;
        this.exportedPlugins$ = new BehaviorSubject([]);
        this.remotePlugins$ = new BehaviorSubject({});
        this.allAvailablePlugins$ = new BehaviorSubject([]);
        this.installedPlugins$ = combineLatest([
            this.remotePlugins$.pipe(map(remotes => this.convertInstalledRemotesToIds(remotes))),
            this.allAvailablePlugins$
        ]).pipe(map(([remotePlugins, allPlugins]) => this.getInstalledPlugins(allPlugins, remotePlugins)), shareReplay(1));
        this.orphanedPlugins$ = this.installedPlugins$.pipe(map(plugins => plugins.filter(p => p.status === ApplicationPluginStatus.ORPHANED)));
        this.title = gettext('Installed plugins');
        this.loadMoreItemsLabel = gettext('Load more packages');
        this.loadingItemsLabel = gettext('Loading packagesâ€¦');
        this.actionControls = this.getActionControls();
        this.bulkActionControls = this.getBulkActionControls();
        this.headerActionControls = [];
        this.pagination = {
            pageSize: 10,
            currentPage: 1
        };
        this.displayOptions = {
            bordered: false,
            striped: true,
            filter: true,
            gridHeader: true
        };
        this.columns = [
            {
                name: 'name',
                header: gettext('Plugin name'),
                path: 'name',
                filterable: true
            },
            {
                name: 'Version',
                header: gettext('Version'),
                path: 'displayVersion',
                filterable: false
            },
            {
                name: 'description',
                header: gettext('Description'),
                path: 'description',
                filterable: false,
                cellCSSClassName: 'small'
            },
            {
                name: 'contextPath',
                header: gettext('Source'),
                path: 'contextPath',
                filterable: false,
                cellRendererComponent: LabelCellRendererComponent
            },
            {
                name: 'status',
                header: gettext('Status'),
                path: 'status',
                filterable: false,
                cellRendererComponent: OrphanedStatusCellRendererComponent
            }
        ];
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.addInstallButtonToHeaderActionControls();
        this.loadData();
    }
    async loadData() {
        this.isLoading = true;
        await this.getApplicationMO();
        await this.getApplicationMFExports(this.app);
        await this.getApplicationMFRemotes(this.app);
        await this.getAllApplicationsMFExports();
        this.isLoading = false;
    }
    async installPlugins() {
        try {
            const pluginsToAdd = await this.bsModalService.show(InstallPluginComponent, {
                class: 'modal-sm',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState: this.getInstallModalInitState(),
                ignoreBackdropClick: true
            }).content.result;
            const licensesVerifiedByUser = await this.ecosystemService.verifyLicenses(pluginsToAdd);
            if (!licensesVerifiedByUser) {
                return;
            }
            const verifyVersionCompatibility = await this.ecosystemService.verifyPluginVersionsCompatibility(pluginsToAdd, this.app);
            if (!verifyVersionCompatibility) {
                return;
            }
            this.isLoading = true;
            await this.handleRemotesInstallation(pluginsToAdd);
            this.alertService.success(gettext('Plugins installed.'));
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_INSTALLED,
                url: this.CURRENT_LOCATION
            });
        }
        catch (ex) {
            if (ex) {
                this.alertService.addServerFailure(ex);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                    url: this.CURRENT_LOCATION
                });
            }
        }
        finally {
            this.isLoading = false;
        }
    }
    async removePlugins(plugins) {
        try {
            this.isLoading = true;
            const updatedRemotes = await this.pluginsService.removeRemotes(this.app, plugins.map(id => ({ id })));
            this.emitRemotes(updatedRemotes);
            this.isLoading = false;
            this.dataGrid.cancel();
            this.alertService.success(gettext('Plugins removed.'));
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_REMOVED,
                url: this.CURRENT_LOCATION
            });
        }
        catch (ex) {
            if (ex) {
                this.alertService.addServerFailure(ex);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                    url: this.CURRENT_LOCATION
                });
            }
        }
        finally {
            this.isLoading = false;
        }
    }
    async cleanupOrphanedPlugins(plugins) {
        const pluginIds = plugins.map(p => p.id);
        await this.removePlugins(pluginIds);
    }
    getActionControls() {
        return [
            {
                type: 'customUpdate',
                text: gettext('Update'),
                icon: 'caret-square-o-up',
                showIf: plugin => {
                    return (plugin.status === ApplicationPluginStatus.OUTDATED ||
                        plugin.status === ApplicationPluginStatus.REVOKED);
                },
                callback: plugin => this.updatePlugin(this.app, plugin)
            },
            {
                type: 'customDowngrade',
                text: gettext('Downgrade'),
                icon: 'caret-square-o-down',
                showIf: plugin => {
                    return plugin.status === ApplicationPluginStatus.LATEST;
                },
                callback: plugin => this.updatePlugin(this.app, plugin, true)
            }
        ];
    }
    getBulkActionControls() {
        return [
            {
                type: 'customDelete',
                text: gettext('Remove'),
                icon: 'trash',
                callback: plugins => this.removePlugins(plugins)
            }
        ];
    }
    async updatePlugin(app, plugin, downgrade = false) {
        try {
            await this.bsModalService.show(UpdatePluginOfAppComponent, {
                class: 'modal-sm',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState: {
                    app,
                    plugin,
                    downgrade
                },
                ignoreBackdropClick: true
            }).content.result;
            this.refresh();
        }
        catch (er) {
            return;
        }
    }
    refresh() {
        this.loadData();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    addInstallButtonToHeaderActionControls() {
        if (this.appId) {
            this.headerActionControls = [
                {
                    text: gettext('Install plugins'),
                    callback: () => {
                        this.installPlugins();
                    },
                    icon: 'plus-circle',
                    type: 'custom'
                }
            ];
        }
    }
    async handleRemotesInstallation(plugins) {
        // When remotes object is not set in the configuration object of an application.
        // Fallback to setInitialRemotes is triggered.
        let updatedRemotes = await this.pluginsService.addRemotes(this.app, plugins);
        if (!updatedRemotes) {
            // TODO discuss if we need to handle it like that.
            // Right now remotes from the cumulocity.json are taken into account when remotes object is missing in the configuration.
            updatedRemotes = await this.pluginsService.setInitialRemotes(this.app);
            // Fresh application MO is needed, after initial state was set.
            await this.getApplicationMO();
            updatedRemotes = await this.pluginsService.addRemotes(this.app, plugins);
        }
        return this.emitRemotes(updatedRemotes);
    }
    emitRemotes(updatedRemotes) {
        this.remotePlugins$.next(updatedRemotes);
        this.app.config.remotes = updatedRemotes;
        return { ...this.remotePlugins$.value };
    }
    async getApplicationMO() {
        let id = this.appId;
        if (!id) {
            const { id: routeId } = this.activatedRoute.snapshot.parent.data.contextData;
            id = routeId;
        }
        try {
            this.app = await this.ecosystemService.getApplication(id);
        }
        catch (er) {
            if (er) {
                this.alertService.addServerFailure(er);
            }
        }
        return this.app;
    }
    async getApplicationMFExports(app) {
        const exports = this.pluginsService.getMFExports(app);
        this.exportedPlugins$.next(exports);
    }
    async getApplicationMFRemotes(app) {
        let appConfigRemotes = this.pluginsService.getMFRemotes(app);
        if (!appConfigRemotes) {
            appConfigRemotes = await this.pluginsService.setInitialRemotes(app);
            this.app = await this.getApplicationMO();
        }
        this.remotePlugins$.next(appConfigRemotes || {});
    }
    async getAllApplicationsMFExports() {
        const allAppsMFExports = await this.pluginsService.getAllMFExports(true);
        this.allAvailablePlugins$.next(allAppsMFExports);
    }
    getInstallModalInitState() {
        return {
            plugins$: combineLatest([
                this.allAvailablePlugins$,
                this.installedPlugins$.pipe(map(plugins => plugins.map(p => p.id))),
                this.exportedPlugins$.pipe(map(plugins => plugins.map(p => p.id)))
            ]).pipe(map(([allPlugins, installedPlugins, exportedPluginNames]) => {
                const plugins = [];
                allPlugins
                    .filter(p => !exportedPluginNames.includes(p.id))
                    .map(p => plugins.push({ ...p, installed: !!installedPlugins.includes(p.id) }));
                return plugins;
            }), shareReplay(1))
        };
    }
    convertInstalledRemotesToIds(remotes) {
        if (!remotes) {
            return;
        }
        const importContextPaths = Object.keys(remotes);
        const plugins = [];
        importContextPaths.forEach(contextPath => {
            const moduleNames = remotes[contextPath];
            plugins.push(...moduleNames.map(module => this.createId(contextPath, module)));
        });
        return plugins;
    }
    createId(contextPath, pluginModuleName) {
        return `${contextPath}/${pluginModuleName}`;
    }
    getOrphanedPlugins(orphanedPluginIds, allPlugins) {
        const orphanedPlugins = orphanedPluginIds.map(p => this.extractDetails(p));
        const orphanedPluginsUpdated = orphanedPlugins.map(p => {
            const pluginInDifferentVersion = allPlugins.find(tmp => tmp.contextPath === p.contextPath && tmp.module === p.module);
            if (pluginInDifferentVersion) {
                return {
                    ...pluginInDifferentVersion,
                    version: p.version || pluginInDifferentVersion.version,
                    id: p.id,
                    status: p.version ? ApplicationPluginStatus.OUTDATED : ApplicationPluginStatus.LATEST
                };
            }
            return p;
        });
        return orphanedPluginsUpdated;
    }
    splitOrphanedPluginsIntoOrphanedAndRevokedPlugins(allPlugins, orphanedPlugins) {
        const revokedPlugins = new Array();
        const actuallyOrphanedPlugins = new Array();
        for (const plugin of orphanedPlugins) {
            const foundFamiliarPlugin = allPlugins.find(plugin1 => plugin.contextPath === plugin1.contextPath && plugin.module === plugin1.module);
            if (foundFamiliarPlugin) {
                revokedPlugins.push(Object.assign({}, foundFamiliarPlugin, plugin, {
                    status: ApplicationPluginStatus.REVOKED
                }));
            }
            else {
                actuallyOrphanedPlugins.push(plugin);
            }
        }
        return { revokedPlugins, actuallyOrphanedPlugins };
    }
    getInstalledPlugins(allPlugins, remotePlugins) {
        const availablePlugins = allPlugins
            .filter(plugin => remotePlugins.includes(plugin.id))
            .map(plugin => Object.assign(plugin, {
            status: plugin.tags?.includes('latest')
                ? ApplicationPluginStatus.LATEST
                : ApplicationPluginStatus.OUTDATED
        }));
        const orphanedPluginIds = remotePlugins.filter(r => !availablePlugins.find(plugin => plugin.id === r));
        const orphanedPlugins = this.getOrphanedPlugins(orphanedPluginIds, allPlugins);
        const { actuallyOrphanedPlugins, revokedPlugins } = this.splitOrphanedPluginsIntoOrphanedAndRevokedPlugins(allPlugins, orphanedPlugins);
        return [...availablePlugins, ...revokedPlugins, ...actuallyOrphanedPlugins].map(plugin => ({
            ...plugin,
            // adding 'v' prefix so version string is not treated as date in data grid
            displayVersion: 'v' + plugin.version
        }));
    }
    extractDetails(pluginId) {
        const contextPath = this.getStringMatchingRegex(pluginId, /^[^@]*(@|\/)/);
        const version = this.getStringMatchingRegex(pluginId, /@.*\//);
        const module = this.getStringMatchingRegex(pluginId, /\/.*$/);
        const unavailable = gettext('unavailable`plugin`');
        return {
            id: pluginId,
            path: '',
            module,
            name: module,
            status: ApplicationPluginStatus.ORPHANED,
            contextPath: contextPath,
            description: unavailable,
            version: version
        };
    }
    getStringMatchingRegex(str, regex) {
        const matches = str.match(regex);
        const value = matches ? matches[0] : '';
        return value.replace(/(@|\/)/g, '');
    }
}
ApplicationPluginsComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.EcosystemService }, { token: i3.BsModalService }, { token: i4.PluginsService }, { token: i4.AlertService }, { token: i4.GainsightService }], target: i0.ÉµÉµFactoryTarget.Component });
ApplicationPluginsComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ApplicationPluginsComponent, selector: "c8y-app-plugins", inputs: { appId: "appId" }, viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true }], ngImport: i0, template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications/application'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"installPlugins()\"\n    [ngClass]=\"{ 'btn-pending': isLoading }\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Install plugins' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Install plugins' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<ng-container *ngIf=\"orphanedPlugins$ | async as orphanedPlugins\">\n  <c8y-action-bar-item *ngIf=\"orphanedPlugins?.length\" [placement]=\"'right'\">\n    <button\n      (click)=\"cleanupOrphanedPlugins(orphanedPlugins)\"\n      [ngClass]=\"{ 'btn-pending': isLoading }\"\n      class=\"btn btn-link\"\n      title=\"{{ 'Clean up orphaned plugins' | translate }}\"\n    >\n      <i c8yIcon=\"erase\"></i>\n      {{ 'Clean up orphaned plugins' | translate }}\n    </button>\n  </c8y-action-bar-item>\n</ng-container>\n\n<div class=\"content-fullpage d-flex d-col border-top\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [rows]=\"installedPlugins$ | async\"\n    [pagination]=\"pagination\"\n    [selectable]=\"true\"\n    [actionControls]=\"actionControls\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [headerActionControls]=\"headerActionControls\"\n    (onReload)=\"refresh()\"\n    class=\"d-contents\"\n  >\n    <!-- No search/filtered results empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"(installedPlugins$ | async)?.length\"\n      [icon]=\"'search'\"\n      [title]=\"'No plugins to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    >\n    </c8y-ui-empty-state>\n    <!-- No installed plugins empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"!(installedPlugins$ | async)?.length && !isLoading\"\n      [icon]=\"'plugin'\"\n      [title]=\"'No plugins installed.' | translate\"\n      [subtitle]=\"'This application doesn\\'t have any plugin. Click below to install.' | translate\"\n      [horizontal]=\"true\"\n    >\n      <div class=\"fit-w p-t-16\">\n        <button\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,\n            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGINS,\n            url: CURRENT_LOCATION\n          }\"\n          (click)=\"installPlugins()\"\n          [ngClass]=\"{ 'btn-pending': isLoading }\"\n          class=\"btn btn-primary btn-sm\"\n          title=\"{{ 'Install plugins' | translate }}\"\n          translate\n        >\n          Install plugins\n        </button>\n      </div>\n    </c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n", dependencies: [{ kind: "component", type: i4.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i4.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i4.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "component", type: i4.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "singleSelection", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning", "activeClassName"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "component", type: i4.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i4.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.HumanizeAppNamePipe, name: "humanizeAppName" }] });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-app-plugins', template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications/application'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"installPlugins()\"\n    [ngClass]=\"{ 'btn-pending': isLoading }\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Install plugins' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Install plugins' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<ng-container *ngIf=\"orphanedPlugins$ | async as orphanedPlugins\">\n  <c8y-action-bar-item *ngIf=\"orphanedPlugins?.length\" [placement]=\"'right'\">\n    <button\n      (click)=\"cleanupOrphanedPlugins(orphanedPlugins)\"\n      [ngClass]=\"{ 'btn-pending': isLoading }\"\n      class=\"btn btn-link\"\n      title=\"{{ 'Clean up orphaned plugins' | translate }}\"\n    >\n      <i c8yIcon=\"erase\"></i>\n      {{ 'Clean up orphaned plugins' | translate }}\n    </button>\n  </c8y-action-bar-item>\n</ng-container>\n\n<div class=\"content-fullpage d-flex d-col border-top\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [rows]=\"installedPlugins$ | async\"\n    [pagination]=\"pagination\"\n    [selectable]=\"true\"\n    [actionControls]=\"actionControls\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [headerActionControls]=\"headerActionControls\"\n    (onReload)=\"refresh()\"\n    class=\"d-contents\"\n  >\n    <!-- No search/filtered results empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"(installedPlugins$ | async)?.length\"\n      [icon]=\"'search'\"\n      [title]=\"'No plugins to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    >\n    </c8y-ui-empty-state>\n    <!-- No installed plugins empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"!(installedPlugins$ | async)?.length && !isLoading\"\n      [icon]=\"'plugin'\"\n      [title]=\"'No plugins installed.' | translate\"\n      [subtitle]=\"'This application doesn\\'t have any plugin. Click below to install.' | translate\"\n      [horizontal]=\"true\"\n    >\n      <div class=\"fit-w p-t-16\">\n        <button\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,\n            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGINS,\n            url: CURRENT_LOCATION\n          }\"\n          (click)=\"installPlugins()\"\n          [ngClass]=\"{ 'btn-pending': isLoading }\"\n          class=\"btn btn-primary btn-sm\"\n          title=\"{{ 'Install plugins' | translate }}\"\n          translate\n        >\n          Install plugins\n        </button>\n      </div>\n    </c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.EcosystemService }, { type: i3.BsModalService }, { type: i4.PluginsService }, { type: i4.AlertService }, { type: i4.GainsightService }]; }, propDecorators: { appId: [{
                type: Input
            }], dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
export class ImpactConnectivityService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact/connectivity';
        this.header = { 'Content-Type': 'application/json' };
    }
    getOptions() {
        const options = {
            method: 'GET',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    updateOptions(impactOptions) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(impactOptions)
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
    deleteOptions() {
        const options = {
            method: 'DELETE',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}`, options);
    }
}
ImpactConnectivityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactConnectivityService, deps: [{ token: i1.FetchClient }], target: i0.ɵɵFactoryTarget.Injectable });
ImpactConnectivityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactConnectivityService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactConnectivityService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FetchClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWNvbm5lY3Rpdml0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29ubmVjdGl2aXR5L2ltcGFjdC9pbXBhY3QtY29ubmVjdGl2aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFpQyxNQUFNLGFBQWEsQ0FBQzs7O0FBSXpFLE1BQU0sT0FBTyx5QkFBeUI7SUFJcEMsWUFBb0IsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUh0QixvQkFBZSxHQUFXLDhCQUE4QixDQUFDO1FBQ3pELFdBQU0sR0FBUSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDO0lBRTVCLENBQUM7SUFFM0MsVUFBVTtRQUNSLE1BQU0sT0FBTyxHQUFrQjtZQUM3QixNQUFNLEVBQUUsS0FBSztZQUNiLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNyQixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsYUFBYSxDQUFDLGFBQTRCO1FBQ3hDLE1BQU0sT0FBTyxHQUFrQjtZQUM3QixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7U0FDcEMsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLE9BQU8sR0FBa0I7WUFDN0IsTUFBTSxFQUFFLFFBQVE7WUFDaEIsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3JCLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELENBQUM7O3NIQTdCVSx5QkFBeUI7MEhBQXpCLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQURyQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElGZXRjaE9wdGlvbnMsIElGZXRjaFJlc3BvbnNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgSW1wYWN0T3B0aW9ucyB9IGZyb20gJy4vaW1wYWN0Lm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEltcGFjdENvbm5lY3Rpdml0eVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IG1pY3Jvc2VydmljZVVybDogc3RyaW5nID0gJy9zZXJ2aWNlL2ltcGFjdC9jb25uZWN0aXZpdHknO1xuICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlcjogYW55ID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50KSB7fVxuXG4gIGdldE9wdGlvbnMoKTogUHJvbWlzZTxJRmV0Y2hSZXNwb25zZT4ge1xuICAgIGNvbnN0IG9wdGlvbnM6IElGZXRjaE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5mZXRjaChgJHt0aGlzLm1pY3Jvc2VydmljZVVybH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIHVwZGF0ZU9wdGlvbnMoaW1wYWN0T3B0aW9uczogSW1wYWN0T3B0aW9ucyk6IFByb21pc2U8SUZldGNoUmVzcG9uc2U+IHtcbiAgICBjb25zdCBvcHRpb25zOiBJRmV0Y2hPcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGltcGFjdE9wdGlvbnMpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5taWNyb3NlcnZpY2VVcmx9YCwgb3B0aW9ucyk7XG4gIH1cblxuICBkZWxldGVPcHRpb25zKCk6IFByb21pc2U8SUZldGNoUmVzcG9uc2U+IHtcbiAgICBjb25zdCBvcHRpb25zOiBJRmV0Y2hPcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2goYCR7dGhpcy5taWNyb3NlcnZpY2VVcmx9YCwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==
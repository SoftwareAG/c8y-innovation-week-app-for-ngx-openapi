import { Injectable } from '@angular/core';
import { gettext, NavigatorNode, toObservable } from '@c8y/ngx-components';
import { map } from 'rxjs/operators';
import { AbstractConnectivityTabFactory } from './abstract-connectivity-tab.factory';
import * as i0 from "@angular/core";
import * as i1 from "./abstract-connectivity-tab.factory";
export class AbstractConnectivityNodeFactory {
    constructor(tabFactory) {
        this.tabFactory = tabFactory;
        this.connectivityNode = new NavigatorNode({
            parent: gettext('Settings'),
            label: gettext('Connectivity'),
            path: 'connectivitySettings',
            icon: 'plug',
            preventDuplicates: true
        });
    }
    get() {
        return toObservable(this.tabFactory.tab()).pipe(map(tab => {
            return !!tab ? [this.connectivityNode] : [];
        }));
    }
}
AbstractConnectivityNodeFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AbstractConnectivityNodeFactory, deps: [{ token: i1.AbstractConnectivityTabFactory }], target: i0.ɵɵFactoryTarget.Injectable });
AbstractConnectivityNodeFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AbstractConnectivityNodeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AbstractConnectivityNodeFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AbstractConnectivityTabFactory }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29ubmVjdGl2aXR5LW5vZGUuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Nvbm5lY3Rpdml0eS9hYnN0cmFjdC1jb25uZWN0aXZpdHktbm9kZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQXdCLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7O0FBR3JGLE1BQU0sT0FBZ0IsK0JBQStCO0lBU25ELFlBQXNCLFVBQTBDO1FBQTFDLGVBQVUsR0FBVixVQUFVLENBQWdDO1FBUjdDLHFCQUFnQixHQUFrQixJQUFJLGFBQWEsQ0FBQztZQUNyRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUMzQixLQUFLLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUM5QixJQUFJLEVBQUUsc0JBQXNCO1lBQzVCLElBQUksRUFBRSxNQUFNO1lBQ1osaUJBQWlCLEVBQUUsSUFBSTtTQUN4QixDQUFDLENBQUM7SUFFZ0UsQ0FBQztJQUVwRSxHQUFHO1FBQ0QsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1IsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OzRIQWpCbUIsK0JBQStCO2dJQUEvQiwrQkFBK0I7MkZBQS9CLCtCQUErQjtrQkFEcEQsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvck5vZGVGYWN0b3J5LCB0b09ic2VydmFibGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFic3RyYWN0Q29ubmVjdGl2aXR5VGFiRmFjdG9yeSB9IGZyb20gJy4vYWJzdHJhY3QtY29ubmVjdGl2aXR5LXRhYi5mYWN0b3J5JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q29ubmVjdGl2aXR5Tm9kZUZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBjb25uZWN0aXZpdHlOb2RlOiBOYXZpZ2F0b3JOb2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgIHBhcmVudDogZ2V0dGV4dCgnU2V0dGluZ3MnKSxcbiAgICBsYWJlbDogZ2V0dGV4dCgnQ29ubmVjdGl2aXR5JyksXG4gICAgcGF0aDogJ2Nvbm5lY3Rpdml0eVNldHRpbmdzJyxcbiAgICBpY29uOiAncGx1ZycsXG4gICAgcHJldmVudER1cGxpY2F0ZXM6IHRydWVcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHRhYkZhY3Rvcnk6IEFic3RyYWN0Q29ubmVjdGl2aXR5VGFiRmFjdG9yeSkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRvT2JzZXJ2YWJsZSh0aGlzLnRhYkZhY3RvcnkudGFiKCkpLnBpcGUoXG4gICAgICBtYXAodGFiID0+IHtcbiAgICAgICAgcmV0dXJuICEhdGFiID8gW3RoaXMuY29ubmVjdGl2aXR5Tm9kZV0gOiBbXTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19
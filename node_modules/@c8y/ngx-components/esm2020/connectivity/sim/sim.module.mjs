import { NgModule } from '@angular/core';
import { gettext, hookPatternMessages, ProviderConfigurationModule } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { MESSAGES } from './pattern-messages.data';
import { SimGuard } from './sim.guard';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export async function encodeFiles(model, fields) {
    const result = { ...model };
    const fileFields = (get(fields, '[0].fieldGroup') || []).filter((field) => {
        return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';
    });
    for (const fileField of fileFields) {
        const files = model[fileField.key];
        if (files && Array.isArray(files) && files.length) {
            if (fileField.templateOptions.maxAllowedFiles === 1) {
                result[fileField.key] = (await files[0].readAsDataURL()).replace(/data:\S+;base64,/gi, '');
            }
            else {
                const encodedFileContent = [];
                for (const file of files) {
                    encodedFileContent.push((await file.readAsDataURL()).replace(/data:\S+;base64,/gi, ''));
                }
                result[fileField.key] = encodedFileContent;
            }
        }
        else if (typeof files === 'string' || files instanceof String) {
            result[fileField.key] = files;
        }
    }
    return result;
}
export class SimModule {
}
SimModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SimModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: SimModule, imports: [i1.ProviderConfigurationModule] });
SimModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimModule, providers: [SimGuard, hookPatternMessages(MESSAGES)], imports: [ProviderConfigurationModule.config([
            {
                navigation: {
                    label: gettext('Connectivity'),
                    path: 'connectivitySettings',
                    icon: 'plug',
                    parent: gettext('Settings'),
                    priority: 1000,
                    preventDuplicates: true
                },
                tab: {
                    path: 'sim_provider_settings',
                    label: 'SIM provider settings',
                    icon: 'mobile',
                    canActivate: [SimGuard]
                },
                layout: {
                    pageTitle: gettext('Connectivity'),
                    cardTitle: gettext('Settings'),
                    description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                    providerName: gettext('Provider'),
                    providerNamePlaceholder: gettext('Select or type to filter providers'),
                    providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                    deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                    deleteBtnLabel: gettext('Delete'),
                    saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                    saveBtnLabel: gettext('Save'),
                    beforeSaveHook: encodeFiles,
                    configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                    deleteConfigurationModalTitle: gettext('Delete settings'),
                    deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                    deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                    configurationDeletedSuccessMsg: gettext('Settings deleted.')
                },
                endpoint: {
                    definitionsEndpoint: {
                        baseUrl: 'service/connectivity/metadata',
                        listUrl: 'definitions'
                    },
                    configurationEndpoint: {
                        baseUrl: 'service/connectivity/metadata',
                        listUrl: 'sim/provider'
                    }
                }
            }
        ])] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [SimGuard, hookPatternMessages(MESSAGES)],
                    imports: [
                        ProviderConfigurationModule.config([
                            {
                                navigation: {
                                    label: gettext('Connectivity'),
                                    path: 'connectivitySettings',
                                    icon: 'plug',
                                    parent: gettext('Settings'),
                                    priority: 1000,
                                    preventDuplicates: true
                                },
                                tab: {
                                    path: 'sim_provider_settings',
                                    label: 'SIM provider settings',
                                    icon: 'mobile',
                                    canActivate: [SimGuard]
                                },
                                layout: {
                                    pageTitle: gettext('Connectivity'),
                                    cardTitle: gettext('Settings'),
                                    description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                                    providerName: gettext('Provider'),
                                    providerNamePlaceholder: gettext('Select or type to filter providers'),
                                    providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                                    deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                    deleteBtnLabel: gettext('Delete'),
                                    saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                                    saveBtnLabel: gettext('Save'),
                                    beforeSaveHook: encodeFiles,
                                    configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                                    deleteConfigurationModalTitle: gettext('Delete settings'),
                                    deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                                    deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                                    configurationDeletedSuccessMsg: gettext('Settings deleted.')
                                },
                                endpoint: {
                                    definitionsEndpoint: {
                                        baseUrl: 'service/connectivity/metadata',
                                        listUrl: 'definitions'
                                    },
                                    configurationEndpoint: {
                                        baseUrl: 'service/connectivity/metadata',
                                        listUrl: 'sim/provider'
                                    }
                                }
                            }
                        ])
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
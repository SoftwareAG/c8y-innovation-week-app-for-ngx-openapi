import { Injectable } from '@angular/core';
import { AppStateService } from '@c8y/ngx-components';
import { Permissions } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class SimGuard {
    constructor(permissions, appState) {
        this.permissions = permissions;
        this.appState = appState;
    }
    canActivate() {
        if (this.showSimProvider === undefined) {
            const hasRole = Promise.resolve(this.permissions.hasRole('ROLE_CONNECTIVITY_READ'));
            this.showSimProvider = hasRole.then((hasPermissions) => hasPermissions && this.appState.isApplicationAvailable(SimGuard.applicationName));
        }
        return this.showSimProvider;
    }
}
SimGuard.applicationName = 'connectivity';
SimGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimGuard, deps: [{ token: i1.Permissions }, { token: i1.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
SimGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SimGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Permissions }, { type: i1.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29ubmVjdGl2aXR5L3NpbS9zaW0uZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFHbEQsTUFBTSxPQUFPLFFBQVE7SUFJbkIsWUFBb0IsV0FBd0IsRUFBVSxRQUF5QjtRQUEzRCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQUcsQ0FBQztJQUVuRixXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUN0QyxNQUFNLE9BQU8sR0FBcUIsT0FBTyxDQUFDLE9BQU8sQ0FDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FDbkQsQ0FBQztZQUVGLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FDakMsQ0FBQyxjQUF1QixFQUFFLEVBQUUsQ0FDMUIsY0FBYyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUNuRixDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQzs7QUFsQnVCLHdCQUFlLEdBQUcsY0FBYyxDQUFDO3FHQUQ5QyxRQUFRO3lHQUFSLFFBQVE7MkZBQVIsUUFBUTtrQkFEcEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpbUd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhcHBsaWNhdGlvbk5hbWUgPSAnY29ubmVjdGl2aXR5JztcbiAgcHJpdmF0ZSBzaG93U2ltUHJvdmlkZXI6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnMsIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSkge31cblxuICBjYW5BY3RpdmF0ZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAodGhpcy5zaG93U2ltUHJvdmlkZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgaGFzUm9sZTogUHJvbWlzZTxib29sZWFuPiA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucy5oYXNSb2xlKCdST0xFX0NPTk5FQ1RJVklUWV9SRUFEJylcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuc2hvd1NpbVByb3ZpZGVyID0gaGFzUm9sZS50aGVuKFxuICAgICAgICAoaGFzUGVybWlzc2lvbnM6IGJvb2xlYW4pID0+XG4gICAgICAgICAgaGFzUGVybWlzc2lvbnMgJiYgdGhpcy5hcHBTdGF0ZS5pc0FwcGxpY2F0aW9uQXZhaWxhYmxlKFNpbUd1YXJkLmFwcGxpY2F0aW9uTmFtZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2hvd1NpbVByb3ZpZGVyO1xuICB9XG59XG4iXX0=
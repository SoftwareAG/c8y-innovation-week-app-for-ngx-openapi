import { Injectable } from '@angular/core';
import { FetchClient, InventoryService, TenantOptionsService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { AppStateService, gettext } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/ngx-components";
export var ErrorName;
(function (ErrorName) {
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["ConnectivitySettingsError"] = "ConnectivitySettingsError";
    ErrorName["ContractError"] = "ContractError";
    ErrorName["NoContractsError"] = "NoContractsError";
    ErrorName["RegistrationError"] = "RegistrationError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
})(ErrorName || (ErrorName = {}));
export class SigfoxProviderService {
    constructor(client, inventoryService, tenantOptions, translateService, appState) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.tenantOptions = tenantOptions;
        this.translateService = translateService;
        this.appState = appState;
        this.baseUrl = '/service/sigfox-agent/';
        this.registrationUrl = `${this.baseUrl}newDeviceRequest`;
        this.contractsUrl = `${this.baseUrl}contract`;
        this.header = { 'Content-Type': 'application/json' };
    }
    async getConnections() {
        const options = {
            method: 'GET',
            headers: this.header
        };
        const res = await this.client.fetch(`${this.baseUrl}lns-connection`, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                await this.throwNoConnectivitySettingsError();
            }
        }
        else {
            await this.throwConnectivitySettingsError(data);
        }
        return { res, data };
    }
    /**
     * Gets contracts from Sigfox platform.
     * @param connectionName The name of connection for which contracts will be retrieved
     * @returns The result list with contract, or throws an error with exception.
     */
    async getContracts(connectionName) {
        const options = {
            method: 'GET',
            headers: this.header,
            params: {
                sigfoxConnectionName: connectionName
            }
        };
        const res = await this.client.fetch(this.contractsUrl, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoContractsError();
            }
        }
        else {
            this.throwContractError(data);
        }
        return { res, data };
    }
    async createDevice(device) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(device)
        };
        const res = await this.client.fetch(this.registrationUrl, options);
        const data = await res.json();
        if (res.status !== 201) {
            this.throwRegistrationError(data);
        }
        return { res, data };
    }
    async getAvailableProtocols(filter = { withTotalPages: true }) {
        const query = {
            __filter: {
                __and: [
                    { __has: 'c8y_IsDeviceType' },
                    {
                        type: { __in: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'] }
                    }
                ]
            },
            __orderby: [{ name: 1 }]
        };
        const deviceProtocolsList = await this.inventoryService.listQuery(query, filter);
        const { res, data } = deviceProtocolsList;
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoDeviceProtocolsError();
            }
        }
        else {
            this.throwDeviceProtocolsFetchError();
        }
        return deviceProtocolsList;
    }
    async hasConnectivitySettings() {
        const option = {
            category: 'sigfox-agent',
            key: 'provider.token'
        };
        try {
            await this.tenantOptions.detail(option);
            return true;
        }
        catch (e) {
            await this.throwNoConnectivitySettingsError();
        }
    }
    async throwNoConnectivitySettingsError() {
        const error = new Error();
        error.name = ErrorName.NoConnectivitySettingsError;
        const hasAdminRight = await this.appState.isApplicationAvailable('administration');
        if (hasAdminRight) {
            error.message = this.translateService.instant(gettext(`Connectivity settings are not configured. Configure them in the Administration application under <a href="{{ link }}">Settings</a>.`), {
                link: '/apps/administration/index.html#/connectivitySettings/sigfox_provider_settings'
            });
        }
        else {
            error.message = gettext('Connectivity settings are not configured. Contact the administrator.');
        }
        throw error;
    }
    throwConnectivitySettingsError(data) {
        const error = new Error();
        error.name = ErrorName.ConnectivitySettingsError;
        error.message = data.message;
        throw error;
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a Sigfox device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwContractError(data) {
        const error = new Error();
        error.name = ErrorName.ContractError;
        error.message = data.message;
        throw error;
    }
    throwNoContractsError() {
        const error = new Error();
        error.name = ErrorName.NoContractsError;
        error.message = gettext('No contracts found. New contracts must be created via the Sigfox platform.');
        throw error;
    }
}
SigfoxProviderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SigfoxProviderService, deps: [{ token: i1.FetchClient }, { token: i1.InventoryService }, { token: i1.TenantOptionsService }, { token: i2.TranslateService }, { token: i3.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
SigfoxProviderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SigfoxProviderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SigfoxProviderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i1.InventoryService }, { type: i1.TenantOptionsService }, { type: i2.TranslateService }, { type: i3.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
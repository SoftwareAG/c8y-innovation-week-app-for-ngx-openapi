import { Injectable } from '@angular/core';
import { AppStateService } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { RefreshActionComponent } from './refresh-action.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class ImpactActionFactory {
    constructor(appState) {
        this.appState = appState;
    }
    async get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
        const showRefreshActionButton = isDeviceInfoTab &&
            contextData &&
            contextData.c8y_ImpactResourceInfo &&
            /* call application service only for relevant devices to reduce number of service calls! */
            (await this.appState.isApplicationAvailable(ImpactActionFactory.applicationName));
        if (showRefreshActionButton) {
            actions.push({
                priority: 500,
                placement: 'right',
                component: RefreshActionComponent
            });
        }
        return actions;
    }
}
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory, deps: [{ token: i1.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
ImpactActionFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWFjdGlvbi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtaW1wYWN0L2ltcGFjdC1hY3Rpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBbUMsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkYsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBR3BFLE1BQU0sT0FBTyxtQkFBbUI7SUFHOUIsWUFBb0IsUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7SUFBRyxDQUFDO0lBRWpELEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBNEI7UUFDcEMsTUFBTSxPQUFPLEdBQW9CLEVBQUUsQ0FBQztRQUVwQyxNQUFNLElBQUksR0FDUixDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTztZQUN0RCxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQzNCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkMsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUU3QixNQUFNLGVBQWUsR0FBWSxHQUFHLENBQUMsV0FBVyxFQUFFLHNCQUFzQixDQUFDLEtBQUssYUFBYSxDQUFDO1FBRTVGLE1BQU0sdUJBQXVCLEdBQzNCLGVBQWU7WUFDZixXQUFXO1lBQ1gsV0FBVyxDQUFDLHNCQUFzQjtZQUNsQywyRkFBMkY7WUFDM0YsQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUVwRixJQUFJLHVCQUF1QixFQUFFO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsU0FBUyxFQUFFLE9BQU87Z0JBQ2xCLFNBQVMsRUFBRSxzQkFBc0I7YUFDbEMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztBQS9CdUIsbUNBQWUsR0FBRyxRQUFRLENBQUM7Z0hBRHhDLG1CQUFtQjtvSEFBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBY3Rpb25CYXJGYWN0b3J5LCBBY3Rpb25CYXJJdGVtLCBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9yZWZyZXNoLWFjdGlvbi5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1wYWN0QWN0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhcHBsaWNhdGlvbk5hbWUgPSAnaW1wYWN0JztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2UpIHt9XG5cbiAgYXN5bmMgZ2V0KGFjdGl2ZVJvdXRlPzogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCBhY3Rpb25zOiBBY3Rpb25CYXJJdGVtW10gPSBbXTtcblxuICAgIGNvbnN0IGRhdGEgPVxuICAgICAgIWFjdGl2ZVJvdXRlLnBhcmVudCB8fCBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZlUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG4gICAgY29uc3QgeyBjb250ZXh0RGF0YSB9ID0gZGF0YTtcblxuICAgIGNvbnN0IGlzRGV2aWNlSW5mb1RhYjogYm9vbGVhbiA9IGdldChhY3RpdmVSb3V0ZSwgJ3NuYXBzaG90LnVybFswXS5wYXRoJykgPT09ICdkZXZpY2UtaW5mbyc7XG5cbiAgICBjb25zdCBzaG93UmVmcmVzaEFjdGlvbkJ1dHRvbjogYm9vbGVhbiA9XG4gICAgICBpc0RldmljZUluZm9UYWIgJiZcbiAgICAgIGNvbnRleHREYXRhICYmXG4gICAgICBjb250ZXh0RGF0YS5jOHlfSW1wYWN0UmVzb3VyY2VJbmZvICYmXG4gICAgICAvKiBjYWxsIGFwcGxpY2F0aW9uIHNlcnZpY2Ugb25seSBmb3IgcmVsZXZhbnQgZGV2aWNlcyB0byByZWR1Y2UgbnVtYmVyIG9mIHNlcnZpY2UgY2FsbHMhICovXG4gICAgICAoYXdhaXQgdGhpcy5hcHBTdGF0ZS5pc0FwcGxpY2F0aW9uQXZhaWxhYmxlKEltcGFjdEFjdGlvbkZhY3RvcnkuYXBwbGljYXRpb25OYW1lKSk7XG5cbiAgICBpZiAoc2hvd1JlZnJlc2hBY3Rpb25CdXR0b24pIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiA1MDAsXG4gICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICAgICAgY29tcG9uZW50OiBSZWZyZXNoQWN0aW9uQ29tcG9uZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxufVxuIl19
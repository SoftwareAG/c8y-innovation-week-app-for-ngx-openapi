import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService, gettext } from '@c8y/ngx-components';
import { ImpactSubscriptionService } from './impact-subscription.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./impact-subscription.service";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@angular/common";
export class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    async refresh() {
        // TODO This is only a dirty hack to retrieve deviceId from URL;
        // In fact contextData should be provided for this component by a resolver?
        const url = this.router &&
            this.router.routerState &&
            this.router.routerState.snapshot &&
            this.router.routerState.snapshot.url;
        const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
        if (deviceId) {
            this.requestInProgress = true;
            try {
                const res = await this.impactService.refreshDeviceResources(deviceId);
                if (res && res.status !== 200) {
                    const data = res.json ? await res.json() : undefined;
                    this.alert.addServerFailure({ data, res });
                }
                else {
                    this.alert.success(gettext('Device resource refresh scheduled.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
            this.requestInProgress = false;
        }
        else {
            this.alert.danger(gettext('Could not find device ID in URL.'));
        }
    }
}
RefreshActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RefreshActionComponent, deps: [{ token: i0.ViewContainerRef }, { token: i1.Router }, { token: i2.ImpactSubscriptionService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Component });
RefreshActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: RefreshActionComponent, selector: "c8y-impact-refresh-action", viewQueries: [{ propertyName: "templateCopy", first: true, predicate: ["templateCopy"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RefreshActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-impact-refresh-action', template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.Router }, { type: i2.ImpactSubscriptionService }, { type: i3.AlertService }]; }, propDecorators: { templateCopy: [{
                type: ViewChild,
                args: ['templateCopy', { read: TemplateRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtaW1wYWN0L3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3Byb3RvY29sLWltcGFjdC9yZWZyZXNoLWFjdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7OztBQU0xRSxNQUFNLE9BQU8sc0JBQXNCO0lBSWpDLFlBQ1UsS0FBdUIsRUFDdkIsTUFBYyxFQUNkLGFBQXdDLEVBQ3hDLEtBQW1CO1FBSG5CLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7UUFDeEMsVUFBSyxHQUFMLEtBQUssQ0FBYztJQUMxQixDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNYLGdFQUFnRTtRQUNoRSwyRUFBMkU7UUFDM0UsTUFBTSxHQUFHLEdBQ1AsSUFBSSxDQUFDLE1BQU07WUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUTtZQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sUUFBUSxHQUFXLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvRSxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7WUFDOUIsSUFBSTtnQkFDRixNQUFNLEdBQUcsR0FBbUIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0RixJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtvQkFDN0IsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2lCQUM1QztxQkFBTTtvQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO2lCQUNuRTthQUNGO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7U0FDaEM7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7U0FDaEU7SUFDSCxDQUFDOzttSEExQ1Usc0JBQXNCO3VHQUF0QixzQkFBc0IsMEpBQ0UsV0FBVywyQ0NYaEQsZ1lBY0E7MkZESmEsc0JBQXNCO2tCQUpsQyxTQUFTOytCQUNFLDJCQUEyQjsrTEFJMkIsWUFBWTtzQkFBM0UsU0FBUzt1QkFBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElGZXRjaFJlc3BvbnNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJbXBhY3RTdWJzY3JpcHRpb25TZXJ2aWNlIH0gZnJvbSAnLi9pbXBhY3Qtc3Vic2NyaXB0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktaW1wYWN0LXJlZnJlc2gtYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVDb3B5JywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlQ29weTtcbiAgcmVxdWVzdEluUHJvZ3Jlc3M6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgaW1wYWN0U2VydmljZTogSW1wYWN0U3Vic2NyaXB0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVDb3B5KTtcbiAgfVxuXG4gIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgLy8gVE9ETyBUaGlzIGlzIG9ubHkgYSBkaXJ0eSBoYWNrIHRvIHJldHJpZXZlIGRldmljZUlkIGZyb20gVVJMO1xuICAgIC8vIEluIGZhY3QgY29udGV4dERhdGEgc2hvdWxkIGJlIHByb3ZpZGVkIGZvciB0aGlzIGNvbXBvbmVudCBieSBhIHJlc29sdmVyP1xuICAgIGNvbnN0IHVybDogc3RyaW5nID1cbiAgICAgIHRoaXMucm91dGVyICYmXG4gICAgICB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZSAmJlxuICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QgJiZcbiAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnVybDtcbiAgICBjb25zdCBkZXZpY2VJZDogc3RyaW5nID0gdXJsICYmICgvXlxcL2RldmljZVxcLyhcXGQrKVxcLy4qJC9naS5leGVjKHVybCkgfHwgW10pWzFdO1xuXG4gICAgaWYgKGRldmljZUlkKSB7XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlczogSUZldGNoUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmltcGFjdFNlcnZpY2UucmVmcmVzaERldmljZVJlc291cmNlcyhkZXZpY2VJZCk7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uID8gYXdhaXQgcmVzLmpzb24oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoeyBkYXRhLCByZXMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ0RldmljZSByZXNvdXJjZSByZWZyZXNoIHNjaGVkdWxlZC4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoJ0NvdWxkIG5vdCBmaW5kIGRldmljZSBJRCBpbiBVUkwuJykpO1xuICAgIH1cbiAgfVxufVxuIiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZUNvcHk+XG4gIDxsaT5cbiAgICA8YnV0dG9uXG4gICAgICBjbGFzcz1cImJ0biBidG4tbGlua1wiXG4gICAgICB0aXRsZT1cInt7ICdSZWZyZXNoIGRldmljZSByZXNvdXJjZXMnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgIChjbGljayk9XCJyZWZyZXNoKClcIlxuICAgID5cbiAgICAgIDxpIGM4eUljb249XCJyZWZyZXNoXCIgW25nQ2xhc3NdPVwieyAnaWNvbi1zcGluJzogcmVxdWVzdEluUHJvZ3Jlc3MgfVwiPjwvaT4mbmJzcDs8c3BhblxuICAgICAgICB0cmFuc2xhdGVcbiAgICAgICAgPlJlZnJlc2ggZGV2aWNlIHJlc291cmNlczwvc3BhblxuICAgICAgPlxuICAgIDwvYnV0dG9uPlxuICA8L2xpPlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==
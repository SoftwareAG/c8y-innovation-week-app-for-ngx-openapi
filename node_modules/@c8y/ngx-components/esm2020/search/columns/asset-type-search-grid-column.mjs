import { BaseColumn, getBasicInputArrayFormFieldConfig, gettext, SearchFilters } from '@c8y/ngx-components';
import { AssetTypeCellRendererComponent } from './asset-type.cell-renderer.component';
export class AssetTypeSearchGridColumn extends BaseColumn {
    constructor(hideExtendedFilters, initialColumnConfig, assetSearchService, customPlaceholder) {
        super(initialColumnConfig);
        this.name = 'type';
        this.header = gettext('Type');
        this.dataType = "icon" /* ColumnDataType.Icon */;
        this.cellRendererComponent = AssetTypeCellRendererComponent;
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: `c8y_IsDeviceGroup` }]
        };
        this.filterable = true;
        this.filteringConfig = this.getFilteringConfig(hideExtendedFilters, assetSearchService, customPlaceholder);
    }
    getFilteringConfig(hideExtendedFilters, assetSearchService, customPlaceholder) {
        return {
            fields: [
                ...getBasicInputArrayFormFieldConfig({
                    key: 'types',
                    label: gettext('Show items with type'),
                    addText: gettext('Add next`type`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: customPlaceholder ? customPlaceholder : gettext('building`e.g. house`'),
                    optional: !hideExtendedFilters
                }),
                {
                    key: SearchFilters.ALL_FILTERS,
                    type: 'checkbox',
                    hide: hideExtendedFilters,
                    props: {
                        indeterminate: false,
                        disabled: false,
                        label: gettext('All'),
                        click: (field, clickEvent) => {
                            const { checked } = clickEvent.target;
                            // Handle checked state
                            if (checked) {
                                field.form.get(SearchFilters.ONLY_DEVICES).setValue(true);
                                field.form.get(SearchFilters.ONLY_GROUPS_AND_ASSETS).setValue(true);
                                // Emit new state
                                assetSearchService.appliedFilters$.next({
                                    [SearchFilters.ALL_FILTERS]: checked,
                                    [SearchFilters.ONLY_DEVICES]: true,
                                    [SearchFilters.ONLY_GROUPS_AND_ASSETS]: true
                                });
                            }
                        }
                    },
                    expressionProperties: {
                        'props.indeterminate': (model, formState, field) => {
                            // Do nothing
                            if (field.form.get(SearchFilters.ALL_FILTERS).value === true) {
                                return;
                            }
                            // Set indeterminate state
                            if (!field.form.get(SearchFilters.ONLY_DEVICES).value ||
                                !field.form.get(SearchFilters.ONLY_GROUPS_AND_ASSETS).value) {
                                field.form.get(SearchFilters.ALL_FILTERS).setValue(null);
                                return true;
                            }
                            return false;
                        },
                        'props.disabled': (model, formState, field) => {
                            if (field.form.get(SearchFilters.ALL_FILTERS).value === true) {
                                return true;
                            }
                            return false;
                        }
                    },
                    hooks: {
                        onInit: field => {
                            // Get initial state
                            const { allFilters } = assetSearchService?.appliedFilters$?.value;
                            field.formControl.setValue(allFilters);
                        }
                    }
                },
                {
                    key: SearchFilters.ONLY_DEVICES,
                    type: 'checkbox',
                    hide: hideExtendedFilters,
                    props: {
                        indeterminate: false,
                        label: gettext('Show only devices'),
                        click: (field, clickEvent) => {
                            const oldFilterValue = assetSearchService.appliedFilters$.value;
                            const { checked } = clickEvent.target;
                            // Handle checked state
                            if (checked) {
                                field.form.get(SearchFilters.ALL_FILTERS).setValue(true);
                                // Emit new state
                                assetSearchService.appliedFilters$.next({
                                    ...oldFilterValue,
                                    [SearchFilters.ALL_FILTERS]: true,
                                    [SearchFilters.ONLY_DEVICES]: checked
                                });
                                return;
                            }
                            // Handle unchecked state
                            field.form.get(SearchFilters.ALL_FILTERS).setValue(null); // Trigger indeterminate state
                            field.form.get(SearchFilters.ONLY_GROUPS_AND_ASSETS).setValue(true);
                            // Emit new state
                            assetSearchService.appliedFilters$.next({
                                [SearchFilters.ALL_FILTERS]: null,
                                [SearchFilters.ONLY_GROUPS_AND_ASSETS]: true,
                                [SearchFilters.ONLY_DEVICES]: checked
                            });
                        }
                    },
                    hooks: {
                        onInit: field => {
                            // Get initial state
                            const { onlyDevices } = assetSearchService?.appliedFilters$?.value;
                            field.formControl.setValue(onlyDevices);
                        }
                    }
                },
                {
                    key: SearchFilters.ONLY_GROUPS_AND_ASSETS,
                    type: 'checkbox',
                    hide: hideExtendedFilters,
                    props: {
                        indeterminate: false,
                        label: gettext('Show only groups and assets'),
                        click: (field, clickEvent) => {
                            const oldFilterValue = assetSearchService.appliedFilters$.value;
                            const { checked } = clickEvent.target;
                            // Handle checked state
                            if (checked) {
                                field.form.get(SearchFilters.ALL_FILTERS).setValue(true);
                                // Emit new state
                                assetSearchService.appliedFilters$.next({
                                    ...oldFilterValue,
                                    [SearchFilters.ALL_FILTERS]: true,
                                    [SearchFilters.ONLY_GROUPS_AND_ASSETS]: checked
                                });
                                return;
                            }
                            // Handle unchecked state
                            field.form.get(SearchFilters.ALL_FILTERS).setValue(null); // Trigger indeterminate state
                            field.form.get(SearchFilters.ONLY_DEVICES).setValue(true);
                            // Emit new state
                            assetSearchService.appliedFilters$.next({
                                [SearchFilters.ALL_FILTERS]: null,
                                [SearchFilters.ONLY_GROUPS_AND_ASSETS]: checked,
                                [SearchFilters.ONLY_DEVICES]: true
                            });
                        }
                    },
                    hooks: {
                        onInit: field => {
                            // Get initial state
                            const { onlyGroupsAndAssets } = assetSearchService?.appliedFilters$?.value;
                            field.formControl.setValue(onlyGroupsAndAssets);
                        }
                    }
                }
            ],
            /**
             * Adding devices and groups to a filter is already handled in {@link AssetSearchService#buildSearchQuery}
             * */
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.types?.length) {
                    ors.push({ type: { __in: model.types } });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS1zZWFyY2gtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZWFyY2gvY29sdW1ucy9hc3NldC10eXBlLXNlYXJjaC1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUdWLGlDQUFpQyxFQUNqQyxPQUFPLEVBQ1AsYUFBYSxFQUNkLE1BQU0scUJBQXFCLENBQUM7QUFHN0IsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFVBQVU7SUFDdkQsWUFDRSxtQkFBNEIsRUFDNUIsbUJBQWtDLEVBQ2xDLGtCQUF1QyxFQUN2QyxpQkFBMEI7UUFFMUIsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsbUNBQXNCLENBQUM7UUFDcEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLDhCQUE4QixDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUFDO1NBQ3BELENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FDNUMsbUJBQW1CLEVBQ25CLGtCQUFrQixFQUNsQixpQkFBaUIsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFTyxrQkFBa0IsQ0FDeEIsbUJBQTRCLEVBQzVCLGtCQUFzQyxFQUN0QyxpQkFBMEI7UUFFMUIsT0FBTztZ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LEdBQUcsRUFBRSxDQUFDO2dCQUNmLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7b0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztpQkFDM0M7Z0JBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNkLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO2lCQUNuQjtnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhc2VDb2x1bW4sXG4gIENvbHVtbkNvbmZpZyxcbiAgQ29sdW1uRGF0YVR5cGUsXG4gIGdldEJhc2ljSW5wdXRBcnJheUZvcm1GaWVsZENvbmZpZyxcbiAgZ2V0dGV4dCxcbiAgU2VhcmNoRmlsdGVyc1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBBc3NldFNlYXJjaFNlcnZpY2UgfSBmcm9tICcuLi9zZWFyY2guc2VydmljZSc7XG5pbXBvcnQgeyBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgQXNzZXRUeXBlU2VhcmNoR3JpZENvbHVtbiBleHRlbmRzIEJhc2VDb2x1bW4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBoaWRlRXh0ZW5kZWRGaWx0ZXJzOiBib29sZWFuLFxuICAgIGluaXRpYWxDb2x1bW5Db25maWc/OiBDb2x1bW5Db25maWcsXG4gICAgYXNzZXRTZWFyY2hTZXJ2aWNlPzogQXNzZXRTZWFyY2hTZXJ2aWNlLFxuICAgIGN1c3RvbVBsYWNlaG9sZGVyPzogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKGluaXRpYWxDb2x1bW5Db25maWcpO1xuICAgIHRoaXMubmFtZSA9ICd0eXBlJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1R5cGUnKTtcbiAgICB0aGlzLmRhdGFUeXBlID0gQ29sdW1uRGF0YVR5cGUuSWNvbjtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudDtcbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IGBjOHlfSXNEZXZpY2VHcm91cGAgfV1cbiAgICB9O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHRoaXMuZ2V0RmlsdGVyaW5nQ29uZmlnKFxuICAgICAgaGlkZUV4dGVuZGVkRmlsdGVycyxcbiAgICAgIGFzc2V0U2VhcmNoU2VydmljZSxcbiAgICAgIGN1c3RvbVBsYWNlaG9sZGVyXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmlsdGVyaW5nQ29uZmlnKFxuICAgIGhpZGVFeHRlbmRlZEZpbHRlcnM6IGJvb2xlYW4sXG4gICAgYXNzZXRTZWFyY2hTZXJ2aWNlOiBBc3NldFNlYXJjaFNlcnZpY2UsXG4gICAgY3VzdG9tUGxhY2Vob2xkZXI/OiBzdHJpbmdcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZWxkczogW1xuICAgICAgICAuLi5nZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcoe1xuICAgICAgICAgIGtleTogJ3R5cGVzJyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2hvdyBpdGVtcyB3aXRoIHR5cGUnKSxcbiAgICAgICAgICBhZGRUZXh0OiBnZXR0ZXh0KCdBZGQgbmV4dGB0eXBlYCcpLFxuICAgICAgICAgIHRvb2x0aXA6IGdldHRleHQoJ1VzZSAqIGFzIGEgd2lsZGNhcmQgY2hhcmFjdGVyJyksXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IGN1c3RvbVBsYWNlaG9sZGVyID8gY3VzdG9tUGxhY2Vob2xkZXIgOiBnZXR0ZXh0KCdidWlsZGluZ2BlLmcuIGhvdXNlYCcpLFxuICAgICAgICAgIG9wdGlvbmFsOiAhaGlkZUV4dGVuZGVkRmlsdGVyc1xuICAgICAgICB9KSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogU2VhcmNoRmlsdGVycy5BTExfRklMVEVSUyxcbiAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgIGhpZGU6IGhpZGVFeHRlbmRlZEZpbHRlcnMsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IGZhbHNlLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ0FsbCcpLFxuICAgICAgICAgICAgY2xpY2s6IChmaWVsZCwgY2xpY2tFdmVudCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IGNoZWNrZWQgfSA9IGNsaWNrRXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgICAgIC8vIEhhbmRsZSBjaGVja2VkIHN0YXRlXG4gICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgZmllbGQuZm9ybS5nZXQoU2VhcmNoRmlsdGVycy5PTkxZX0RFVklDRVMpLnNldFZhbHVlKHRydWUpO1xuICAgICAgICAgICAgICAgIGZpZWxkLmZvcm0uZ2V0KFNlYXJjaEZpbHRlcnMuT05MWV9HUk9VUFNfQU5EX0FTU0VUUykuc2V0VmFsdWUodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBFbWl0IG5ldyBzdGF0ZVxuICAgICAgICAgICAgICAgIGFzc2V0U2VhcmNoU2VydmljZS5hcHBsaWVkRmlsdGVycyQubmV4dCh7XG4gICAgICAgICAgICAgICAgICBbU2VhcmNoRmlsdGVycy5BTExfRklMVEVSU106IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICBbU2VhcmNoRmlsdGVycy5PTkxZX0RFVklDRVNdOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgW1NlYXJjaEZpbHRlcnMuT05MWV9HUk9VUFNfQU5EX0FTU0VUU106IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXhwcmVzc2lvblByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICdwcm9wcy5pbmRldGVybWluYXRlJzogKG1vZGVsOiBhbnksIGZvcm1TdGF0ZTogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHtcbiAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgICAgICBpZiAoZmllbGQuZm9ybS5nZXQoU2VhcmNoRmlsdGVycy5BTExfRklMVEVSUykudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gU2V0IGluZGV0ZXJtaW5hdGUgc3RhdGVcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFmaWVsZC5mb3JtLmdldChTZWFyY2hGaWx0ZXJzLk9OTFlfREVWSUNFUykudmFsdWUgfHxcbiAgICAgICAgICAgICAgICAhZmllbGQuZm9ybS5nZXQoU2VhcmNoRmlsdGVycy5PTkxZX0dST1VQU19BTkRfQVNTRVRTKS52YWx1ZVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5mb3JtLmdldChTZWFyY2hGaWx0ZXJzLkFMTF9GSUxURVJTKS5zZXRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3Byb3BzLmRpc2FibGVkJzogKG1vZGVsOiBhbnksIGZvcm1TdGF0ZTogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGZpZWxkLmZvcm0uZ2V0KFNlYXJjaEZpbHRlcnMuQUxMX0ZJTFRFUlMpLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaG9va3M6IHtcbiAgICAgICAgICAgIG9uSW5pdDogZmllbGQgPT4ge1xuICAgICAgICAgICAgICAvLyBHZXQgaW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgICBjb25zdCB7IGFsbEZpbHRlcnMgfSA9IGFzc2V0U2VhcmNoU2VydmljZT8uYXBwbGllZEZpbHRlcnMkPy52YWx1ZTtcbiAgICAgICAgICAgICAgZmllbGQuZm9ybUNvbnRyb2wuc2V0VmFsdWUoYWxsRmlsdGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiBTZWFyY2hGaWx0ZXJzLk9OTFlfREVWSUNFUyxcbiAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgIGhpZGU6IGhpZGVFeHRlbmRlZEZpbHRlcnMsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1Nob3cgb25seSBkZXZpY2VzJyksXG4gICAgICAgICAgICBjbGljazogKGZpZWxkLCBjbGlja0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG9sZEZpbHRlclZhbHVlID0gYXNzZXRTZWFyY2hTZXJ2aWNlLmFwcGxpZWRGaWx0ZXJzJC52YWx1ZTtcbiAgICAgICAgICAgICAgY29uc3QgeyBjaGVja2VkIH0gPSBjbGlja0V2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAvLyBIYW5kbGUgY2hlY2tlZCBzdGF0ZVxuICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGZpZWxkLmZvcm0uZ2V0KFNlYXJjaEZpbHRlcnMuQUxMX0ZJTFRFUlMpLnNldFZhbHVlKHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIEVtaXQgbmV3IHN0YXRlXG4gICAgICAgICAgICAgICAgYXNzZXRTZWFyY2hTZXJ2aWNlLmFwcGxpZWRGaWx0ZXJzJC5uZXh0KHtcbiAgICAgICAgICAgICAgICAgIC4uLm9sZEZpbHRlclZhbHVlLFxuICAgICAgICAgICAgICAgICAgW1NlYXJjaEZpbHRlcnMuQUxMX0ZJTFRFUlNdOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgW1NlYXJjaEZpbHRlcnMuT05MWV9ERVZJQ0VTXTogY2hlY2tlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBIYW5kbGUgdW5jaGVja2VkIHN0YXRlXG4gICAgICAgICAgICAgIGZpZWxkLmZvcm0uZ2V0KFNlYXJjaEZpbHRlcnMuQUxMX0ZJTFRFUlMpLnNldFZhbHVlKG51bGwpOyAvLyBUcmlnZ2VyIGluZGV0ZXJtaW5hdGUgc3RhdGVcbiAgICAgICAgICAgICAgZmllbGQuZm9ybS5nZXQoU2VhcmNoRmlsdGVycy5PTkxZX0dST1VQU19BTkRfQVNTRVRTKS5zZXRWYWx1ZSh0cnVlKTtcblxuICAgICAgICAgICAgICAvLyBFbWl0IG5ldyBzdGF0ZVxuICAgICAgICAgICAgICBhc3NldFNlYXJjaFNlcnZpY2UuYXBwbGllZEZpbHRlcnMkLm5leHQoe1xuICAgICAgICAgICAgICAgIFtTZWFyY2hGaWx0ZXJzLkFMTF9GSUxURVJTXTogbnVsbCxcbiAgICAgICAgICAgICAgICBbU2VhcmNoRmlsdGVycy5PTkxZX0dST1VQU19BTkRfQVNTRVRTXTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBbU2VhcmNoRmlsdGVycy5PTkxZX0RFVklDRVNdOiBjaGVja2VkXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaG9va3M6IHtcbiAgICAgICAgICAgIG9uSW5pdDogZmllbGQgPT4ge1xuICAgICAgICAgICAgICAvLyBHZXQgaW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgICBjb25zdCB7IG9ubHlEZXZpY2VzIH0gPSBhc3NldFNlYXJjaFNlcnZpY2U/LmFwcGxpZWRGaWx0ZXJzJD8udmFsdWU7XG4gICAgICAgICAgICAgIGZpZWxkLmZvcm1Db250cm9sLnNldFZhbHVlKG9ubHlEZXZpY2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IFNlYXJjaEZpbHRlcnMuT05MWV9HUk9VUFNfQU5EX0FTU0VUUyxcbiAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgIGhpZGU6IGhpZGVFeHRlbmRlZEZpbHRlcnMsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1Nob3cgb25seSBncm91cHMgYW5kIGFzc2V0cycpLFxuICAgICAgICAgICAgY2xpY2s6IChmaWVsZCwgY2xpY2tFdmVudCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBvbGRGaWx0ZXJWYWx1ZSA9IGFzc2V0U2VhcmNoU2VydmljZS5hcHBsaWVkRmlsdGVycyQudmFsdWU7XG4gICAgICAgICAgICAgIGNvbnN0IHsgY2hlY2tlZCB9ID0gY2xpY2tFdmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgLy8gSGFuZGxlIGNoZWNrZWQgc3RhdGVcbiAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5mb3JtLmdldChTZWFyY2hGaWx0ZXJzLkFMTF9GSUxURVJTKS5zZXRWYWx1ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBFbWl0IG5ldyBzdGF0ZVxuICAgICAgICAgICAgICAgIGFzc2V0U2VhcmNoU2VydmljZS5hcHBsaWVkRmlsdGVycyQubmV4dCh7XG4gICAgICAgICAgICAgICAgICAuLi5vbGRGaWx0ZXJWYWx1ZSxcbiAgICAgICAgICAgICAgICAgIFtTZWFyY2hGaWx0ZXJzLkFMTF9GSUxURVJTXTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIFtTZWFyY2hGaWx0ZXJzLk9OTFlfR1JPVVBTX0FORF9BU1NFVFNdOiBjaGVja2VkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIEhhbmRsZSB1bmNoZWNrZWQgc3RhdGVcbiAgICAgICAgICAgICAgZmllbGQuZm9ybS5nZXQoU2VhcmNoRmlsdGVycy5BTExfRklMVEVSUykuc2V0VmFsdWUobnVsbCk7IC8vIFRyaWdnZXIgaW5kZXRlcm1pbmF0ZSBzdGF0ZVxuICAgICAgICAgICAgICBmaWVsZC5mb3JtLmdldChTZWFyY2hGaWx0ZXJzLk9OTFlfREVWSUNFUykuc2V0VmFsdWUodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgLy8gRW1pdCBuZXcgc3RhdGVcbiAgICAgICAgICAgICAgYXNzZXRTZWFyY2hTZXJ2aWNlLmFwcGxpZWRGaWx0ZXJzJC5uZXh0KHtcbiAgICAgICAgICAgICAgICBbU2VhcmNoRmlsdGVycy5BTExfRklMVEVSU106IG51bGwsXG4gICAgICAgICAgICAgICAgW1NlYXJjaEZpbHRlcnMuT05MWV9HUk9VUFNfQU5EX0FTU0VUU106IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgW1NlYXJjaEZpbHRlcnMuT05MWV9ERVZJQ0VTXTogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhvb2tzOiB7XG4gICAgICAgICAgICBvbkluaXQ6IGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgLy8gR2V0IGluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgY29uc3QgeyBvbmx5R3JvdXBzQW5kQXNzZXRzIH0gPSBhc3NldFNlYXJjaFNlcnZpY2U/LmFwcGxpZWRGaWx0ZXJzJD8udmFsdWU7XG4gICAgICAgICAgICAgIGZpZWxkLmZvcm1Db250cm9sLnNldFZhbHVlKG9ubHlHcm91cHNBbmRBc3NldHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIC8qKlxuICAgICAgICogQWRkaW5nIGRldmljZXMgYW5kIGdyb3VwcyB0byBhIGZpbHRlciBpcyBhbHJlYWR5IGhhbmRsZWQgaW4ge0BsaW5rIEFzc2V0U2VhcmNoU2VydmljZSNidWlsZFNlYXJjaFF1ZXJ5fVxuICAgICAgICogKi9cbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgY29uc3Qgb3JzID0gW107XG4gICAgICAgIGlmIChtb2RlbC50eXBlcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyB0eXBlOiB7IF9faW46IG1vZGVsLnR5cGVzIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IG9ycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==
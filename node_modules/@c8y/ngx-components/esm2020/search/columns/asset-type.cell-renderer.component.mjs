import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
import * as i3 from "@angular/common";
export class AssetTypeCellRendererComponent {
    constructor(context, assetNodeService) {
        this.context = context;
        this.assetNodeService = assetNodeService;
    }
    async ngOnInit() {
        this.isAnyGroup = this.assetNodeService.isAnyGroup(this.context.item);
        this.groupIcon = await this.assetNodeService.icon(this.context.item);
        this.isDevice = this.assetNodeService.isDevice(this.context.item);
        this.isAsset = this.assetNodeService.isAsset(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        if (this.isAsset) {
            return this.context.item.type;
        }
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            case 'exchange':
                return gettext('Device');
            default:
                return gettext('Asset');
        }
    }
}
AssetTypeCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetTypeCellRendererComponent, deps: [{ token: i1.CellRendererContext }, { token: i2.AssetNodeService }], target: i0.ɵɵFactoryTarget.Component });
AssetTypeCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AssetTypeCellRendererComponent, selector: "ng-component", ngImport: i0, template: "<device-status\n  class=\"m-l-8\"\n  *ngIf=\"isDevice\"\n  [mo]=\"context.item\"\n></device-status>\n\n<i\n  class=\"m-l-8 c8y-icon-duocolor\"\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.DeviceStatusComponent, selector: "device-status", inputs: ["mo"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetTypeCellRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<device-status\n  class=\"m-l-8\"\n  *ngIf=\"isDevice\"\n  [mo]=\"context.item\"\n></device-status>\n\n<i\n  class=\"m-l-8 c8y-icon-duocolor\"\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }, { type: i2.AssetNodeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlYXJjaC9jb2x1bW5zL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9zZWFyY2gvY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7O0FBS3hFLE1BQU0sT0FBTyw4QkFBOEI7SUFNekMsWUFBbUIsT0FBNEIsRUFBWSxnQkFBa0M7UUFBMUUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUVqRyxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQVk7UUFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQy9CO1FBRUQsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFdBQVc7Z0JBQ2QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsS0FBSyxpQkFBaUI7Z0JBQ3BCLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hDLEtBQUssMkJBQTJCO2dCQUM5QixPQUFPLHVCQUF1QixDQUFDO1lBQ2pDLEtBQUssa0JBQWtCO2dCQUNyQixPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNqQyxLQUFLLFVBQVU7Z0JBQ2IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0I7Z0JBQ0UsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzsySEFuQ1UsOEJBQThCOytHQUE5Qiw4QkFBOEIsb0RDUDNDLGtRQVlBOzJGRExhLDhCQUE4QjtrQkFIMUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldE5vZGVTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGdyb3VwSWNvbjogc3RyaW5nO1xuICBpc0FueUdyb3VwOiBib29sZWFuO1xuICBpc0RldmljZTogYm9vbGVhbjtcbiAgaXNBc3NldDogYm9vbGVhbjtcbiAgaWNvblRpdGxlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0LCBwcm90ZWN0ZWQgYXNzZXROb2RlU2VydmljZTogQXNzZXROb2RlU2VydmljZSkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlzQW55R3JvdXAgPSB0aGlzLmFzc2V0Tm9kZVNlcnZpY2UuaXNBbnlHcm91cCh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5ncm91cEljb24gPSBhd2FpdCB0aGlzLmFzc2V0Tm9kZVNlcnZpY2UuaWNvbih0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pc0RldmljZSA9IHRoaXMuYXNzZXROb2RlU2VydmljZS5pc0RldmljZSh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pc0Fzc2V0ID0gdGhpcy5hc3NldE5vZGVTZXJ2aWNlLmlzQXNzZXQodGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaWNvblRpdGxlID0gdGhpcy5nZXRJY29uVGl0bGUodGhpcy5ncm91cEljb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJY29uVGl0bGUoaWNvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5pc0Fzc2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lml0ZW0udHlwZTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGljb24pIHtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cCc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdHcm91cCcpO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXNtYXJ0JzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ1NtYXJ0IGdyb3VwJyk7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtcmVtb3RlLWluYWN0aXZlJzpcbiAgICAgICAgcmV0dXJuICdJbmFjdGl2ZSByZW1vdGUgZ3JvdXAnO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXJlbW90ZSc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdSZW1vdGUgZ3JvdXAnKTtcbiAgICAgIGNhc2UgJ2V4Y2hhbmdlJzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ0RldmljZScpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ0Fzc2V0Jyk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGV2aWNlLXN0YXR1c1xuICBjbGFzcz1cIm0tbC04XCJcbiAgKm5nSWY9XCJpc0RldmljZVwiXG4gIFttb109XCJjb250ZXh0Lml0ZW1cIlxuPjwvZGV2aWNlLXN0YXR1cz5cblxuPGlcbiAgY2xhc3M9XCJtLWwtOCBjOHktaWNvbi1kdW9jb2xvclwiXG4gIFtjOHlJY29uXT1cImdyb3VwSWNvblwiXG4gIHRpdGxlPVwie3sgaWNvblRpdGxlIHwgdHJhbnNsYXRlIH19XCJcbiAgKm5nSWY9XCJpc0FueUdyb3VwIHx8ICFpc0RldmljZVwiXG4+PC9pPlxuIl19
import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { SmartGroupsService } from '@c8y/client';
import { DataGridComponent, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, DATA_GRID_CONFIGURATION_STRATEGY, FilteringActionType, gettext, SearchFilters, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { DeleteAssetsModalComponent, SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AssetTypeSearchGridColumn } from './columns/asset-type-search-grid-column';
import { SEARCH_CONFIG } from './search-config.model';
import { AssetSearchService } from './search.service';
import * as i0 from "@angular/core";
import * as i1 from "./search.service";
import * as i2 from "ngx-bootstrap/modal";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components/sub-assets";
import * as i5 from "@c8y/ngx-components";
import * as i6 from "@angular/common";
export class SearchGridComponent {
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.assetSearchService.getDefaultColumns();
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.assetSearchService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.assetSearchService.getDefaultBulkActionControls();
        }
    }
    constructor(assetSearchService, bsModalService, smartGroupsService, subAssetsGridService, moduleConfig) {
        this.assetSearchService = assetSearchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.moduleConfig = moduleConfig;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading results…');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.assetSearchService.getDefaultPagination();
        this.bulkActionControls = this.assetSearchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
        this.showAdvancedFilters = moduleConfig?.showAdvancedFilters ?? false;
        this.customPlaceholder = moduleConfig?.placeholder ?? undefined;
    }
    getGridConfigContext() {
        return { key: this.columnsConfigKey || this.assetSearchService.GRID_CONFIG_STORAGE_KEY };
    }
    ngOnInit() {
        if (!this.filteringName) {
            this.columns = [
                new AssetTypeSearchGridColumn(this.showAdvancedFilters, { sortOrder: 'desc' }, this.assetSearchService, this.customPlaceholder),
                ...this.assetSearchService.getDefaultColumns()
            ];
        }
        else {
            this.columns = [
                new AssetTypeSearchGridColumn(this.showAdvancedFilters, { sortOrder: 'desc' }, this.assetSearchService),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    }
    ngAfterViewInit() {
        this.setInitialFilterForTypeColumn();
    }
    trackByName(_index, column) {
        return column.name;
    }
    async onDataSourceModifier(dataSourceModifier) {
        const response = await this.assetSearchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, dataSourceModifier.searchText);
        const { res, data, paging } = response;
        if (paging.currentPage === 1) {
            this.sizeCount = 0;
        }
        this.sizeCount += data.length;
        this.onColumnsChange.emit(dataSourceModifier.columns);
        return {
            res,
            data,
            paging,
            filteredSize: this.sizeCount,
            size: undefined
        };
    }
    setActionControls() {
        const actionControls = [];
        const deleteAction = {
            type: "DELETE" /* BuiltInActionType.Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup)
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            /**
             * TODO: find better solution. After new changes from DM team, we're running into race condition where
             * this.dataGrid.updateFiltering is executed before this.configurationStrategy.getConfig$() value is emitted.
             * Columns setter sets columns after this.dataGrid.updateFiltering executes its logic. Value of this.columns in
             * dataGrid.updateFiltering is just not yet set.
             */
            setTimeout(() => {
                this.dataGrid.updateFiltering(columnNames, action, false);
            }, 500);
        }
    }
    onColumnFilterReset(column) {
        if (column.name === 'type') {
            this.assetSearchService.resetAppliedFilters();
        }
    }
    onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe(async (result) => {
            if (result) {
                await this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                this.refresh.emit();
            }
        });
    }
    setInitialFilterForTypeColumn() {
        const checkboxes = this.assetSearchService.appliedFilters$.value;
        // Set filter only when all checkboxes are not selected
        if (checkboxes[SearchFilters.ONLY_DEVICES] !== checkboxes[SearchFilters.ONLY_GROUPS_AND_ASSETS]) {
            const externalFilterQuery = {
                [SearchFilters.ONLY_DEVICES]: checkboxes[SearchFilters.ONLY_DEVICES],
                [SearchFilters.ONLY_GROUPS_AND_ASSETS]: checkboxes[SearchFilters.ONLY_GROUPS_AND_ASSETS]
            };
            this.updateFiltering(['type'], {
                type: FilteringActionType.ApplyFilter,
                payload: {
                    filteringModifier: {
                        externalFilterQuery
                    }
                }
            });
        }
    }
}
SearchGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SearchGridComponent, deps: [{ token: i1.AssetSearchService }, { token: i2.BsModalService }, { token: i3.SmartGroupsService }, { token: i4.SubAssetsService }, { token: SEARCH_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });
SearchGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SearchGridComponent, selector: "c8y-search-grid", inputs: { parentGroup: ["parent-group", "parentGroup"], title: "title", loadingItemsLabel: "loadingItemsLabel", _columns: ["columns", "_columns"], _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], selectable: "selectable", _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], searchText: "searchText", filteringName: "filteringName", columnsConfigKey: "columnsConfigKey" }, outputs: { onColumnsChange: "onColumnsChange" }, providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
            useExisting: SearchGridComponent
        }
    ], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true, static: true }], ngImport: i0, template: "<div class=\"card--grid--fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onColumnFilterReset)=\"onColumnFilterReset($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>", dependencies: [{ kind: "component", type: i5.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.ColumnDirective, selector: "c8y-column", inputs: ["name"] }, { kind: "component", type: i5.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "singleSelection", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning", "activeClassName"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SearchGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-search-grid', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
                            useExisting: SearchGridComponent
                        }
                    ], template: "<div class=\"card--grid--fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onColumnFilterReset)=\"onColumnFilterReset($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.AssetSearchService }, { type: i2.BsModalService }, { type: i3.SmartGroupsService }, { type: i4.SubAssetsService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SEARCH_CONFIG]
                }] }]; }, propDecorators: { parentGroup: [{
                type: Input,
                args: ['parent-group']
            }], title: [{
                type: Input
            }], loadingItemsLabel: [{
                type: Input
            }], _columns: [{
                type: Input,
                args: ['columns']
            }], _pagination: [{
                type: Input,
                args: ['pagination']
            }], _actionControls: [{
                type: Input,
                args: ['actionControls']
            }], selectable: [{
                type: Input
            }], _bulkActionControls: [{
                type: Input,
                args: ['bulkActionControls']
            }], onColumnsChange: [{
                type: Output
            }], searchText: [{
                type: Input
            }], filteringName: [{
                type: Input
            }], columnsConfigKey: [{
                type: Input
            }], dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2VhcmNoL3NlYXJjaC1ncmlkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3NlYXJjaC9zZWFyY2gtZ3JpZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBa0Isa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakUsT0FBTyxFQUtMLGlCQUFpQixFQUVqQix3Q0FBd0MsRUFDeEMsZ0NBQWdDLEVBQ2hDLG1CQUFtQixFQUVuQixPQUFPLEVBSVAsYUFBYSxFQUViLG9DQUFvQyxFQUVyQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsZ0NBQWdDLEVBQ2hDLDRCQUE0QixFQUM1Qix3QkFBd0IsRUFDekIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsMEJBQTBCLEVBRTFCLGdCQUFnQixFQUNqQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNwRixPQUFPLEVBQWdCLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7OztBQWdCdEQsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QixJQUFzQixRQUFRLENBQUMsS0FBZTtRQUM1QyxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FB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QUFVO3NCQUFsQixLQUFLO2dCQUMyQixtQkFBbUI7c0JBQW5ELEtBQUs7dUJBQUMsb0JBQW9CO2dCQU9qQixlQUFlO3NCQUF4QixNQUFNO2dCQUdQLFVBQVU7c0JBRFQsS0FBSztnQkFJTixhQUFhO3NCQURaLEtBQUs7Z0JBSUcsZ0JBQWdCO3NCQUF4QixLQUFLO2dCQVlOLFFBQVE7c0JBRFAsU0FBUzt1QkFBQyxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgU21hcnRHcm91cHNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQWN0aW9uQ29udHJvbCxcbiAgQnVpbHRJbkFjdGlvblR5cGUsXG4gIEJ1bGtBY3Rpb25Db250cm9sLFxuICBDb2x1bW4sXG4gIERhdGFHcmlkQ29tcG9uZW50LFxuICBEYXRhU291cmNlTW9kaWZpZXIsXG4gIERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX0NPTlRFWFRfUFJPVklERVIsXG4gIERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX1NUUkFURUdZLFxuICBGaWx0ZXJpbmdBY3Rpb25UeXBlLFxuICBGaWx0ZXJpbmdNb2RpZmllcixcbiAgZ2V0dGV4dCxcbiAgR3JpZENvbmZpZ0NvbnRleHRQcm92aWRlcixcbiAgUGFnaW5hdGlvbixcbiAgUm93LFxuICBTZWFyY2hGaWx0ZXJzLFxuICBTZXJ2ZXJTaWRlRGF0YVJlc3VsdCxcbiAgVXNlclByZWZlcmVuY2VzQ29uZmlndXJhdGlvblN0cmF0ZWd5LFxuICBVc2VyUHJlZmVyZW5jZXNHcmlkQ29uZmlnQ29udGV4dFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIEFsYXJtc0RldmljZUdyaWRDb2x1bW4sXG4gIEltZWlEZXZpY2VHcmlkQ29sdW1uLFxuICBNb2RlbERldmljZUdyaWRDb2x1bW4sXG4gIE5hbWVEZXZpY2VHcmlkQ29sdW1uLFxuICBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbixcbiAgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbixcbiAgU3lzdGVtSWREZXZpY2VHcmlkQ29sdW1uXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHtcbiAgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQsXG4gIERlbGV0ZU1vZGFsQ2hlY2tib3hlcyxcbiAgU3ViQXNzZXRzU2VydmljZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3N1Yi1hc3NldHMnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IEFzc2V0VHlwZVNlYXJjaEdyaWRDb2x1bW4gfSBmcm9tICcuL2NvbHVtbnMvYXNzZXQtdHlwZS1zZWFyY2gtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlnLCBTRUFSQ0hfQ09ORklHIH0gZnJvbSAnLi9zZWFyY2gtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEFzc2V0U2VhcmNoU2VydmljZSB9IGZyb20gJy4vc2VhcmNoLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2VhcmNoLWdyaWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBEQVRBX0dSSURfQ09ORklHVVJBVElPTl9TVFJBVEVHWSxcbiAgICAgIHVzZUNsYXNzOiBVc2VyUHJlZmVyZW5jZXNDb25maWd1cmF0aW9uU3RyYXRlZ3lcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX0NPTlRFWFRfUFJPVklERVIsXG4gICAgICB1c2VFeGlzdGluZzogU2VhcmNoR3JpZENvbXBvbmVudFxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hHcmlkQ29tcG9uZW50IGltcGxlbWVudHMgR3JpZENvbmZpZ0NvbnRleHRQcm92aWRlciB7XG4gIEBJbnB1dCgncGFyZW50LWdyb3VwJykgcGFyZW50R3JvdXA6IElNYW5hZ2VkT2JqZWN0O1xuICBASW5wdXQoKSB0aXRsZSA9ICcnO1xuICBASW5wdXQoKSBsb2FkaW5nSXRlbXNMYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnTG9hZGluZyByZXN1bHRz4oCmJyk7XG4gIEBJbnB1dCgnY29sdW1ucycpIHNldCBfY29sdW1ucyh2YWx1ZTogQ29sdW1uW10pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmFzc2V0U2VhcmNoU2VydmljZS5nZXREZWZhdWx0Q29sdW1ucygpO1xuICAgIH1cbiAgfVxuICBASW5wdXQoJ3BhZ2luYXRpb24nKSBzZXQgX3BhZ2luYXRpb24odmFsdWU6IFBhZ2luYXRpb24pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBASW5wdXQoJ2FjdGlvbkNvbnRyb2xzJykgc2V0IF9hY3Rpb25Db250cm9scyh2YWx1ZTogQWN0aW9uQ29udHJvbFtdKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmFjdGlvbkNvbnRyb2xzID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWN0aW9uQ29udHJvbHMgPSB0aGlzLmFzc2V0U2VhcmNoU2VydmljZS5nZXREZWZhdWx0QWN0aW9uQ29udHJvbHMoKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KCkgc2VsZWN0YWJsZSA9IGZhbHNlO1xuICBASW5wdXQoJ2J1bGtBY3Rpb25Db250cm9scycpIHNldCBfYnVsa0FjdGlvbkNvbnRyb2xzKHZhbHVlOiBCdWxrQWN0aW9uQ29udHJvbFtdKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmJ1bGtBY3Rpb25Db250cm9scyA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1bGtBY3Rpb25Db250cm9scyA9IHRoaXMuYXNzZXRTZWFyY2hTZXJ2aWNlLmdldERlZmF1bHRCdWxrQWN0aW9uQ29udHJvbHMoKTtcbiAgICB9XG4gIH1cbiAgQE91dHB1dCgpIG9uQ29sdW1uc0NoYW5nZTogRXZlbnRFbWl0dGVyPENvbHVtbltdPiA9IG5ldyBFdmVudEVtaXR0ZXI8Q29sdW1uW10+KCk7XG5cbiAgQElucHV0KClcbiAgc2VhcmNoVGV4dCA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIGZpbHRlcmluZ05hbWU6IHN0cmluZztcblxuICAvKiogVGhlIG5hbWUgb2YgdGhlIGtleSB3aGVyZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb24gd2lsbCBiZSBzdG9yZWQuICovXG4gIEBJbnB1dCgpIGNvbHVtbnNDb25maWdLZXk6IHN0cmluZztcblxuICBjb2x1bW5zOiBDb2x1bW5bXTtcbiAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbiA9IHRoaXMuYXNzZXRTZWFyY2hTZXJ2aWNlLmdldERlZmF1bHRQYWdpbmF0aW9uKCk7XG4gIGFjdGlvbkNvbnRyb2xzOiBBY3Rpb25Db250cm9sW107XG4gIGJ1bGtBY3Rpb25Db250cm9sczogQnVsa0FjdGlvbkNvbnRyb2xbXSA9IHRoaXMuYXNzZXRTZWFyY2hTZXJ2aWNlLmdldERlZmF1bHRCdWxrQWN0aW9uQ29udHJvbHMoKTtcbiAgc2hvd0FkdmFuY2VkRmlsdGVyczogYm9vbGVhbjtcbiAgY3VzdG9tUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgc2VydmVyU2lkZURhdGFDYWxsYmFjazogYW55O1xuICByZWZyZXNoOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAVmlld0NoaWxkKERhdGFHcmlkQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBkYXRhR3JpZDogRGF0YUdyaWRDb21wb25lbnQ7XG5cbiAgcHJpdmF0ZSBzaXplQ291bnQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBhc3NldFNlYXJjaFNlcnZpY2U6IEFzc2V0U2VhcmNoU2VydmljZSxcbiAgICBwcml2YXRlIGJzTW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHNtYXJ0R3JvdXBzU2VydmljZTogU21hcnRHcm91cHNTZXJ2aWNlLFxuICAgIHByaXZhdGUgc3ViQXNzZXRzR3JpZFNlcnZpY2U6IFN1YkFzc2V0c1NlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChTRUFSQ0hfQ09ORklHKSBwdWJsaWMgbW9kdWxlQ29uZmlnOiBTZWFyY2hDb25maWdcbiAgKSB7XG4gICAgdGhpcy5zaG93QWR2YW5jZWRGaWx0ZXJzID0gbW9kdWxlQ29uZmlnPy5zaG93QWR2YW5jZWRGaWx0ZXJzID8/IGZhbHNlO1xuICAgIHRoaXMuY3VzdG9tUGxhY2Vob2xkZXIgPSBtb2R1bGVDb25maWc/LnBsYWNlaG9sZGVyID8/IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldEdyaWRDb25maWdDb250ZXh0KCk6IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0IHtcbiAgICByZXR1cm4geyBrZXk6IHRoaXMuY29sdW1uc0NvbmZpZ0tleSB8fCB0aGlzLmFzc2V0U2VhcmNoU2VydmljZS5HUklEX0NPTkZJR19TVE9SQUdFX0tFWSB9O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmZpbHRlcmluZ05hbWUpIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IFtcbiAgICAgICAgbmV3IEFzc2V0VHlwZVNlYXJjaEdyaWRDb2x1bW4oXG4gICAgICAgICAgdGhpcy5zaG93QWR2YW5jZWRGaWx0ZXJzLFxuICAgICAgICAgIHsgc29ydE9yZGVyOiAnZGVzYycgfSxcbiAgICAgICAgICB0aGlzLmFzc2V0U2VhcmNoU2VydmljZSxcbiAgICAgICAgICB0aGlzLmN1c3RvbVBsYWNlaG9sZGVyXG4gICAgICAgICksXG4gICAgICAgIC4uLnRoaXMuYXNzZXRTZWFyY2hTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKClcbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IFtcbiAgICAgICAgbmV3IEFzc2V0VHlwZVNlYXJjaEdyaWRDb2x1bW4oXG4gICAgICAgICAgdGhpcy5zaG93QWR2YW5jZWRGaWx0ZXJzLFxuICAgICAgICAgIHsgc29ydE9yZGVyOiAnZGVzYycgfSxcbiAgICAgICAgICB0aGlzLmFzc2V0U2VhcmNoU2VydmljZVxuICAgICAgICApLFxuICAgICAgICBuZXcgTmFtZURldmljZUdyaWRDb2x1bW4oe1xuICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgZmlsdGVyOiB7IGV4dGVybmFsRmlsdGVyUXVlcnk6IHsgbmFtZXM6IFt0aGlzLmZpbHRlcmluZ05hbWVdIH0gfVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1vZGVsRGV2aWNlR3JpZENvbHVtbigpLFxuICAgICAgICBuZXcgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbih7IHZpc2libGU6IGZhbHNlIH0pLFxuICAgICAgICBuZXcgUmVnaXN0cmF0aW9uRGF0ZURldmljZUdyaWRDb2x1bW4oeyB2aXNpYmxlOiBmYWxzZSB9KSxcbiAgICAgICAgbmV3IFN5c3RlbUlkRGV2aWNlR3JpZENvbHVtbih7IHZpc2libGU6IGZhbHNlIH0pLFxuICAgICAgICBuZXcgSW1laURldmljZUdyaWRDb2x1bW4oeyB2aXNpYmxlOiBmYWxzZSB9KSxcbiAgICAgICAgbmV3IEFsYXJtc0RldmljZUdyaWRDb2x1bW4oKVxuICAgICAgXTtcbiAgICB9XG4gICAgdGhpcy5zZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrID0gdGhpcy5vbkRhdGFTb3VyY2VNb2RpZmllci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0QWN0aW9uQ29udHJvbHMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldEluaXRpYWxGaWx0ZXJGb3JUeXBlQ29sdW1uKCk7XG4gIH1cblxuICB0cmFja0J5TmFtZShfaW5kZXgsIGNvbHVtbjogQ29sdW1uKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29sdW1uLm5hbWU7XG4gIH1cblxuICBhc3luYyBvbkRhdGFTb3VyY2VNb2RpZmllcihcbiAgICBkYXRhU291cmNlTW9kaWZpZXI6IERhdGFTb3VyY2VNb2RpZmllclxuICApOiBQcm9taXNlPFNlcnZlclNpZGVEYXRhUmVzdWx0PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFzc2V0U2VhcmNoU2VydmljZS5nZXREYXRhKFxuICAgICAgZGF0YVNvdXJjZU1vZGlmaWVyLmNvbHVtbnMsXG4gICAgICBkYXRhU291cmNlTW9kaWZpZXIucGFnaW5hdGlvbixcbiAgICAgIGRhdGFTb3VyY2VNb2RpZmllci5zZWFyY2hUZXh0XG4gICAgKTtcbiAgICBjb25zdCB7IHJlcywgZGF0YSwgcGFnaW5nIH0gPSByZXNwb25zZTtcblxuICAgIGlmIChwYWdpbmcuY3VycmVudFBhZ2UgPT09IDEpIHtcbiAgICAgIHRoaXMuc2l6ZUNvdW50ID0gMDtcbiAgICB9XG4gICAgdGhpcy5zaXplQ291bnQgKz0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5vbkNvbHVtbnNDaGFuZ2UuZW1pdChkYXRhU291cmNlTW9kaWZpZXIuY29sdW1ucyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzLFxuICAgICAgZGF0YSxcbiAgICAgIHBhZ2luZyxcbiAgICAgIGZpbHRlcmVkU2l6ZTogdGhpcy5zaXplQ291bnQsXG4gICAgICBzaXplOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG5cbiAgc2V0QWN0aW9uQ29udHJvbHMoKSB7XG4gICAgY29uc3QgYWN0aW9uQ29udHJvbHM6IEFjdGlvbkNvbnRyb2xbXSA9IFtdO1xuICAgIGNvbnN0IGRlbGV0ZUFjdGlvbjogQWN0aW9uQ29udHJvbCA9IHtcbiAgICAgIHR5cGU6IEJ1aWx0SW5BY3Rpb25UeXBlLkRlbGV0ZSxcbiAgICAgIGNhbGxiYWNrOiAoYXNzZXQ6IFJvdykgPT4gdGhpcy5vbkRlbGV0ZUFzc2V0KGFzc2V0IGFzIElNYW5hZ2VkT2JqZWN0LCB0aGlzLnBhcmVudEdyb3VwKVxuICAgIH07XG4gICAgYWN0aW9uQ29udHJvbHMucHVzaChkZWxldGVBY3Rpb24pO1xuICAgIGlmICghdGhpcy5hY3Rpb25Db250cm9scykge1xuICAgICAgdGhpcy5hY3Rpb25Db250cm9scyA9IGFjdGlvbkNvbnRyb2xzO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmluZyhcbiAgICBjb2x1bW5OYW1lczogc3RyaW5nW10sXG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBGaWx0ZXJpbmdBY3Rpb25UeXBlO1xuICAgICAgcGF5bG9hZD86IHsgZmlsdGVyaW5nTW9kaWZpZXI6IEZpbHRlcmluZ01vZGlmaWVyIH07XG4gICAgfVxuICApIHtcbiAgICBjb25zdCB7IHR5cGUgfSA9IGFjdGlvbjtcbiAgICBpZiAodHlwZSA9PT0gRmlsdGVyaW5nQWN0aW9uVHlwZS5SZXNldEZpbHRlcikge1xuICAgICAgdGhpcy5kYXRhR3JpZC5jbGVhckZpbHRlcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBUT0RPOiBmaW5kIGJldHRlciBzb2x1dGlvbi4gQWZ0ZXIgbmV3IGNoYW5nZXMgZnJvbSBETSB0ZWFtLCB3ZSdyZSBydW5uaW5nIGludG8gcmFjZSBjb25kaXRpb24gd2hlcmVcbiAgICAgICAqIHRoaXMuZGF0YUdyaWQudXBkYXRlRmlsdGVyaW5nIGlzIGV4ZWN1dGVkIGJlZm9yZSB0aGlzLmNvbmZpZ3VyYXRpb25TdHJhdGVneS5nZXRDb25maWckKCkgdmFsdWUgaXMgZW1pdHRlZC5cbiAgICAgICAqIENvbHVtbnMgc2V0dGVyIHNldHMgY29sdW1ucyBhZnRlciB0aGlzLmRhdGFHcmlkLnVwZGF0ZUZpbHRlcmluZyBleGVjdXRlcyBpdHMgbG9naWMuIFZhbHVlIG9mIHRoaXMuY29sdW1ucyBpblxuICAgICAgICogZGF0YUdyaWQudXBkYXRlRmlsdGVyaW5nIGlzIGp1c3Qgbm90IHlldCBzZXQuXG4gICAgICAgKi9cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRhdGFHcmlkLnVwZGF0ZUZpbHRlcmluZyhjb2x1bW5OYW1lcywgYWN0aW9uLCBmYWxzZSk7XG4gICAgICB9LCA1MDApO1xuICAgIH1cbiAgfVxuXG4gIG9uQ29sdW1uRmlsdGVyUmVzZXQoY29sdW1uOiBDb2x1bW4pIHtcbiAgICBpZiAoY29sdW1uLm5hbWUgPT09ICd0eXBlJykge1xuICAgICAgdGhpcy5hc3NldFNlYXJjaFNlcnZpY2UucmVzZXRBcHBsaWVkRmlsdGVycygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25EZWxldGVBc3NldChhc3NldCwgcGFyZW50UmVmKSB7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgc2hvd1dpdGhEZXZpY2VVc2VyQ2hlY2tib3g6IHRoaXMuc3ViQXNzZXRzR3JpZFNlcnZpY2Uuc2hvdWxkU2hvd1dpdGhEZXZpY2VVc2VyQ2hlY2tib3goYXNzZXQpLFxuICAgICAgYXNzZXQsXG4gICAgICBzaG93V2l0aENhc2NhZGVDaGVja2JveDpcbiAgICAgICAgIXRoaXMuc21hcnRHcm91cHNTZXJ2aWNlLmlzU21hcnRHcm91cChhc3NldCkgJiZcbiAgICAgICAgIXRoaXMuc21hcnRHcm91cHNTZXJ2aWNlLmlzU21hcnRHcm91cFYyKGFzc2V0KVxuICAgIH07XG5cbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhEZWxldGVBc3NldHNNb2RhbENvbXBvbmVudCwgeyBpbml0aWFsU3RhdGUgfSk7XG5cbiAgICBtb2RhbFJlZi5jb250ZW50LmNsb3NlU3ViamVjdC5zdWJzY3JpYmUoYXN5bmMgKHJlc3VsdDogRGVsZXRlTW9kYWxDaGVja2JveGVzKSA9PiB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3ViQXNzZXRzR3JpZFNlcnZpY2UuZGVsZXRlQXNzZXQoYXNzZXQsIHBhcmVudFJlZiwgcmVzdWx0KTtcbiAgICAgICAgdGhpcy5yZWZyZXNoLmVtaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SW5pdGlhbEZpbHRlckZvclR5cGVDb2x1bW4oKSB7XG4gICAgY29uc3QgY2hlY2tib3hlcyA9IHRoaXMuYXNzZXRTZWFyY2hTZXJ2aWNlLmFwcGxpZWRGaWx0ZXJzJC52YWx1ZTtcbiAgICAvLyBTZXQgZmlsdGVyIG9ubHkgd2hlbiBhbGwgY2hlY2tib3hlcyBhcmUgbm90IHNlbGVjdGVkXG4gICAgaWYgKFxuICAgICAgY2hlY2tib3hlc1tTZWFyY2hGaWx0ZXJzLk9OTFlfREVWSUNFU10gIT09IGNoZWNrYm94ZXNbU2VhcmNoRmlsdGVycy5PTkxZX0dST1VQU19BTkRfQVNTRVRTXVxuICAgICkge1xuICAgICAgY29uc3QgZXh0ZXJuYWxGaWx0ZXJRdWVyeSA9IHtcbiAgICAgICAgW1NlYXJjaEZpbHRlcnMuT05MWV9ERVZJQ0VTXTogY2hlY2tib3hlc1tTZWFyY2hGaWx0ZXJzLk9OTFlfREVWSUNFU10sXG4gICAgICAgIFtTZWFyY2hGaWx0ZXJzLk9OTFlfR1JPVVBTX0FORF9BU1NFVFNdOiBjaGVja2JveGVzW1NlYXJjaEZpbHRlcnMuT05MWV9HUk9VUFNfQU5EX0FTU0VUU11cbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUZpbHRlcmluZyhbJ3R5cGUnXSwge1xuICAgICAgICB0eXBlOiBGaWx0ZXJpbmdBY3Rpb25UeXBlLkFwcGx5RmlsdGVyLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZmlsdGVyaW5nTW9kaWZpZXI6IHtcbiAgICAgICAgICAgIGV4dGVybmFsRmlsdGVyUXVlcnlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImNhcmQtLWdyaWQtLWZ1bGxwYWdlIGJvcmRlci10b3AgYm9yZGVyLWJvdHRvbVwiPlxuICA8Yzh5LWRhdGEtZ3JpZFxuICAgIFt0aXRsZV09XCInU2VhcmNoIHJlc3VsdHMnIHwgdHJhbnNsYXRlXCJcbiAgICBbbG9hZGluZ0l0ZW1zTGFiZWxdPVwibG9hZGluZ0l0ZW1zTGFiZWxcIlxuICAgIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxuICAgIFtwYWdpbmF0aW9uXT1cInBhZ2luYXRpb25cIlxuICAgIFthY3Rpb25Db250cm9sc109XCJhY3Rpb25Db250cm9sc1wiXG4gICAgW3NlbGVjdGFibGVdPVwic2VsZWN0YWJsZVwiXG4gICAgW2J1bGtBY3Rpb25Db250cm9sc109XCJidWxrQWN0aW9uQ29udHJvbHNcIlxuICAgIFtzZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrXT1cInNlcnZlclNpZGVEYXRhQ2FsbGJhY2tcIlxuICAgIFtpbmZpbml0ZVNjcm9sbF09XCInYXV0bydcIlxuICAgIFtzaG93U2VhcmNoXT1cInRydWVcIlxuICAgIFtzZWFyY2hUZXh0XT1cInNlYXJjaFRleHRcIlxuICAgIFtyZWZyZXNoXT1cInJlZnJlc2hcIlxuICAgIChvbkNvbHVtbkZpbHRlclJlc2V0KT1cIm9uQ29sdW1uRmlsdGVyUmVzZXQoJGV2ZW50KVwiXG4gID5cbiAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBjb2x1bW4gb2YgY29sdW1uczsgdHJhY2tCeTogdHJhY2tCeU5hbWVcIj5cbiAgICAgIDxjOHktY29sdW1uIFtuYW1lXT1cImNvbHVtbi5uYW1lXCI+PC9jOHktY29sdW1uPlxuICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgPGM4eS11aS1lbXB0eS1zdGF0ZVxuICAgICAgW2ljb25dPVwiJ3NlYXJjaCdcIlxuICAgICAgW3RpdGxlXT1cIidObyByZXN1bHRzIHRvIGRpc3BsYXkuJyB8IHRyYW5zbGF0ZVwiXG4gICAgICBbc3VidGl0bGVdPVwiJ1JlZmluZSB5b3VyIHNlYXJjaCB0ZXJtcyBvciBjaGVjayB5b3VyIHNwZWxsaW5nLicgfCB0cmFuc2xhdGVcIlxuICAgICAgW2hvcml6b250YWxdPVwidHJ1ZVwiXG4gICAgPjwvYzh5LXVpLWVtcHR5LXN0YXRlPlxuICA8L2M4eS1kYXRhLWdyaWQ+XG48L2Rpdj4iXX0=
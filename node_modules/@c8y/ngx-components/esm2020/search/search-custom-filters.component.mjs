import { Component, EventEmitter, Output } from '@angular/core';
import { gettext, SearchFilters } from '@c8y/ngx-components';
import { AssetSearchService } from './search.service';
import * as i0 from "@angular/core";
import * as i1 from "./search.service";
import * as i2 from "@angular/common";
import * as i3 from "@c8y/ngx-components";
export class SearchCustomFiltersComponent {
    constructor(assetSearchService) {
        this.assetSearchService = assetSearchService;
        this.customDataQuery = new EventEmitter();
        this.refresh = new EventEmitter();
        this.checkboxesState = [
            {
                label: gettext('All'),
                name: SearchFilters.ALL_FILTERS,
                value: true,
                indeterminate: false,
                isDisabled: true
            },
            { label: gettext('Show only devices'), name: SearchFilters.ONLY_DEVICES, value: true },
            {
                label: gettext('Show only groups and assets'),
                name: SearchFilters.ONLY_GROUPS_AND_ASSETS,
                value: true
            }
        ];
    }
    ngOnInit() {
        this.customDataQuery.next(this.assetSearchService.getGlobalSearchData);
    }
    onCheckboxChange(event, checkbox) {
        const { checked } = event.target;
        if (checked == undefined) {
            return;
        }
        switch (checkbox.name) {
            case SearchFilters.ALL_FILTERS:
                this.onSelectAll(checkbox, checked);
                break;
            case SearchFilters.ONLY_DEVICES:
                this.onAllDevices(checkbox, checked);
                break;
            case SearchFilters.ONLY_GROUPS_AND_ASSETS:
                this.onGroupsAndAssets(checkbox, checked);
                break;
        }
        // Handle allFilters checkbox when ONLY_GROUPS_AND_ASSETS and ONLY_DEVICES are selected
        if (this.getCheckbox(SearchFilters.ONLY_DEVICES).value &&
            this.getCheckbox(SearchFilters.ONLY_GROUPS_AND_ASSETS).value) {
            Object.assign(this.getCheckbox(SearchFilters.ALL_FILTERS), {
                indeterminate: false,
                isDisabled: true,
                value: true
            });
        }
        this.assetSearchService.appliedFilters$.next({
            [SearchFilters.ALL_FILTERS]: this.getCheckbox(SearchFilters.ALL_FILTERS).value,
            [SearchFilters.ONLY_DEVICES]: this.getCheckbox(SearchFilters.ONLY_DEVICES).value,
            [SearchFilters.ONLY_GROUPS_AND_ASSETS]: this.getCheckbox(SearchFilters.ONLY_GROUPS_AND_ASSETS)
                .value
        });
        this.refresh.next(null);
    }
    saveCheckboxValue(checkbox, value) {
        checkbox.value = value;
    }
    onSelectAll(currentCheckbox, checked) {
        // Block unchecked state
        if (checked) {
            this.saveCheckboxValue(currentCheckbox, checked);
        }
        this.getCheckbox(SearchFilters.ALL_FILTERS).isDisabled = true;
        this.getCheckbox(SearchFilters.ONLY_DEVICES).value = true;
        this.getCheckbox(SearchFilters.ONLY_GROUPS_AND_ASSETS).value = true;
    }
    onAllDevices(currentCheckbox, checked) {
        this.saveCheckboxValue(currentCheckbox, checked);
        Object.assign(this.getCheckbox(SearchFilters.ALL_FILTERS), {
            indeterminate: true,
            isDisabled: false,
            value: null
        });
        this.getCheckbox(SearchFilters.ONLY_GROUPS_AND_ASSETS).value = true;
    }
    onGroupsAndAssets(currentCheckbox, checked) {
        this.saveCheckboxValue(currentCheckbox, checked);
        Object.assign(this.getCheckbox(SearchFilters.ALL_FILTERS), {
            indeterminate: true,
            isDisabled: false,
            value: null
        });
        this.getCheckbox(SearchFilters.ONLY_DEVICES).value = true;
    }
    getCheckbox(checkboxName) {
        return this.checkboxesState.find(checkbox => checkbox.name === checkboxName);
    }
}
SearchCustomFiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SearchCustomFiltersComponent, deps: [{ token: i1.AssetSearchService }], target: i0.ɵɵFactoryTarget.Component });
SearchCustomFiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SearchCustomFiltersComponent, selector: "c8y-search-custom-filters", outputs: { customDataQuery: "customDataQuery", refresh: "refresh" }, ngImport: i0, template: "<label class=\"c8y-checkbox\" *ngFor=\"let checkbox of checkboxesState\">\n  <input\n    type=\"checkbox\"\n    [checked]=\"checkbox.value\"\n    [indeterminate]=\"checkbox.indeterminate\"\n    (click)=\"onCheckboxChange($event, checkbox)\"\n    [attr.disabled]=\"checkbox.isDisabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ checkbox.label | translate }}</span>\n</label>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SearchCustomFiltersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-search-custom-filters', template: "<label class=\"c8y-checkbox\" *ngFor=\"let checkbox of checkboxesState\">\n  <input\n    type=\"checkbox\"\n    [checked]=\"checkbox.value\"\n    [indeterminate]=\"checkbox.indeterminate\"\n    (click)=\"onCheckboxChange($event, checkbox)\"\n    [attr.disabled]=\"checkbox.isDisabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ checkbox.label | translate }}</span>\n</label>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AssetSearchService }]; }, propDecorators: { customDataQuery: [{
                type: Output
            }], refresh: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
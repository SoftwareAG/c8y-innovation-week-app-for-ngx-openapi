import { NgModule } from '@angular/core';
import { BasicAuth, FetchClient, Realtime, CookieAuth } from '@c8y/client';
import { ApiService } from './api.service';
import * as services from './services';
import * as i0 from "@angular/core";
function toProvider(provide) {
    let deps = [FetchClient, Realtime];
    if (provide === FetchClient) {
        deps = [CookieAuth];
    }
    if (provide === BasicAuth || provide === CookieAuth) {
        deps = [];
    }
    if (provide === Realtime) {
        deps = [FetchClient];
    }
    return { provide, useClass: provide, deps };
}
const providers = Object.keys(services)
    .map(k => toProvider(services[k]))
    .concat([{ provide: ApiService, useClass: ApiService, deps: [FetchClient] }]);
// @dynamic
export class DataModule {
    static providers() {
        return providers;
    }
    static forRoot() {
        return {
            ngModule: DataModule,
            providers
        };
    }
}
DataModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DataModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DataModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DataModule });
DataModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DataModule, providers: providers });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DataModule, decorators: [{
            type: NgModule,
            args: [{
                    providers
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hcGkvZGF0YS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssUUFBUSxNQUFNLFlBQVksQ0FBQzs7QUFFdkMsU0FBUyxVQUFVLENBQUMsT0FBc0I7SUFDeEMsSUFBSSxJQUFJLEdBQXFELENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JGLElBQUksT0FBTyxLQUFLLFdBQVcsRUFBRTtRQUMzQixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNyQjtJQUNELElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssVUFBVSxFQUFFO1FBQ25ELElBQUksR0FBRyxFQUFFLENBQUM7S0FDWDtJQUNELElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUN4QixJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUN0QjtJQUNELE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBRUQsTUFBTSxTQUFTLEdBQWUsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDaEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLFdBQVc7QUFJWCxNQUFNLE9BQU8sVUFBVTtJQUNyQixNQUFNLENBQUMsU0FBUztRQUNkLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsVUFBVTtZQUNwQixTQUFTO1NBQ1YsQ0FBQztJQUNKLENBQUM7O3VHQVRVLFVBQVU7d0dBQVYsVUFBVTt3R0FBVixVQUFVLGFBRnJCLFNBQVM7MkZBRUUsVUFBVTtrQkFIdEIsUUFBUTttQkFBQztvQkFDUixTQUFTO2lCQUNWIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNpY0F1dGgsIEZldGNoQ2xpZW50LCBSZWFsdGltZSwgQ29va2llQXV0aCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuL2FwaS5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIHNlcnZpY2VzIGZyb20gJy4vc2VydmljZXMnO1xuXG5mdW5jdGlvbiB0b1Byb3ZpZGVyKHByb3ZpZGU6IFR5cGU8dW5rbm93bj4pOiBQcm92aWRlciB7XG4gIGxldCBkZXBzOiBBcnJheTxUeXBlPEZldGNoQ2xpZW50IHwgUmVhbHRpbWUgfCBDb29raWVBdXRoPj4gPSBbRmV0Y2hDbGllbnQsIFJlYWx0aW1lXTtcbiAgaWYgKHByb3ZpZGUgPT09IEZldGNoQ2xpZW50KSB7XG4gICAgZGVwcyA9IFtDb29raWVBdXRoXTtcbiAgfVxuICBpZiAocHJvdmlkZSA9PT0gQmFzaWNBdXRoIHx8IHByb3ZpZGUgPT09IENvb2tpZUF1dGgpIHtcbiAgICBkZXBzID0gW107XG4gIH1cbiAgaWYgKHByb3ZpZGUgPT09IFJlYWx0aW1lKSB7XG4gICAgZGVwcyA9IFtGZXRjaENsaWVudF07XG4gIH1cbiAgcmV0dXJuIHsgcHJvdmlkZSwgdXNlQ2xhc3M6IHByb3ZpZGUsIGRlcHMgfTtcbn1cblxuY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gT2JqZWN0LmtleXMoc2VydmljZXMpXG4gIC5tYXAoayA9PiB0b1Byb3ZpZGVyKHNlcnZpY2VzW2tdKSlcbiAgLmNvbmNhdChbeyBwcm92aWRlOiBBcGlTZXJ2aWNlLCB1c2VDbGFzczogQXBpU2VydmljZSwgZGVwczogW0ZldGNoQ2xpZW50XSB9XSk7XG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzXG59KVxuZXhwb3J0IGNsYXNzIERhdGFNb2R1bGUge1xuICBzdGF0aWMgcHJvdmlkZXJzKCk6IFByb3ZpZGVyW10ge1xuICAgIHJldHVybiBwcm92aWRlcnM7XG4gIH1cbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxEYXRhTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBEYXRhTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzXG4gICAgfTtcbiAgfVxufVxuIl19
import { from } from 'rxjs';
import { HttpHandler } from './interceptor.model';
export class HttpInterceptHandler extends HttpHandler {
    constructor(interceptor, nextHandler) {
        super();
        this.interceptor = interceptor;
        this.nextHandler = nextHandler;
    }
    handle(req) {
        return this.interceptor.intercept(req, this.nextHandler);
    }
}
export class HttpRequestHandler extends HttpHandler {
    constructor(fetch, apiService) {
        super();
        this.fetch = fetch;
        this.apiService = apiService;
    }
    handle(req) {
        const { options, url } = req;
        const { method } = options;
        this.apiService?.onStart({ method, options, url });
        let fetchPromise = this.fetch(url, options);
        if (typeof options.responseInterceptor === 'function') {
            fetchPromise = fetchPromise.then(options.responseInterceptor);
        }
        fetchPromise.then((response) => this.apiService?.onFinish({ method, options, url, response }), (response) => this.apiService?.onFinish({ method, options, url, response }));
        return from(fetchPromise);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1oYW5kbGVyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBpL2h0dHAtaGFuZGxlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXhDLE9BQU8sRUFBRSxXQUFXLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFFbkUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFdBQVc7SUFDbkQsWUFBc0IsV0FBNEIsRUFBWSxXQUF3QjtRQUNwRixLQUFLLEVBQUUsQ0FBQztRQURZLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUFZLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBRXRGLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBT0QsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFdBQVc7SUFDakQsWUFBc0IsS0FBMkIsRUFBWSxVQUFrQztRQUM3RixLQUFLLEVBQUUsQ0FBQztRQURZLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBQVksZUFBVSxHQUFWLFVBQVUsQ0FBd0I7SUFFL0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFZO1FBQ2pCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQzdCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbkQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxtQkFBbUIsS0FBSyxVQUFVLEVBQUU7WUFDckQsWUFBWSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDL0Q7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUNmLENBQUMsUUFBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUMzRixDQUFDLFFBQXdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FDNUYsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaUNhbGwgfSBmcm9tICcuL2FwaS5tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGZXRjaENsaWVudCwgSUZldGNoUmVzcG9uc2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnLi9pbnRlcmNlcHRvci5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBIdHRwSW50ZXJjZXB0SGFuZGxlciBleHRlbmRzIEh0dHBIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGludGVyY2VwdG9yOiBIdHRwSW50ZXJjZXB0b3IsIHByb3RlY3RlZCBuZXh0SGFuZGxlcjogSHR0cEhhbmRsZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgaGFuZGxlKHJlcTogQXBpQ2FsbCk6IE9ic2VydmFibGU8SUZldGNoUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcmNlcHRvci5pbnRlcmNlcHQocmVxLCB0aGlzLm5leHRIYW5kbGVyKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RTdGFydEFuZEZpbmlzaCB7XG4gIG9uU3RhcnQocmVxOiBBcGlDYWxsKTogdm9pZDtcbiAgb25GaW5pc2gocmVzOiBBcGlDYWxsKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEh0dHBSZXF1ZXN0SGFuZGxlciBleHRlbmRzIEh0dHBIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZldGNoOiBGZXRjaENsaWVudFsnZmV0Y2gnXSwgcHJvdGVjdGVkIGFwaVNlcnZpY2U/OiBSZXF1ZXN0U3RhcnRBbmRGaW5pc2gpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgaGFuZGxlKHJlcTogQXBpQ2FsbCk6IE9ic2VydmFibGU8SUZldGNoUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IG9wdGlvbnMsIHVybCB9ID0gcmVxO1xuICAgIGNvbnN0IHsgbWV0aG9kIH0gPSBvcHRpb25zO1xuICAgIHRoaXMuYXBpU2VydmljZT8ub25TdGFydCh7IG1ldGhvZCwgb3B0aW9ucywgdXJsIH0pO1xuICAgIGxldCBmZXRjaFByb21pc2UgPSB0aGlzLmZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlc3BvbnNlSW50ZXJjZXB0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZldGNoUHJvbWlzZSA9IGZldGNoUHJvbWlzZS50aGVuKG9wdGlvbnMucmVzcG9uc2VJbnRlcmNlcHRvcik7XG4gICAgfVxuICAgIGZldGNoUHJvbWlzZS50aGVuKFxuICAgICAgKHJlc3BvbnNlOiBJRmV0Y2hSZXNwb25zZSkgPT4gdGhpcy5hcGlTZXJ2aWNlPy5vbkZpbmlzaCh7IG1ldGhvZCwgb3B0aW9ucywgdXJsLCByZXNwb25zZSB9KSxcbiAgICAgIChyZXNwb25zZTogSUZldGNoUmVzcG9uc2UpID0+IHRoaXMuYXBpU2VydmljZT8ub25GaW5pc2goeyBtZXRob2QsIG9wdGlvbnMsIHVybCwgcmVzcG9uc2UgfSlcbiAgICApO1xuICAgIHJldHVybiBmcm9tKGZldGNoUHJvbWlzZSk7XG4gIH1cbn1cbiJdfQ==
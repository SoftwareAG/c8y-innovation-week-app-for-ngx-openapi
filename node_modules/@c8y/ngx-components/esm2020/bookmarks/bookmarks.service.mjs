import { Injectable } from '@angular/core';
import { UserPreferencesService } from '@c8y/ngx-components';
import { uniqBy } from 'lodash-es';
import { map } from 'rxjs/internal/operators/map';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class BookmarkService {
    constructor(userPreferencesService) {
        this.userPreferencesService = userPreferencesService;
        this.USER_PREFERENCES_BOOKMARKS_KEY = 'bookmarks';
    }
    async updateBookmarksInStorage(newBookmarks) {
        const existingBookmarks = await this.getBookmarks();
        const mergedBookmarks = [...newBookmarks, ...existingBookmarks];
        const cleanedBookmarks = uniqBy(mergedBookmarks, 'id').filter((bookmark) => !bookmark.markToRemove);
        this.setUserPreferencesBookmarks(cleanedBookmarks);
    }
    getCurrentActiveNodeIcon(document) {
        const BOOKMARK = 'bookmark';
        const iconElement = this.getIconElement(document);
        if (!iconElement) {
            return BOOKMARK;
        }
        const iconClassName = iconElement.className;
        const iconName = this.extractIconName(iconClassName);
        return iconName || BOOKMARK;
    }
    extractIconName(input) {
        const regex = /\b(?:dlt-)?c8y-icon-((?:c8y-)?\w+(?:-[\w-]+)*)\b/g;
        let iconName = null;
        input.replace(regex, (matchedIconString, name) => {
            iconName = matchedIconString.startsWith('dlt-') ? name : 'c8y-' + name;
            return matchedIconString;
        });
        return iconName;
    }
    async getBookmarks() {
        return await this.userPreferencesService
            .get(this.USER_PREFERENCES_BOOKMARKS_KEY)
            .pipe(map((bookmarks) => bookmarks ?? []))
            .toPromise();
    }
    generateRandomID() {
        const array = new Uint8Array(16);
        crypto.getRandomValues(array);
        return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
    }
    getIconElement(document) {
        const currentActiveNode = document.querySelectorAll('.link.active');
        if (!currentActiveNode.length) {
            return null;
        }
        const activeNode = currentActiveNode.item(0);
        return activeNode.firstElementChild.firstChild;
    }
    setUserPreferencesBookmarks(bookmarks) {
        this.userPreferencesService.set(this.USER_PREFERENCES_BOOKMARKS_KEY, bookmarks);
        this.updatedBookmarks = bookmarks;
    }
}
BookmarkService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BookmarkService, deps: [{ token: i1.UserPreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
BookmarkService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BookmarkService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BookmarkService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserPreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9va21hcmtzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9ib29rbWFya3MvYm9va21hcmtzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBSWxELE1BQU0sT0FBTyxlQUFlO0lBSzFCLFlBQW9CLHNCQUE4QztRQUE5QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBSmxFLG1DQUE4QixHQUFHLFdBQVcsQ0FBQztJQUl3QixDQUFDO0lBRXRFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxZQUF3QjtRQUNyRCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BELE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxZQUFZLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQzNELENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUMvQyxDQUFDO1FBRUYsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELHdCQUF3QixDQUFDLFFBQWtCO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUU1QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckQsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBYTtRQUMzQixNQUFNLEtBQUssR0FBRyxtREFBbUQsQ0FBQztRQUNsRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFcEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUMvQyxRQUFRLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDdkUsT0FBTyxpQkFBaUIsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNoQixPQUFPLE1BQU0sSUFBSSxDQUFDLHNCQUFzQjthQUNyQyxHQUFHLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO2FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFxQixFQUFFLEVBQUUsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUM7YUFDckQsU0FBUyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQWtCO1FBQ3ZDLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBYSxDQUFDO1FBQ2hGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQWdCLENBQUM7UUFDNUQsT0FBTyxVQUFVLENBQUMsaUJBQWlCLENBQUMsVUFBeUIsQ0FBQztJQUNoRSxDQUFDO0lBRU8sMkJBQTJCLENBQUMsU0FBcUI7UUFDdkQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztJQUNwQyxDQUFDOzs0R0FyRVUsZUFBZTtnSEFBZixlQUFlLGNBREYsTUFBTTsyRkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyB1bmlxQnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IEJvb2ttYXJrIH0gZnJvbSAnLi9ib29rbWFyay5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQm9va21hcmtTZXJ2aWNlIHtcbiAgVVNFUl9QUkVGRVJFTkNFU19CT09LTUFSS1NfS0VZID0gJ2Jvb2ttYXJrcyc7XG5cbiAgdXBkYXRlZEJvb2ttYXJrczogQm9va21hcmtbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJQcmVmZXJlbmNlc1NlcnZpY2U6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgdXBkYXRlQm9va21hcmtzSW5TdG9yYWdlKG5ld0Jvb2ttYXJrczogQm9va21hcmtbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGV4aXN0aW5nQm9va21hcmtzID0gYXdhaXQgdGhpcy5nZXRCb29rbWFya3MoKTtcbiAgICBjb25zdCBtZXJnZWRCb29rbWFya3MgPSBbLi4ubmV3Qm9va21hcmtzLCAuLi5leGlzdGluZ0Jvb2ttYXJrc107XG4gICAgY29uc3QgY2xlYW5lZEJvb2ttYXJrcyA9IHVuaXFCeShtZXJnZWRCb29rbWFya3MsICdpZCcpLmZpbHRlcihcbiAgICAgIChib29rbWFyazogQm9va21hcmspID0+ICFib29rbWFyay5tYXJrVG9SZW1vdmVcbiAgICApO1xuXG4gICAgdGhpcy5zZXRVc2VyUHJlZmVyZW5jZXNCb29rbWFya3MoY2xlYW5lZEJvb2ttYXJrcyk7XG4gIH1cblxuICBnZXRDdXJyZW50QWN0aXZlTm9kZUljb24oZG9jdW1lbnQ6IERvY3VtZW50KTogc3RyaW5nIHtcbiAgICBjb25zdCBCT09LTUFSSyA9ICdib29rbWFyayc7XG5cbiAgICBjb25zdCBpY29uRWxlbWVudCA9IHRoaXMuZ2V0SWNvbkVsZW1lbnQoZG9jdW1lbnQpO1xuXG4gICAgaWYgKCFpY29uRWxlbWVudCkge1xuICAgICAgcmV0dXJuIEJPT0tNQVJLO1xuICAgIH1cblxuICAgIGNvbnN0IGljb25DbGFzc05hbWUgPSBpY29uRWxlbWVudC5jbGFzc05hbWU7XG4gICAgY29uc3QgaWNvbk5hbWUgPSB0aGlzLmV4dHJhY3RJY29uTmFtZShpY29uQ2xhc3NOYW1lKTtcbiAgICByZXR1cm4gaWNvbk5hbWUgfHwgQk9PS01BUks7XG4gIH1cblxuICBleHRyYWN0SWNvbk5hbWUoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IHJlZ2V4ID0gL1xcYig/OmRsdC0pP2M4eS1pY29uLSgoPzpjOHktKT9cXHcrKD86LVtcXHctXSspKilcXGIvZztcbiAgICBsZXQgaWNvbk5hbWUgPSBudWxsO1xuXG4gICAgaW5wdXQucmVwbGFjZShyZWdleCwgKG1hdGNoZWRJY29uU3RyaW5nLCBuYW1lKSA9PiB7XG4gICAgICBpY29uTmFtZSA9IG1hdGNoZWRJY29uU3RyaW5nLnN0YXJ0c1dpdGgoJ2RsdC0nKSA/IG5hbWUgOiAnYzh5LScgKyBuYW1lO1xuICAgICAgcmV0dXJuIG1hdGNoZWRJY29uU3RyaW5nO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGljb25OYW1lO1xuICB9XG5cbiAgYXN5bmMgZ2V0Qm9va21hcmtzKCk6IFByb21pc2U8Qm9va21hcmtbXT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVzZXJQcmVmZXJlbmNlc1NlcnZpY2VcbiAgICAgIC5nZXQodGhpcy5VU0VSX1BSRUZFUkVOQ0VTX0JPT0tNQVJLU19LRVkpXG4gICAgICAucGlwZShtYXAoKGJvb2ttYXJrczogQm9va21hcmtbXSkgPT4gYm9va21hcmtzID8/IFtdKSlcbiAgICAgIC50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGdlbmVyYXRlUmFuZG9tSUQoKSB7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnJheSwgYnl0ZSA9PiBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SWNvbkVsZW1lbnQoZG9jdW1lbnQ6IERvY3VtZW50KTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgICBjb25zdCBjdXJyZW50QWN0aXZlTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5saW5rLmFjdGl2ZScpIGFzIE5vZGVMaXN0O1xuICAgIGlmICghY3VycmVudEFjdGl2ZU5vZGUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZlTm9kZSA9IGN1cnJlbnRBY3RpdmVOb2RlLml0ZW0oMCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgcmV0dXJuIGFjdGl2ZU5vZGUuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VXNlclByZWZlcmVuY2VzQm9va21hcmtzKGJvb2ttYXJrczogQm9va21hcmtbXSk6IHZvaWQge1xuICAgIHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5zZXQodGhpcy5VU0VSX1BSRUZFUkVOQ0VTX0JPT0tNQVJLU19LRVksIGJvb2ttYXJrcyk7XG4gICAgdGhpcy51cGRhdGVkQm9va21hcmtzID0gYm9va21hcmtzO1xuICB9XG59XG4iXX0=
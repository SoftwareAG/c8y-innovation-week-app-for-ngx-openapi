import { InjectionToken } from '@angular/core';
import { gettext, hookGeneric } from '@c8y/ngx-components';
/**
 * Extension hook allowing to register custom service statuses and configure their visual presentation.
 * @deprecated Consider using the `hookServiceStatus` function instead.
 */
export const HOOK_SERVICE_STATUS = new InjectionToken('HOOK_SERVICE_STATUS');
/**
 * Extension hook allowing to register custom service statuses and configure their visual presentation.
 *
 * You can either provide a single `StatusOption` as parameter:
 * ```typescript
 *  hookServiceStatus(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookServiceStatus([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<StatusOption>`
 * ```typescript
 *  export class MyServiceStatusFactory implements ExtensionFactory<StatusOption> {...}
 *  ...
 *  hookServiceStatus(MyServiceStatusFactory)
 * ```
 * A typed alternative to `HOOK_SERVICE_STATUS`.
 * @param status The `StatusOption`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookServiceStatus(status, options) {
    return hookGeneric(status, HOOK_SERVICE_STATUS, options);
}
/**
 * Standard status options supported by the platform.
 */
export const SERVICE_STATUS_OPTIONS = [
    {
        key: 'up',
        label: gettext('Up'),
        icon: 'check-circle',
        class: 'text-success'
    },
    {
        key: 'down',
        label: gettext('Down'),
        icon: 'exclamation-circle',
        class: 'text-danger'
    },
    {
        key: 'unknown',
        label: gettext('Unknown'),
        icon: 'inactive-state'
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLW9wdGlvbnMubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2aWNlcy9zdGF0dXMtb3B0aW9ucy9zdGF0dXMtb3B0aW9ucy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFnQyxNQUFNLHFCQUFxQixDQUFDO0FBRXpGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUNuRCxxQkFBcUIsQ0FDdEIsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixNQUFxQyxFQUNyQyxPQUE4QjtJQUU5QixPQUFPLFdBQVcsQ0FBZSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekUsQ0FBQztBQXdCRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFtQjtJQUNwRDtRQUNFLEdBQUcsRUFBRSxJQUFJO1FBQ1QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDcEIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsS0FBSyxFQUFFLGNBQWM7S0FDdEI7SUFDRDtRQUNFLEdBQUcsRUFBRSxNQUFNO1FBQ1gsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxFQUFFLG9CQUFvQjtRQUMxQixLQUFLLEVBQUUsYUFBYTtLQUNyQjtJQUNEO1FBQ0UsR0FBRyxFQUFFLFNBQVM7UUFDZCxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6QixJQUFJLEVBQUUsZ0JBQWdCO0tBQ3ZCO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBob29rR2VuZXJpYywgR2VuZXJpY0hvb2tUeXBlLCBIb29rT3B0aW9ucyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG4vKipcbiAqIEV4dGVuc2lvbiBob29rIGFsbG93aW5nIHRvIHJlZ2lzdGVyIGN1c3RvbSBzZXJ2aWNlIHN0YXR1c2VzIGFuZCBjb25maWd1cmUgdGhlaXIgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAqIEBkZXByZWNhdGVkIENvbnNpZGVyIHVzaW5nIHRoZSBgaG9va1NlcnZpY2VTdGF0dXNgIGZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX1NFUlZJQ0VfU1RBVFVTID0gbmV3IEluamVjdGlvblRva2VuPFN0YXR1c09wdGlvbiB8IFN0YXR1c09wdGlvbltdPihcbiAgJ0hPT0tfU0VSVklDRV9TVEFUVVMnXG4pO1xuXG4vKipcbiAqIEV4dGVuc2lvbiBob29rIGFsbG93aW5nIHRvIHJlZ2lzdGVyIGN1c3RvbSBzZXJ2aWNlIHN0YXR1c2VzIGFuZCBjb25maWd1cmUgdGhlaXIgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwcm92aWRlIGEgc2luZ2xlIGBTdGF0dXNPcHRpb25gIGFzIHBhcmFtZXRlcjpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBob29rU2VydmljZVN0YXR1cyguLi4pXG4gKiBgYGBcbiAqXG4gKiBPciBhbiBhcnJheSB0byBkaXJlY3RseSByZWdpc3RlciBtdWx0aXBsZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBob29rU2VydmljZVN0YXR1cyhbLi4uXSlcbiAqIGBgYFxuICpcbiAqIE9yIHlvdSBwcm92aWRlIGFuIFNlcnZpY2UgdGhhdCBpbXBsZW1lbnRzIGBFeHRlbnNpb25GYWN0b3J5PFN0YXR1c09wdGlvbj5gXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgZXhwb3J0IGNsYXNzIE15U2VydmljZVN0YXR1c0ZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFN0YXR1c09wdGlvbj4gey4uLn1cbiAqICAuLi5cbiAqICBob29rU2VydmljZVN0YXR1cyhNeVNlcnZpY2VTdGF0dXNGYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX1NFUlZJQ0VfU1RBVFVTYC5cbiAqIEBwYXJhbSBzdGF0dXMgVGhlIGBTdGF0dXNPcHRpb25gJ3Mgb3IgYEV4dGVuc2lvbkZhY3RvcnlgIHRvIGJlIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gYFByb3ZpZGVyYCB0byBiZSBwcm92aWRlZCBpbiB5b3VyIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvb2tTZXJ2aWNlU3RhdHVzKFxuICBzdGF0dXM6IEdlbmVyaWNIb29rVHlwZTxTdGF0dXNPcHRpb24+LFxuICBvcHRpb25zPzogUGFydGlhbDxIb29rT3B0aW9ucz5cbikge1xuICByZXR1cm4gaG9va0dlbmVyaWM8U3RhdHVzT3B0aW9uPihzdGF0dXMsIEhPT0tfU0VSVklDRV9TVEFUVVMsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIERlZmluZXMgdGhlIHZpc3VhbCBwcmVzZW50YXRpb24gb2YgYSBzZXJ2aWNlIHN0YXR1cyBvcHRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHVzT3B0aW9uIHtcbiAgLyoqXG4gICAqIEtleSB1c2VkIGZvciB0aGlzIHN0YXR1cyBpbiB0aGUgYzh5X1NlcnZpY2Ugb2JqZWN0LlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBIdW1hbiByZWFkYWJsZSBuYW1lIG9mIHRoZSBzdGF0dXMgdXNlZCB0byBiZSB0cmFuc2xhdGVkLlxuICAgKi9cbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGljb24gdG8gdXNlIHRvIGRpc3BsYXkgdGhlIHN0YXR1cy5cbiAgICovXG4gIGljb246IHN0cmluZztcbiAgLyoqXG4gICAqIENTUyBjbGFzcyhlcykgdXNlZCB0byBlLmcuIGFjY2VudCB0aGUgc3RhdHVzIChjb250ZXh0dWFsIGNvbG9yLCBldGMuKVxuICAgKi9cbiAgY2xhc3M/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU3RhbmRhcmQgc3RhdHVzIG9wdGlvbnMgc3VwcG9ydGVkIGJ5IHRoZSBwbGF0Zm9ybS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFUlZJQ0VfU1RBVFVTX09QVElPTlM6IFN0YXR1c09wdGlvbltdID0gW1xuICB7XG4gICAga2V5OiAndXAnLFxuICAgIGxhYmVsOiBnZXR0ZXh0KCdVcCcpLFxuICAgIGljb246ICdjaGVjay1jaXJjbGUnLFxuICAgIGNsYXNzOiAndGV4dC1zdWNjZXNzJ1xuICB9LFxuICB7XG4gICAga2V5OiAnZG93bicsXG4gICAgbGFiZWw6IGdldHRleHQoJ0Rvd24nKSxcbiAgICBpY29uOiAnZXhjbGFtYXRpb24tY2lyY2xlJyxcbiAgICBjbGFzczogJ3RleHQtZGFuZ2VyJ1xuICB9LFxuICB7XG4gICAga2V5OiAndW5rbm93bicsXG4gICAgbGFiZWw6IGdldHRleHQoJ1Vua25vd24nKSxcbiAgICBpY29uOiAnaW5hY3RpdmUtc3RhdGUnXG4gIH1cbl07XG4iXX0=
import { Component } from '@angular/core';
import { CellRendererContext } from '@c8y/ngx-components';
import { StatusOptionsService } from '../../status-options';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "../../status-options";
import * as i3 from "@angular/common";
import * as i4 from "ngx-bootstrap/tooltip";
export class StatusCellRendererComponent {
    constructor(context, statusOptionsService) {
        this.context = context;
        this.statusOptionsService = statusOptionsService;
    }
}
StatusCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StatusCellRendererComponent, deps: [{ token: i1.CellRendererContext }, { token: i2.StatusOptionsService }], target: i0.ɵɵFactoryTarget.Component });
StatusCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: StatusCellRendererComponent, selector: "ng-component", ngImport: i0, template: "<span [ngSwitch]=\"context.item.status\">\n  <ng-container *ngFor=\"let option of statusOptionsService.options\">\n    <i\n      *ngSwitchCase=\"option.key\"\n      [c8yIcon]=\"option.icon\"\n      class=\"{{ option.class }}\"\n      [tooltip]=\"option.label | translate\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </ng-container>\n  <i\n    *ngSwitchDefault\n    c8yIcon=\"job\"\n    class=\"text-primary\"\n    [tooltip]=\"context.item.status\"\n    container=\"body\"\n    placement=\"top\"\n  ></i>\n</span>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i4.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StatusCellRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<span [ngSwitch]=\"context.item.status\">\n  <ng-container *ngFor=\"let option of statusOptionsService.options\">\n    <i\n      *ngSwitchCase=\"option.key\"\n      [c8yIcon]=\"option.icon\"\n      class=\"{{ option.class }}\"\n      [tooltip]=\"option.label | translate\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </ng-container>\n  <i\n    *ngSwitchDefault\n    c8yIcon=\"job\"\n    class=\"text-primary\"\n    [tooltip]=\"context.item.status\"\n    container=\"body\"\n    placement=\"top\"\n  ></i>\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }, { type: i2.StatusOptionsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvc2VydmljZXMtZGV2aWNlLXRhYi9jb2x1bW5zL3N0YXR1cy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL3NlcnZpY2VzLWRldmljZS10YWIvY29sdW1ucy9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7QUFLNUQsTUFBTSxPQUFPLDJCQUEyQjtJQUN0QyxZQUNTLE9BQTRCLEVBQzVCLG9CQUEwQztRQUQxQyxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUM1Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBQ2hELENBQUM7O3dIQUpPLDJCQUEyQjs0R0FBM0IsMkJBQTJCLG9EQ1B4QywwaEJBb0JBOzJGRGJhLDJCQUEyQjtrQkFIdkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbFJlbmRlcmVyQ29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU3RhdHVzT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zdGF0dXMtb3B0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJ3N0YXR1cy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCxcbiAgICBwdWJsaWMgc3RhdHVzT3B0aW9uc1NlcnZpY2U6IFN0YXR1c09wdGlvbnNTZXJ2aWNlXG4gICkge31cbn1cbiIsIjxzcGFuIFtuZ1N3aXRjaF09XCJjb250ZXh0Lml0ZW0uc3RhdHVzXCI+XG4gIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBzdGF0dXNPcHRpb25zU2VydmljZS5vcHRpb25zXCI+XG4gICAgPGlcbiAgICAgICpuZ1N3aXRjaENhc2U9XCJvcHRpb24ua2V5XCJcbiAgICAgIFtjOHlJY29uXT1cIm9wdGlvbi5pY29uXCJcbiAgICAgIGNsYXNzPVwie3sgb3B0aW9uLmNsYXNzIH19XCJcbiAgICAgIFt0b29sdGlwXT1cIm9wdGlvbi5sYWJlbCB8IHRyYW5zbGF0ZVwiXG4gICAgICBjb250YWluZXI9XCJib2R5XCJcbiAgICAgIHBsYWNlbWVudD1cInRvcFwiXG4gICAgPjwvaT5cbiAgPC9uZy1jb250YWluZXI+XG4gIDxpXG4gICAgKm5nU3dpdGNoRGVmYXVsdFxuICAgIGM4eUljb249XCJqb2JcIlxuICAgIGNsYXNzPVwidGV4dC1wcmltYXJ5XCJcbiAgICBbdG9vbHRpcF09XCJjb250ZXh0Lml0ZW0uc3RhdHVzXCJcbiAgICBjb250YWluZXI9XCJib2R5XCJcbiAgICBwbGFjZW1lbnQ9XCJ0b3BcIlxuICA+PC9pPlxuPC9zcGFuPlxuIl19
import { AppStateService, TenantUiService } from '@c8y/ngx-components';
import { BasicAuth, FetchClient } from '@c8y/client';
export class AuthBridgeService {
    constructor(injector, basicAuth, fetchClient, appState, tenantUiService) {
        this.injector = injector;
        this.basicAuth = basicAuth;
        this.fetchClient = fetchClient;
        this.appState = appState;
        this.tenantUiService = tenantUiService;
        this.hookAuth();
    }
    updateBasicAuth(credentials) {
        const { headers } = this.fetchClient.getFetchOptions({});
        if (headers.Authorization) {
            const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
            if (token) {
                this.basicAuth.updateCredentials(credentials);
                this.fetchClient.setAuth(this.basicAuth);
            }
        }
    }
    hookAuth() {
        this.appState.currentUser.subscribe(u => {
            if (u) {
                this.injector.get('c8yAuth').headers = () => this.fetchClient.getFetchOptions({}).headers;
                const { headers } = this.fetchClient.getFetchOptions({});
                if (headers.Authorization) {
                    const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                    if (token) {
                        this.setToken(token, headers.tfatoken);
                    }
                }
                else {
                    this.setToken(undefined, headers.tfatoken, 'Oauth');
                }
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
            }
            else {
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
            }
        });
    }
    setToken(token, tfa, type = 'Basic') {
        const c8yAuth = this.injector.get('c8yAuth');
        if (type === 'Basic') {
            c8yAuth.onSetToken({ token, type });
            if (tfa) {
                c8yAuth.setTFAToken(tfa);
            }
        }
        else {
            c8yAuth.authReady();
        }
    }
    getPreferredLoginOption() {
        return this.tenantUiService.getPreferredLoginOption(this.appState.state.loginOptions);
    }
}
export function authBridgeServiceFactory(injector, basicAuth, fetchClient, appState, tenantUiService) {
    return new AuthBridgeService(injector, basicAuth, fetchClient, appState, tenantUiService);
}
export const authBridgeServiceProvider = {
    provide: AuthBridgeService,
    useFactory: authBridgeServiceFactory,
    deps: ['$injector', BasicAuth, FetchClient, AppStateService, TenantUiService]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1icmlkZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3VwZ3JhZGUvYXV0aC1icmlkZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUVuRSxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQ1MsUUFBYSxFQUNaLFNBQW9CLEVBQ3BCLFdBQXdCLEVBQ3hCLFFBQXlCLEVBQ3pCLGVBQWdDO1FBSmpDLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDWixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUV4QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUF5QjtRQUN2QyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3pCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksS0FBSyxFQUFFO2dCQUNULElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMxQztTQUNGO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEVBQUU7Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDMUYsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUU7b0JBQ3pCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLEtBQUssRUFBRTt3QkFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ3hDO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ3JEO2dCQUNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzdFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQzlFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWMsRUFBRSxHQUFZLEVBQUUsSUFBSSxHQUFHLE9BQU87UUFDbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNwQyxJQUFJLEdBQUcsRUFBRTtnQkFDUCxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzFCO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hGLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsUUFBYSxFQUNiLFNBQW9CLEVBQ3BCLFdBQXdCLEVBQ3hCLFFBQXlCLEVBQ3pCLGVBQWdDO0lBRWhDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDNUYsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsVUFBVSxFQUFFLHdCQUF3QjtJQUNwQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDO0NBQzlFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UsIFRlbmFudFVpU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQmFzaWNBdXRoLCBGZXRjaENsaWVudCwgSUNyZWRlbnRpYWxzIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG5leHBvcnQgY2xhc3MgQXV0aEJyaWRnZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5qZWN0b3I6IGFueSxcbiAgICBwcml2YXRlIGJhc2ljQXV0aDogQmFzaWNBdXRoLFxuICAgIHByaXZhdGUgZmV0Y2hDbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIHRlbmFudFVpU2VydmljZTogVGVuYW50VWlTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuaG9va0F1dGgoKTtcbiAgfVxuXG4gIHVwZGF0ZUJhc2ljQXV0aChjcmVkZW50aWFsczogSUNyZWRlbnRpYWxzKSB7XG4gICAgY29uc3QgeyBoZWFkZXJzIH0gPSB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSk7XG4gICAgaWYgKGhlYWRlcnMuQXV0aG9yaXphdGlvbikge1xuICAgICAgY29uc3QgdG9rZW4gPSBoZWFkZXJzLkF1dGhvcml6YXRpb24ubWF0Y2goL2Jhc2ljXFxzKC4qKSQvaSlbMV07XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgdGhpcy5iYXNpY0F1dGgudXBkYXRlQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgICAgICB0aGlzLmZldGNoQ2xpZW50LnNldEF1dGgodGhpcy5iYXNpY0F1dGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhvb2tBdXRoKCkge1xuICAgIHRoaXMuYXBwU3RhdGUuY3VycmVudFVzZXIuc3Vic2NyaWJlKHUgPT4ge1xuICAgICAgaWYgKHUpIHtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUF1dGgnKS5oZWFkZXJzID0gKCkgPT4gdGhpcy5mZXRjaENsaWVudC5nZXRGZXRjaE9wdGlvbnMoe30pLmhlYWRlcnM7XG4gICAgICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gdGhpcy5mZXRjaENsaWVudC5nZXRGZXRjaE9wdGlvbnMoe30pO1xuICAgICAgICBpZiAoaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBoZWFkZXJzLkF1dGhvcml6YXRpb24ubWF0Y2goL2Jhc2ljXFxzKC4qKSQvaSlbMV07XG4gICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRva2VuKHRva2VuLCBoZWFkZXJzLnRmYXRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRUb2tlbih1bmRlZmluZWQsIGhlYWRlcnMudGZhdG9rZW4sICdPYXV0aCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJykuJGVtaXQoJ2F1dGhTdGF0ZUNoYW5nZScsIHsgaGFzQXV0aDogdHJ1ZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJykuJGVtaXQoJ2F1dGhTdGF0ZUNoYW5nZScsIHsgaGFzQXV0aDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRUb2tlbih0b2tlbj86IHN0cmluZywgdGZhPzogc3RyaW5nLCB0eXBlID0gJ0Jhc2ljJykge1xuICAgIGNvbnN0IGM4eUF1dGggPSB0aGlzLmluamVjdG9yLmdldCgnYzh5QXV0aCcpO1xuICAgIGlmICh0eXBlID09PSAnQmFzaWMnKSB7XG4gICAgICBjOHlBdXRoLm9uU2V0VG9rZW4oeyB0b2tlbiwgdHlwZSB9KTtcbiAgICAgIGlmICh0ZmEpIHtcbiAgICAgICAgYzh5QXV0aC5zZXRURkFUb2tlbih0ZmEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjOHlBdXRoLmF1dGhSZWFkeSgpO1xuICAgIH1cbiAgfVxuXG4gIGdldFByZWZlcnJlZExvZ2luT3B0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRlbmFudFVpU2VydmljZS5nZXRQcmVmZXJyZWRMb2dpbk9wdGlvbih0aGlzLmFwcFN0YXRlLnN0YXRlLmxvZ2luT3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhCcmlkZ2VTZXJ2aWNlRmFjdG9yeShcbiAgaW5qZWN0b3I6IGFueSxcbiAgYmFzaWNBdXRoOiBCYXNpY0F1dGgsXG4gIGZldGNoQ2xpZW50OiBGZXRjaENsaWVudCxcbiAgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgdGVuYW50VWlTZXJ2aWNlOiBUZW5hbnRVaVNlcnZpY2Vcbikge1xuICByZXR1cm4gbmV3IEF1dGhCcmlkZ2VTZXJ2aWNlKGluamVjdG9yLCBiYXNpY0F1dGgsIGZldGNoQ2xpZW50LCBhcHBTdGF0ZSwgdGVuYW50VWlTZXJ2aWNlKTtcbn1cblxuZXhwb3J0IGNvbnN0IGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IEF1dGhCcmlkZ2VTZXJ2aWNlLFxuICB1c2VGYWN0b3J5OiBhdXRoQnJpZGdlU2VydmljZUZhY3RvcnksXG4gIGRlcHM6IFsnJGluamVjdG9yJywgQmFzaWNBdXRoLCBGZXRjaENsaWVudCwgQXBwU3RhdGVTZXJ2aWNlLCBUZW5hbnRVaVNlcnZpY2VdXG59O1xuIl19
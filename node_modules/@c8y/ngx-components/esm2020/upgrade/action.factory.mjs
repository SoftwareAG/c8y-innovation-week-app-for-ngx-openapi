import { Injectable } from '@angular/core';
import { TabsService } from '@c8y/ngx-components';
import { BridgeService } from './bridge.service';
import * as i0 from "@angular/core";
import * as i1 from "./bridge.service";
import * as i2 from "@c8y/ngx-components";
export class Ng1ActionFactoryService {
    constructor(bridge, tabs) {
        this.bridge = bridge;
        this.tabs = tabs;
        this.routeChanges$ = bridge.$routeChanges;
        this.$location = bridge.injector.get('$location');
        this.tabs.items$.subscribe(newTabs => this.handleTabsRedirect(newTabs));
    }
    handleTabsRedirect(tabs) {
        /**
         * This function is doing the same process as function redirect in the file
         * modules/core/ui/navigation/tabs.provider.js
         * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
         */
        const redirectedTab = tabs.find(tab => tab.redirectedTo);
        const [topPriorityTab] = tabs;
        if (redirectedTab && !topPriorityTab.redirectedTo) {
            this.$location.replace();
            this.$location.path(topPriorityTab.path);
            topPriorityTab.redirectedTo = true;
            redirectedTab.redirectedTo = false;
        }
    }
    get() {
        return this.bridge.getActions();
    }
}
Ng1ActionFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ActionFactoryService, deps: [{ token: i1.BridgeService }, { token: i2.TabsService }], target: i0.ɵɵFactoryTarget.Injectable });
Ng1ActionFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ActionFactoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ActionFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BridgeService }, { type: i2.TabsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi91cGdyYWRlL2FjdGlvbi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFpQixXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFJakQsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQyxZQUFvQixNQUFxQixFQUFVLElBQWlCO1FBQWhELFdBQU0sR0FBTixNQUFNLENBQWU7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2xFLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFJO1FBQ3JCOzs7O1dBSUc7UUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO1lBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ25DLGFBQWEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7b0hBM0JVLHVCQUF1Qjt3SEFBdkIsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBRG5DLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25GYWN0b3J5LCBUYWJzU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnJpZGdlU2VydmljZSB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UgaW1wbGVtZW50cyBBY3Rpb25GYWN0b3J5IHtcbiAgcm91dGVDaGFuZ2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAkbG9jYXRpb246IGFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBicmlkZ2U6IEJyaWRnZVNlcnZpY2UsIHByaXZhdGUgdGFiczogVGFic1NlcnZpY2UpIHtcbiAgICB0aGlzLnJvdXRlQ2hhbmdlcyQgPSBicmlkZ2UuJHJvdXRlQ2hhbmdlcztcbiAgICB0aGlzLiRsb2NhdGlvbiA9IGJyaWRnZS5pbmplY3Rvci5nZXQoJyRsb2NhdGlvbicpO1xuICAgIHRoaXMudGFicy5pdGVtcyQuc3Vic2NyaWJlKG5ld1RhYnMgPT4gdGhpcy5oYW5kbGVUYWJzUmVkaXJlY3QobmV3VGFicykpO1xuICB9XG5cbiAgaGFuZGxlVGFic1JlZGlyZWN0KHRhYnMpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGRvaW5nIHRoZSBzYW1lIHByb2Nlc3MgYXMgZnVuY3Rpb24gcmVkaXJlY3QgaW4gdGhlIGZpbGVcbiAgICAgKiBtb2R1bGVzL2NvcmUvdWkvbmF2aWdhdGlvbi90YWJzLnByb3ZpZGVyLmpzXG4gICAgICogVGhhdCBmdW5jdGlvbiAgaXMgbm90IHJ1biBiZWNhdXNlIGJyaWRnZS5zZXJ2aWNlLnRzIG92ZXJyaWRlcyB0aGUgbWV0aG9kIGFkZFRhYiB3aGVyZSB0aGUgcmVkaXJlY3QoKSB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGNvbnN0IHJlZGlyZWN0ZWRUYWIgPSB0YWJzLmZpbmQodGFiID0+IHRhYi5yZWRpcmVjdGVkVG8pO1xuICAgIGNvbnN0IFt0b3BQcmlvcml0eVRhYl0gPSB0YWJzO1xuICAgIGlmIChyZWRpcmVjdGVkVGFiICYmICF0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8pIHtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnBhdGgodG9wUHJpb3JpdHlUYWIucGF0aCk7XG4gICAgICB0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8gPSB0cnVlO1xuICAgICAgcmVkaXJlY3RlZFRhYi5yZWRpcmVjdGVkVG8gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnJpZGdlLmdldEFjdGlvbnMoKTtcbiAgfVxufVxuIl19
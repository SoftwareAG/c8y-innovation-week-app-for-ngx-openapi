import { Injectable, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { getActivatedRoute } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { get } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/ngx-components/context-dashboard";
export class DashboardBridgeService {
    constructor(ng1Injector, zone, router, contextDashboardService) {
        this.ng1Injector = ng1Injector;
        this.zone = zone;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.dashboardSvc = ng1Injector.get('dashboardSvc');
        this.compile = ng1Injector.get('$compile');
    }
    get ng1Components() {
        return this.ng1Injector.get('c8yComponents');
    }
    async instantiateComponent(widget, element) {
        const { dashboard, context, child } = widget;
        if (dashboard) {
            const transformedChild = await this.dashboardSvc.transformChildWithContext(this.dashboardSvc.forcedContext || context, dashboard, child);
            if (this.dashboardSvc.forcedContext || dashboard.deviceType || dashboard.updateTarget) {
                await this.dashboardSvc.updateConfigTargetsWithContext(this.dashboardSvc.forcedContext || context, transformedChild.config);
            }
            return this.zone.runOutsideAngular(() => this.loadTemplate(transformedChild, child, element, context));
        }
        else {
            return this.loadConfigTemplate(element, widget);
        }
    }
    instantiateDeviceSelector(element, widgetConfig) {
        return this.loadConfigTemplate(element, widgetConfig, true);
    }
    loadTemplate(transformedChild, child, element, context) {
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.child = transformedChild;
        scope.dashboardContext = context;
        if (child.widgetComponent) {
            element.innerHTML = `<c8y-ui-component component-name="'${child.widgetComponent}'" config="child.config" context="dashboardContext"></c8y-ui-component>`;
        }
        else if (child.templateUrl) {
            element.innerHTML = `<ng-include src="'${child.templateUrl}'"></ng-include>`;
        }
        this.compile(element)(scope);
        return scope;
    }
    getDashboard() {
        return getActivatedRoute(this.router).snapshot.data.dashboard;
    }
    loadConfigTemplate(element, widgetConfig, onlyDeviceSelector = false) {
        const { settings } = widgetConfig;
        const scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.settings = { ...settings, ...settings.ng1 };
        scope.options = widgetConfig.options;
        scope.config = widgetConfig;
        scope.forms = {};
        scope.rootId = settings.context.id;
        scope.dashboard = get(widgetConfig, 'settings.dashboardMo');
        let configCmp = '';
        if (!onlyDeviceSelector) {
            if (widgetConfig.settings.configComponent) {
                configCmp = `<c8y-ui-component component-name="'${widgetConfig.settings.configComponent}'" config="config"></c8y-ui-component>`;
            }
            else if (widgetConfig.settings.configTemplateUrl) {
                configCmp = `<ng-include src="'${widgetConfig.settings.configTemplateUrl}'"></ng-include>`;
            }
        }
        element.innerHTML = `
    <ng-form name="forms.componentForm">
      <div class="form-group m-0"
        ng-if="!settings.noDeviceTarget"
        ng-style="{height: settings.hideTarget && '0', overflow: 'hidden'}"
      >
      </div>
      ${configCmp}
    </ng-form>`;
        scope.$watch('forms.componentForm.$invalid', formStatus => {
            this.contextDashboardService.formDisabled = formStatus;
        });
        this.compile(element)(scope);
        this.contextDashboardService.formDisabled = scope.forms.componentForm.$invalid;
        return scope;
    }
}
DashboardBridgeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardBridgeService, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable });
DashboardBridgeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardBridgeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardBridgeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined }, { type: i0.NgZone }, { type: i1.Router }, { type: i2.ContextDashboardService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { DynamicDatapointsResolver, DynamicManagedObjectResolver } from '@c8y/ngx-components';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
import { of } from 'rxjs';
import { shareReplay, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./dashboard-bridge.service";
export class Ng1ComponentFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
        this.components$ = of(1).pipe(switchMap(() => this.getComponents()), shareReplay(1), take(1));
    }
    get() {
        return this.components$;
    }
    async getComponents() {
        const ng1Components = await this.bridge.ng1Components.list();
        const components = ng1Components.map(cmp => {
            const resolve = {};
            if (cmp.options?.datapointAttributes && Array.isArray(cmp.options?.datapointAttributes)) {
                cmp.options?.datapointAttributes.forEach(attribute => (resolve[attribute] = DynamicDatapointsResolver));
            }
            if (cmp.options?.managedObjectAttributes &&
                Array.isArray(cmp.options?.managedObjectAttributes)) {
                cmp.options?.managedObjectAttributes.forEach(attribute => (resolve[attribute] = DynamicManagedObjectResolver));
            }
            const data = {
                settings: {
                    ...cmp.options,
                    configTemplateUrl: cmp.configTemplateUrl,
                    widgetComponent: cmp.widgetComponent,
                    configComponent: cmp.configComponent,
                    transformConfigWithContext: cmp.transformConfigWithContext || cmp.componentTransformConfigWithContext,
                    upgrade: true
                }
            };
            data.settings.templateUrl = cmp.templateUrl; // workaround as in object it creates build error
            data.displaySettings = cmp.displaySettings;
            return {
                id: cmp.name,
                label: cmp.nameDisplay || cmp.name,
                description: cmp.description,
                component: WidgetComponent,
                configComponent: WidgetComponent,
                previewImage: cmp.previewImage,
                errorStrategy: cmp.errorStrategy,
                resolve,
                data
            };
        });
        // add the device selector legacy component
        components.push({
            id: 'device.selector.legacy',
            label: 'Device selector',
            description: '',
            data: { settings: { noNewWidgets: true, upgrade: true } },
            component: DeviceSelectorComponent
        });
        return components;
    }
}
Ng1ComponentFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ComponentFactoryService, deps: [{ token: i1.DashboardBridgeService }], target: i0.ɵɵFactoryTarget.Injectable });
Ng1ComponentFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ComponentFactoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1ComponentFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.DashboardBridgeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL2Rhc2hib2FyZC9jb21wb25lbnQuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFFTCx5QkFBeUIsRUFDekIsNEJBQTRCLEVBQzdCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUc5RCxNQUFNLE9BQU8sMEJBQTBCO0lBRXJDLFlBQW9CLE1BQThCO1FBQTlCLFdBQU0sR0FBTixNQUFNLENBQXdCO1FBQ2hELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0IsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUNyQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQ2QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWE7UUFDekIsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3RCxNQUFNLFVBQVUsR0FBaUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2RSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDbkIsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLG1CQUFtQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxFQUFFO2dCQUN2RixHQUFHLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLE9BQU8sQ0FDdEMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyx5QkFBZ0MsQ0FBQyxDQUNyRSxDQUFDO2FBQ0g7WUFDRCxJQUNFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCO2dCQUNwQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUMsRUFDbkQ7Z0JBQ0EsR0FBRyxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQyxPQUFPLENBQzFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsNEJBQW1DLENBQUMsQ0FDeEUsQ0FBQzthQUNIO1lBQ0QsTUFBTSxJQUFJLEdBQUc7Z0JBQ1gsUUFBUSxFQUFFO29CQUNSLEdBQUcsR0FBRyxDQUFDLE9BQU87b0JBQ2QsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLGlCQUFpQjtvQkFDeEMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxlQUFlO29CQUNwQyxlQUFlLEVBQUUsR0FBRyxDQUFDLGVBQWU7b0JBQ3BDLDBCQUEwQixFQUN4QixHQUFHLENBQUMsMEJBQTBCLElBQUksR0FBRyxDQUFDLG1DQUFtQztvQkFDM0UsT0FBTyxFQUFFLElBQUk7aUJBQ2Q7YUFDSyxDQUFDO1lBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGlEQUFpRDtZQUM5RixJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFFM0MsT0FBTztnQkFDTCxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ1osS0FBSyxFQUFFLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLElBQUk7Z0JBQ2xDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVztnQkFDNUIsU0FBUyxFQUFFLGVBQWU7Z0JBQzFCLGVBQWUsRUFBRSxlQUFlO2dCQUNoQyxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVk7Z0JBQzlCLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYTtnQkFDaEMsT0FBTztnQkFDUCxJQUFJO2FBQ3lCLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCwyQ0FBMkM7UUFDM0MsVUFBVSxDQUFDLElBQUksQ0FBQztZQUNkLEVBQUUsRUFBRSx3QkFBd0I7WUFDNUIsS0FBSyxFQUFFLGlCQUFpQjtZQUN4QixXQUFXLEVBQUUsRUFBRTtZQUNmLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3pELFNBQVMsRUFBRSx1QkFBdUI7U0FDbkMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7dUhBcEVVLDBCQUEwQjsySEFBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBRHRDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbixcbiAgRHluYW1pY0RhdGFwb2ludHNSZXNvbHZlcixcbiAgRHluYW1pY01hbmFnZWRPYmplY3RSZXNvbHZlclxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZzFDb21wb25lbnRGYWN0b3J5U2VydmljZSB7XG4gIHByaXZhdGUgY29tcG9uZW50cyQ6IE9ic2VydmFibGU8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXT47XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJpZGdlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlKSB7XG4gICAgdGhpcy5jb21wb25lbnRzJCA9IG9mKDEpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRDb21wb25lbnRzKCkpLFxuICAgICAgc2hhcmVSZXBsYXkoMSksXG4gICAgICB0YWtlKDEpXG4gICAgKTtcbiAgfVxuXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzJDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0Q29tcG9uZW50cygpOiBQcm9taXNlPER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uW10+IHtcbiAgICBjb25zdCBuZzFDb21wb25lbnRzID0gYXdhaXQgdGhpcy5icmlkZ2UubmcxQ29tcG9uZW50cy5saXN0KCk7XG4gICAgY29uc3QgY29tcG9uZW50czogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXSA9IG5nMUNvbXBvbmVudHMubWFwKGNtcCA9PiB7XG4gICAgICBjb25zdCByZXNvbHZlID0ge307XG4gICAgICBpZiAoY21wLm9wdGlvbnM/LmRhdGFwb2ludEF0dHJpYnV0ZXMgJiYgQXJyYXkuaXNBcnJheShjbXAub3B0aW9ucz8uZGF0YXBvaW50QXR0cmlidXRlcykpIHtcbiAgICAgICAgY21wLm9wdGlvbnM/LmRhdGFwb2ludEF0dHJpYnV0ZXMuZm9yRWFjaChcbiAgICAgICAgICBhdHRyaWJ1dGUgPT4gKHJlc29sdmVbYXR0cmlidXRlXSA9IER5bmFtaWNEYXRhcG9pbnRzUmVzb2x2ZXIgYXMgYW55KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBjbXAub3B0aW9ucz8ubWFuYWdlZE9iamVjdEF0dHJpYnV0ZXMgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShjbXAub3B0aW9ucz8ubWFuYWdlZE9iamVjdEF0dHJpYnV0ZXMpXG4gICAgICApIHtcbiAgICAgICAgY21wLm9wdGlvbnM/Lm1hbmFnZWRPYmplY3RBdHRyaWJ1dGVzLmZvckVhY2goXG4gICAgICAgICAgYXR0cmlidXRlID0+IChyZXNvbHZlW2F0dHJpYnV0ZV0gPSBEeW5hbWljTWFuYWdlZE9iamVjdFJlc29sdmVyIGFzIGFueSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgLi4uY21wLm9wdGlvbnMsXG4gICAgICAgICAgY29uZmlnVGVtcGxhdGVVcmw6IGNtcC5jb25maWdUZW1wbGF0ZVVybCxcbiAgICAgICAgICB3aWRnZXRDb21wb25lbnQ6IGNtcC53aWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgY29uZmlnQ29tcG9uZW50OiBjbXAuY29uZmlnQ29tcG9uZW50LFxuICAgICAgICAgIHRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0OlxuICAgICAgICAgICAgY21wLnRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0IHx8IGNtcC5jb21wb25lbnRUcmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dCxcbiAgICAgICAgICB1cGdyYWRlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gYXMgYW55O1xuICAgICAgZGF0YS5zZXR0aW5ncy50ZW1wbGF0ZVVybCA9IGNtcC50ZW1wbGF0ZVVybDsgLy8gd29ya2Fyb3VuZCBhcyBpbiBvYmplY3QgaXQgY3JlYXRlcyBidWlsZCBlcnJvclxuICAgICAgZGF0YS5kaXNwbGF5U2V0dGluZ3MgPSBjbXAuZGlzcGxheVNldHRpbmdzO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY21wLm5hbWUsXG4gICAgICAgIGxhYmVsOiBjbXAubmFtZURpc3BsYXkgfHwgY21wLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjbXAuZGVzY3JpcHRpb24sXG4gICAgICAgIGNvbXBvbmVudDogV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICBjb25maWdDb21wb25lbnQ6IFdpZGdldENvbXBvbmVudCxcbiAgICAgICAgcHJldmlld0ltYWdlOiBjbXAucHJldmlld0ltYWdlLFxuICAgICAgICBlcnJvclN0cmF0ZWd5OiBjbXAuZXJyb3JTdHJhdGVneSxcbiAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgZGF0YVxuICAgICAgfSBhcyBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbjtcbiAgICB9KTtcblxuICAgIC8vIGFkZCB0aGUgZGV2aWNlIHNlbGVjdG9yIGxlZ2FjeSBjb21wb25lbnRcbiAgICBjb21wb25lbnRzLnB1c2goe1xuICAgICAgaWQ6ICdkZXZpY2Uuc2VsZWN0b3IubGVnYWN5JyxcbiAgICAgIGxhYmVsOiAnRGV2aWNlIHNlbGVjdG9yJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgIGRhdGE6IHsgc2V0dGluZ3M6IHsgbm9OZXdXaWRnZXRzOiB0cnVlLCB1cGdyYWRlOiB0cnVlIH0gfSxcbiAgICAgIGNvbXBvbmVudDogRGV2aWNlU2VsZWN0b3JDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBjb21wb25lbnRzO1xuICB9XG59XG4iXX0=
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { BridgeService } from './bridge.service';
import * as i0 from "@angular/core";
import * as i1 from "./bridge.service";
export class Ng1BreadcrumbFactoryService {
    constructor(bridge) {
        this.bridge = bridge;
        this.trigger = new ReplaySubject(1);
        this.breadcrumbs = this.trigger.pipe(debounceTime(100), switchMap(() => {
            return this.bridge.getBreadcrumbs();
        }));
    }
    get() {
        this.trigger.next();
        return this.breadcrumbs;
    }
}
Ng1BreadcrumbFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1BreadcrumbFactoryService, deps: [{ token: i1.BridgeService }], target: i0.ɵɵFactoryTarget.Injectable });
Ng1BreadcrumbFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1BreadcrumbFactoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Ng1BreadcrumbFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.BridgeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdXBncmFkZS9icmVhZGNydW1iLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFHakQsTUFBTSxPQUFPLDJCQUEyQjtJQVF0QyxZQUFvQixNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO1FBUGpDLFlBQU8sR0FBUSxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxnQkFBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNyQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUMwQyxDQUFDO0lBRTdDLEdBQUc7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzt3SEFiVSwyQkFBMkI7NEhBQTNCLDJCQUEyQjsyRkFBM0IsMkJBQTJCO2tCQUR2QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYkZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnJpZGdlU2VydmljZSB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlIGltcGxlbWVudHMgQnJlYWRjcnVtYkZhY3Rvcnkge1xuICBwcml2YXRlIHRyaWdnZXI6IGFueSA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIGJyZWFkY3J1bWJzID0gdGhpcy50cmlnZ2VyLnBpcGUoXG4gICAgZGVib3VuY2VUaW1lKDEwMCksXG4gICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmJyaWRnZS5nZXRCcmVhZGNydW1icygpO1xuICAgIH0pXG4gICk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJpZGdlOiBCcmlkZ2VTZXJ2aWNlKSB7fVxuXG4gIGdldCgpIHtcbiAgICB0aGlzLnRyaWdnZXIubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmJyZWFkY3J1bWJzO1xuICB9XG59XG4iXX0=
const rootComponent = {
    template: `
  <c8y-bootstrap>
    <div id="c8y-legacy-view">
      <div ng-view ng-if="vm.widthSet && vm.authState.hasAuth"></div>
    </div>
  </c8y-bootstrap>`,
    controller: c8yUiRootController,
    controllerAs: 'vm'
};
function c8yUiRootController($rootScope, $timeout, c8yBase, c8yNavigator, c8yApplication, c8yHeaderService) {
    'ngInject';
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const vm = this;
    Object.assign(vm, {
        $onInit,
        navOpen: false
    });
    ////////////
    function $onInit() {
        c8yHeaderService
            .map(states => states.nav.open)
            .subscribe(isOpen => {
            vm.navOpen = isOpen;
        });
        c8yHeaderService.configNavigator({ canToggle: true });
        $rootScope.$on('authStateChange', onAuthStateChange);
        vm.rootNodes = c8yNavigator.rootNodes;
        c8yApplication.currentAppCached().then(onAppInfo);
        vm.navHiddenOnStartup = c8yBase.appOption('hide_navigator');
        checkReady();
    }
    function onAuthStateChange(evt, data) {
        vm.authState = data;
    }
    function onAppInfo() {
        vm.tabsHorizontal = c8yBase.appOption('tabsHorizontal');
    }
    function checkReady() {
        const element = document.querySelector('#c8y-legacy-view');
        const hasWidth = element && element.clientWidth;
        if (hasWidth) {
            vm.widthSet = true;
        }
        else {
            $timeout(checkReady);
        }
    }
}
export { rootComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL25nMS9yb290LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLGFBQWEsR0FBRztJQUNwQixRQUFRLEVBQUU7Ozs7O21CQUtPO0lBQ2pCLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsWUFBWSxFQUFFLElBQUk7Q0FDbkIsQ0FBQztBQUVGLFNBQVMsbUJBQW1CLENBQzFCLFVBQVUsRUFDVixRQUFRLEVBQ1IsT0FBTyxFQUNQLFlBQVksRUFDWixjQUFjLEVBQ2QsZ0JBQWdCO0lBRWhCLFVBQVUsQ0FBQztJQUNYLDREQUE0RDtJQUM1RCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDaEIsT0FBTztRQUNQLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsWUFBWTtJQUVaLFNBQVMsT0FBTztRQUNkLGdCQUFnQjthQUNiLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2FBQzlCLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsQixFQUFFLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUNMLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELFVBQVUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxFQUFFLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDdEMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsVUFBVSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSTtRQUNsQyxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxTQUFTO1FBQ2hCLEVBQUUsQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxTQUFTLFVBQVU7UUFDakIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNELE1BQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksUUFBUSxFQUFFO1lBQ1osRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDcEI7YUFBTTtZQUNMLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7QUFDSCxDQUFDO0FBQ0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgcm9vdENvbXBvbmVudCA9IHtcbiAgdGVtcGxhdGU6IGBcbiAgPGM4eS1ib290c3RyYXA+XG4gICAgPGRpdiBpZD1cImM4eS1sZWdhY3ktdmlld1wiPlxuICAgICAgPGRpdiBuZy12aWV3IG5nLWlmPVwidm0ud2lkdGhTZXQgJiYgdm0uYXV0aFN0YXRlLmhhc0F1dGhcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9jOHktYm9vdHN0cmFwPmAsXG4gIGNvbnRyb2xsZXI6IGM4eVVpUm9vdENvbnRyb2xsZXIsXG4gIGNvbnRyb2xsZXJBczogJ3ZtJ1xufTtcblxuZnVuY3Rpb24gYzh5VWlSb290Q29udHJvbGxlcihcbiAgJHJvb3RTY29wZSxcbiAgJHRpbWVvdXQsXG4gIGM4eUJhc2UsXG4gIGM4eU5hdmlnYXRvcixcbiAgYzh5QXBwbGljYXRpb24sXG4gIGM4eUhlYWRlclNlcnZpY2Vcbikge1xuICAnbmdJbmplY3QnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgY29uc3Qgdm0gPSB0aGlzO1xuXG4gIE9iamVjdC5hc3NpZ24odm0sIHtcbiAgICAkb25Jbml0LFxuICAgIG5hdk9wZW46IGZhbHNlXG4gIH0pO1xuXG4gIC8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uICRvbkluaXQoKSB7XG4gICAgYzh5SGVhZGVyU2VydmljZVxuICAgICAgLm1hcChzdGF0ZXMgPT4gc3RhdGVzLm5hdi5vcGVuKVxuICAgICAgLnN1YnNjcmliZShpc09wZW4gPT4ge1xuICAgICAgICB2bS5uYXZPcGVuID0gaXNPcGVuO1xuICAgICAgfSk7XG4gICAgYzh5SGVhZGVyU2VydmljZS5jb25maWdOYXZpZ2F0b3IoeyBjYW5Ub2dnbGU6IHRydWUgfSk7XG4gICAgJHJvb3RTY29wZS4kb24oJ2F1dGhTdGF0ZUNoYW5nZScsIG9uQXV0aFN0YXRlQ2hhbmdlKTtcbiAgICB2bS5yb290Tm9kZXMgPSBjOHlOYXZpZ2F0b3Iucm9vdE5vZGVzO1xuICAgIGM4eUFwcGxpY2F0aW9uLmN1cnJlbnRBcHBDYWNoZWQoKS50aGVuKG9uQXBwSW5mbyk7XG4gICAgdm0ubmF2SGlkZGVuT25TdGFydHVwID0gYzh5QmFzZS5hcHBPcHRpb24oJ2hpZGVfbmF2aWdhdG9yJyk7XG4gICAgY2hlY2tSZWFkeSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25BdXRoU3RhdGVDaGFuZ2UoZXZ0LCBkYXRhKSB7XG4gICAgdm0uYXV0aFN0YXRlID0gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQXBwSW5mbygpIHtcbiAgICB2bS50YWJzSG9yaXpvbnRhbCA9IGM4eUJhc2UuYXBwT3B0aW9uKCd0YWJzSG9yaXpvbnRhbCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSZWFkeSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2M4eS1sZWdhY3ktdmlldycpO1xuICAgIGNvbnN0IGhhc1dpZHRoID0gZWxlbWVudCAmJiBlbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIGlmIChoYXNXaWR0aCkge1xuICAgICAgdm0ud2lkdGhTZXQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAkdGltZW91dChjaGVja1JlYWR5KTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCB7IHJvb3RDb21wb25lbnQgfTtcbiJdfQ==
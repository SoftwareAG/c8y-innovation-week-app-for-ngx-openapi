import { downgradeComponent } from '@angular/upgrade/static';
import { BootstrapComponent, DataGridComponent, UserTotpRevokeComponent, LoadingComponent, HighlightComponent, EmptyStateComponent, PasswordInputComponent } from '@c8y/ngx-components';
import { AppLogsAutoRefreshComponent } from '@c8y/ngx-components/app-logs';
import { RangeDisplayComponent } from '@c8y/ngx-components';
import { HelpComponent } from '@c8y/ngx-components';
import { DatapointSelectionListComponent } from '@c8y/ngx-components/datapoint-selector';
import { PaginationComponent } from 'ngx-bootstrap/pagination';
import { RolesAssetTreeComponent } from '@c8y/ngx-components/user-roles';
export const bootstrapComponent = downgradeComponent({ component: BootstrapComponent });
export const userTotpComponent = downgradeComponent({ component: UserTotpRevokeComponent });
export const appLogsAutoRefreshComponent = downgradeComponent({
    component: AppLogsAutoRefreshComponent
});
export const dataGridComponent = downgradeComponent({ component: DataGridComponent });
export const loadingComponent = downgradeComponent({ component: LoadingComponent });
export const rangeDisplayComponent = downgradeComponent({ component: RangeDisplayComponent });
export const helpComponent = downgradeComponent({ component: HelpComponent });
export const highlightComponent = downgradeComponent({
    component: HighlightComponent,
    inputs: ['pattern', 'text']
});
export const emptyStateComponent = downgradeComponent({ component: EmptyStateComponent });
export const datapointSelectionListComponent = downgradeComponent({
    component: DatapointSelectionListComponent
});
export const paginationComponent = downgradeComponent({ component: PaginationComponent });
export const rolesAssetTreeComponent = downgradeComponent({ component: RolesAssetTreeComponent });
export const passwordInputComponent = downgradeComponent({ component: PasswordInputComponent });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmdyYWRlZC5jb21wb25lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9uZzEvZG93bmdyYWRlZC5jb21wb25lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixnQkFBZ0IsRUFDaEIsa0JBQWtCLEVBQ2xCLG1CQUFtQixFQUNuQixzQkFBc0IsRUFDdkIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMzRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDekYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFekUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0FBQ3hGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztBQUM1RixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxrQkFBa0IsQ0FBQztJQUM1RCxTQUFTLEVBQUUsMkJBQTJCO0NBQ3ZDLENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztBQUN0RixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUFDcEYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0FBQzlGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBQ25ELFNBQVMsRUFBRSxrQkFBa0I7SUFDN0IsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQztDQUM1QixDQUFDLENBQUM7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDMUYsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUcsa0JBQWtCLENBQUM7SUFDaEUsU0FBUyxFQUFFLCtCQUErQjtDQUMzQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDMUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO0FBQ2xHLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLGtCQUFrQixDQUFDLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRvd25ncmFkZUNvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL3VwZ3JhZGUvc3RhdGljJztcbmltcG9ydCB7XG4gIEJvb3RzdHJhcENvbXBvbmVudCxcbiAgRGF0YUdyaWRDb21wb25lbnQsXG4gIFVzZXJUb3RwUmV2b2tlQ29tcG9uZW50LFxuICBMb2FkaW5nQ29tcG9uZW50LFxuICBIaWdobGlnaHRDb21wb25lbnQsXG4gIEVtcHR5U3RhdGVDb21wb25lbnQsXG4gIFBhc3N3b3JkSW5wdXRDb21wb25lbnRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBcHBMb2dzQXV0b1JlZnJlc2hDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2FwcC1sb2dzJztcbmltcG9ydCB7IFJhbmdlRGlzcGxheUNvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSGVscENvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGF0YXBvaW50U2VsZWN0aW9uTGlzdENvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGF0YXBvaW50LXNlbGVjdG9yJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db21wb25lbnQgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BhZ2luYXRpb24nO1xuaW1wb3J0IHsgUm9sZXNBc3NldFRyZWVDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3VzZXItcm9sZXMnO1xuXG5leHBvcnQgY29uc3QgYm9vdHN0cmFwQ29tcG9uZW50ID0gZG93bmdyYWRlQ29tcG9uZW50KHsgY29tcG9uZW50OiBCb290c3RyYXBDb21wb25lbnQgfSk7XG5leHBvcnQgY29uc3QgdXNlclRvdHBDb21wb25lbnQgPSBkb3duZ3JhZGVDb21wb25lbnQoeyBjb21wb25lbnQ6IFVzZXJUb3RwUmV2b2tlQ29tcG9uZW50IH0pO1xuZXhwb3J0IGNvbnN0IGFwcExvZ3NBdXRvUmVmcmVzaENvbXBvbmVudCA9IGRvd25ncmFkZUNvbXBvbmVudCh7XG4gIGNvbXBvbmVudDogQXBwTG9nc0F1dG9SZWZyZXNoQ29tcG9uZW50XG59KTtcbmV4cG9ydCBjb25zdCBkYXRhR3JpZENvbXBvbmVudCA9IGRvd25ncmFkZUNvbXBvbmVudCh7IGNvbXBvbmVudDogRGF0YUdyaWRDb21wb25lbnQgfSk7XG5leHBvcnQgY29uc3QgbG9hZGluZ0NvbXBvbmVudCA9IGRvd25ncmFkZUNvbXBvbmVudCh7IGNvbXBvbmVudDogTG9hZGluZ0NvbXBvbmVudCB9KTtcbmV4cG9ydCBjb25zdCByYW5nZURpc3BsYXlDb21wb25lbnQgPSBkb3duZ3JhZGVDb21wb25lbnQoeyBjb21wb25lbnQ6IFJhbmdlRGlzcGxheUNvbXBvbmVudCB9KTtcbmV4cG9ydCBjb25zdCBoZWxwQ29tcG9uZW50ID0gZG93bmdyYWRlQ29tcG9uZW50KHsgY29tcG9uZW50OiBIZWxwQ29tcG9uZW50IH0pO1xuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodENvbXBvbmVudCA9IGRvd25ncmFkZUNvbXBvbmVudCh7XG4gIGNvbXBvbmVudDogSGlnaGxpZ2h0Q29tcG9uZW50LFxuICBpbnB1dHM6IFsncGF0dGVybicsICd0ZXh0J11cbn0pO1xuZXhwb3J0IGNvbnN0IGVtcHR5U3RhdGVDb21wb25lbnQgPSBkb3duZ3JhZGVDb21wb25lbnQoeyBjb21wb25lbnQ6IEVtcHR5U3RhdGVDb21wb25lbnQgfSk7XG5leHBvcnQgY29uc3QgZGF0YXBvaW50U2VsZWN0aW9uTGlzdENvbXBvbmVudCA9IGRvd25ncmFkZUNvbXBvbmVudCh7XG4gIGNvbXBvbmVudDogRGF0YXBvaW50U2VsZWN0aW9uTGlzdENvbXBvbmVudFxufSk7XG5cbmV4cG9ydCBjb25zdCBwYWdpbmF0aW9uQ29tcG9uZW50ID0gZG93bmdyYWRlQ29tcG9uZW50KHsgY29tcG9uZW50OiBQYWdpbmF0aW9uQ29tcG9uZW50IH0pO1xuZXhwb3J0IGNvbnN0IHJvbGVzQXNzZXRUcmVlQ29tcG9uZW50ID0gZG93bmdyYWRlQ29tcG9uZW50KHsgY29tcG9uZW50OiBSb2xlc0Fzc2V0VHJlZUNvbXBvbmVudCB9KTtcbmV4cG9ydCBjb25zdCBwYXNzd29yZElucHV0Q29tcG9uZW50ID0gZG93bmdyYWRlQ29tcG9uZW50KHsgY29tcG9uZW50OiBQYXNzd29yZElucHV0Q29tcG9uZW50IH0pO1xuIl19
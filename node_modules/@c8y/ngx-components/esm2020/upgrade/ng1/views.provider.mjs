import { ViewContext } from '@c8y/ngx-components';
import { find, forEach, map, startsWith, unary } from 'lodash-es';
import { ReplaySubject } from 'rxjs';
export var ViewContextLegacyParameter;
(function (ViewContextLegacyParameter) {
    ViewContextLegacyParameter["Device"] = "deviceId";
    ViewContextLegacyParameter["Group"] = "groupId";
    ViewContextLegacyParameter["User"] = "userId";
    ViewContextLegacyParameter["Application"] = "applicationId";
    ViewContextLegacyParameter["Microservice"] = "applicationId";
    ViewContextLegacyParameter["SubscribedApplications"] = "applicationId";
    ViewContextLegacyParameter["Tenant"] = "tenantId";
    ViewContextLegacyParameter["Service"] = "deviceId"; // use 'deviceId' as parameter name so that device views (Measurements, Events, Alarms) can be reused for service
})(ViewContextLegacyParameter || (ViewContextLegacyParameter = {}));
function c8yViewsProvider($routeProvider, c8yTabsProvider, c8yPathUtils) {
    'ngInject';
    const viewMap = {};
    const contextViews = new ReplaySubject();
    return {
        when,
        $get() {
            return {
                contextViews,
                when(path, cfg) {
                    return when(path, cfg, true);
                },
                getByPath,
                prefixWithSlash
            };
        }
    };
    /**
     * @ngdoc function
     * @name when
     * @methodOf c8y.ui.provider:c8yViewsProvider
     *
     * @description
     * Defines a view for given route.
     * If multiple views are defined for a single route then there will be a separate tab for each view available when user visits that route.
     *
     * @param path Target route.
     * @param cfg View configuration object with the following properties:
     *
     * - **name** - `string` - View's name (in case of multiple views at single route this will be displayed as tab's title).
     * - **priority** - `integer` - View's priority (in case of multiple views at single route this will determine the position of view's tab in the tabs stack).
     * - **icon** - `string` - Font Awesome icon name for the view (displayed on the tab's header).
     * - **showIf** - `function` - Function returning boolean value indicating whether to show a tab for the view or not.
     * - **templateUrl** - `string` - Path to the template to use for displaying the view.
     *
     * You can also provide other view options - the same as available for standard {@link https://docs.angularjs.org/api/ngRoute/provider/$routeProvider $routeProvider} in AngularJS.
     *
     * @example
     * The following example demonstrates how to add a new view to device details route
     * (which will be displayed as a tab if other views are assigned to the same route):
     * <pre>
     *   c8yViewsProvider.when('/device/:deviceId', {
     *     name: 'Tracking',
     *     templateUrl: ':::PLUGIN_PATH:::/views/index.html',
     *     icon: 'crosshairs',
     *     showIf: ['$routeParams', 'c8yDevices', function ($routeParams, c8yDevices) {
     *       var deviceId = $routeParams.deviceId;
     *       return c8yDevices.detailCached(deviceId).then(function (res) {
     *         var device = res.data;
     *         return device && (device.c8y_MotionTracking || device.c8y_Geofence);
     *       });
     *     }]
     *   });
     * </pre>
     */
    function when(path, cfg, runPhase) {
        const newPath = prefixWithSlash(path);
        cfg.resolve = cfg.resolve || {};
        // eslint-disable-next-line no-underscore-dangle
        cfg.resolve.__c8y_locales = [
            'c8yLocales',
            c8yLocales => {
                return c8yLocales.initDone;
            }
        ];
        let currentCfg = viewMap[newPath];
        const originalPath = newPath;
        if (!cfg.name) {
            // console.warn('View name not defined');
        }
        if (!currentCfg) {
            viewMap[newPath] = [];
            currentCfg = viewMap[newPath];
        }
        const upgradedContext = Object.keys(ViewContext)
            .map(key => ({
            key,
            isUpgrade: prefixWithSlash(ViewContext[key].replace('id', ViewContextLegacyParameter[key])) === path
        }))
            .find(({ isUpgrade }) => isUpgrade);
        if (upgradedContext) {
            currentCfg.push(cfg);
            cfg.path = newPath;
            const p = c8yPathUtils.appendSegment(originalPath.replace(path, ''), cfg.name);
            contextViews.next({
                ...cfg,
                path: cfg.name ? p.substring(1) : '',
                contextKey: upgradedContext.key,
                runPhase
            });
            cfg.showIf = undefined;
            if (cfg.name) {
                cfg.path = c8yPathUtils.appendSegment(originalPath, cfg.name);
            }
        }
        else {
            if (currentCfg.length === 1) {
                const [existingConfig] = currentCfg;
                existingConfig.path = c8yPathUtils.appendSegment(originalPath, existingConfig.name);
                existingConfig.tab = createTab(originalPath, existingConfig);
                $routeProvider.when(existingConfig.path, existingConfig);
            }
            currentCfg.push(cfg);
            cfg.path = newPath;
            if (currentCfg.length > 1) {
                cfg.path = c8yPathUtils.appendSegment(originalPath, cfg.name);
                createTab(originalPath, cfg);
                $routeProvider.when(prefixWithSlash(originalPath), {
                    resolveRedirectTo($route, $q, c8yUiUtil, c8yTabs, gettextCatalog) {
                        'ngInject';
                        const sortedCurrentCfg = c8yTabsProvider.sortTabsViews(currentCfg, gettextCatalog);
                        const params = $route.current.pathParams;
                        return $q
                            .all(map(sortedCurrentCfg, unary(c8yUiUtil.configureVisibility)))
                            .then(views => {
                            const first = find(views, 'show');
                            let url = first.path;
                            forEach(params, (val, key) => {
                                url = url.replace(`:${key}`, val);
                            });
                            c8yTabs.redirectedViewPath = url;
                            return url;
                        });
                    }
                });
            }
        }
        return $routeProvider.when(prefixWithSlash(cfg.path), cfg);
    }
    function getByPath(path) {
        return viewMap[prefixWithSlash(path)];
    }
    function createTab(path, cfg) {
        c8yTabsProvider.addTab(path, cfg);
    }
    function prefixWithSlash(path) {
        const prefix = startsWith(path, '/') ? '' : '/';
        return prefix + path;
    }
}
export { c8yViewsProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3MucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi91cGdyYWRlL25nMS92aWV3cy5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQyxNQUFNLENBQU4sSUFBWSwwQkFTWDtBQVRELFdBQVksMEJBQTBCO0lBQ3BDLGlEQUFtQixDQUFBO0lBQ25CLCtDQUFpQixDQUFBO0lBQ2pCLDZDQUFlLENBQUE7SUFDZiwyREFBNkIsQ0FBQTtJQUM3Qiw0REFBOEIsQ0FBQTtJQUM5QixzRUFBd0MsQ0FBQTtJQUN4QyxpREFBbUIsQ0FBQTtJQUNuQixrREFBb0IsQ0FBQSxDQUFDLGlIQUFpSDtBQUN4SSxDQUFDLEVBVFcsMEJBQTBCLEtBQTFCLDBCQUEwQixRQVNyQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLGVBQWUsRUFBRSxZQUFZO0lBQ3JFLFVBQVUsQ0FBQztJQUVYLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNuQixNQUFNLFlBQVksR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBRXpDLE9BQU87UUFDTCxJQUFJO1FBQ0osSUFBSTtZQUNGLE9BQU87Z0JBQ0wsWUFBWTtnQkFDWixJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUc7b0JBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFDRCxTQUFTO2dCQUNULGVBQWU7YUFDaEIsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0lBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QU8sY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFJO1FBQ3JCLE9BQU8sT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRztRQUMxQixlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsSUFBSTtRQUMzQixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNoRCxPQUFPLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDdkIsQ0FBQztBQUNILENBQUM7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBmaW5kLCBmb3JFYWNoLCBtYXAsIHN0YXJ0c1dpdGgsIHVuYXJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGVudW0gVmlld0NvbnRleHRMZWdhY3lQYXJhbWV0ZXIge1xuICBEZXZpY2UgPSAnZGV2aWNlSWQnLFxuICBHcm91cCA9ICdncm91cElkJyxcbiAgVXNlciA9ICd1c2VySWQnLFxuICBBcHBsaWNhdGlvbiA9ICdhcHBsaWNhdGlvbklkJyxcbiAgTWljcm9zZXJ2aWNlID0gJ2FwcGxpY2F0aW9uSWQnLFxuICBTdWJzY3JpYmVkQXBwbGljYXRpb25zID0gJ2FwcGxpY2F0aW9uSWQnLFxuICBUZW5hbnQgPSAndGVuYW50SWQnLFxuICBTZXJ2aWNlID0gJ2RldmljZUlkJyAvLyB1c2UgJ2RldmljZUlkJyBhcyBwYXJhbWV0ZXIgbmFtZSBzbyB0aGF0IGRldmljZSB2aWV3cyAoTWVhc3VyZW1lbnRzLCBFdmVudHMsIEFsYXJtcykgY2FuIGJlIHJldXNlZCBmb3Igc2VydmljZVxufVxuXG5mdW5jdGlvbiBjOHlWaWV3c1Byb3ZpZGVyKCRyb3V0ZVByb3ZpZGVyLCBjOHlUYWJzUHJvdmlkZXIsIGM4eVBhdGhVdGlscykge1xuICAnbmdJbmplY3QnO1xuXG4gIGNvbnN0IHZpZXdNYXAgPSB7fTtcbiAgY29uc3QgY29udGV4dFZpZXdzID0gbmV3IFJlcGxheVN1YmplY3QoKTtcblxuICByZXR1cm4ge1xuICAgIHdoZW4sXG4gICAgJGdldCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRleHRWaWV3cyxcbiAgICAgICAgd2hlbihwYXRoLCBjZmcpIHtcbiAgICAgICAgICByZXR1cm4gd2hlbihwYXRoLCBjZmcsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRCeVBhdGgsXG4gICAgICAgIHByZWZpeFdpdGhTbGFzaFxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB3aGVuXG4gICAqIEBtZXRob2RPZiBjOHkudWkucHJvdmlkZXI6Yzh5Vmlld3NQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVmaW5lcyBhIHZpZXcgZm9yIGdpdmVuIHJvdXRlLlxuICAgKiBJZiBtdWx0aXBsZSB2aWV3cyBhcmUgZGVmaW5lZCBmb3IgYSBzaW5nbGUgcm91dGUgdGhlbiB0aGVyZSB3aWxsIGJlIGEgc2VwYXJhdGUgdGFiIGZvciBlYWNoIHZpZXcgYXZhaWxhYmxlIHdoZW4gdXNlciB2aXNpdHMgdGhhdCByb3V0ZS5cbiAgICpcbiAgICogQHBhcmFtIHBhdGggVGFyZ2V0IHJvdXRlLlxuICAgKiBAcGFyYW0gY2ZnIFZpZXcgY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqIC0gKipuYW1lKiogLSBgc3RyaW5nYCAtIFZpZXcncyBuYW1lIChpbiBjYXNlIG9mIG11bHRpcGxlIHZpZXdzIGF0IHNpbmdsZSByb3V0ZSB0aGlzIHdpbGwgYmUgZGlzcGxheWVkIGFzIHRhYidzIHRpdGxlKS5cbiAgICogLSAqKnByaW9yaXR5KiogLSBgaW50ZWdlcmAgLSBWaWV3J3MgcHJpb3JpdHkgKGluIGNhc2Ugb2YgbXVsdGlwbGUgdmlld3MgYXQgc2luZ2xlIHJvdXRlIHRoaXMgd2lsbCBkZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIHZpZXcncyB0YWIgaW4gdGhlIHRhYnMgc3RhY2spLlxuICAgKiAtICoqaWNvbioqIC0gYHN0cmluZ2AgLSBGb250IEF3ZXNvbWUgaWNvbiBuYW1lIGZvciB0aGUgdmlldyAoZGlzcGxheWVkIG9uIHRoZSB0YWIncyBoZWFkZXIpLlxuICAgKiAtICoqc2hvd0lmKiogLSBgZnVuY3Rpb25gIC0gRnVuY3Rpb24gcmV0dXJuaW5nIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRvIHNob3cgYSB0YWIgZm9yIHRoZSB2aWV3IG9yIG5vdC5cbiAgICogLSAqKnRlbXBsYXRlVXJsKiogLSBgc3RyaW5nYCAtIFBhdGggdG8gdGhlIHRlbXBsYXRlIHRvIHVzZSBmb3IgZGlzcGxheWluZyB0aGUgdmlldy5cbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgb3RoZXIgdmlldyBvcHRpb25zIC0gdGhlIHNhbWUgYXMgYXZhaWxhYmxlIGZvciBzdGFuZGFyZCB7QGxpbmsgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nUm91dGUvcHJvdmlkZXIvJHJvdXRlUHJvdmlkZXIgJHJvdXRlUHJvdmlkZXJ9IGluIEFuZ3VsYXJKUy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGRlbW9uc3RyYXRlcyBob3cgdG8gYWRkIGEgbmV3IHZpZXcgdG8gZGV2aWNlIGRldGFpbHMgcm91dGVcbiAgICogKHdoaWNoIHdpbGwgYmUgZGlzcGxheWVkIGFzIGEgdGFiIGlmIG90aGVyIHZpZXdzIGFyZSBhc3NpZ25lZCB0byB0aGUgc2FtZSByb3V0ZSk6XG4gICAqIDxwcmU+XG4gICAqICAgYzh5Vmlld3NQcm92aWRlci53aGVuKCcvZGV2aWNlLzpkZXZpY2VJZCcsIHtcbiAgICogICAgIG5hbWU6ICdUcmFja2luZycsXG4gICAqICAgICB0ZW1wbGF0ZVVybDogJzo6OlBMVUdJTl9QQVRIOjo6L3ZpZXdzL2luZGV4Lmh0bWwnLFxuICAgKiAgICAgaWNvbjogJ2Nyb3NzaGFpcnMnLFxuICAgKiAgICAgc2hvd0lmOiBbJyRyb3V0ZVBhcmFtcycsICdjOHlEZXZpY2VzJywgZnVuY3Rpb24gKCRyb3V0ZVBhcmFtcywgYzh5RGV2aWNlcykge1xuICAgKiAgICAgICB2YXIgZGV2aWNlSWQgPSAkcm91dGVQYXJhbXMuZGV2aWNlSWQ7XG4gICAqICAgICAgIHJldHVybiBjOHlEZXZpY2VzLmRldGFpbENhY2hlZChkZXZpY2VJZCkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAqICAgICAgICAgdmFyIGRldmljZSA9IHJlcy5kYXRhO1xuICAgKiAgICAgICAgIHJldHVybiBkZXZpY2UgJiYgKGRldmljZS5jOHlfTW90aW9uVHJhY2tpbmcgfHwgZGV2aWNlLmM4eV9HZW9mZW5jZSk7XG4gICAqICAgICAgIH0pO1xuICAgKiAgICAgfV1cbiAgICogICB9KTtcbiAgICogPC9wcmU+XG4gICAqL1xuICBmdW5jdGlvbiB3aGVuKHBhdGgsIGNmZywgcnVuUGhhc2UpIHtcbiAgICBjb25zdCBuZXdQYXRoID0gcHJlZml4V2l0aFNsYXNoKHBhdGgpO1xuICAgIGNmZy5yZXNvbHZlID0gY2ZnLnJlc29sdmUgfHwge307XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgY2ZnLnJlc29sdmUuX19jOHlfbG9jYWxlcyA9IFtcbiAgICAgICdjOHlMb2NhbGVzJyxcbiAgICAgIGM4eUxvY2FsZXMgPT4ge1xuICAgICAgICByZXR1cm4gYzh5TG9jYWxlcy5pbml0RG9uZTtcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgbGV0IGN1cnJlbnRDZmcgPSB2aWV3TWFwW25ld1BhdGhdO1xuICAgIGNvbnN0IG9yaWdpbmFsUGF0aCA9IG5ld1BhdGg7XG5cbiAgICBpZiAoIWNmZy5uYW1lKSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oJ1ZpZXcgbmFtZSBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIGlmICghY3VycmVudENmZykge1xuICAgICAgdmlld01hcFtuZXdQYXRoXSA9IFtdO1xuICAgICAgY3VycmVudENmZyA9IHZpZXdNYXBbbmV3UGF0aF07XG4gICAgfVxuXG4gICAgY29uc3QgdXBncmFkZWRDb250ZXh0ID0gT2JqZWN0LmtleXMoVmlld0NvbnRleHQpXG4gICAgICAubWFwKGtleSA9PiAoe1xuICAgICAgICBrZXksXG4gICAgICAgIGlzVXBncmFkZTpcbiAgICAgICAgICBwcmVmaXhXaXRoU2xhc2goVmlld0NvbnRleHRba2V5XS5yZXBsYWNlKCdpZCcsIFZpZXdDb250ZXh0TGVnYWN5UGFyYW1ldGVyW2tleV0pKSA9PT0gcGF0aFxuICAgICAgfSkpXG4gICAgICAuZmluZCgoeyBpc1VwZ3JhZGUgfSkgPT4gaXNVcGdyYWRlKTtcblxuICAgIGlmICh1cGdyYWRlZENvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRDZmcucHVzaChjZmcpO1xuICAgICAgY2ZnLnBhdGggPSBuZXdQYXRoO1xuXG4gICAgICBjb25zdCBwID0gYzh5UGF0aFV0aWxzLmFwcGVuZFNlZ21lbnQob3JpZ2luYWxQYXRoLnJlcGxhY2UocGF0aCwgJycpLCBjZmcubmFtZSk7XG4gICAgICBjb250ZXh0Vmlld3MubmV4dCh7XG4gICAgICAgIC4uLmNmZyxcbiAgICAgICAgcGF0aDogY2ZnLm5hbWUgPyBwLnN1YnN0cmluZygxKSA6ICcnLFxuICAgICAgICBjb250ZXh0S2V5OiB1cGdyYWRlZENvbnRleHQua2V5LFxuICAgICAgICBydW5QaGFzZVxuICAgICAgfSk7XG4gICAgICBjZmcuc2hvd0lmID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGNmZy5uYW1lKSB7XG4gICAgICAgIGNmZy5wYXRoID0gYzh5UGF0aFV0aWxzLmFwcGVuZFNlZ21lbnQob3JpZ2luYWxQYXRoLCBjZmcubmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50Q2ZnLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBbZXhpc3RpbmdDb25maWddID0gY3VycmVudENmZztcbiAgICAgICAgZXhpc3RpbmdDb25maWcucGF0aCA9IGM4eVBhdGhVdGlscy5hcHBlbmRTZWdtZW50KG9yaWdpbmFsUGF0aCwgZXhpc3RpbmdDb25maWcubmFtZSk7XG4gICAgICAgIGV4aXN0aW5nQ29uZmlnLnRhYiA9IGNyZWF0ZVRhYihvcmlnaW5hbFBhdGgsIGV4aXN0aW5nQ29uZmlnKTtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbihleGlzdGluZ0NvbmZpZy5wYXRoLCBleGlzdGluZ0NvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRDZmcucHVzaChjZmcpO1xuICAgICAgY2ZnLnBhdGggPSBuZXdQYXRoO1xuXG4gICAgICBpZiAoY3VycmVudENmZy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNmZy5wYXRoID0gYzh5UGF0aFV0aWxzLmFwcGVuZFNlZ21lbnQob3JpZ2luYWxQYXRoLCBjZmcubmFtZSk7XG4gICAgICAgIGNyZWF0ZVRhYihvcmlnaW5hbFBhdGgsIGNmZyk7XG5cbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbihwcmVmaXhXaXRoU2xhc2gob3JpZ2luYWxQYXRoKSwge1xuICAgICAgICAgIHJlc29sdmVSZWRpcmVjdFRvKCRyb3V0ZSwgJHEsIGM4eVVpVXRpbCwgYzh5VGFicywgZ2V0dGV4dENhdGFsb2cpIHtcbiAgICAgICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZEN1cnJlbnRDZmcgPSBjOHlUYWJzUHJvdmlkZXIuc29ydFRhYnNWaWV3cyhjdXJyZW50Q2ZnLCBnZXR0ZXh0Q2F0YWxvZyk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSAkcm91dGUuY3VycmVudC5wYXRoUGFyYW1zO1xuXG4gICAgICAgICAgICByZXR1cm4gJHFcbiAgICAgICAgICAgICAgLmFsbChtYXAoc29ydGVkQ3VycmVudENmZywgdW5hcnkoYzh5VWlVdGlsLmNvbmZpZ3VyZVZpc2liaWxpdHkpKSlcbiAgICAgICAgICAgICAgLnRoZW4odmlld3MgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gZmluZCh2aWV3cywgJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gZmlyc3QucGF0aDtcbiAgICAgICAgICAgICAgICBmb3JFYWNoKHBhcmFtcywgKHZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShgOiR7a2V5fWAsIHZhbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYzh5VGFicy5yZWRpcmVjdGVkVmlld1BhdGggPSB1cmw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICRyb3V0ZVByb3ZpZGVyLndoZW4ocHJlZml4V2l0aFNsYXNoKGNmZy5wYXRoKSwgY2ZnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJ5UGF0aChwYXRoKSB7XG4gICAgcmV0dXJuIHZpZXdNYXBbcHJlZml4V2l0aFNsYXNoKHBhdGgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRhYihwYXRoLCBjZmcpIHtcbiAgICBjOHlUYWJzUHJvdmlkZXIuYWRkVGFiKHBhdGgsIGNmZyk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmaXhXaXRoU2xhc2gocGF0aCkge1xuICAgIGNvbnN0IHByZWZpeCA9IHN0YXJ0c1dpdGgocGF0aCwgJy8nKSA/ICcnIDogJy8nO1xuICAgIHJldHVybiBwcmVmaXggKyBwYXRoO1xuICB9XG59XG5cbmV4cG9ydCB7IGM4eVZpZXdzUHJvdmlkZXIgfTtcbiJdfQ==
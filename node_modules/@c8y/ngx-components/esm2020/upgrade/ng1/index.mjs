import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { appLogsAutoRefreshComponent, bootstrapComponent, dataGridComponent, loadingComponent, userTotpComponent, rangeDisplayComponent, helpComponent, highlightComponent, emptyStateComponent, datapointSelectionListComponent, paginationComponent, rolesAssetTreeComponent, passwordInputComponent } from './downgraded.components';
import { absoluteDateService, alertsService, apiService, appStateService, bridgeService, authBridgeService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService, cachedLocaleDictionaryService, modalService, gainsightService, filesService } from './downgraded.services';
import { QueriesUtil } from '@c8y/client';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
const NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    // tslint:disable-next-line:only-arrow-functions
    .config(function ($httpProvider) {
    'ngInject';
    const ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAuthBridgeService', authBridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    // tslint:disable-next-line:only-arrow-functions
    .service('c8yQueriesUtil', function () {
    return new QueriesUtil();
})
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService)
    .service('c8yModalService', modalService)
    .service('c8yGainsightService', gainsightService)
    .service('c8yFilesService', filesService);
angular
    .module('c8y.ui')
    .filter('absoluteDate', absoluteDateService)
    .directive('c8yLoading', loadingComponent)
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .directive('c8yRangeDisplay', rangeDisplayComponent)
    .directive('c8yHelp', helpComponent)
    .directive('c8yUiEmptyState', emptyStateComponent)
    .directive('c8yDatapointSelectionList', datapointSelectionListComponent)
    .directive('c8yHighlight', highlightComponent)
    .directive('c8yPasswordInput', passwordInputComponent)
    .directive('pagination', paginationComponent)
    .directive('c8yRolesAssetTreeDowngraded', rolesAssetTreeComponent)
    .factory('c8yTranslate', translateService)
    .factory('c8yCachedLocaleDictionaryService', cachedLocaleDictionaryService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export const ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,
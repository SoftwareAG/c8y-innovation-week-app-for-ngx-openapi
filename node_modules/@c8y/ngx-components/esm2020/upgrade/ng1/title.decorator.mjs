import * as angular from 'angular';
function c8yTitleDecorator($q, $delegate, $injector, $rootScope, $location, $templateCache, $compile, c8yHeaderService) {
    'ngInject';
    $delegate.changeTitle = changeTitle;
    $delegate.setTitleElement = setTitleElement;
    $rootScope.$on('$routeChangeStart', () => {
        changeTitle({});
    });
    $rootScope.$on('$routeChangeSuccess', event => {
        resolveTitle(event);
    });
    $rootScope.$on('$routeUpdate', event => {
        resolveTitle(event);
    });
    function resolveTitle(event) {
        const title = $delegate.get($location.path());
        if (title) {
            const titleData = $q.when(title.data ? $injector.invoke(title.data) : {});
            titleData.then(data => {
                const { templateUrl } = data;
                if (templateUrl) {
                    const template = $templateCache.get(templateUrl);
                    setTitleElement($compile(template)(event.targetScope));
                }
                else {
                    changeTitle(data);
                }
            });
        }
    }
    function changeTitle(newTitleSubtitleObjOrPromise, options = { skipTitleTranslation: false, skipSubtitleTranslation: false }) {
        $q.when(newTitleSubtitleObjOrPromise).then(newTitleSubtitleObj => changeTitleInAngular(translate(newTitleSubtitleObj, options)));
    }
    function translate({ title = '', subtitle = '' }, { skipTitleTranslation = false, skipSubtitleTranslation = false }) {
        const titleTemplate = skipTitleTranslation ? '{{ title }}' : '{{ title | translate }}';
        const subtitleTemplate = skipSubtitleTranslation
            ? '{{ subtitle }}'
            : '{{ subtitle | translate }}';
        const template = `
      <h1 class="text-truncate">${titleTemplate}
      <small>${subtitleTemplate}</small></h1>
    `;
        const isolatedScope = $rootScope.$new(true);
        isolatedScope.title = title;
        isolatedScope.subtitle = subtitle;
        return $compile(angular.element(template))(isolatedScope)[0];
    }
    function changeTitleInAngular(domElement) {
        c8yHeaderService.changeTitle(domElement);
    }
    function setTitleElement($element) {
        $element.show();
        changeTitleInAngular($element[0]);
    }
    return $delegate;
}
export { c8yTitleDecorator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdXBncmFkZS9uZzEvdGl0bGUuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRW5DLFNBQVMsaUJBQWlCLENBQ3hCLEVBQUUsRUFDRixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBQ1QsY0FBYyxFQUNkLFFBQVEsRUFDUixnQkFBZ0I7SUFFaEIsVUFBVSxDQUFDO0lBRVgsU0FBUyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDcEMsU0FBUyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFFNUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDdkMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNyQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLFlBQVksQ0FBQyxLQUFVO1FBQzlCLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUMsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixJQUFJLFdBQVcsRUFBRTtvQkFDZixNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNqRCxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2lCQUN4RDtxQkFBTTtvQkFDTCxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ25CO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FDbEIsNEJBQTRCLEVBQzVCLE9BQU8sR0FBRyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUU7UUFFekUsRUFBRSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQy9ELG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUM5RCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsU0FBUyxDQUNoQixFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUM3QixFQUFFLG9CQUFvQixHQUFHLEtBQUssRUFBRSx1QkFBdUIsR0FBRyxLQUFLLEVBQUU7UUFFakUsTUFBTSxhQUFhLEdBQUcsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUM7UUFDdkYsTUFBTSxnQkFBZ0IsR0FBRyx1QkFBdUI7WUFDOUMsQ0FBQyxDQUFDLGdCQUFnQjtZQUNsQixDQUFDLENBQUMsNEJBQTRCLENBQUM7UUFDakMsTUFBTSxRQUFRLEdBQUc7a0NBQ2EsYUFBYTtlQUNoQyxnQkFBZ0I7S0FDMUIsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDNUIsYUFBYSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFbEMsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxTQUFTLG9CQUFvQixDQUFDLFVBQVU7UUFDdEMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBQyxRQUFRO1FBQy9CLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuZnVuY3Rpb24gYzh5VGl0bGVEZWNvcmF0b3IoXG4gICRxLFxuICAkZGVsZWdhdGUsXG4gICRpbmplY3RvcixcbiAgJHJvb3RTY29wZSxcbiAgJGxvY2F0aW9uLFxuICAkdGVtcGxhdGVDYWNoZSxcbiAgJGNvbXBpbGUsXG4gIGM4eUhlYWRlclNlcnZpY2Vcbikge1xuICAnbmdJbmplY3QnO1xuXG4gICRkZWxlZ2F0ZS5jaGFuZ2VUaXRsZSA9IGNoYW5nZVRpdGxlO1xuICAkZGVsZWdhdGUuc2V0VGl0bGVFbGVtZW50ID0gc2V0VGl0bGVFbGVtZW50O1xuXG4gICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsICgpID0+IHtcbiAgICBjaGFuZ2VUaXRsZSh7fSk7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdWNjZXNzJywgZXZlbnQgPT4ge1xuICAgIHJlc29sdmVUaXRsZShldmVudCk7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuJG9uKCckcm91dGVVcGRhdGUnLCBldmVudCA9PiB7XG4gICAgcmVzb2x2ZVRpdGxlKGV2ZW50KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVRpdGxlKGV2ZW50OiBhbnkpIHtcbiAgICBjb25zdCB0aXRsZSA9ICRkZWxlZ2F0ZS5nZXQoJGxvY2F0aW9uLnBhdGgoKSk7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBjb25zdCB0aXRsZURhdGEgPSAkcS53aGVuKHRpdGxlLmRhdGEgPyAkaW5qZWN0b3IuaW52b2tlKHRpdGxlLmRhdGEpIDoge30pO1xuICAgICAgdGl0bGVEYXRhLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGVtcGxhdGVVcmwgfSA9IGRhdGE7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gJHRlbXBsYXRlQ2FjaGUuZ2V0KHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICBzZXRUaXRsZUVsZW1lbnQoJGNvbXBpbGUodGVtcGxhdGUpKGV2ZW50LnRhcmdldFNjb3BlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlVGl0bGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYW5nZVRpdGxlKFxuICAgIG5ld1RpdGxlU3VidGl0bGVPYmpPclByb21pc2UsXG4gICAgb3B0aW9ucyA9IHsgc2tpcFRpdGxlVHJhbnNsYXRpb246IGZhbHNlLCBza2lwU3VidGl0bGVUcmFuc2xhdGlvbjogZmFsc2UgfVxuICApIHtcbiAgICAkcS53aGVuKG5ld1RpdGxlU3VidGl0bGVPYmpPclByb21pc2UpLnRoZW4obmV3VGl0bGVTdWJ0aXRsZU9iaiA9PlxuICAgICAgY2hhbmdlVGl0bGVJbkFuZ3VsYXIodHJhbnNsYXRlKG5ld1RpdGxlU3VidGl0bGVPYmosIG9wdGlvbnMpKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoXG4gICAgeyB0aXRsZSA9ICcnLCBzdWJ0aXRsZSA9ICcnIH0sXG4gICAgeyBza2lwVGl0bGVUcmFuc2xhdGlvbiA9IGZhbHNlLCBza2lwU3VidGl0bGVUcmFuc2xhdGlvbiA9IGZhbHNlIH1cbiAgKSB7XG4gICAgY29uc3QgdGl0bGVUZW1wbGF0ZSA9IHNraXBUaXRsZVRyYW5zbGF0aW9uID8gJ3t7IHRpdGxlIH19JyA6ICd7eyB0aXRsZSB8IHRyYW5zbGF0ZSB9fSc7XG4gICAgY29uc3Qgc3VidGl0bGVUZW1wbGF0ZSA9IHNraXBTdWJ0aXRsZVRyYW5zbGF0aW9uXG4gICAgICA/ICd7eyBzdWJ0aXRsZSB9fSdcbiAgICAgIDogJ3t7IHN1YnRpdGxlIHwgdHJhbnNsYXRlIH19JztcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICAgIDxoMSBjbGFzcz1cInRleHQtdHJ1bmNhdGVcIj4ke3RpdGxlVGVtcGxhdGV9XG4gICAgICA8c21hbGw+JHtzdWJ0aXRsZVRlbXBsYXRlfTwvc21hbGw+PC9oMT5cbiAgICBgO1xuXG4gICAgY29uc3QgaXNvbGF0ZWRTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcbiAgICBpc29sYXRlZFNjb3BlLnRpdGxlID0gdGl0bGU7XG4gICAgaXNvbGF0ZWRTY29wZS5zdWJ0aXRsZSA9IHN1YnRpdGxlO1xuXG4gICAgcmV0dXJuICRjb21waWxlKGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSkpKGlzb2xhdGVkU2NvcGUpWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hhbmdlVGl0bGVJbkFuZ3VsYXIoZG9tRWxlbWVudCkge1xuICAgIGM4eUhlYWRlclNlcnZpY2UuY2hhbmdlVGl0bGUoZG9tRWxlbWVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUaXRsZUVsZW1lbnQoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudC5zaG93KCk7XG4gICAgY2hhbmdlVGl0bGVJbkFuZ3VsYXIoJGVsZW1lbnRbMF0pO1xuICB9XG5cbiAgcmV0dXJuICRkZWxlZ2F0ZTtcbn1cblxuZXhwb3J0IHsgYzh5VGl0bGVEZWNvcmF0b3IgfTtcbiJdfQ==
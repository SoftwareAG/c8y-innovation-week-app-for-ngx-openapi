import { Injectable } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { InventoryService } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
import { transform, has } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
export class FilesRepositoryService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.baseQuery = { __has: 'c8y_IsBinary' };
        this.queriesUtil = new QueriesUtil();
    }
    getPagination() {
        return {
            pageSize: 10,
            currentPage: 1
        };
    }
    hasApplicationStorageFragment(file) {
        return has(file, 'c8y_applications_storage');
    }
    getColumns() {
        return [
            {
                name: 'name',
                header: gettext('Name'),
                path: 'name',
                filterable: true,
                sortable: true,
                sortOrder: 'asc'
            },
            {
                name: 'type',
                header: gettext('Type'),
                path: 'type',
                filterable: true,
                sortable: true
            },
            {
                name: 'length',
                header: gettext('Size'),
                path: 'length',
                filterable: false,
                sortable: true
            },
            {
                name: 'owner',
                header: gettext('Owner'),
                path: 'owner',
                filterable: true,
                sortable: true
            },
            {
                name: 'lastUpdated',
                header: gettext('Last update'),
                path: 'lastUpdated',
                filterable: false,
                sortable: true
            }
        ];
    }
    /** Returns array with items id where item has not c8y_applications_storage fragment. */
    getDeletableItemsIds(selectedItemsIds, dataFromDataGrid) {
        const selectedItemsWithoutApplications = [];
        dataFromDataGrid.forEach(item => {
            selectedItemsIds.forEach(selectedItemId => {
                if (selectedItemId === item.id && !this.hasApplicationStorageFragment(item)) {
                    selectedItemsWithoutApplications.push(selectedItemId);
                }
            });
        });
        return selectedItemsWithoutApplications;
    }
    /** Returns the total number of items (with no filters based on columns setup). */
    async getTotal() {
        const filters = {
            query: this.queriesUtil.buildQuery(this.baseQuery),
            pageSize: 1,
            withTotalPages: true
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    /** Returns data for current columns and pagination setup. */
    async getData(columns, pagination, searchText = '') {
        // build filters based on columns and pagination
        const filters = {
            text: searchText,
            ...this.getFilters(columns, pagination)
        };
        // execute inventory query for the list of managed objects
        return this.inventoryService.list(filters);
    }
    /** Returns the number of items matching current columns and pagination setup. */
    async getCount(columns, pagination) {
        const filters = {
            // build filters based on columns and pagination
            ...this.getFilters(columns, pagination),
            // but we only need the number of items, not the items themselves
            pageSize: 1,
            currentPage: 1
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    /** Returns filters for given columns and pagination setup. */
    getFilters(columns, pagination) {
        return {
            query: this.getQueryString(columns),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withChildren: false,
            withTotalPages: true
        };
    }
    /** Returns a query string based on columns setup. */
    getQueryString(columns) {
        let fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, this.baseQuery);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    /** Returns a query object based on columns setup. */
    getQueryObj(columns) {
        return transform(columns, (query, column) => this.addColumnQuery(query, column), {
            __filter: {},
            __orderby: []
        });
    }
    /** Extends given query with a part based on the setup of given column. */
    addColumnQuery(query, column) {
        // when a column is marked as filterable
        if (column.filterable) {
            // in the case of default filtering form, `filterPredicate` will contain the string entered by a user
            if (column.filterPredicate) {
                // so we use it as the expected value, * allow to search for it anywhere in the property
                query.__filter[column.path] = `*${column.filterPredicate}*`;
            }
            // in the case of custom filtering form, we're storing the query in `externalFilterQuery.query`
            if (column.externalFilterQuery) {
                query = this.queriesUtil.addAndFilter(query, column.externalFilterQuery.query);
            }
        }
        // when a column is sortable and has a specified sorting order
        if (column.sortable && column.sortOrder) {
            // add sorting condition for the configured column `path`
            query.__orderby.push({
                [column.path]: column.sortOrder === 'asc' ? 1 : -1
            });
        }
        return query;
    }
}
FilesRepositoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, deps: [{ token: i1.InventoryService }], target: i0.ɵɵFactoryTarget.Injectable });
FilesRepositoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
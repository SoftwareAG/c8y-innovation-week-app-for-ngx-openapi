import { Component, Output } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { AlertService, GainsightService, FilesService, gettext } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE } from './files-repository-product-experience.constants';
import { combineLatest } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class FilesRepositoryUploadComponent {
    constructor(alertService, gainsightService, filesService) {
        this.alertService = alertService;
        this.gainsightService = gainsightService;
        this.filesService = filesService;
        /** Emits an event when modal is closed. `uploaded` indicates if any files were uploaded. */
        this.onClose = new EventEmitter();
        this.isLoading = false;
        this.dropFilesHereMessage = gettext('Drop files here');
    }
    async upload() {
        this.isLoading = true;
        this.uploadProgress$ = combineLatest(this.filesToUpload.map(file => this.filesService.uploadFileWithProgress$(file)));
        this.uploadSubscription = this.uploadProgress$.subscribe(uploadProgress => {
            this.uploadProgress = uploadProgress;
        }, e => {
            if (e) {
                this.alertService.addServerFailure(e);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                    component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                    action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_FAILED
                });
            }
            this.isLoading = false;
        }, () => {
            this.alertService.success(gettext('File(s) uploaded.'));
            this.onClose.emit({ uploaded: true });
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_SUCCESS
            });
        });
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            this.filesToUpload = event;
        }
    }
}
FilesRepositoryUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryUploadComponent, deps: [{ token: i1.AlertService }, { token: i1.GainsightService }, { token: i1.FilesService }], target: i0.ɵɵFactoryTarget.Component });
FilesRepositoryUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FilesRepositoryUploadComponent, selector: "c8y-files-repository-upload", outputs: { onClose: "onClose" }, ngImport: i0, template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4\n      id=\"modal-title\"\n      translate\n    >\n      Upload files\n    </h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div\n      class=\"modal-body\"\n      id=\"modal-body\"\n    >\n      <c8y-file-picker-form-control\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [uploadProgress]=\"uploadProgress\"\n      ></c8y-file-picker-form-control>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      type=\"button\"\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      translate\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i1.FilePickerFormControlComponent, selector: "c8y-file-picker-form-control", inputs: ["accept", "maxAllowedFiles", "minRequiredFiles", "disableValidators", "uploadInProgress", "uploadProgress", "validateExtensionOnDrag"], outputs: ["dropped"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-files-repository-upload', template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4\n      id=\"modal-title\"\n      translate\n    >\n      Upload files\n    </h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div\n      class=\"modal-body\"\n      id=\"modal-body\"\n    >\n      <c8y-file-picker-form-control\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [uploadProgress]=\"uploadProgress\"\n      ></c8y-file-picker-form-control>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      type=\"button\"\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      translate\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AlertService }, { type: i1.GainsightService }, { type: i1.FilesService }]; }, propDecorators: { onClose: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtcmVwb3NpdG9yeS11cGxvYWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZmlsZXMtcmVwb3NpdG9yeS9maWxlcy1yZXBvc2l0b3J5LXVwbG9hZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi9maWxlcy1yZXBvc2l0b3J5L2ZpbGVzLXJlcG9zaXRvcnktdXBsb2FkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUNMLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLE9BQU8sRUFFUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3JGLE9BQU8sRUFBNEIsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFNL0QsTUFBTSxPQUFPLDhCQUE4QjtJQVV6QyxZQUNVLFlBQTBCLEVBQzFCLGdCQUFrQyxFQUNsQyxZQUEwQjtRQUYxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWnBDLDRGQUE0RjtRQUNsRixZQUFPLEdBQXdDLElBQUksWUFBWSxFQUFFLENBQUM7UUFDNUUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQix5QkFBb0IsR0FBVyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQVV2RCxDQUFDO0lBRUosS0FBSyxDQUFDLE1BQU07UUFDVixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hGLENBQUM7UUFFRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQ3RELGNBQWMsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDdkMsQ0FBQyxFQUNELENBQUMsQ0FBQyxFQUFFO1lBQ0YsSUFBSSxDQUFDLEVBQUU7Z0JBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUU7b0JBQ25GLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsZ0NBQWdDO29CQUN6RSxNQUFNLEVBQUUsa0JBQWtCLENBQUMsT0FBTyxDQUFDLGtCQUFrQjtpQkFDdEQsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDLEVBQ0QsR0FBRyxFQUFFO1lBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFO2dCQUNuRixTQUFTLEVBQUUsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGdDQUFnQztnQkFDekUsTUFBTSxFQUFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxtQkFBbUI7YUFDdkQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBYTtRQUM5QixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7OzJIQW5EVSw4QkFBOEI7K0dBQTlCLDhCQUE4QixvR0NoQjNDLG9zQ0ErQ0E7MkZEL0JhLDhCQUE4QjtrQkFKMUMsU0FBUzsrQkFDRSw2QkFBNkI7NkpBSzdCLE9BQU87c0JBQWhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBbGVydFNlcnZpY2UsXG4gIEdhaW5zaWdodFNlcnZpY2UsXG4gIEZpbGVzU2VydmljZSxcbiAgZ2V0dGV4dCxcbiAgSUZldGNoV2l0aFByb2dyZXNzXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUFJPRFVDVF9FWFBFUklFTkNFIH0gZnJvbSAnLi9maWxlcy1yZXBvc2l0b3J5LXByb2R1Y3QtZXhwZXJpZW5jZS5jb25zdGFudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1maWxlcy1yZXBvc2l0b3J5LXVwbG9hZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9maWxlcy1yZXBvc2l0b3J5LXVwbG9hZC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRmlsZXNSZXBvc2l0b3J5VXBsb2FkQ29tcG9uZW50IHtcbiAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gbW9kYWwgaXMgY2xvc2VkLiBgdXBsb2FkZWRgIGluZGljYXRlcyBpZiBhbnkgZmlsZXMgd2VyZSB1cGxvYWRlZC4gKi9cbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjx7IHVwbG9hZGVkOiBib29sZWFuIH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgZHJvcEZpbGVzSGVyZU1lc3NhZ2U6IHN0cmluZyA9IGdldHRleHQoJ0Ryb3AgZmlsZXMgaGVyZScpO1xuICBmaWxlc1RvVXBsb2FkOiBGaWxlW107XG4gIHVwbG9hZFByb2dyZXNzOiBJRmV0Y2hXaXRoUHJvZ3Jlc3NbXTtcbiAgdXBsb2FkUHJvZ3Jlc3MkOiBPYnNlcnZhYmxlPElGZXRjaFdpdGhQcm9ncmVzc1tdPjtcbiAgdXBsb2FkU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIGdhaW5zaWdodFNlcnZpY2U6IEdhaW5zaWdodFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBmaWxlc1NlcnZpY2U6IEZpbGVzU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgdXBsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnVwbG9hZFByb2dyZXNzJCA9IGNvbWJpbmVMYXRlc3QoXG4gICAgICB0aGlzLmZpbGVzVG9VcGxvYWQubWFwKGZpbGUgPT4gdGhpcy5maWxlc1NlcnZpY2UudXBsb2FkRmlsZVdpdGhQcm9ncmVzcyQoZmlsZSkpXG4gICAgKTtcblxuICAgIHRoaXMudXBsb2FkU3Vic2NyaXB0aW9uID0gdGhpcy51cGxvYWRQcm9ncmVzcyQuc3Vic2NyaWJlKFxuICAgICAgdXBsb2FkUHJvZ3Jlc3MgPT4ge1xuICAgICAgICB0aGlzLnVwbG9hZFByb2dyZXNzID0gdXBsb2FkUHJvZ3Jlc3M7XG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KFBST0RVQ1RfRVhQRVJJRU5DRS5FVkVOVFMuRklMRV9SRVBPU0lUT1JZX1VQTE9BRCwge1xuICAgICAgICAgICAgY29tcG9uZW50OiBQUk9EVUNUX0VYUEVSSUVOQ0UuQ09NUE9ORU5UUy5GSUxFX1JFUE9TSVRPUllfVVBMT0FEX0NPTVBPTkVOVCxcbiAgICAgICAgICAgIGFjdGlvbjogUFJPRFVDVF9FWFBFUklFTkNFLlJFU1VMVFMuVVBMT0FEX0lURU1fRkFJTEVEXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnRmlsZShzKSB1cGxvYWRlZC4nKSk7XG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KHsgdXBsb2FkZWQ6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuZ2FpbnNpZ2h0U2VydmljZS50cmlnZ2VyRXZlbnQoUFJPRFVDVF9FWFBFUklFTkNFLkVWRU5UUy5GSUxFX1JFUE9TSVRPUllfVVBMT0FELCB7XG4gICAgICAgICAgY29tcG9uZW50OiBQUk9EVUNUX0VYUEVSSUVOQ0UuQ09NUE9ORU5UUy5GSUxFX1JFUE9TSVRPUllfVVBMT0FEX0NPTVBPTkVOVCxcbiAgICAgICAgICBhY3Rpb246IFBST0RVQ1RfRVhQRVJJRU5DRS5SRVNVTFRTLlVQTE9BRF9JVEVNX1NVQ0NFU1NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIG9uRmlsZURyb3BwZWRFdmVudChldmVudDogRmlsZVtdKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZmlsZXNUb1VwbG9hZCA9IGV2ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImM4eS12aWV3cG9ydC1tb2RhbFwiPlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyIGRpYWxvZy1oZWFkZXJcIj5cbiAgICA8aSBjOHlJY29uPVwidXBsb2FkXCI+PC9pPlxuICAgIDxoNFxuICAgICAgaWQ9XCJtb2RhbC10aXRsZVwiXG4gICAgICB0cmFuc2xhdGVcbiAgICA+XG4gICAgICBVcGxvYWQgZmlsZXNcbiAgICA8L2g0PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWlubmVyLXNjcm9sbFwiPlxuICAgIDxkaXZcbiAgICAgIGNsYXNzPVwibW9kYWwtYm9keVwiXG4gICAgICBpZD1cIm1vZGFsLWJvZHlcIlxuICAgID5cbiAgICAgIDxjOHktZmlsZS1waWNrZXItZm9ybS1jb250cm9sXG4gICAgICAgICNmaWxlUGlja2VyXG4gICAgICAgIFt1cGxvYWRJblByb2dyZXNzXT1cImlzTG9hZGluZ1wiXG4gICAgICAgIChkcm9wcGVkKT1cIm9uRmlsZURyb3BwZWRFdmVudCgkZXZlbnQpXCJcbiAgICAgICAgW3VwbG9hZFByb2dyZXNzXT1cInVwbG9hZFByb2dyZXNzXCJcbiAgICAgID48L2M4eS1maWxlLXBpY2tlci1mb3JtLWNvbnRyb2w+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXIgc2VwYXJhdG9yIGQtZmxleCBqLWMtY2VudGVyXCI+XG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIlxuICAgICAgdGl0bGU9XCJ7eyAnQ2FuY2VsJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIChjbGljayk9XCJvbkNsb3NlLmVtaXQoeyB1cGxvYWRlZDogZmFsc2UgfSlcIlxuICAgICAgW2Rpc2FibGVkXT1cImlzTG9hZGluZ1wiXG4gICAgICB0cmFuc2xhdGVcbiAgICA+XG4gICAgICBDYW5jZWxcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tZm9ybVwiXG4gICAgICB0aXRsZT1cInt7ICdVcGxvYWQnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgKGNsaWNrKT1cInVwbG9hZCgpXCJcbiAgICAgIFtkaXNhYmxlZF09XCIhZmlsZVBpY2tlci52YWxpZCB8fCBpc0xvYWRpbmdcIlxuICAgICAgdHJhbnNsYXRlXG4gICAgICBkYXRhLWN5PVwiYzh5LWZpbGVzLXJlcG9zaXRvcnktdXBsb2FkLS11cGxvYWRcIlxuICAgID5cbiAgICAgIFVwbG9hZFxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19
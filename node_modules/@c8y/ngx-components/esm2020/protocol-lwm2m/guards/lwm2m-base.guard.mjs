import { Injectable } from '@angular/core';
import { TenantUiService } from '@c8y/ngx-components';
import { agentName } from '@c8y/ngx-components/protocol-lwm2m/model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
/**
 * Abstract base class for Lwm2m guards. This abstract class implements
 * a canActivate method ready to use. It will check by default the lwm2m microservice subscription
 * in the current tenant.
 */
export class Lwm2mBaseGuard {
    constructor(tenantService) {
        this.tenantService = tenantService;
    }
    /**
     * Checks by default if the microservice `lwm2m-agent` is subscribed
     * to the current tenant.
     * @param route ActivatedRouteSnapshot
     * @returns boolean
     */
    canActivate(route) {
        return (this.tenantService.isMicroserviceSubscribedInCurrentTenant(agentName) &&
            this.additionalChecks(route));
    }
}
Lwm2mBaseGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard, deps: [{ token: i1.TenantUiService }], target: i0.ɵɵFactoryTarget.Injectable });
Lwm2mBaseGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TenantUiService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHdtMm0tYmFzZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb3RvY29sLWx3bTJtL2d1YXJkcy9sd20ybS1iYXNlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQzs7O0FBRXJFOzs7O0dBSUc7QUFFSCxNQUFNLE9BQWdCLGNBQWM7SUFDbEMsWUFBc0IsYUFBOEI7UUFBOUIsa0JBQWEsR0FBYixhQUFhLENBQWlCO0lBQUcsQ0FBQztJQUV4RDs7Ozs7T0FLRztJQUNILFdBQVcsQ0FBQyxLQUE4QjtRQUN4QyxPQUFPLENBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1Q0FBdUMsQ0FBQyxTQUFTLENBQUM7WUFDckUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUM3QixDQUFDO0lBQ0osQ0FBQzs7MkdBZG1CLGNBQWM7K0dBQWQsY0FBYzsyRkFBZCxjQUFjO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVGVuYW50VWlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBhZ2VudE5hbWUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3Byb3RvY29sLWx3bTJtL21vZGVsJztcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBMd20ybSBndWFyZHMuIFRoaXMgYWJzdHJhY3QgY2xhc3MgaW1wbGVtZW50c1xuICogYSBjYW5BY3RpdmF0ZSBtZXRob2QgcmVhZHkgdG8gdXNlLiBJdCB3aWxsIGNoZWNrIGJ5IGRlZmF1bHQgdGhlIGx3bTJtIG1pY3Jvc2VydmljZSBzdWJzY3JpcHRpb25cbiAqIGluIHRoZSBjdXJyZW50IHRlbmFudC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEx3bTJtQmFzZUd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVuYW50U2VydmljZTogVGVuYW50VWlTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBDaGVja3MgYnkgZGVmYXVsdCBpZiB0aGUgbWljcm9zZXJ2aWNlIGBsd20ybS1hZ2VudGAgaXMgc3Vic2NyaWJlZFxuICAgKiB0byB0aGUgY3VycmVudCB0ZW5hbnQuXG4gICAqIEBwYXJhbSByb3V0ZSBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90XG4gICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICovXG4gIGNhbkFjdGl2YXRlKHJvdXRlPzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnRlbmFudFNlcnZpY2UuaXNNaWNyb3NlcnZpY2VTdWJzY3JpYmVkSW5DdXJyZW50VGVuYW50KGFnZW50TmFtZSkgJiZcbiAgICAgIHRoaXMuYWRkaXRpb25hbENoZWNrcyhyb3V0ZSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBhZGQgYWRkaXRpb25hbCBjaGVja3MgdG8gY2FuQWN0aXZhdGUgbWV0aG9kLlxuICAgKiBJZiBubyBhZGRpdGlvbmFsIGNoZWNrcyBhcmUgbmVlZGVkIGp1c3QgcmV0dXJuIHRydWUuIE9yIHVzZSB0aGUgTHdtMm1NaWNyb3NlcnZpY2VTdWJzY3JpYmVkR3VhcmQuXG4gICAqIEBwYXJhbSByb3V0ZSBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90XG4gICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhZGRpdGlvbmFsQ2hlY2tzKHJvdXRlPzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW47XG59XG4iXX0=
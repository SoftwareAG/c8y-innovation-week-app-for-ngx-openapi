import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { AlertService, gettext, ModalService, Status, TenantUiService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Lwm2mClientService } from '@c8y/ngx-components/protocol-lwm2m/services';
import { agentName } from '@c8y/ngx-components/protocol-lwm2m/model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@ngx-translate/core";
export class Lwm2mDeviceGridFactory extends Lwm2mClientService {
    constructor(client, tenantService, modal, translateService, alertService) {
        super(client);
        this.tenantService = tenantService;
        this.modal = modal;
        this.translateService = translateService;
        this.alertService = alertService;
        this.listUrl = 'deviceRegistration';
    }
    get() {
        return {
            type: "DELETE" /* BuiltInActionType.Delete */,
            deviceMatches: (mo) => super.isLwm2mDevice(mo),
            onAction: (mo) => this.onDelete(mo),
            refreshAfterActionDone: true
        };
    }
    async onDelete(device) {
        if (this.tenantService.isMicroserviceSubscribedInCurrentTenant(agentName)) {
            try {
                await this.modal.confirm(gettext('Delete LWM2M device'), this.translateService.instant(gettext(`You are about to delete device "{{ name }}". Do you want to proceed?`), device), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') });
                await this.delete(device);
                this.alertService.success(gettext('Device deleted.'));
                return Promise.resolve();
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                }
                return Promise.reject();
            }
        }
        else {
            this.alertService.danger(this.translateService.instant(gettext(`You can't delete this device. The service "{{ name }}" is not subscribed.`), { name: agentName }));
            return Promise.reject();
        }
    }
    delete(entityOrId) {
        return super.delete(entityOrId);
    }
}
Lwm2mDeviceGridFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mDeviceGridFactory, deps: [{ token: i1.FetchClient }, { token: i2.TenantUiService }, { token: i2.ModalService }, { token: i3.TranslateService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
Lwm2mDeviceGridFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mDeviceGridFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mDeviceGridFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i2.TenantUiService }, { type: i2.ModalService }, { type: i3.TranslateService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHdtMm0tZGV2aWNlLWdyaWQuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb3RvY29sLWx3bTJtL2ZhY3Rvcmllcy9sd20ybS1kZXZpY2UtZ3JpZC5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBd0IsTUFBTSxhQUFhLENBQUM7QUFFaEUsT0FBTyxFQUNMLFlBQVksRUFDWixPQUFPLEVBQ1AsWUFBWSxFQUNaLE1BQU0sRUFDTixlQUFlLEVBRWhCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDakYsT0FBTyxFQUFFLFNBQVMsRUFBc0IsTUFBTSwwQ0FBMEMsQ0FBQzs7Ozs7QUFLekYsTUFBTSxPQUFPLHNCQUNYLFNBQVEsa0JBQXNDO0lBSzlDLFlBQ0UsTUFBbUIsRUFDWCxhQUE4QixFQUM5QixLQUFtQixFQUNuQixnQkFBa0MsRUFDbEMsWUFBMEI7UUFFbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBTE4sa0JBQWEsR0FBYixhQUFhLENBQWlCO1FBQzlCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVAxQixZQUFPLEdBQUcsb0JBQW9CLENBQUM7SUFVekMsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPO1lBQ0wsSUFBSSx5Q0FBMEI7WUFDOUIsYUFBYSxFQUFFLENBQUMsRUFBc0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFDbEUsUUFBUSxFQUFFLENBQUMsRUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDdkQsc0JBQXNCLEVBQUUsSUFBSTtTQUNMLENBQUM7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBMEI7UUFDdkMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLHVDQUF1QyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3pFLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDdEIsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEVBQzlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQzNCLE9BQU8sQ0FBQyxzRUFBc0UsQ0FBQyxFQUMvRSxNQUFNLENBQ1AsRUFDRCxNQUFNLENBQUMsTUFBTSxFQUNiLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ3JELENBQUM7Z0JBQ0YsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUMxQjtZQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLElBQUksRUFBRSxFQUFFO29CQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2dCQUNELE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3pCO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMzQixPQUFPLENBQUMsMkVBQTJFLENBQUMsRUFDcEYsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQ3BCLENBQ0YsQ0FBQztZQUNGLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUF5QztRQUM5QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7bUhBM0RVLHNCQUFzQjt1SEFBdEIsc0JBQXNCLGNBRnJCLE1BQU07MkZBRVAsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJSWRlbnRpZmllZCwgSVJlc3VsdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IERldmljZUdyaWRFeHRlbnNpb25GYWN0b3J5LCBEZXZpY2VHcmlkQWN0aW9uSG9vayB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHtcbiAgQWxlcnRTZXJ2aWNlLFxuICBnZXR0ZXh0LFxuICBNb2RhbFNlcnZpY2UsXG4gIFN0YXR1cyxcbiAgVGVuYW50VWlTZXJ2aWNlLFxuICBCdWlsdEluQWN0aW9uVHlwZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEx3bTJtQ2xpZW50U2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcHJvdG9jb2wtbHdtMm0vc2VydmljZXMnO1xuaW1wb3J0IHsgYWdlbnROYW1lLCBMd20ybU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3Byb3RvY29sLWx3bTJtL21vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTHdtMm1EZXZpY2VHcmlkRmFjdG9yeVxuICBleHRlbmRzIEx3bTJtQ2xpZW50U2VydmljZTxMd20ybU1hbmFnZWRPYmplY3Q+XG4gIGltcGxlbWVudHMgRGV2aWNlR3JpZEV4dGVuc2lvbkZhY3RvcnlcbntcbiAgcHJvdGVjdGVkIGxpc3RVcmwgPSAnZGV2aWNlUmVnaXN0cmF0aW9uJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHByaXZhdGUgdGVuYW50U2VydmljZTogVGVuYW50VWlTZXJ2aWNlLFxuICAgIHByaXZhdGUgbW9kYWw6IE1vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZVxuICApIHtcbiAgICBzdXBlcihjbGllbnQpO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCdWlsdEluQWN0aW9uVHlwZS5EZWxldGUsXG4gICAgICBkZXZpY2VNYXRjaGVzOiAobW86IEx3bTJtTWFuYWdlZE9iamVjdCkgPT4gc3VwZXIuaXNMd20ybURldmljZShtbyksXG4gICAgICBvbkFjdGlvbjogKG1vOiBMd20ybU1hbmFnZWRPYmplY3QpID0+IHRoaXMub25EZWxldGUobW8pLFxuICAgICAgcmVmcmVzaEFmdGVyQWN0aW9uRG9uZTogdHJ1ZVxuICAgIH0gYXMgRGV2aWNlR3JpZEFjdGlvbkhvb2s7XG4gIH1cblxuICBhc3luYyBvbkRlbGV0ZShkZXZpY2U6IEx3bTJtTWFuYWdlZE9iamVjdCkge1xuICAgIGlmICh0aGlzLnRlbmFudFNlcnZpY2UuaXNNaWNyb3NlcnZpY2VTdWJzY3JpYmVkSW5DdXJyZW50VGVuYW50KGFnZW50TmFtZSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMubW9kYWwuY29uZmlybShcbiAgICAgICAgICBnZXR0ZXh0KCdEZWxldGUgTFdNMk0gZGV2aWNlJyksXG4gICAgICAgICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgICAgICBnZXR0ZXh0KGBZb3UgYXJlIGFib3V0IHRvIGRlbGV0ZSBkZXZpY2UgXCJ7eyBuYW1lIH19XCIuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/YCksXG4gICAgICAgICAgICBkZXZpY2VcbiAgICAgICAgICApLFxuICAgICAgICAgIFN0YXR1cy5EQU5HRVIsXG4gICAgICAgICAgeyBvazogZ2V0dGV4dCgnRGVsZXRlJyksIGNhbmNlbDogZ2V0dGV4dCgnQ2FuY2VsJykgfVxuICAgICAgICApO1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShkZXZpY2UpO1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0RldmljZSBkZWxldGVkLicpKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgaWYgKGV4KSB7XG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmRhbmdlcihcbiAgICAgICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgICAgZ2V0dGV4dChgWW91IGNhbid0IGRlbGV0ZSB0aGlzIGRldmljZS4gVGhlIHNlcnZpY2UgXCJ7eyBuYW1lIH19XCIgaXMgbm90IHN1YnNjcmliZWQuYCksXG4gICAgICAgICAgeyBuYW1lOiBhZ2VudE5hbWUgfVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlKGVudGl0eU9ySWQ6IHN0cmluZyB8IG51bWJlciB8IElJZGVudGlmaWVkKTogUHJvbWlzZTxJUmVzdWx0PG51bGw+PiB7XG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZShlbnRpdHlPcklkKTtcbiAgfVxufVxuIl19
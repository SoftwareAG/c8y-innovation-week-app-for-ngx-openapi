import { Component, EventEmitter, Input, Output } from '@angular/core';
import { UserGroupService } from '@c8y/client';
import { GainsightService } from '@c8y/ngx-components';
import { ALL_GLOBAL_ROLES_SELECTED, PRODUCT_EXPERIENCE } from './context-dashboard.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "ngx-bootstrap/popover";
export class DashboardAvailabilityComponent {
    /**
     * Ids of global roles assigned to the dashboard or a string "all" indicating the selection of all global roles.
     * The value undefined is treated as equivalent to 'all'.
     */
    get globalRolesIds() {
        return this._globalRolesIds;
    }
    set globalRolesIds(ids) {
        if (!ids || ids === ALL_GLOBAL_ROLES_SELECTED) {
            this._globalRolesIds = ALL_GLOBAL_ROLES_SELECTED;
            return;
        }
        this._globalRolesIds = [...ids];
    }
    constructor(userGroupService, gainsightService) {
        this.userGroupService = userGroupService;
        this.gainsightService = gainsightService;
        this.globalRolesIdsChange = new EventEmitter();
        this.globalRolesItems = [];
        this.globalRolesItemsSelected = [];
        this.globalRoles = [];
        this.PAGE_SIZE = 100;
    }
    async ngOnInit() {
        this.globalRoles = await this.getGlobalRoles();
        this.globalRolesItems = this.mapGlobalRolesToItems();
        this.globalRolesItemsSelected = this.getSelectedGlobalRolesItems();
    }
    onSelected(items) {
        if (!items || !Array.isArray(items)) {
            return;
        }
        const allItemsSelected = items.length === this.globalRolesItems.length;
        this.globalRolesItemsSelected = items;
        if (allItemsSelected) {
            this.globalRolesIdsChange.emit(ALL_GLOBAL_ROLES_SELECTED);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.DASHBOARD.EVENTS.DASHBOARD_AVAILABILITY, {
                component: PRODUCT_EXPERIENCE.DASHBOARD.COMPONENTS.DASHBOARD_AVAILABILITY,
                action: PRODUCT_EXPERIENCE.DASHBOARD.ACTIONS.APPLY_GLOBAL_ROLES_CHANGES,
                globalRoles: ALL_GLOBAL_ROLES_SELECTED
            });
        }
        else {
            const selectedGlobalRolesIds = items.map(i => i.id);
            this.globalRolesIdsChange.emit([...selectedGlobalRolesIds]);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.DASHBOARD.EVENTS.DASHBOARD_AVAILABILITY, {
                component: PRODUCT_EXPERIENCE.DASHBOARD.COMPONENTS.DASHBOARD_AVAILABILITY,
                action: PRODUCT_EXPERIENCE.DASHBOARD.ACTIONS.APPLY_GLOBAL_ROLES_CHANGES,
                globalRoles: selectedGlobalRolesIds?.sort()?.join()
            });
        }
    }
    async getGlobalRoles() {
        return (await this.userGroupService.list({ pageSize: this.PAGE_SIZE })).data;
    }
    mapGlobalRolesToItems() {
        return this.globalRoles.map(({ name, id }) => ({
            name,
            id
        }));
    }
    getSelectedGlobalRolesItems() {
        if (!this.globalRolesIds || this.globalRolesIds === ALL_GLOBAL_ROLES_SELECTED) {
            return this.globalRolesItems;
        }
        return this.globalRolesIds
            .map(globalRoleId => this.globalRolesItems.find(gR => gR.id === globalRoleId))
            .filter(Boolean);
    }
}
DashboardAvailabilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardAvailabilityComponent, deps: [{ token: i1.UserGroupService }, { token: i2.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
DashboardAvailabilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DashboardAvailabilityComponent, selector: "c8y-dashboard-availability", inputs: { globalRolesIds: "globalRolesIds" }, outputs: { globalRolesIdsChange: "globalRolesIdsChange" }, ngImport: i0, template: "<c8y-form-group class=\"p-b-24 m-b-0\">\n  <div class=\"legend form-block\">\n    <span>{{ 'Availability' | translate }}</span>\n  </div>\n  <label for=\"availability\">\n    <span class=\"m-r-4\" id=\"availability\">\n      {{ 'Global roles' | translate }}\n    </span>\n    <button\n      class=\"btn-help btn-help--sm\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Select the global roles for which the dashboard will be available' | translate\n      }}\"\n      triggers=\"focus\"\n      placement=\"right\"\n      container=\"body\"\n    >\n    </button>\n  </label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"globalRolesItems\"\n    [selected]=\"globalRolesItemsSelected\"\n    (onChange)=\"onSelected($event)\"\n  ></c8y-select>\n</c8y-form-group>\n", dependencies: [{ kind: "component", type: i2.SelectComponent, selector: "c8y-select", inputs: ["placeholder", "selectedLabel", "applyLabel", "items", "selected", "updateItems", "disableApplyOnNoSelection"], outputs: ["onChange"] }, { kind: "component", type: i2.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i3.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardAvailabilityComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-dashboard-availability', template: "<c8y-form-group class=\"p-b-24 m-b-0\">\n  <div class=\"legend form-block\">\n    <span>{{ 'Availability' | translate }}</span>\n  </div>\n  <label for=\"availability\">\n    <span class=\"m-r-4\" id=\"availability\">\n      {{ 'Global roles' | translate }}\n    </span>\n    <button\n      class=\"btn-help btn-help--sm\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Select the global roles for which the dashboard will be available' | translate\n      }}\"\n      triggers=\"focus\"\n      placement=\"right\"\n      container=\"body\"\n    >\n    </button>\n  </label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"globalRolesItems\"\n    [selected]=\"globalRolesItemsSelected\"\n    (onChange)=\"onSelected($event)\"\n  ></c8y-select>\n</c8y-form-group>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserGroupService }, { type: i2.GainsightService }]; }, propDecorators: { globalRolesIds: [{
                type: Input
            }], globalRolesIdsChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { InjectionToken } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
export const CONTEXT_DASHBOARD_CONFIG = new InjectionToken('ContextDashboardConfig');
export var ContextDashboardType;
(function (ContextDashboardType) {
    ContextDashboardType["Device"] = "device";
    ContextDashboardType["DeviceType"] = "type";
    ContextDashboardType["Group"] = "group";
    ContextDashboardType["Named"] = "name";
    ContextDashboardType["Report"] = "report";
})(ContextDashboardType || (ContextDashboardType = {}));
export const WIDGET_HEADER_CLASSES = [
    {
        label: gettext('Regular`style`'),
        class: 'panel-title-regular',
        description: gettext('The widget has no border between header and content.')
    },
    {
        label: gettext('Border`style`'),
        class: 'panel-title-border',
        description: gettext('The widget has a small separation border between header and content.')
    },
    {
        label: gettext('Overlay`style`'),
        class: 'panel-title-overlay',
        description: gettext('The widget content overlays the header.')
    },
    {
        label: gettext('Hidden`style`'),
        class: 'panel-title-hidden',
        description: gettext('The widget header is not shown.')
    }
];
export const WIDGET_CONTENT_CLASSES = [
    {
        label: gettext('Match dashboard`style`'),
        class: 'panel-content-light',
        description: gettext('The widget appearance matches the dashboard appearance.')
    },
    {
        label: gettext('Light`style`'),
        class: 'panel-content-white',
        description: gettext('The widget has light appearance, that is, dark text on light background.')
    },
    {
        label: gettext('Dark`style`'),
        class: 'panel-content-dark',
        description: gettext('The widget has dark appearance, that is, light text on dark background.')
    },
    {
        label: gettext('Transparent`style`'),
        class: 'panel-content-transparent',
        description: gettext('The widget has no background.')
    },
    {
        label: gettext('Branded`style`'),
        class: 'panel-content-branded',
        description: gettext('The widget is styled with the main brand color.')
    }
];
export const DASHBOARD_THEME_CLASSES = [
    {
        label: gettext('Match UI`theme`'),
        class: 'dashboard-theme-light',
        description: gettext('The dashboard appearance matches the UI appearance.')
    },
    {
        label: gettext('Light`theme`'),
        class: 'dashboard-theme-white',
        description: gettext('The dashboard has light appearance, that is, dark text on light background.')
    },
    {
        label: gettext('Dark`theme`'),
        class: 'dashboard-theme-dark',
        description: gettext('The dashboard has dark appearance, that is, light text on dark background.')
    },
    // {
    //   label: gettext('Transparent`theme`'),
    //   class: 'dashboard-theme-transparent',
    //   description: gettext(
    //     'The dashboard is styled with a transparent background and therefore is border-less.'
    //   )
    // },
    {
        label: gettext('Branded`theme`'),
        class: 'dashboard-theme-branded',
        description: gettext('The dashboard is styled using the brand palette.')
    }
];
export const STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];
export const ALL_GLOBAL_ROLES_SELECTED = 'all';
export const PRODUCT_EXPERIENCE = {
    DASHBOARD: {
        EVENTS: {
            DASHBOARD_AVAILABILITY: 'dashboardAvailability'
        },
        COMPONENTS: {
            DASHBOARD_AVAILABILITY: 'dashboard-availability'
        },
        ACTIONS: {
            APPLY_GLOBAL_ROLES_CHANGES: 'applyGlobalRolesChanges'
        }
    }
};
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { ContextDashboardType } from '../context-dashboard.model';
import { ContextDashboardService } from '../context-dashboard.service';
import { tap } from 'rxjs/operators';
import { from, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../context-dashboard.service";
export class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService
            .create(dashboardCfg, undefined, `report_${reportId}`)
            .then(() => true);
    }
}
ReportDashboardGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard, deps: [{ token: i1.ContextDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportDashboardGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ContextDashboardService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbnRleHQtZGFzaGJvYXJkL3JlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsSUFBSSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBSTVDLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBRyxDQUFDO0lBRXhFLFdBQVcsQ0FBQyxLQUE2QjtRQUN2QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDckUsT0FBTyxJQUFJLENBQ1QsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3JGLENBQUMsSUFBSSxDQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNSLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUM7Z0JBQzNDLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDO2dCQUMxQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxRQUFRO1FBQ2hDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN4QixPQUFPLElBQUksQ0FBQyx1QkFBdUI7YUFDaEMsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsVUFBVSxRQUFRLEVBQUUsQ0FBQzthQUNyRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7aUhBckJVLG9CQUFvQjtxSEFBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBRGhDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRUeXBlIH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUYWIgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9ydERhc2hib2FyZEd1YXJkIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZXh0RGFzaGJvYXJkU2VydmljZTogQ29udGV4dERhc2hib2FyZFNlcnZpY2UpIHt9XG5cbiAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBUYWJbXT4ge1xuICAgIGNvbnN0IHJlcG9ydElkID0gcm91dGUuZGF0YS5jb250ZXh0RGF0YSAmJiByb3V0ZS5kYXRhLmNvbnRleHREYXRhLmlkO1xuICAgIHJldHVybiBmcm9tKFxuICAgICAgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5hY3RpdmF0ZURhc2hib2FyZHMocm91dGUsIFtDb250ZXh0RGFzaGJvYXJkVHlwZS5OYW1lZF0pXG4gICAgKS5waXBlKFxuICAgICAgdGFwKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgID8gdGhpcy5jcmVhdGVEYXNoYm9hcmRJZk5vdEV4aXN0KHJlcG9ydElkKVxuICAgICAgICAgIDogb2YodHJ1ZSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBjcmVhdGVEYXNoYm9hcmRJZk5vdEV4aXN0KHJlcG9ydElkKSB7XG4gICAgY29uc3QgZGFzaGJvYXJkQ2ZnID0ge307XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2VcbiAgICAgIC5jcmVhdGUoZGFzaGJvYXJkQ2ZnLCB1bmRlZmluZWQsIGByZXBvcnRfJHtyZXBvcnRJZH1gKVxuICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSk7XG4gIH1cbn1cbiJdfQ==
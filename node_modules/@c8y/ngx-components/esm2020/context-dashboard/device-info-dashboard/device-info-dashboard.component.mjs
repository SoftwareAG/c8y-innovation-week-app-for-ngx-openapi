import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { from } from 'rxjs';
import { map, mergeMap, tap, toArray } from 'rxjs/operators';
import { WidgetService } from '../widget.service';
import { InventoryService } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../widget.service";
import * as i3 from "@ngx-translate/core";
import * as i4 from "@c8y/client";
import * as i5 from "@angular/common";
import * as i6 from "@c8y/ngx-components";
import * as i7 from "../context-dashboard.component";
export class DeviceInfoDashboardComponent {
    constructor(router, widgetService, translateService, inventoryService) {
        this.router = router;
        this.widgetService = widgetService;
        this.translateService = translateService;
        this.inventoryService = inventoryService;
        this.isLoading = true;
        this.dashboardName = '';
        this.DEVICE_INFO_WIDGETS = [
            {
                name: 'deviceStatusWidget',
                title: gettext('Device status'),
                _x: 0,
                _y: 0,
                _height: 5,
                _width: 4
            },
            {
                name: 'Data points graph',
                title: gettext('Device and communication'),
                _x: 4,
                _y: 0,
                _height: 5,
                _width: 8,
                config: {
                    interval: 'hours',
                    aggregation: 'NONE',
                    realtime: true,
                    datapointsInitialDisplayLimit: 3,
                    datapoints: [
                        {
                            fragment: 'c8y_Battery',
                            series: 'level',
                            label: this.translateService.instant('Battery: level'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e07b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'rssi',
                            label: this.translateService.instant('Signal: RSSI'),
                            unit: 'dBm',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#a7d0f1',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Used',
                            label: this.translateService.instant('Memory: used'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f75229',
                            __active: true
                        },
                        {
                            fragment: 'c8y_CPUMeasurement',
                            series: 'Workload',
                            label: this.translateService.instant('CPU: workload'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#b24f3e',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Upload',
                            label: this.translateService.instant('Network: upload'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#88c039',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RCSP',
                            label: this.translateService.instant('Signal: RCSP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSCP',
                            label: this.translateService.instant('Signal: RSCP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRP',
                            label: this.translateService.instant('Signal: RSRP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#43ba3b',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRQ',
                            label: this.translateService.instant('Signal: RSRQ'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#14b0b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ber',
                            label: this.translateService.instant('Signal: BER'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#44ff33',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ECN0',
                            label: this.translateService.instant('Signal: ECN0'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#873efa',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Download',
                            label: this.translateService.instant('Network: download'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f27a45',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Total',
                            label: this.translateService.instant('Memory: total'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#dadd8c',
                            __active: true
                        }
                    ],
                    alarmsEventsConfigs: [
                        {
                            label: 'c8y_LocationUpdate',
                            timelineType: 'EVENT',
                            color: '#6f6cd0',
                            filters: {
                                type: 'c8y_LocationUpdate'
                            },
                            __active: true
                        },
                        {
                            label: 'c8y_UnavailabilityAlarm',
                            timelineType: 'ALARM',
                            color: '#375bf2',
                            filters: {
                                type: 'c8y_UnavailabilityAlarm'
                            },
                            __active: true
                        }
                    ]
                }
            },
            {
                name: 'Asset Properties',
                title: gettext('Device data'),
                config: {
                    options: {
                        properties: [],
                        allowDisplayAndEditKnownProperties: true,
                        hiddenPropertiesKeyPaths: ['owner']
                    }
                },
                _x: 0,
                _y: 5,
                _height: 8,
                _width: 4
            },
            {
                name: 'Alarm list',
                title: gettext('Active, critical alarms'),
                _x: 4,
                _y: 5,
                _height: 4,
                _width: 4,
                config: {
                    options: {
                        orderMode: 'ACTIVE_FIRST',
                        severity: { CRITICAL: true },
                        status: {
                            ACTIVE: true,
                            ACKNOWLEDGED: false,
                            CLEARED: false
                        },
                        types: []
                    }
                }
            },
            {
                name: 'deviceGroupAssignmentWidget',
                title: gettext('Group assignment'),
                _x: 8,
                _y: 5,
                _height: 4,
                _width: 4
            },
            {
                componentId: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 9,
                _height: 4,
                _width: 8
            }
        ];
    }
    ngOnInit() {
        this.contextSubscription = this.router.parent.data
            .pipe(tap(({ contextData }) => {
            this.title = contextData.name;
            this.dashboardName = `${contextData.id}-device-info`;
        }))
            .subscribe(async (data) => {
            this.currentContext = data;
            this.addDeviceTargetForDP(data.contextData.id, data.contextData.name);
        });
        this.widgetsSubscription = from(this.DEVICE_INFO_WIDGETS)
            .pipe(mergeMap(widget => this.widgetService.mapLegacy(widget)), map(widget => ({
            ...widget,
            config: {
                ...widget.config,
                device: this.router.parent.snapshot.data.contextData
            }
        })), toArray())
            .subscribe(async (data) => {
            await this.filterSupportedSeriesForDP(this.currentContext.contextData.id, data);
            this.widgetsList = data;
            this.isLoading = false;
        });
    }
    addDeviceTargetForDP(id, name) {
        const dpWidget = this.DEVICE_INFO_WIDGETS.filter(item => item.name == 'Data points graph')[0];
        // Add target to dataPoint config
        dpWidget.config.datapoints.map(item => (item['__target'] = { id, name }));
        // Add target to alarmEvents Config
        dpWidget.config.alarmsEventsConfigs.map(item => (item['__target'] = { id, name }));
    }
    async filterSupportedSeriesForDP(id, widgets) {
        const supportedMeasurements = await this.inventoryService.getMeasurementsAndSeries(id);
        const isDataPointSupported = dp => supportedMeasurements.some(({ fragment, series }) => dp.fragment === fragment && dp.series === series);
        const dpWidget = widgets.find(({ name }) => name === 'Data points graph');
        dpWidget.config.datapoints = dpWidget.config.datapoints.filter(isDataPointSupported);
    }
    ngOnDestroy() {
        this.widgetsSubscription.unsubscribe();
        this.contextSubscription.unsubscribe();
    }
}
DeviceInfoDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.WidgetService }, { token: i3.TranslateService }, { token: i4.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
DeviceInfoDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceInfoDashboardComponent, selector: "c8y-device-info-dashboard-dashboard", ngImport: i0, template: "<div *ngIf=\"!isLoading\">\n  <c8y-title>\n    {{ title }}\n  </c8y-title>\n  <c8y-context-dashboard\n    [translateWidgetTitle]=\"true\"\n    [name]=\"dashboardName\"\n    [context]=\"currentContext\"\n    [defaultWidgets]=\"widgetsList\"\n    [canDelete]=\"false\"\n  ></c8y-context-dashboard>\n</div>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: i7.ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: ["name", "childrenClasses", "context", "setTitle", "disabled", "defaultWidgets", "canCopy", "canDelete", "isLoading", "breadcrumbSettings", "showContextHelpButton", "translateWidgetTitle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-info-dashboard-dashboard', template: "<div *ngIf=\"!isLoading\">\n  <c8y-title>\n    {{ title }}\n  </c8y-title>\n  <c8y-context-dashboard\n    [translateWidgetTitle]=\"true\"\n    [name]=\"dashboardName\"\n    [context]=\"currentContext\"\n    [defaultWidgets]=\"widgetsList\"\n    [canDelete]=\"false\"\n  ></c8y-context-dashboard>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.WidgetService }, { type: i3.TranslateService }, { type: i4.InventoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
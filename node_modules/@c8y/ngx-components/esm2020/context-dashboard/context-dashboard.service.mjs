import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService } from '@c8y/client';
import { AlertService, DynamicComponentService, getActivatedRoute, gettext, ModalService, NavigatorNode, NavigatorService, Permissions, Status, TabsService, ViewContext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { assign, pick, some, keys, keyBy, has, get, forEach, cloneDeep, reduce, set } from 'lodash-es';
import { combineLatest, from, of } from 'rxjs';
import { catchError, filter, map, mergeAll, mergeMap, tap, throwIfEmpty, toArray } from 'rxjs/operators';
import { ContextDashboardType, STYLING_CLASS_PREFIXES, ALL_GLOBAL_ROLES_SELECTED } from './context-dashboard.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@ngx-translate/core";
import * as i4 from "@angular/router";
export class ContextDashboardService {
    get formDisabled() {
        return this._formDisabled;
    }
    set formDisabled(value) {
        this._formDisabled = value;
    }
    constructor(inventory, tabs, modal, translateService, router, navigator, permissions, alert, dynamicComponent) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.navigator = navigator;
        this.permissions = permissions;
        this.alert = alert;
        this.dynamicComponent = dynamicComponent;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.INVENTORY_ROLES = ['ROLE_INVENTORY_ADMIN'];
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    async create(dashboardCfg, context, name = '') {
        let id = '';
        let dashboardType;
        if (context) {
            id = context.contextData.id;
            dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
        }
        if (name) {
            dashboardType = ContextDashboardType.Named;
        }
        const dashboard = {};
        assign(dashboard, { c8y_Dashboard: dashboardCfg });
        const value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : name || id;
        const fragmentKey = this.createFragmentKey(dashboardType, value);
        dashboard[fragmentKey] = {};
        if (this.shouldSetGlobal(dashboard, context)) {
            assign(dashboard, { c8y_Global: {} });
        }
        dashboard.name = dashboard.c8y_Dashboard.name;
        const { data } = dashboardType === ContextDashboardType.Group ||
            dashboardType === ContextDashboardType.Device ||
            (context && dashboardType === ContextDashboardType.Named)
            ? await this.inventory.childAdditionsCreate(dashboard, id)
            : await this.inventory.create(dashboard);
        return data;
    }
    async detail(dashboardMO) {
        const { data } = await this.inventory.detail(dashboardMO);
        this.cache.set(dashboardMO.id, data);
        return data;
    }
    async update(dashboard) {
        dashboard.name = dashboard.c8y_Dashboard.name;
        const keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
        keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
        await this.serializeWidgetConfigs(keepFragments);
        const { data } = await this.inventory.update(keepFragments);
        this.cache.set(dashboard.id, data);
        return data;
    }
    async delete(dashboard, withConfirmation = true) {
        try {
            if (withConfirmation) {
                let msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}". Do you want to proceed?`);
                if (this.isDeviceType(dashboard)) {
                    msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}" from all devices of the type "{{ deviceType }}".
           Do you want to proceed?`);
                }
                await this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                    dashboardName: dashboard.c8y_Dashboard.name,
                    deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                }), Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
            }
            await this.inventory.delete(dashboard);
            const tabToRemove = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboard.id}`));
            this.tabs.remove(tabToRemove);
            this.tabs.refresh();
        }
        catch (ex) {
            // intended empty
        }
    }
    activateDashboards(route, types) {
        const { dashboardId } = route.params;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(dashboard => {
                route.data = { dashboard };
            }), map(() => true), catchError(() => {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    }
    getNamedDashboardOrCreate(name, defaultWidgets, context) {
        const children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(() => from(this.create({
            children,
            widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
        }, context, name))));
    }
    async refreshTabs(dashboardMO) {
        if (!this.isNamed(dashboardMO)) {
            const tabToUpdate = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboardMO.id}`));
            const data = await this.detail(dashboardMO);
            if (tabToUpdate) {
                const { icon, priority, name } = data.c8y_Dashboard;
                tabToUpdate.icon = icon;
                tabToUpdate.priority = priority;
                tabToUpdate.label = name;
            }
            this.tabs.refresh();
        }
    }
    updateNavigatorItem(mo) {
        this.navigator.state.forEach(node => {
            if (node.path === `reports/${mo.id}`) {
                this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            const nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: `reports/${mo.id}`,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    }
    async navigateToDashboard(dashboardMO) {
        if (/dashboard/.test(this.router.url)) {
            this.router.navigate(['..', dashboardMO.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
        else {
            this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
    }
    canEditDashboard(mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    }
    isNamed(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}`).test(prop));
    }
    isReport(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${this.REPORT_PARTIAL_NAME}`).test(prop));
    }
    isDeviceType(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.DeviceType}${this.INDEX_SPLIT}`).test(prop));
    }
    isDeviceDashboard(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Device}${this.INDEX_SPLIT}`).test(prop));
    }
    isGroupDashboard(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Group}${this.INDEX_SPLIT}`).test(prop));
    }
    getFilteredDashboardStyles(styleList) {
        return styleList.filter(c => STYLING_CLASS_PREFIXES.some(classPrefix => c.startsWith(classPrefix)));
    }
    getStyling(styleList, styleName, defaultValue) {
        const styling = styleList.find(style => style && new RegExp(`-${styleName}$`, 'i').test(style.class));
        return styling ? styling.class : defaultValue;
    }
    mapWidgets(widgets) {
        return keyBy(widgets.map(widget => {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    }
    getDashboard$(dashboardIdOrName, dashboardType, mo) {
        const cache = this.cache.get(dashboardIdOrName);
        const dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        const cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(dashboard => this.cacheDashboard(dashboard)), filter(dashboard => dashboard.id === dashboardIdOrName ||
            has(dashboard, `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${dashboardIdOrName}`)));
        return cache ? of(cache) : cacheRefresh;
    }
    async pasteDashboard(newContext) {
        if (this.copyClipboard) {
            if (this.canPasteDashboard(this.copyClipboard, newContext.context)) {
                const dashboardToPaste = this.createContextDashboardCopy(this.copyClipboard.dashboard, newContext.contextData, this.copyClipboard.context.contextData);
                const dashboard = await this.create(this.clean(dashboardToPaste), newContext);
                this.copyClipboard = undefined;
                this.navigateToDashboard(dashboard);
            }
        }
    }
    async serializeWidgetConfigs(dashboard) {
        const children = cloneDeep(dashboard.c8y_Dashboard.children);
        if (!children) {
            return;
        }
        const configs = Object.values(children);
        const details = configs.map(({ componentId, config }) => ({ componentId, config }));
        const results = await this.dynamicComponent.serializeConfigs(details);
        results.forEach((result, index) => {
            Object.entries(result).forEach(([key, value]) => {
                set(details[index].config, key, value);
            });
        });
        dashboard.c8y_Dashboard.children = children;
    }
    canPasteDashboard(copyClipboard, currentContext) {
        const clipboardViewContext = copyClipboard.context.context;
        if (currentContext !== clipboardViewContext) {
            if (clipboardViewContext === ViewContext.Device) {
                this.alert.warning(gettext('Device dashboards can only be copied into a device.'));
            }
            else if (clipboardViewContext === ViewContext.Group) {
                this.alert.warning(gettext('Group dashboards can only be copied into a group.'));
            }
            return false;
        }
        return true;
    }
    createContextDashboardCopy(dash, newContext, oldContext) {
        const children = reduce(dash.children, (_children, child) => {
            const { id } = child;
            const cfg = child.config;
            const propertiesToCopy = {
                device: device => this.replaceContextInObj(device, newContext, oldContext),
                datapoints: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                dataPoints: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                datapointsGauge: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                datapointsLabels: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext)
            };
            if (cfg) {
                this.copyProperties(cfg, propertiesToCopy);
                if (cfg.options) {
                    this.copyProperties(cfg.options, propertiesToCopy);
                }
            }
            _children[id] = cloneDeep(child);
            return _children;
        }, {});
        dash.children = children;
        return dash;
    }
    copyProperties(obj, propertiesToCopy) {
        forEach(propertiesToCopy, (copyFn, property) => {
            if (obj[property]) {
                obj[property] = copyFn(obj[property]);
            }
        });
    }
    replaceContextInDataPoints(dataPoints, newContext, oldContext) {
        dataPoints.forEach(dp => {
            dp.__target = this.replaceContextInObj(dp.__target, newContext, oldContext);
        });
        return dataPoints;
    }
    replaceContextInObj(obj, newContext, oldContext) {
        if (obj && obj.id === oldContext.id) {
            Object.assign(obj, pick(newContext, ['id', 'name']));
        }
        return obj;
    }
    getTabs$(mo, dashboardType) {
        const dashboards = this.getContextDashboards(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(mergeMap(dashboard => this.verifyDashboardAvailability$(dashboard)), mergeMap(([dashboard]) => this.removeDashboardMoProperty(dashboard)), tap(dashboard => this.cacheDashboard(dashboard)), map(dashboard => this.createDashboardTab(dashboard)), toArray());
    }
    verifyDashboardAvailability$(dashboard) {
        const globalRolesIds = dashboard?.c8y_Dashboard?.globalRolesIds;
        const canEdit = from(this.permissions.canEdit(this.INVENTORY_ROLES, dashboard, { skipRequestCheck: true }));
        const hasAnyGlobalRole = !globalRolesIds || globalRolesIds === ALL_GLOBAL_ROLES_SELECTED
            ? of(true)
            : of(this.permissions.hasAnyGlobalRole(globalRolesIds));
        return combineLatest([of(dashboard), canEdit, hasAnyGlobalRole]).pipe(filter(([, canEdit, hasAnyGlobalRole]) => canEdit || hasAnyGlobalRole));
    }
    getContextDashboards$(requests) {
        return from(requests).pipe(mergeAll(), mergeMap(response => response.data));
    }
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    async removeDashboardMoProperty(dashboard) {
        const dashboardCopy = cloneDeep(dashboard);
        const children = get(dashboardCopy, 'c8y_Dashboard.children');
        let updateDashboard = false;
        forEach(children, child => {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            await this.update(dashboardCopy);
        }
        return dashboardCopy;
    }
    cacheDashboard(dashboard) {
        this.cache.set(dashboard.id, dashboard);
    }
    createDashboardTab(dashboard) {
        const { c8y_Dashboard: _dashboard, id } = dashboard;
        return {
            icon: _dashboard.icon,
            path: `${this.DASHBOARD_ROUTE_PATH}/${id}`,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    }
    clean(dashboard) {
        const jsonString = JSON.stringify(dashboard, (key, value) => {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    }
    getNamedDashboard(name) {
        return this.inventory.list({
            fragmentType: `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${name}`,
            pageSize: 1
        });
    }
    getContextDashboards(mo, dashboardType) {
        return dashboardType.map((type) => this.inventory.list({
            fragmentType: this.createDashboardFragment(mo, type),
            pageSize: this.DEFAULT_PAGESIZE
        }));
    }
    createDashboardFragment(mo, type) {
        let value;
        if (mo.c8y_Report) {
            value = `${this.REPORT_PARTIAL_NAME}${mo.id}`;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${type}${this.INDEX_SPLIT}${value}`;
    }
    getDashboardTypeFromViewContext(dashboardCfg, context) {
        let dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    }
    createFragmentKey(contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    }
    shouldSetGlobal(dashboard, context) {
        if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) ||
            this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    }
}
ContextDashboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, deps: [{ token: i1.InventoryService }, { token: i2.TabsService }, { token: i2.ModalService }, { token: i3.TranslateService }, { token: i4.Router }, { token: i2.NavigatorService }, { token: i2.Permissions }, { token: i2.AlertService }, { token: i2.DynamicComponentService }], target: i0.ɵɵFactoryTarget.Injectable });
ContextDashboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2.TabsService }, { type: i2.ModalService }, { type: i3.TranslateService }, { type: i4.Router }, { type: i2.NavigatorService }, { type: i2.Permissions }, { type: i2.AlertService }, { type: i2.DynamicComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,
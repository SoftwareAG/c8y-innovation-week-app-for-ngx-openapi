import { Component, HostBinding, Inject, Input, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ActionBarService, AlertService, DashboardChildChange, GainsightService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { cloneDeep, findIndex, keyBy, omit, values, some, kebabCase, every } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { CONTEXT_DASHBOARD_CONFIG, WIDGET_HEADER_CLASSES } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetService } from './widget.service';
import { InventoryService } from '@c8y/client';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-dashboard.service";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "./widget.service";
import * as i5 from "ngx-bootstrap/modal";
import * as i6 from "@c8y/client";
import * as i7 from "@ngx-translate/core";
import * as i8 from "@angular/common";
/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
export class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService, actionBarService, translateService, modal) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.inventory = inventory;
        this.gainsightService = gainsightService;
        this.actionBarService = actionBarService;
        this.translateService = translateService;
        this.modal = modal;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canCopy = true;
        this.canDelete = true;
        this.isLoading = true;
        this.showContextHelpButton = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    async restore() {
        const mesg = gettext('You are about to reset this dashboard. All changes to the dashboard will get lost and cannot be recovered. Do you want to proceed?');
        try {
            await this.modal.confirm(gettext('Reset dashboard'), mesg, Status.WARNING, {
                ok: gettext('Reset`dashboard`'),
                cancel: gettext('Cancel')
            });
            this.isLoading = true;
            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
            await this.contextDashboardService.update(this.mo);
            await this.onLoad();
        }
        catch (error) {
            if (error) {
                this.alert.addServerFailure(error);
            }
        }
        finally {
            this.isLoading = false;
        }
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    async updateDashboardChildren(child) {
        const { children } = child;
        const dashboardMO = this.mo;
        const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
        dashboardMO.c8y_Dashboard.children = mappedChildren;
        return this.contextDashboardService.update(dashboardMO);
    }
    /**
     * Copies the dashboard and current context to a clipboard.
     */
    async copyDashboard() {
        const viewContext = this.route.parent.snapshot.data?.context;
        if (this.canCopyDashboard(viewContext)) {
            this.contextDashboardService.copyClipboard = {
                dashboard: cloneDeep(this.mo.c8y_Dashboard),
                context: cloneDeep({
                    context: viewContext,
                    contextData: this.context
                })
            };
            if (viewContext) {
                const ctx = viewContext.split('/').shift();
                const msg = this.translateService.instant('Dashboard copied. Navigate to the desired {{ ctx }} and select "Paste dashboard"', { ctx });
                this.alert.success(msg);
            }
            this.actionBarService.refresh();
        }
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    async deleteDashboard() {
        await this.contextDashboardService.delete(this.mo);
        if (this.route.parent) {
            const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
            this.router.navigateByUrl(route);
        }
    }
    /**
     * Edits the current dashboard
     */
    async editDashboard() {
        const isReport = this.contextDashboardService.isReport(this.mo);
        if (isReport) {
            const { name, icon, priority, c8y_IsNavigatorNode, description } = this.context;
            Object.assign(this.dashboard, { name, icon, priority, c8y_IsNavigatorNode, description });
        }
        const initialState = {
            dashboard: this.dashboard,
            deviceType: this.context.type,
            isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
            isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
            isReport
        };
        const modal = this.bsModal.show(DashboardDetailComponent, {
            class: 'modal-lg',
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            initialState,
            ignoreBackdropClick: true
        }).content;
        try {
            const dashboardMO = cloneDeep(this.mo);
            const cfg = await modal.result;
            if (isReport) {
                const { name, icon, c8y_IsNavigatorNode, priority, description, ...dashboardCfg } = cfg;
                dashboardMO.c8y_Dashboard = dashboardCfg;
                this.updateReport({
                    id: this.context.id,
                    name,
                    icon,
                    c8y_IsNavigatorNode,
                    priority,
                    description
                });
            }
            else {
                dashboardMO.c8y_Dashboard = cfg;
            }
            await this.contextDashboardService.update(dashboardMO);
            await this.contextDashboardService.refreshTabs(dashboardMO);
            this.onLoad();
            modal.close();
        }
        catch (ex) {
            // intended empty
        }
    }
    get isDeviceTypeDashboard() {
        return !!this.dashboard?.deviceType && !!this.dashboard.deviceTypeValue;
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    async editWidget(change) {
        const { x, y, width, height } = change.source;
        const component = await this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
        if (!component) {
            this.addWidget();
            return;
        }
        await this.addWidget({
            ...component,
            data: { ...component.data, ...change.widget, _x: x, _y: y, _width: width, _height: height }
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    async addWidget(selected) {
        const partialCloneSelected = selected
            ? {
                ...selected,
                data: cloneDeep(selected.data)
            }
            : selected;
        const activeContext = this.context.contextData ? this.context.contextData : this.context;
        const initialState = {
            mo: this.mo,
            context: this.context.c8y_Report ? {} : activeContext,
            selected: partialCloneSelected
        };
        const modal = this.bsModal.show(WidgetConfigComponent, {
            class: 'modal-lg',
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            initialState,
            ignoreBackdropClick: true
        }).content;
        try {
            const newWidget = await modal.result;
            if (!this.mo.c8y_Dashboard.children) {
                this.mo.c8y_Dashboard.children = {};
            }
            this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
            this.contextDashboardService.update(this.mo);
            newWidget.classes = this.mergeWidgetClasses(newWidget);
            await this.updateWidget(newWidget);
            modal.close();
        }
        catch (ex) {
            // intended empty
        }
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    async updateWidget(widget) {
        const index = findIndex(this.widgets, { id: widget.id });
        const isNew = index === -1;
        const mappedWidget = await this.widgetService.mapLegacy(widget);
        if (isNew) {
            this.widgets.push(mappedWidget);
        }
        else {
            this.widgets.splice(index, 1, mappedWidget);
        }
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    async deleteWidget(change) {
        const widgetTitle = change.widget.title;
        try {
            await this.modal.confirm(gettext('Remove widget'), this.translateService.instant(gettext('You are about to remove widget "{{ widgetTitle }}" from your dashboard. Do you want to proceed?'), { widgetTitle }), Status.DANGER, {
                ok: gettext('Remove'),
                cancel: gettext('Cancel')
            });
        }
        catch (e) {
            // on cancel: do nothing
            return;
        }
        try {
            const { widget, source } = change;
            delete this.mo.c8y_Dashboard.children[widget.id];
            const removed = this.widgets.find(({ id }) => id === widget.id);
            this.widgets.splice(this.widgets.indexOf(removed), 1);
            const { dashboard } = source;
            dashboard.children = dashboard.children.filter(c => c.data.id !== widget.id);
            // using setTimeout to give the component the chance to remove it.
            const sleep = timeout => new Promise(resolve => setTimeout(resolve, timeout));
            await sleep(0);
            const child = new DashboardChildChange(source);
            child.collapseUpAll();
            await this.updateDashboardChildren(child);
        }
        catch (e) {
            this.alert.addServerFailure(e);
        }
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    async toggleFreeze(settings) {
        this.toggleIsFrozenFlag(settings);
        try {
            await this.contextDashboardService.update(this.mo);
            if (this.dashboard.isFrozen) {
                this.alert.success(gettext('Your dashboard is locked now.'));
            }
            else {
                this.alert.success(gettext('Your dashboard is unlocked now.'));
            }
        }
        catch (ex) {
            this.alert.addServerFailure(ex);
            this.toggleIsFrozenFlag(settings);
        }
    }
    async updateReport(mo) {
        const res = await this.inventory.update(mo);
        this.context = res.data;
        if (this.route.parent) {
            this.route.parent.snapshot.data.contextData = this.context;
        }
        this.contextDashboardService.updateNavigatorItem(res.data);
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            this.context = this.route.parent.snapshot.data.contextData;
            this.title = this.context?.name;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.patchSensorPhoneDashboard(this.dashboard, this.mo.owner, this.context?.type);
            this.onLoad(true);
        });
    }
    /**
     * To enable translation for widgets within the dashboard, the "translateWidgetTitle" flag must be enabled.
     * The property needs to be patched, as the "Sensor App" does not provide this setting.
     */
    patchSensorPhoneDashboard(dashboard, owner, type) {
        if (type === 'c8y_SensorPhone' && owner.includes('device_phone')) {
            dashboard.translateWidgetTitle = true;
        }
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    async onLoad(trackExperience) {
        const canEditDashboard = await this.contextDashboardService.canEditDashboard(this.mo);
        this.disabled = !canEditDashboard;
        this.canCopy =
            this.contextDashboardService.isDeviceDashboard(this.mo) ||
                this.contextDashboardService.isDeviceType(this.mo) ||
                this.contextDashboardService.isGroupDashboard(this.mo);
        const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
        const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
        const isReport = this.contextDashboardService.isReport(this.mo);
        const dashboardClasses = {
            'c8y-grid-dashboard': true,
            dashboard: true,
            ...this.dashboard.classes
        };
        this.widgets = await Promise.all(values(dashboardChildren).map(widget => {
            widget.classes = this.mergeWidgetClasses(widget);
            if (isDeviceType) {
                this.applyDeviceTarget(widget);
            }
            if (trackExperience) {
                this.gainsightService.triggerEvent('loadWidget', {
                    widgetName: widget.componentId || widget.name
                });
            }
            return this.widgetService.mapLegacy(widget);
        }));
        this.class = Object.keys(dashboardClasses).join(' ');
        if (isReport) {
            this.addReportDashboardSettings();
        }
        this.isLoading = false;
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? { ...widget.classes }
            : { ...this.dashboard.widgetClasses, ...widget.classes };
        return {
            card: true,
            'card-dashboard': true,
            [kebabCase(widget.componentId || widget.name)]: true,
            ...widgetClasses
        };
    }
    componentToWidget(child) {
        return {
            ...omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext']),
            ...{
                _x: child.x,
                _y: child.y,
                _width: child.width,
                _height: child.height
            }
        };
    }
    addReportDashboardSettings() {
        this.setTitle = true;
        this.title = this.context.name;
        this.breadcrumbSettings = {
            icon: 'th',
            label: 'Reports',
            path: 'reports'
        };
        this.canDelete = false;
    }
    canCopyDashboard(viewContext) {
        if (!this.validDashboardChildren() && viewContext) {
            const ctx = viewContext.split('/').shift();
            const msg = this.translateService.instant('Only dashboards with widgets referencing the current {{ ctx }} can be copied.', { ctx });
            this.alert.warning(msg);
            return false;
        }
        return true;
    }
    validDashboardChildren() {
        return every(this.mo.c8y_Dashboard.children, child => {
            const config = child.config || {};
            const dataPoints = config.datapoints || [];
            return !((config.device && config.device.id !== this.context.id) ||
                some(dataPoints, dataPoint => dataPoint.__target.id !== this.context.id));
        });
    }
}
ContextDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.ContextDashboardService }, { token: i3.AlertService }, { token: i0.Renderer2 }, { token: CONTEXT_DASHBOARD_CONFIG }, { token: i4.WidgetService }, { token: i5.BsModalService }, { token: i6.InventoryService }, { token: i3.GainsightService }, { token: i3.ActionBarService }, { token: i7.TranslateService }, { token: i3.ModalService }], target: i0.ɵɵFactoryTarget.Component });
ContextDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: { name: "name", childrenClasses: "childrenClasses", context: "context", setTitle: "setTitle", disabled: "disabled", defaultWidgets: "defaultWidgets", canCopy: "canCopy", canDelete: "canDelete", isLoading: "isLoading", breadcrumbSettings: "breadcrumbSettings", showContextHelpButton: "showContextHelpButton", translateWidgetTitle: "translateWidgetTitle" }, host: { properties: { "class": "this.class" }, styleAttribute: "\n      display: block;\n    ", classAttribute: "dashboard c8y-grid-dashboard" }, ngImport: i0, template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"-1\"\n  *ngIf=\"defaultWidgets.length > 0\"\n>\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reset dashboard' | translate }}\"\n    type=\"button\"\n    px-event=\"Reset dashboard\"\n    (click)=\"restore()\"\n    [disabled]=\"dashboard?.isFrozen || disabled\"\n    data-cy=\"context-dashboard--button-reset-dashboard\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"reset\"\n    ></i>\n    {{ 'Reset dashboard' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help\n  src=\"/users-guide/cockpit/#dashboards\"\n  *ngIf=\"showContextHelpButton\"\n></c8y-help>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle ?? translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n></c8y-widgets-dashboard>\n", dependencies: [{ kind: "component", type: i3.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: i3.WidgetsDashboardComponent, selector: "c8y-widgets-dashboard", inputs: ["widgets", "context", "contextDashboard", "settings", "breadcrumb"], outputs: ["onAddWidget", "onEditWidget", "onDeleteWidget", "onChangeDashboard", "onEditDashboard", "onCopyDashboard", "onDeleteDashboard", "onFreeze", "onChangeStart", "onChangeEnd"] }, { kind: "component", type: i3.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-context-dashboard', host: {
                        style: `
      display: block;
    `,
                        class: 'dashboard c8y-grid-dashboard'
                    }, template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"-1\"\n  *ngIf=\"defaultWidgets.length > 0\"\n>\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reset dashboard' | translate }}\"\n    type=\"button\"\n    px-event=\"Reset dashboard\"\n    (click)=\"restore()\"\n    [disabled]=\"dashboard?.isFrozen || disabled\"\n    data-cy=\"context-dashboard--button-reset-dashboard\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"reset\"\n    ></i>\n    {{ 'Reset dashboard' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help\n  src=\"/users-guide/cockpit/#dashboards\"\n  *ngIf=\"showContextHelpButton\"\n></c8y-help>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle ?? translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n></c8y-widgets-dashboard>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.ContextDashboardService }, { type: i3.AlertService }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CONTEXT_DASHBOARD_CONFIG]
                }] }, { type: i4.WidgetService }, { type: i5.BsModalService }, { type: i6.InventoryService }, { type: i3.GainsightService }, { type: i3.ActionBarService }, { type: i7.TranslateService }, { type: i3.ModalService }]; }, propDecorators: { name: [{
                type: Input
            }], childrenClasses: [{
                type: Input
            }], context: [{
                type: Input
            }], setTitle: [{
                type: Input
            }], disabled: [{
                type: Input
            }], defaultWidgets: [{
                type: Input
            }], canCopy: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], breadcrumbSettings: [{
                type: Input
            }], showContextHelpButton: [{
                type: Input
            }], translateWidgetTitle: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,
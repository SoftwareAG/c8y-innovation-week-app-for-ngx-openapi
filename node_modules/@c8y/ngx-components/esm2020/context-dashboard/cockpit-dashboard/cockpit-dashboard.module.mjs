import { NgModule } from '@angular/core';
import { ContextDashboardModule } from '../context-dashboard.module';
import { ContextDashboardComponent } from '../context-dashboard.component';
import { DeviceDashboardGuard } from '../device-dashboard.guard';
import { GroupDashboardGuard } from '../group-dashboard.guard';
import { ViewContext, hookNavigator, gettext, CoreModule } from '@c8y/ngx-components';
import { CockpitDashboardComponent } from './cockpit-dashboard.component';
import { COCKPIT_HOME_DASHBOARD_CONFIG } from './cockpit-dashboard.model';
import * as i0 from "@angular/core";
import * as i1 from "../context-dashboard.module";
export class CockpitDashboardModule {
    static config(config = {}) {
        return {
            ngModule: CockpitDashboardModule,
            providers: [
                {
                    provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
CockpitDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CockpitDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, declarations: [CockpitDashboardComponent], imports: [CoreModule, i1.ContextDashboardModule] });
CockpitDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, providers: [hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })], imports: [CoreModule,
        ContextDashboardModule.config({
            routes: [
                {
                    path: 'dashboard/:dashboardId',
                    component: ContextDashboardComponent,
                    canActivate: [DeviceDashboardGuard],
                    context: ViewContext.Device
                },
                {
                    path: 'dashboard/:dashboardId',
                    component: ContextDashboardComponent,
                    canActivate: [GroupDashboardGuard],
                    context: ViewContext.Group
                },
                {
                    path: '',
                    component: CockpitDashboardComponent
                }
            ]
        })] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        ContextDashboardModule.config({
                            routes: [
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [DeviceDashboardGuard],
                                    context: ViewContext.Device
                                },
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [GroupDashboardGuard],
                                    context: ViewContext.Group
                                },
                                {
                                    path: '',
                                    component: CockpitDashboardComponent
                                }
                            ]
                        })
                    ],
                    declarations: [CockpitDashboardComponent],
                    providers: [hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ja3BpdC1kYXNoYm9hcmQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29udGV4dC1kYXNoYm9hcmQvY29ja3BpdC1kYXNoYm9hcmQvY29ja3BpdC1kYXNoYm9hcmQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQTBCLDZCQUE2QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQTZCbEcsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQWlDLEVBQUU7UUFDL0MsT0FBTztZQUNMLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSw2QkFBNkI7b0JBQ3RDLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O21IQVhVLHNCQUFzQjtvSEFBdEIsc0JBQXNCLGlCQUhsQix5QkFBeUIsYUF0QnRDLFVBQVU7b0hBeUJELHNCQUFzQixhQUZ0QixDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFlBdkI5RixVQUFVO1FBQ1Ysc0JBQXNCLENBQUMsTUFBTSxDQUFDO1lBQzVCLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsd0JBQXdCO29CQUM5QixTQUFTLEVBQUUseUJBQXlCO29CQUNwQyxXQUFXLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNO2lCQUM1QjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsd0JBQXdCO29CQUM5QixTQUFTLEVBQUUseUJBQXlCO29CQUNwQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDbEMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxLQUFLO2lCQUMzQjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsRUFBRTtvQkFDUixTQUFTLEVBQUUseUJBQXlCO2lCQUNyQzthQUNGO1NBQ0YsQ0FBQzsyRkFLTyxzQkFBc0I7a0JBM0JsQyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxVQUFVO3dCQUNWLHNCQUFzQixDQUFDLE1BQU0sQ0FBQzs0QkFDNUIsTUFBTSxFQUFFO2dDQUNOO29DQUNFLElBQUksRUFBRSx3QkFBd0I7b0NBQzlCLFNBQVMsRUFBRSx5QkFBeUI7b0NBQ3BDLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDO29DQUNuQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07aUNBQzVCO2dDQUNEO29DQUNFLElBQUksRUFBRSx3QkFBd0I7b0NBQzlCLFNBQVMsRUFBRSx5QkFBeUI7b0NBQ3BDLFdBQVcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29DQUNsQyxPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7aUNBQzNCO2dDQUNEO29DQUNFLElBQUksRUFBRSxFQUFFO29DQUNSLFNBQVMsRUFBRSx5QkFBeUI7aUNBQ3JDOzZCQUNGO3lCQUNGLENBQUM7cUJBQ0g7b0JBQ0QsWUFBWSxFQUFFLENBQUMseUJBQXlCLENBQUM7b0JBQ3pDLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2lCQUNqRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkTW9kdWxlIH0gZnJvbSAnLi4vY29udGV4dC1kYXNoYm9hcmQubW9kdWxlJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlRGFzaGJvYXJkR3VhcmQgfSBmcm9tICcuLi9kZXZpY2UtZGFzaGJvYXJkLmd1YXJkJztcbmltcG9ydCB7IEdyb3VwRGFzaGJvYXJkR3VhcmQgfSBmcm9tICcuLi9ncm91cC1kYXNoYm9hcmQuZ3VhcmQnO1xuaW1wb3J0IHsgVmlld0NvbnRleHQsIGhvb2tOYXZpZ2F0b3IsIGdldHRleHQsIENvcmVNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvY2twaXREYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuL2NvY2twaXQtZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2NrcGl0RGFzaGJvYXJkQ29uZmlnLCBDT0NLUElUX0hPTUVfREFTSEJPQVJEX0NPTkZJRyB9IGZyb20gJy4vY29ja3BpdC1kYXNoYm9hcmQubW9kZWwnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBDb250ZXh0RGFzaGJvYXJkTW9kdWxlLmNvbmZpZyh7XG4gICAgICByb3V0ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgICAgICBjb21wb25lbnQ6IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtEZXZpY2VEYXNoYm9hcmRHdWFyZF0sXG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnZGFzaGJvYXJkLzpkYXNoYm9hcmRJZCcsXG4gICAgICAgICAgY29tcG9uZW50OiBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbR3JvdXBEYXNoYm9hcmRHdWFyZF0sXG4gICAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICcnLFxuICAgICAgICAgIGNvbXBvbmVudDogQ29ja3BpdERhc2hib2FyZENvbXBvbmVudFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbQ29ja3BpdERhc2hib2FyZENvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW2hvb2tOYXZpZ2F0b3IoeyBsYWJlbDogZ2V0dGV4dCgnSG9tZScpLCBpY29uOiAnaG9tZScsIHByaW9yaXR5OiAxMDAwMCwgcGF0aDogJy8nIH0pXVxufSlcbmV4cG9ydCBjbGFzcyBDb2NrcGl0RGFzaGJvYXJkTW9kdWxlIHtcbiAgc3RhdGljIGNvbmZpZyhjb25maWc6IENvY2twaXREYXNoYm9hcmRDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Q29ja3BpdERhc2hib2FyZE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ29ja3BpdERhc2hib2FyZE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQ09DS1BJVF9IT01FX0RBU0hCT0FSRF9DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19
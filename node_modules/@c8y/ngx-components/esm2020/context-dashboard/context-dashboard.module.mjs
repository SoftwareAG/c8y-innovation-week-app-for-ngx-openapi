import { NgModule } from '@angular/core';
import { CoreModule, hookActionBar, hookRoute, ViewContext, hookTab, HookProviderTypes } from '@c8y/ngx-components';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { AddDashboardComponent } from './add-dashboard.component';
import { AddDashboardFactory } from './add-dashboard.factory';
import { AppearanceSettingsComponent } from './appearance-settings.component';
import { ContextDashboardComponent } from './context-dashboard.component';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardActionBarFactory } from './dashboard-action-bar.factory';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { DeviceDashboardGuard } from './device-dashboard.guard';
import { GroupDashboardGuard } from './group-dashboard.guard';
import { PasteDashboardActionComponent } from './paste-dashboard-action.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetPreviewComponent } from './widget-preview.component';
import { WidgetService } from './widget.service';
import { DashboardAvailabilityComponent } from './dashboard-availability.component';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/dropdown";
const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
export class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: { ...defaultConfig, ...config }
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                hookRoute({ ...defaultConfig, ...config }.routes),
                hookTab(AddDashboardFactory, { providerType: HookProviderTypes.ExistingProvider }),
                hookActionBar(DashboardActionBarFactory)
            ]
        };
    }
}
ContextDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ContextDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, declarations: [AppearanceSettingsComponent,
        ContextDashboardComponent,
        WidgetConfigComponent,
        WidgetPreviewComponent,
        DashboardDetailComponent,
        AddDashboardComponent,
        PasteDashboardActionComponent,
        DashboardAvailabilityComponent], imports: [CoreModule,
        TooltipModule,
        PopoverModule,
        AssetSelectorModule, i1.BsDropdownModule], exports: [ContextDashboardComponent, WidgetConfigComponent] });
ContextDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: defaultConfig
        }
    ], imports: [CoreModule,
        TooltipModule,
        PopoverModule,
        AssetSelectorModule,
        BsDropdownModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        AppearanceSettingsComponent,
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        WidgetPreviewComponent,
                        DashboardDetailComponent,
                        AddDashboardComponent,
                        PasteDashboardActionComponent,
                        DashboardAvailabilityComponent
                    ],
                    imports: [
                        CoreModule,
                        TooltipModule,
                        PopoverModule,
                        AssetSelectorModule,
                        BsDropdownModule.forRoot()
                    ],
                    exports: [ContextDashboardComponent, WidgetConfigComponent],
                    entryComponents: [
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        DashboardDetailComponent,
                        PasteDashboardActionComponent
                    ],
                    providers: [
                        WidgetService,
                        {
                            provide: CONTEXT_DASHBOARD_CONFIG,
                            useValue: defaultConfig
                        }
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
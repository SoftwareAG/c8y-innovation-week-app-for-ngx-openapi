import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService } from '@c8y/client';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-dashboard.service";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components";
export class PasteDashboardActionComponent {
    constructor(vcRef, router, contextDashboardService, inventoryService) {
        this.vcRef = vcRef;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.inventoryService = inventoryService;
        this.dashboardName = '';
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templatePaste);
        const clipboard = this.contextDashboardService.copyClipboard;
        if (clipboard) {
            this.dashboardName = clipboard.dashboard.name;
        }
    }
    async pasteDashboard() {
        let context;
        const currentUrl = this.router.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        const isGroup = new RegExp(/group\/\d+/).test(currentUrl);
        const id = currentUrl.match(/\d+/)[0];
        if (isDevice) {
            context = {
                context: ViewContext.Device,
                contextData: await this.getContextMo(id)
            };
        }
        else if (isGroup) {
            context = {
                context: ViewContext.Group,
                contextData: await this.getContextMo(id)
            };
        }
        this.contextDashboardService.pasteDashboard(context);
    }
    async getContextMo(id) {
        return (await this.inventoryService.detail(id)).data;
    }
}
PasteDashboardActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasteDashboardActionComponent, deps: [{ token: i0.ViewContainerRef }, { token: i1.Router }, { token: i2.ContextDashboardService }, { token: i3.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
PasteDashboardActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PasteDashboardActionComponent, selector: "c8y-paste-dashboard-action", viewQueries: [{ propertyName: "templatePaste", first: true, predicate: ["templatePaste"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: `
    <ng-template #templatePaste>
      <li>
        <button
          class="btn btn-link"
          type="button"
          title="{{ 'Paste dashboard' | translate }}"
          (click)="pasteDashboard()"
        >
          <i class="m-r-4" c8yIcon="clipboard"></i>
          <span ngNonBindable translate [translateParams]="{ dashboardName: dashboardName }">
            Paste dashboard "{{ dashboardName }}"
          </span>
        </button>
      </li>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasteDashboardActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c8y-paste-dashboard-action',
                    template: `
    <ng-template #templatePaste>
      <li>
        <button
          class="btn btn-link"
          type="button"
          title="{{ 'Paste dashboard' | translate }}"
          (click)="pasteDashboard()"
        >
          <i class="m-r-4" c8yIcon="clipboard"></i>
          <span ngNonBindable translate [translateParams]="{ dashboardName: dashboardName }">
            Paste dashboard "{{ dashboardName }}"
          </span>
        </button>
      </li>
    </ng-template>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.Router }, { type: i2.ContextDashboardService }, { type: i3.InventoryService }]; }, propDecorators: { templatePaste: [{
                type: ViewChild,
                args: ['templatePaste', { read: TemplateRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzdGUtZGFzaGJvYXJkLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7QUFzQnRFLE1BQU0sT0FBTyw2QkFBNkI7SUFJeEMsWUFDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsdUJBQWdELEVBQ2hELGdCQUFrQztRQUhsQyxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTjVDLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBT2hCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztRQUM3RCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDbEIsSUFBSSxPQUF5QixDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNDLE1BQU0sUUFBUSxHQUFZLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkUsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QyxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sR0FBRztnQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzNCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2FBQ3pDLENBQUM7U0FDSDthQUFNLElBQUksT0FBTyxFQUFFO1lBQ2xCLE9BQU8sR0FBRztnQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7Z0JBQzFCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2FBQ3pDLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBVTtRQUNuQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZELENBQUM7OzBIQTFDVSw2QkFBNkI7OEdBQTdCLDZCQUE2Qiw2SkFDSixXQUFXLDJDQW5CckM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQlQ7MkZBRVUsNkJBQTZCO2tCQXBCekMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQlQ7aUJBQ0Y7aU1BRWtFLGFBQWE7c0JBQTdFLFNBQVM7dUJBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFZpZXdDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEYXNoYm9hcmRDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5tb2RlbCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGUgI3RlbXBsYXRlUGFzdGU+XG4gICAgICA8bGk+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzcz1cImJ0biBidG4tbGlua1wiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgdGl0bGU9XCJ7eyAnUGFzdGUgZGFzaGJvYXJkJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgKGNsaWNrKT1cInBhc3RlRGFzaGJvYXJkKClcIlxuICAgICAgICA+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtLXItNFwiIGM4eUljb249XCJjbGlwYm9hcmRcIj48L2k+XG4gICAgICAgICAgPHNwYW4gbmdOb25CaW5kYWJsZSB0cmFuc2xhdGUgW3RyYW5zbGF0ZVBhcmFtc109XCJ7IGRhc2hib2FyZE5hbWU6IGRhc2hib2FyZE5hbWUgfVwiPlxuICAgICAgICAgICAgUGFzdGUgZGFzaGJvYXJkIFwie3sgZGFzaGJvYXJkTmFtZSB9fVwiXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBQYXN0ZURhc2hib2FyZEFjdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlUGFzdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVQYXN0ZTtcbiAgZGFzaGJvYXJkTmFtZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVQYXN0ZSk7XG4gICAgY29uc3QgY2xpcGJvYXJkID0gdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5jb3B5Q2xpcGJvYXJkO1xuICAgIGlmIChjbGlwYm9hcmQpIHtcbiAgICAgIHRoaXMuZGFzaGJvYXJkTmFtZSA9IGNsaXBib2FyZC5kYXNoYm9hcmQubmFtZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwYXN0ZURhc2hib2FyZCgpIHtcbiAgICBsZXQgY29udGV4dDogRGFzaGJvYXJkQ29udGV4dDtcbiAgICBjb25zdCBjdXJyZW50VXJsOiBzdHJpbmcgPSB0aGlzLnJvdXRlci51cmw7XG4gICAgY29uc3QgaXNEZXZpY2U6IGJvb2xlYW4gPSBuZXcgUmVnRXhwKC9kZXZpY2VcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpc0dyb3VwOiBib29sZWFuID0gbmV3IFJlZ0V4cCgvZ3JvdXBcXC9cXGQrLykudGVzdChjdXJyZW50VXJsKTtcbiAgICBjb25zdCBpZCA9IGN1cnJlbnRVcmwubWF0Y2goL1xcZCsvKVswXTtcblxuICAgIGlmIChpc0RldmljZSkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgICBjb250ZXh0RGF0YTogYXdhaXQgdGhpcy5nZXRDb250ZXh0TW8oaWQpXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNHcm91cCkge1xuICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXAsXG4gICAgICAgIGNvbnRleHREYXRhOiBhd2FpdCB0aGlzLmdldENvbnRleHRNbyhpZClcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UucGFzdGVEYXNoYm9hcmQoY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldENvbnRleHRNbyhpZDogc3RyaW5nKTogUHJvbWlzZTxJTWFuYWdlZE9iamVjdD4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChpZCkpLmRhdGE7XG4gIH1cbn1cbiJdfQ==
import { Injectable, Inject, Optional } from '@angular/core';
import { sortBy, cloneDeep, get, omit } from 'lodash-es';
import { DynamicComponentService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@ngx-translate/core";
export class WidgetService {
    constructor(dynamicComponentService, translateService, moduleConfig) {
        this.dynamicComponentService = dynamicComponentService;
        this.translateService = translateService;
        this.moduleConfig = moduleConfig;
        this.dynamicComponentService.items$.subscribe(widgets => {
            this.widgets = widgets;
        });
    }
    async getWidgetDefinition(componentId) {
        return this.dynamicComponentService.getById(componentId);
    }
    getWidgetDefinitions() {
        const translatedComponents = this.widgets.map(cmp => ({
            ...cmp,
            label: this.translateService.instant(cmp.label)
        }));
        // cloneDeep and injector lead to a performance issue. We removing the injectors here,
        // as they are not needed, to avoid use of a lot of CPU for cloning.
        const translatedComponentsWithoutInjector = translatedComponents.map(cmp => omit(cmp, 'injector'));
        return cloneDeep(sortBy(translatedComponentsWithoutInjector, 'label').filter(this.moduleConfig.widgetFilter));
    }
    async mapLegacy(widget) {
        const cmp = await this.getWidgetDefinition(widget.componentId || widget.name);
        widget = this.mapDisplaySettings(widget, cmp);
        if (get(cmp, 'data.settings.upgrade')) {
            widget.widgetComponent = cmp.data.settings.widgetComponent;
            widget.configComponent = cmp.data.settings.configComponent;
            widget.templateUrl = cmp.data.settings.templateUrl;
            widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
            widget.transformConfigWithContext =
                cmp.data.settings.componentTransformConfigWithContext ||
                    cmp.data.settings.transformConfigWithContext ||
                    widget.transformConfigWithContext;
        }
        else {
            delete widget.templateUrl;
            delete widget.configTemplateUrl;
        }
        return widget;
    }
    mapDisplaySettings(widget, cmp) {
        if (cmp?.data?.displaySettings) {
            widget.config = { displaySettings: cmp.data.displaySettings, ...(widget.config || {}) };
        }
        return widget;
    }
}
WidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, deps: [{ token: i1.DynamicComponentService }, { token: i2.TranslateService }, { token: CONTEXT_DASHBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.DynamicComponentService }, { type: i2.TranslateService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONTEXT_DASHBOARD_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC93aWRnZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQXNDLE1BQU0scUJBQXFCLENBQUM7QUFDbEcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUEwQix3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBSzdGLE1BQU0sT0FBTyxhQUFhO0lBR3hCLFlBQ1UsdUJBQWdELEVBQ2hELGdCQUFrQyxFQUduQyxZQUFvQztRQUpuQyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFHbkMsaUJBQVksR0FBWixZQUFZLENBQXdCO1FBRTNDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO1FBQ25DLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELEdBQUcsR0FBRztZQUNOLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDaEQsQ0FBQyxDQUFDLENBQUM7UUFFSixzRkFBc0Y7UUFDdEYsb0VBQW9FO1FBQ3BFLE1BQU0sbUNBQW1DLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ3pFLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQ3RCLENBQUM7UUFDRixPQUFPLFNBQVMsQ0FDZCxNQUFNLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQzVGLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUF1QjtRQUNyQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RSxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU5QyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztZQUMzRCxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztZQUMzRCxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNuRCxNQUFNLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUM7WUFDL0QsTUFBTSxDQUFDLDBCQUEwQjtnQkFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUNBQW1DO29CQUNyRCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQywwQkFBMEI7b0JBQzVDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztTQUNyQzthQUFNO1lBQ0wsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQzFCLE9BQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxNQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFTyxrQkFBa0IsQ0FDeEIsTUFBdUIsRUFDdkIsR0FBK0I7UUFFL0IsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUM5QixNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDekY7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzswR0EvRFUsYUFBYSx5RkFPZCx3QkFBd0I7OEdBUHZCLGFBQWEsY0FGWixNQUFNOzJGQUVQLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFPSSxRQUFROzswQkFDUixNQUFNOzJCQUFDLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHNvcnRCeSwgY2xvbmVEZWVwLCBnZXQsIG9taXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudFNlcnZpY2UsIER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uLCBXaWRnZXQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb25maWcsIENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRyB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBXaWRnZXRTZXJ2aWNlIHtcbiAgd2lkZ2V0czogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGR5bmFtaWNDb21wb25lbnRTZXJ2aWNlOiBEeW5hbWljQ29tcG9uZW50U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRylcbiAgICBwdWJsaWMgbW9kdWxlQ29uZmlnOiBDb250ZXh0RGFzaGJvYXJkQ29uZmlnXG4gICkge1xuICAgIHRoaXMuZHluYW1pY0NvbXBvbmVudFNlcnZpY2UuaXRlbXMkLnN1YnNjcmliZSh3aWRnZXRzID0+IHtcbiAgICAgIHRoaXMud2lkZ2V0cyA9IHdpZGdldHM7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBnZXRXaWRnZXREZWZpbml0aW9uKGNvbXBvbmVudElkKTogUHJvbWlzZTxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmR5bmFtaWNDb21wb25lbnRTZXJ2aWNlLmdldEJ5SWQoY29tcG9uZW50SWQpO1xuICB9XG5cbiAgZ2V0V2lkZ2V0RGVmaW5pdGlvbnMoKSB7XG4gICAgY29uc3QgdHJhbnNsYXRlZENvbXBvbmVudHMgPSB0aGlzLndpZGdldHMubWFwKGNtcCA9PiAoe1xuICAgICAgLi4uY21wLFxuICAgICAgbGFiZWw6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KGNtcC5sYWJlbClcbiAgICB9KSk7XG5cbiAgICAvLyBjbG9uZURlZXAgYW5kIGluamVjdG9yIGxlYWQgdG8gYSBwZXJmb3JtYW5jZSBpc3N1ZS4gV2UgcmVtb3ZpbmcgdGhlIGluamVjdG9ycyBoZXJlLFxuICAgIC8vIGFzIHRoZXkgYXJlIG5vdCBuZWVkZWQsIHRvIGF2b2lkIHVzZSBvZiBhIGxvdCBvZiBDUFUgZm9yIGNsb25pbmcuXG4gICAgY29uc3QgdHJhbnNsYXRlZENvbXBvbmVudHNXaXRob3V0SW5qZWN0b3IgPSB0cmFuc2xhdGVkQ29tcG9uZW50cy5tYXAoY21wID0+XG4gICAgICBvbWl0KGNtcCwgJ2luamVjdG9yJylcbiAgICApO1xuICAgIHJldHVybiBjbG9uZURlZXAoXG4gICAgICBzb3J0QnkodHJhbnNsYXRlZENvbXBvbmVudHNXaXRob3V0SW5qZWN0b3IsICdsYWJlbCcpLmZpbHRlcih0aGlzLm1vZHVsZUNvbmZpZy53aWRnZXRGaWx0ZXIpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG1hcExlZ2FjeSh3aWRnZXQ6IFBhcnRpYWw8V2lkZ2V0Pik6IFByb21pc2U8V2lkZ2V0PiB7XG4gICAgY29uc3QgY21wID0gYXdhaXQgdGhpcy5nZXRXaWRnZXREZWZpbml0aW9uKHdpZGdldC5jb21wb25lbnRJZCB8fCB3aWRnZXQubmFtZSk7XG4gICAgd2lkZ2V0ID0gdGhpcy5tYXBEaXNwbGF5U2V0dGluZ3Mod2lkZ2V0LCBjbXApO1xuXG4gICAgaWYgKGdldChjbXAsICdkYXRhLnNldHRpbmdzLnVwZ3JhZGUnKSkge1xuICAgICAgd2lkZ2V0LndpZGdldENvbXBvbmVudCA9IGNtcC5kYXRhLnNldHRpbmdzLndpZGdldENvbXBvbmVudDtcbiAgICAgIHdpZGdldC5jb25maWdDb21wb25lbnQgPSBjbXAuZGF0YS5zZXR0aW5ncy5jb25maWdDb21wb25lbnQ7XG4gICAgICB3aWRnZXQudGVtcGxhdGVVcmwgPSBjbXAuZGF0YS5zZXR0aW5ncy50ZW1wbGF0ZVVybDtcbiAgICAgIHdpZGdldC5jb25maWdUZW1wbGF0ZVVybCA9IGNtcC5kYXRhLnNldHRpbmdzLmNvbmZpZ1RlbXBsYXRlVXJsO1xuICAgICAgd2lkZ2V0LnRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0ID1cbiAgICAgICAgY21wLmRhdGEuc2V0dGluZ3MuY29tcG9uZW50VHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQgfHxcbiAgICAgICAgY21wLmRhdGEuc2V0dGluZ3MudHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQgfHxcbiAgICAgICAgd2lkZ2V0LnRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgd2lkZ2V0LnRlbXBsYXRlVXJsO1xuICAgICAgZGVsZXRlIHdpZGdldC5jb25maWdUZW1wbGF0ZVVybDtcbiAgICB9XG4gICAgcmV0dXJuIHdpZGdldCBhcyBXaWRnZXQ7XG4gIH1cblxuICBwcml2YXRlIG1hcERpc3BsYXlTZXR0aW5ncyhcbiAgICB3aWRnZXQ6IFBhcnRpYWw8V2lkZ2V0PixcbiAgICBjbXA6IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uXG4gICk6IFBhcnRpYWw8V2lkZ2V0PiB7XG4gICAgaWYgKGNtcD8uZGF0YT8uZGlzcGxheVNldHRpbmdzKSB7XG4gICAgICB3aWRnZXQuY29uZmlnID0geyBkaXNwbGF5U2V0dGluZ3M6IGNtcC5kYXRhLmRpc3BsYXlTZXR0aW5ncywgLi4uKHdpZGdldC5jb25maWcgfHwge30pIH07XG4gICAgfVxuICAgIHJldHVybiB3aWRnZXQ7XG4gIH1cbn1cbiJdfQ==
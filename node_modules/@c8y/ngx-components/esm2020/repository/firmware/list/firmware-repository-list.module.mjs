import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FirmwareListComponent } from './firmware-list.component';
import { FirmwareDetailsComponent } from './firmware-details.component';
import { AddFirmwareModalComponent } from './add-firmware-modal.component';
import { AddFirmwarePatchModalComponent } from './add-firmware-patch-modal.component';
import { CoreModule, FormsModule, hookNavigator, hookRoute } from '@c8y/ngx-components';
import { FirmwareRepositoryNavigationFactory } from './firmware-repository-navigation-factory';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import * as i0 from "@angular/core";
export class FirmwareRepositoryListModule {
    static forRoot() {
        return {
            ngModule: FirmwareRepositoryListModule,
            providers: [
                hookNavigator(FirmwareRepositoryNavigationFactory),
                hookRoute([
                    {
                        path: 'firmware',
                        component: FirmwareListComponent
                    },
                    {
                        path: 'firmware/:id',
                        component: FirmwareDetailsComponent
                    }
                ])
            ]
        };
    }
}
FirmwareRepositoryListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FirmwareRepositoryListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FirmwareRepositoryListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: FirmwareRepositoryListModule, declarations: [FirmwareListComponent,
        FirmwareDetailsComponent,
        AddFirmwareModalComponent,
        AddFirmwarePatchModalComponent], imports: [CommonModule,
        CoreModule,
        FormsModule,
        PopoverModule,
        TooltipModule,
        SharedRepositoryModule] });
FirmwareRepositoryListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FirmwareRepositoryListModule, imports: [CommonModule,
        CoreModule,
        FormsModule,
        PopoverModule,
        TooltipModule,
        SharedRepositoryModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FirmwareRepositoryListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        CoreModule,
                        FormsModule,
                        PopoverModule,
                        TooltipModule,
                        SharedRepositoryModule
                    ],
                    declarations: [
                        FirmwareListComponent,
                        FirmwareDetailsComponent,
                        AddFirmwareModalComponent,
                        AddFirmwarePatchModalComponent
                    ],
                    entryComponents: [
                        FirmwareListComponent,
                        FirmwareDetailsComponent,
                        AddFirmwareModalComponent,
                        AddFirmwarePatchModalComponent
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlybXdhcmUtcmVwb3NpdG9yeS1saXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlcG9zaXRvcnkvZmlybXdhcmUvbGlzdC9maXJtd2FyZS1yZXBvc2l0b3J5LWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEYsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7QUF3Qi9FLE1BQU0sT0FBTyw0QkFBNEI7SUFDdkMsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLDRCQUE0QjtZQUN0QyxTQUFTLEVBQUU7Z0JBQ1QsYUFBYSxDQUFDLG1DQUFtQyxDQUFDO2dCQUNsRCxTQUFTLENBQUM7b0JBQ1I7d0JBQ0UsSUFBSSxFQUFFLFVBQVU7d0JBQ2hCLFNBQVMsRUFBRSxxQkFBcUI7cUJBQ2pDO29CQUNEO3dCQUNFLElBQUksRUFBRSxjQUFjO3dCQUNwQixTQUFTLEVBQUUsd0JBQXdCO3FCQUNwQztpQkFDRixDQUFDO2FBQ0g7U0FDRixDQUFDO0lBQ0osQ0FBQzs7eUhBbEJVLDRCQUE0QjswSEFBNUIsNEJBQTRCLGlCQVpyQyxxQkFBcUI7UUFDckIsd0JBQXdCO1FBQ3hCLHlCQUF5QjtRQUN6Qiw4QkFBOEIsYUFYOUIsWUFBWTtRQUNaLFVBQVU7UUFDVixXQUFXO1FBQ1gsYUFBYTtRQUNiLGFBQWE7UUFDYixzQkFBc0I7MEhBZWIsNEJBQTRCLFlBcEJyQyxZQUFZO1FBQ1osVUFBVTtRQUNWLFdBQVc7UUFDWCxhQUFhO1FBQ2IsYUFBYTtRQUNiLHNCQUFzQjsyRkFlYiw0QkFBNEI7a0JBdEJ4QyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFVBQVU7d0JBQ1YsV0FBVzt3QkFDWCxhQUFhO3dCQUNiLGFBQWE7d0JBQ2Isc0JBQXNCO3FCQUN2QjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1oscUJBQXFCO3dCQUNyQix3QkFBd0I7d0JBQ3hCLHlCQUF5Qjt3QkFDekIsOEJBQThCO3FCQUMvQjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2YscUJBQXFCO3dCQUNyQix3QkFBd0I7d0JBQ3hCLHlCQUF5Qjt3QkFDekIsOEJBQThCO3FCQUMvQjtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRmlybXdhcmVMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9maXJtd2FyZS1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaXJtd2FyZURldGFpbHNDb21wb25lbnQgfSBmcm9tICcuL2Zpcm13YXJlLWRldGFpbHMuY29tcG9uZW50JztcbmltcG9ydCB7IEFkZEZpcm13YXJlTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL2FkZC1maXJtd2FyZS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWRkRmlybXdhcmVQYXRjaE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9hZGQtZmlybXdhcmUtcGF0Y2gtbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvcmVNb2R1bGUsIEZvcm1zTW9kdWxlLCBob29rTmF2aWdhdG9yLCBob29rUm91dGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEZpcm13YXJlUmVwb3NpdG9yeU5hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9maXJtd2FyZS1yZXBvc2l0b3J5LW5hdmlnYXRpb24tZmFjdG9yeSc7XG5pbXBvcnQgeyBQb3BvdmVyTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3BvdmVyJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgU2hhcmVkUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS9zaGFyZWQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUG9wb3Zlck1vZHVsZSxcbiAgICBUb29sdGlwTW9kdWxlLFxuICAgIFNoYXJlZFJlcG9zaXRvcnlNb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRmlybXdhcmVMaXN0Q29tcG9uZW50LFxuICAgIEZpcm13YXJlRGV0YWlsc0NvbXBvbmVudCxcbiAgICBBZGRGaXJtd2FyZU1vZGFsQ29tcG9uZW50LFxuICAgIEFkZEZpcm13YXJlUGF0Y2hNb2RhbENvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICBGaXJtd2FyZUxpc3RDb21wb25lbnQsXG4gICAgRmlybXdhcmVEZXRhaWxzQ29tcG9uZW50LFxuICAgIEFkZEZpcm13YXJlTW9kYWxDb21wb25lbnQsXG4gICAgQWRkRmlybXdhcmVQYXRjaE1vZGFsQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRmlybXdhcmVSZXBvc2l0b3J5TGlzdE1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RmlybXdhcmVSZXBvc2l0b3J5TGlzdE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRmlybXdhcmVSZXBvc2l0b3J5TGlzdE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBob29rTmF2aWdhdG9yKEZpcm13YXJlUmVwb3NpdG9yeU5hdmlnYXRpb25GYWN0b3J5KSxcbiAgICAgICAgaG9va1JvdXRlKFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXRoOiAnZmlybXdhcmUnLFxuICAgICAgICAgICAgY29tcG9uZW50OiBGaXJtd2FyZUxpc3RDb21wb25lbnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhdGg6ICdmaXJtd2FyZS86aWQnLFxuICAgICAgICAgICAgY29tcG9uZW50OiBGaXJtd2FyZURldGFpbHNDb21wb25lbnRcbiAgICAgICAgICB9XG4gICAgICAgIF0pXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19
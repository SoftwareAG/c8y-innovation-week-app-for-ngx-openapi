import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, OperationStatus } from '@c8y/client';
import { GainsightService, gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE, RepositorySelectModalComponent, RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
import { assign, get, isEmpty } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, combineLatest, from, of } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/ngx-components/repository/shared";
import * as i3 from "@c8y/client";
import * as i4 from "ngx-bootstrap/modal";
import * as i5 from "@c8y/ngx-components";
import * as i6 from "@angular/common";
import * as i7 from "@c8y/ngx-components/operations/operation-details";
export class FirmwareDeviceTabComponent {
    constructor(route, repository, inventory, bsModal, gainsightService) {
        this.route = route;
        this.repository = repository;
        this.inventory = inventory;
        this.bsModal = bsModal;
        this.gainsightService = gainsightService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.isEmpty = isEmpty;
        this.reloading = false;
        this.device$ = new BehaviorSubject(this.route.parent.snapshot.data.contextData);
        this.deviceFirmwareFragment$ = this.device$.pipe(map(device => device.c8y_Firmware));
        this.firmwareBinary$ = this.deviceFirmwareFragment$.pipe(filter(deviceFirmwareFragment => !isEmpty(deviceFirmwareFragment)), switchMap(deviceFirmwareFragment => from(this.repository.getRepositoryBinaryMoByVersion(deviceFirmwareFragment, RepositoryType.FIRMWARE))), shareReplay(1));
        this.repositoryEntry$ = this.firmwareBinary$.pipe(switchMap(mo => this.repository.getRepositoryEntryMO$(mo)), shareReplay(1));
        this.patches$ = combineLatest(this.firmwareBinary$, this.repositoryEntry$).pipe(switchMap(([firmwareBinary, repositoryEntry]) => {
            if (repositoryEntry && firmwareBinary) {
                const version = this.repository.getBaseVersionFromMO(firmwareBinary);
                return from(this.repository.listPatchVersions(repositoryEntry, version)).pipe(map(({ data }) => data));
            }
            else {
                return of([]);
            }
        }), shareReplay(1));
        this.supportsFirmwareOperations$ = this.device$.pipe(map((device) => get(device, 'c8y_SupportedOperations', []).indexOf('c8y_Firmware') > -1));
        this.changesOperation$ = new BehaviorSubject(null);
        this.changesInProgress$ = this.changesOperation$.pipe(map(operation => this.isInProgress(operation)));
    }
    async ngOnInit() {
        // TODO check route snapshot, why is not refreshing device.
        // Scenario: missing deviceFirmwareFragment => install new version => switch tabs.
        // Expected: device should be set.
        await this.loadDevice();
        await this.loadOperation();
    }
    installFirmware() {
        const initialState = {
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: modal => this.getRepositoryEntriesWithVersions$(modal.content.searchTerm),
            repositoryType: RepositoryType.FIRMWARE,
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(deviceFirmwareFragment => {
            if (deviceFirmwareFragment) {
                const { name, version } = deviceFirmwareFragment;
                const selected = [{ name, version }];
                assign(initialState, { selected });
            }
            const modal = this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ =
                    initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(([selectedFirmware]) => {
            this.handleOperation(selectedFirmware);
        });
    }
    getRepositoryEntriesWithVersions$(searchTerm$) {
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {
            query: this.repository.getDeviceTypeQuery(RepositoryType.FIRMWARE, this.device$.value),
            partialName: searchTerm?.name,
            params: { pageSize: 100 }
        })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)), shareReplay(1));
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repository.listBaseVersions(mo);
        });
        return mos;
    }
    addPatch() {
        const initialState = {
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersions$: this.getRepositoryEntryWithPatches$(),
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(deviceFirmwareFragment => {
            if (deviceFirmwareFragment) {
                const { name, version } = deviceFirmwareFragment;
                const selected = [{ name, version }];
                assign(initialState, { selected });
            }
            const modal = this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState
            });
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(([selectedOption]) => {
            this.handleOperation(selectedOption);
        });
    }
    getRepositoryEntryWithPatches$() {
        return combineLatest(this.repositoryEntry$, this.patches$).pipe(map(([repositoryEntry, patches]) => {
            return [{ ...repositoryEntry, versions: patches }];
        }));
    }
    async loadDevice() {
        this.reloading = true;
        const deviceId = this.device$.value.id;
        const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;
        this.device$.next(device);
        this.reloading = false;
    }
    async handleOperation(selectedFirmware) {
        const operation = await this.repository.createFirmwareUpdateOperation(this.device$.value, selectedFirmware);
        this.trackOperation(operation);
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB, {
            component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,
            result: PRODUCT_EXPERIENCE.FIRMWARE.RESULTS.CREATE_FIRMWARE_UPDATE_OPERATION
        });
    }
    async loadOperation() {
        const deviceId = this.device$.value.id;
        const operation = await this.repository.getLastFirmwareUpdateOperation(deviceId);
        this.trackOperation(operation);
    }
    trackOperation(operation) {
        this.changesOperation$.next(operation);
        if (this.isInProgress(operation)) {
            this.repository.observeOperation(operation).subscribe(operationUpdate => {
                this.changesOperation$.next(operationUpdate);
                if (operationUpdate.status === OperationStatus.SUCCESSFUL) {
                    this.loadDevice();
                }
            }, operationUpdate => {
                this.changesOperation$.next(operationUpdate);
            });
        }
    }
    isInProgress(operation) {
        return (operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status));
    }
}
FirmwareDeviceTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FirmwareDeviceTabComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.RepositoryService }, { token: i3.InventoryService }, { token: i4.BsModalService }, { token: i5.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
FirmwareDeviceTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FirmwareDeviceTabComponent, selector: "c8y-firmware-device-tab", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Current firmware</div>\n      </div>\n      <div class=\"inner-scroll\">\n        <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-level-1\">\n          <c8y-operation-details [operation]=\"changesOperation$ | async\"></c8y-operation-details>\n        </fieldset>\n        <div class=\"card-block p-t-0 p-b-0\">\n          <!-- EMPTY STATE -->\n          <ng-container *ngIf=\"isEmpty(deviceFirmwareFragment$ | async); else firmwareBlock\">\n            <div class=\"c8y-empty-state text-center\">\n              <div c8yIcon=\"c8y-firmware\" class=\"h1 c8y-icon-duocolor\"></div>\n              <p>\n                <strong translate>No firmware installed.</strong>\n                <br />\n                <small translate>Click below to install firmware into this device.</small>\n              </p>\n            </div>\n          </ng-container>\n\n          <!-- FIRMWARE -->\n          <ng-template #firmwareBlock>\n            <c8y-list-group class=\"no-border-last\">\n              <c8y-li>\n                <c8y-li-icon>\n                  <i c8yIcon=\"c8y-firmware\"></i>\n                </c8y-li-icon>\n\n                <c8y-li-body *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\">\n                  <!-- Firmware title -->\n                  <p class=\"text-medium\">\n                    {{ deviceFirmwareFragment.name }}\n                  </p>\n                  <!-- Firmware description -->\n                  <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\">\n                    <span class=\"text-label-small m-r-4\" translate>Description</span>\n                    <span>\n                      {{ repositoryEntry.description }}\n                    </span>\n                  </div>\n\n                  <!-- BASE/PATCH VERSION -->\n                  <div class=\"d-flex a-i-baseline\">\n                    <p class=\"text-label-small m-r-4\" translate>Version</p>\n                    <p *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\">\n                      {{ deviceFirmwareFragment.version }}\n                    </p>\n                    <ng-template #versionNotSpecified>\n                      <p>\n                        <em class=\"text-muted\">({{ 'not specified`version`' | translate }})</em>\n                      </p>\n                    </ng-template>\n                  </div>\n\n                  <!-- ADD PATCH -->\n                  <button\n                    *ngIf=\"\n                      (supportsFirmwareOperations$ | async) && (this.patches$ | async)?.length > 0\n                    \"\n                    (click)=\"addPatch()\"\n                    class=\"btn btn-xs btn-primary\"\n                    [disabled]=\"changesInProgress$ | async\"\n                    title=\"{{ 'Patches available' | translate }}\"\n                    c8yProductExperience\n                    [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n                    [actionData]=\"{\n                      component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n                      action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_INSTALL_FIRMWARE_PATCH_DIALOG\n                    }\"\n                  >\n                    {{ 'Patches available' | translate }}\n                  </button>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </ng-template>\n        </div>\n      </div>\n      <div *ngIf=\"supportsFirmwareOperations$ | async\" class=\"card-footer separator-top\">\n        <!-- INSTALL FIRMWARE -->\n        <button\n          *ngIf=\"isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          title=\"{{ 'Install firmware' | translate }}\"\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n            action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_INSTALL_FIRMWARE_DIALOG\n          }\"\n        >\n          {{ 'Install firmware' | translate }}\n        </button>\n\n        <!-- REPLACE FIRMWARE -->\n        <button\n          *ngIf=\"!isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          title=\"{{ 'Replace firmware' | translate }}\"\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n            action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_REPLACE_FIRMWARE_DIALOG\n          }\"\n        >\n          {{ 'Replace firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i5.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i5.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i5.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i5.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "directive", type: i5.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i7.OperationDetailsComponent, selector: "c8y-operation-details", inputs: ["operation"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FirmwareDeviceTabComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-firmware-device-tab', template: "<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Current firmware</div>\n      </div>\n      <div class=\"inner-scroll\">\n        <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-level-1\">\n          <c8y-operation-details [operation]=\"changesOperation$ | async\"></c8y-operation-details>\n        </fieldset>\n        <div class=\"card-block p-t-0 p-b-0\">\n          <!-- EMPTY STATE -->\n          <ng-container *ngIf=\"isEmpty(deviceFirmwareFragment$ | async); else firmwareBlock\">\n            <div class=\"c8y-empty-state text-center\">\n              <div c8yIcon=\"c8y-firmware\" class=\"h1 c8y-icon-duocolor\"></div>\n              <p>\n                <strong translate>No firmware installed.</strong>\n                <br />\n                <small translate>Click below to install firmware into this device.</small>\n              </p>\n            </div>\n          </ng-container>\n\n          <!-- FIRMWARE -->\n          <ng-template #firmwareBlock>\n            <c8y-list-group class=\"no-border-last\">\n              <c8y-li>\n                <c8y-li-icon>\n                  <i c8yIcon=\"c8y-firmware\"></i>\n                </c8y-li-icon>\n\n                <c8y-li-body *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\">\n                  <!-- Firmware title -->\n                  <p class=\"text-medium\">\n                    {{ deviceFirmwareFragment.name }}\n                  </p>\n                  <!-- Firmware description -->\n                  <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\">\n                    <span class=\"text-label-small m-r-4\" translate>Description</span>\n                    <span>\n                      {{ repositoryEntry.description }}\n                    </span>\n                  </div>\n\n                  <!-- BASE/PATCH VERSION -->\n                  <div class=\"d-flex a-i-baseline\">\n                    <p class=\"text-label-small m-r-4\" translate>Version</p>\n                    <p *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\">\n                      {{ deviceFirmwareFragment.version }}\n                    </p>\n                    <ng-template #versionNotSpecified>\n                      <p>\n                        <em class=\"text-muted\">({{ 'not specified`version`' | translate }})</em>\n                      </p>\n                    </ng-template>\n                  </div>\n\n                  <!-- ADD PATCH -->\n                  <button\n                    *ngIf=\"\n                      (supportsFirmwareOperations$ | async) && (this.patches$ | async)?.length > 0\n                    \"\n                    (click)=\"addPatch()\"\n                    class=\"btn btn-xs btn-primary\"\n                    [disabled]=\"changesInProgress$ | async\"\n                    title=\"{{ 'Patches available' | translate }}\"\n                    c8yProductExperience\n                    [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n                    [actionData]=\"{\n                      component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n                      action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_INSTALL_FIRMWARE_PATCH_DIALOG\n                    }\"\n                  >\n                    {{ 'Patches available' | translate }}\n                  </button>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </ng-template>\n        </div>\n      </div>\n      <div *ngIf=\"supportsFirmwareOperations$ | async\" class=\"card-footer separator-top\">\n        <!-- INSTALL FIRMWARE -->\n        <button\n          *ngIf=\"isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          title=\"{{ 'Install firmware' | translate }}\"\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n            action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_INSTALL_FIRMWARE_DIALOG\n          }\"\n        >\n          {{ 'Install firmware' | translate }}\n        </button>\n\n        <!-- REPLACE FIRMWARE -->\n        <button\n          *ngIf=\"!isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          title=\"{{ 'Replace firmware' | translate }}\"\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.FIRMWARE.EVENTS.DEVICE_TAB\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.FIRMWARE.COMPONENTS.FIRMWARE_DEVICE_TAB,\n            action: PRODUCT_EXPERIENCE.FIRMWARE.ACTIONS.OPEN_REPLACE_FIRMWARE_DIALOG\n          }\"\n        >\n          {{ 'Replace firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.RepositoryService }, { type: i3.InventoryService }, { type: i4.BsModalService }, { type: i5.GainsightService }]; } });
//# sourceMappingURL=data:application/json;base64,
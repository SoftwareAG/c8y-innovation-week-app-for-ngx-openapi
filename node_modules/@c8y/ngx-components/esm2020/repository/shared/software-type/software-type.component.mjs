import { ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { QueriesUtil } from '@c8y/client';
import { gettext, TypeaheadComponent } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { uniqBy } from 'lodash-es';
import { BehaviorSubject, pipe } from 'rxjs';
import { debounceTime, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { RepositoryType } from '../repository.model';
import { RepositoryService } from '../repository.service';
import * as i0 from "@angular/core";
import * as i1 from "../repository.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@angular/forms";
export class SoftwareTypeComponent {
    constructor(repositoryService, changeDetectorRef, translateService) {
        this.repositoryService = repositoryService;
        this.changeDetectorRef = changeDetectorRef;
        this.translateService = translateService;
        this.required = true;
        this.placeholder = this.translateService.instant(gettext('e.g. {{ example }}'), {
            example: 'yum'
        });
        this.emitResultsOnly = false;
        this.showBtnInNotFoundMessage = true;
        this.allowFreeEntries = true;
        this.showClearSelectionOption = false;
        this.clearSelectionOptionLabel = gettext('All software types');
        this.onSelectSoftware = new EventEmitter();
        this.filterPipe = pipe(tap());
        this.search$ = new BehaviorSubject(null);
        this.queriesUtil = new QueriesUtil();
        this.softwareTypes = new Set();
        this.softwaresResult$ = this.search$.pipe(debounceTime(300), tap(() => this.softwareTypes.clear()), switchMap((searchString) => {
            if (!this.emitResultsOnly || !searchString) {
                this.onSelectSoftware.emit(this.softwareTypeMO);
            }
            return this.getSoftwareByTypeResult(searchString);
        }), shareReplay(1));
        this.filterPipe = pipe(map(this.removeDuplicatesBySoftwareType.bind(this)));
    }
    ngOnInit() {
        this.notFoundTemplateToUse = this.showBtnInNotFoundMessage
            ? this.notFoundTypeAddNewTemplate
            : this.notFoundTypeTemplate;
    }
    getSoftwareByTypeResult(searchString) {
        let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);
        const filter = !!searchString
            ? {
                softwareType: {
                    __eq: `*${searchString}*`
                }
            }
            : {
                __has: 'softwareType'
            };
        query = this.queriesUtil.addAndFilter(query, filter);
        return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query,
            params: {
                pageSize: 200
            }
        });
    }
    selectSoftware(software) {
        this.softwareTypeMO = software;
        this.onSelectSoftware.emit(software);
        this.deviceSoftwareTypeModel.searchControlModel.control.markAsDirty();
        this.deviceSoftwareTypeModel.onChange(software);
    }
    clearSoftware() {
        this.softwareTypeMO = undefined;
        this.search$.next('');
        this.onSelectSoftware.emit();
    }
    resetInput() {
        this.deviceSoftwareTypeModel.reset();
    }
    writeValue(value) {
        this.deviceSoftwareTypeModel.writeValue(value);
    }
    registerOnChange(fn) {
        this.deviceSoftwareTypeModel.registerOnChange(fn);
    }
    registerOnTouched(fn) {
        this.deviceSoftwareTypeModel.registerOnTouched(fn);
    }
    setDisabledState(isDisabled) {
        this.deviceSoftwareTypeModel.setDisabledState(isDisabled);
    }
    validate(control) {
        return this.deviceSoftwareTypeModel.validate(control);
    }
    removeDuplicatesBySoftwareType(list) {
        const uniqueBySoftwareType = uniqBy(list, 'softwareType').filter((sw) => !this.softwareTypes.has(sw.softwareType));
        uniqueBySoftwareType.forEach((sw) => this.softwareTypes.add(sw.softwareType));
        return uniqueBySoftwareType;
    }
}
SoftwareTypeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SoftwareTypeComponent, deps: [{ token: i1.RepositoryService }, { token: i0.ChangeDetectorRef }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
SoftwareTypeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SoftwareTypeComponent, selector: "c8y-software-type", inputs: { softwareTypeMO: "softwareTypeMO", disabled: "disabled", style: "style", required: "required", placeholder: "placeholder", emitResultsOnly: "emitResultsOnly", showBtnInNotFoundMessage: "showBtnInNotFoundMessage", allowFreeEntries: "allowFreeEntries", showClearSelectionOption: "showClearSelectionOption", clearSelectionOptionLabel: "clearSelectionOptionLabel" }, outputs: { onSelectSoftware: "onSelectSoftware" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => SoftwareTypeComponent)
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => SoftwareTypeComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "deviceSoftwareTypeModel", first: true, predicate: ["deviceSoftwareTypeModel"], descendants: true }, { propertyName: "notFoundTypeAddNewTemplate", first: true, predicate: ["notFoundTypeAddNewTemplate"], descendants: true, static: true }, { propertyName: "notFoundTypeTemplate", first: true, predicate: ["notFoundTypeTemplate"], descendants: true, static: true }], ngImport: i0, template: "<c8y-typeahead\n  [(ngModel)]=\"softwareTypeMO\"\n  [required]=\"required\"\n  [disabled]=\"disabled\"\n  name=\"softwareType\"\n  [placeholder]=\"placeholder\"\n  [allowFreeEntries]=\"allowFreeEntries\"\n  #deviceSoftwareTypeModel\n  (onSearch)=\"search$.next($event)\"\n  displayProperty=\"softwareType\"\n  [ngStyle]=\"style\"\n>\n  <c8y-li\n    *ngIf=\"showClearSelectionOption\"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"clearSoftware()\"\n    [active]=\"!softwareTypeMO?.softwareType\"\n  >\n    <span>{{ clearSelectionOptionLabel | translate }}</span>\n  </c8y-li>\n  <c8y-li\n    *c8yFor=\"\n      let software of softwaresResult$;\n      pipe: filterPipe;\n      loadMore: 'auto';\n      notFound: notFoundTemplateToUse\n    \"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"selectSoftware(software)\"\n    [active]=\"softwareTypeMO?.softwareType === software.softwareType\"\n  >\n    <c8y-highlight\n      [text]=\"software.softwareType || '--'\"\n      [pattern]=\"search$ | async\"\n    ></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTypeAddNewTemplate>\n    <c8y-li class=\"bg-level-2 p-8\" *ngIf=\"(search$ | async)?.length > 0\">\n      <span translate>No match found.</span>\n      <button\n        title=\"{{ 'Add new`software type`' | translate }}\"\n        type=\"button\"\n        class=\"btn btn-primary btn-xs m-l-8\"\n        translate\n      >\n        Add new`software type`\n      </button>\n    </c8y-li>\n  </ng-template>\n  <ng-template #notFoundTypeTemplate>\n    <c8y-li\n      class=\"bg-level-2 p-8\"\n      *ngIf=\"(search$ | async)?.length > 0 && (softwaresResult$ | async)?.data?.length === 0\"\n    >\n      <span translate>No match found. Refine your search terms or check your spelling.</span>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i4.HighlightComponent, selector: "c8y-highlight", inputs: ["pattern", "text", "elementClass", "shouldTrimPattern"] }, { kind: "component", type: i4.TypeaheadComponent, selector: "c8y-typeahead", inputs: ["required", "maxlength", "disabled", "allowFreeEntries", "placeholder", "displayProperty", "icon", "name", "autoClose", "hideNew", "container", "selected"], outputs: ["onSearch", "onIconClick"] }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SoftwareTypeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-software-type', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SoftwareTypeComponent)
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => SoftwareTypeComponent),
                            multi: true
                        }
                    ], template: "<c8y-typeahead\n  [(ngModel)]=\"softwareTypeMO\"\n  [required]=\"required\"\n  [disabled]=\"disabled\"\n  name=\"softwareType\"\n  [placeholder]=\"placeholder\"\n  [allowFreeEntries]=\"allowFreeEntries\"\n  #deviceSoftwareTypeModel\n  (onSearch)=\"search$.next($event)\"\n  displayProperty=\"softwareType\"\n  [ngStyle]=\"style\"\n>\n  <c8y-li\n    *ngIf=\"showClearSelectionOption\"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"clearSoftware()\"\n    [active]=\"!softwareTypeMO?.softwareType\"\n  >\n    <span>{{ clearSelectionOptionLabel | translate }}</span>\n  </c8y-li>\n  <c8y-li\n    *c8yFor=\"\n      let software of softwaresResult$;\n      pipe: filterPipe;\n      loadMore: 'auto';\n      notFound: notFoundTemplateToUse\n    \"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"selectSoftware(software)\"\n    [active]=\"softwareTypeMO?.softwareType === software.softwareType\"\n  >\n    <c8y-highlight\n      [text]=\"software.softwareType || '--'\"\n      [pattern]=\"search$ | async\"\n    ></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTypeAddNewTemplate>\n    <c8y-li class=\"bg-level-2 p-8\" *ngIf=\"(search$ | async)?.length > 0\">\n      <span translate>No match found.</span>\n      <button\n        title=\"{{ 'Add new`software type`' | translate }}\"\n        type=\"button\"\n        class=\"btn btn-primary btn-xs m-l-8\"\n        translate\n      >\n        Add new`software type`\n      </button>\n    </c8y-li>\n  </ng-template>\n  <ng-template #notFoundTypeTemplate>\n    <c8y-li\n      class=\"bg-level-2 p-8\"\n      *ngIf=\"(search$ | async)?.length > 0 && (softwaresResult$ | async)?.data?.length === 0\"\n    >\n      <span translate>No match found. Refine your search terms or check your spelling.</span>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n" }]
        }], ctorParameters: function () { return [{ type: i1.RepositoryService }, { type: i0.ChangeDetectorRef }, { type: i2.TranslateService }]; }, propDecorators: { softwareTypeMO: [{
                type: Input
            }], disabled: [{
                type: Input
            }], style: [{
                type: Input
            }], required: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], emitResultsOnly: [{
                type: Input
            }], showBtnInNotFoundMessage: [{
                type: Input
            }], allowFreeEntries: [{
                type: Input
            }], showClearSelectionOption: [{
                type: Input
            }], clearSelectionOptionLabel: [{
                type: Input
            }], deviceSoftwareTypeModel: [{
                type: ViewChild,
                args: ['deviceSoftwareTypeModel']
            }], notFoundTypeAddNewTemplate: [{
                type: ViewChild,
                args: ['notFoundTypeAddNewTemplate', { static: true }]
            }], notFoundTypeTemplate: [{
                type: ViewChild,
                args: ['notFoundTypeTemplate', { static: true }]
            }], onSelectSoftware: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29mdHdhcmUtdHlwZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NoYXJlZC9zb2Z0d2FyZS10eXBlL3NvZnR3YXJlLXR5cGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcmVwb3NpdG9yeS9zaGFyZWQvc29mdHdhcmUtdHlwZS9zb2Z0d2FyZS10eXBlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUVMLE1BQU0sRUFDTixXQUFXLEVBQ1gsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFHTCxhQUFhLEVBQ2IsaUJBQWlCLEVBR2xCLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUErQixXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkUsT0FBTyxFQUFtQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxlQUFlLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7Ozs7O0FBa0IxRCxNQUFNLE9BQU8scUJBQXFCO0lBa0RoQyxZQUNVLGlCQUFvQyxFQUNyQyxpQkFBb0MsRUFDbkMsZ0JB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QVc7c0JBRFYsS0FBSztnQkFNTixlQUFlO3NCQURkLEtBQUs7Z0JBSU4sd0JBQXdCO3NCQUR2QixLQUFLO2dCQUlOLGdCQUFnQjtzQkFEZixLQUFLO2dCQUlOLHdCQUF3QjtzQkFEdkIsS0FBSztnQkFJTix5QkFBeUI7c0JBRHhCLEtBQUs7Z0JBR2dDLHVCQUF1QjtzQkFBNUQsU0FBUzt1QkFBQyx5QkFBeUI7Z0JBR3BDLDBCQUEwQjtzQkFEekIsU0FBUzt1QkFBQyw0QkFBNEIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBSXpELG9CQUFvQjtzQkFEbkIsU0FBUzt1QkFBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBR3pDLGdCQUFnQjtzQkFBekIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgZm9yd2FyZFJlZixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWJzdHJhY3RDb250cm9sLFxuICBDb250cm9sVmFsdWVBY2Nlc3NvcixcbiAgTkdfVkFMSURBVE9SUyxcbiAgTkdfVkFMVUVfQUNDRVNTT1IsXG4gIFZhbGlkYXRpb25FcnJvcnMsXG4gIFZhbGlkYXRvclxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSVJlc3VsdExpc3QsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgRm9yT2ZGaWx0ZXJQaXBlLCBnZXR0ZXh0LCBUeXBlYWhlYWRDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IHVuaXFCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHBpcGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJy4uL3JlcG9zaXRvcnkubW9kZWwnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICcuLi9yZXBvc2l0b3J5LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc29mdHdhcmUtdHlwZScsXG4gIHRlbXBsYXRlVXJsOiAnc29mdHdhcmUtdHlwZS5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTb2Z0d2FyZVR5cGVDb21wb25lbnQpXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU29mdHdhcmVUeXBlQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNvZnR3YXJlVHlwZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgpIHNvZnR3YXJlVHlwZU1POiBJTWFuYWdlZE9iamVjdDtcblxuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzdHlsZTtcblxuICBASW5wdXQoKVxuICByZXF1aXJlZCA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgcGxhY2Vob2xkZXI6IHN0cmluZyA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KGdldHRleHQoJ2UuZy4ge3sgZXhhbXBsZSB9fScpLCB7XG4gICAgZXhhbXBsZTogJ3l1bSdcbiAgfSk7XG5cbiAgQElucHV0KClcbiAgZW1pdFJlc3VsdHNPbmx5ID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2hvd0J0bkluTm90Rm91bmRNZXNzYWdlID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBhbGxvd0ZyZWVFbnRyaWVzID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBzaG93Q2xlYXJTZWxlY3Rpb25PcHRpb24gPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBjbGVhclNlbGVjdGlvbk9wdGlvbkxhYmVsOiBzdHJpbmcgPSBnZXR0ZXh0KCdBbGwgc29mdHdhcmUgdHlwZXMnKTtcblxuICBAVmlld0NoaWxkKCdkZXZpY2VTb2Z0d2FyZVR5cGVNb2RlbCcpIGRldmljZVNvZnR3YXJlVHlwZU1vZGVsOiBUeXBlYWhlYWRDb21wb25lbnQ7XG5cbiAgQFZpZXdDaGlsZCgnbm90Rm91bmRUeXBlQWRkTmV3VGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBub3RGb3VuZFR5cGVBZGROZXdUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dW5rbm93bj47XG5cbiAgQFZpZXdDaGlsZCgnbm90Rm91bmRUeXBlVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBub3RGb3VuZFR5cGVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dW5rbm93bj47XG5cbiAgQE91dHB1dCgpIG9uU2VsZWN0U29mdHdhcmU6IEV2ZW50RW1pdHRlcjxJTWFuYWdlZE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPElNYW5hZ2VkT2JqZWN0PigpO1xuXG4gIG5vdEZvdW5kVGVtcGxhdGVUb1VzZTogVGVtcGxhdGVSZWY8dW5rbm93bj47XG5cbiAgZmlsdGVyUGlwZTogRm9yT2ZGaWx0ZXJQaXBlPElNYW5hZ2VkT2JqZWN0PiA9IHBpcGUodGFwKCkpO1xuICBzb2Z0d2FyZXNSZXN1bHQkOiBPYnNlcnZhYmxlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj47XG4gIHNlYXJjaCQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgc29mdHdhcmVzUmVzdWx0OiBJUmVzdWx0TGlzdDxJTWFuYWdlZE9iamVjdD47XG5cbiAgcHJpdmF0ZSBxdWVyaWVzVXRpbDogUXVlcmllc1V0aWwgPSBuZXcgUXVlcmllc1V0aWwoKTtcbiAgcHJpdmF0ZSBzb2Z0d2FyZVR5cGVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwdWJsaWMgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnNvZnR3YXJlc1Jlc3VsdCQgPSB0aGlzLnNlYXJjaCQucGlwZShcbiAgICAgIGRlYm91bmNlVGltZSgzMDApLFxuICAgICAgdGFwKCgpID0+IHRoaXMuc29mdHdhcmVUeXBlcy5jbGVhcigpKSxcbiAgICAgIHN3aXRjaE1hcCgoc2VhcmNoU3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmVtaXRSZXN1bHRzT25seSB8fCAhc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5vblNlbGVjdFNvZnR3YXJlLmVtaXQodGhpcy5zb2Z0d2FyZVR5cGVNTyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29mdHdhcmVCeVR5cGVSZXN1bHQoc2VhcmNoU3RyaW5nKTtcbiAgICAgIH0pLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuXG4gICAgdGhpcy5maWx0ZXJQaXBlID0gcGlwZShtYXAodGhpcy5yZW1vdmVEdXBsaWNhdGVzQnlTb2Z0d2FyZVR5cGUuYmluZCh0aGlzKSkpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5ub3RGb3VuZFRlbXBsYXRlVG9Vc2UgPSB0aGlzLnNob3dCdG5Jbk5vdEZvdW5kTWVzc2FnZVxuICAgICAgPyB0aGlzLm5vdEZvdW5kVHlwZUFkZE5ld1RlbXBsYXRlXG4gICAgICA6IHRoaXMubm90Rm91bmRUeXBlVGVtcGxhdGU7XG4gIH1cblxuICBnZXRTb2Z0d2FyZUJ5VHlwZVJlc3VsdChzZWFyY2hTdHJpbmc6IHN0cmluZykge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcmllc1V0aWwucHJlcGVuZE9yZGVyYnlzKHt9LCBbeyBzb2Z0d2FyZVR5cGU6IDEgfV0pO1xuICAgIGNvbnN0IGZpbHRlciA9ICEhc2VhcmNoU3RyaW5nXG4gICAgICA/IHtcbiAgICAgICAgICBzb2Z0d2FyZVR5cGU6IHtcbiAgICAgICAgICAgIF9fZXE6IGAqJHtzZWFyY2hTdHJpbmd9KmBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIDoge1xuICAgICAgICAgIF9faGFzOiAnc29mdHdhcmVUeXBlJ1xuICAgICAgICB9O1xuICAgIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIocXVlcnksIGZpbHRlcik7XG5cbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0UmVwb3NpdG9yeUVudHJpZXMoUmVwb3NpdG9yeVR5cGUuU09GVFdBUkUsIHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHBhZ2VTaXplOiAyMDBcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdFNvZnR3YXJlKHNvZnR3YXJlKSB7XG4gICAgdGhpcy5zb2Z0d2FyZVR5cGVNTyA9IHNvZnR3YXJlO1xuICAgIHRoaXMub25TZWxlY3RTb2Z0d2FyZS5lbWl0KHNvZnR3YXJlKTtcbiAgICB0aGlzLmRldmljZVNvZnR3YXJlVHlwZU1vZGVsLnNlYXJjaENvbnRyb2xNb2RlbC5jb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgKHRoaXMuZGV2aWNlU29mdHdhcmVUeXBlTW9kZWwgYXMgYW55KS5vbkNoYW5nZShzb2Z0d2FyZSk7XG4gIH1cblxuICBjbGVhclNvZnR3YXJlKCkge1xuICAgIHRoaXMuc29mdHdhcmVUeXBlTU8gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZWFyY2gkLm5leHQoJycpO1xuICAgIHRoaXMub25TZWxlY3RTb2Z0d2FyZS5lbWl0KCk7XG4gIH1cblxuICByZXNldElucHV0KCkge1xuICAgIHRoaXMuZGV2aWNlU29mdHdhcmVUeXBlTW9kZWwucmVzZXQoKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZGV2aWNlU29mdHdhcmVUeXBlTW9kZWwud3JpdGVWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmRldmljZVNvZnR3YXJlVHlwZU1vZGVsLnJlZ2lzdGVyT25DaGFuZ2UoZm4pO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZGV2aWNlU29mdHdhcmVUeXBlTW9kZWwucmVnaXN0ZXJPblRvdWNoZWQoZm4pO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kZXZpY2VTb2Z0d2FyZVR5cGVNb2RlbC5zZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpO1xuICB9XG5cbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sPGFueSwgYW55Pik6IFZhbGlkYXRpb25FcnJvcnMge1xuICAgIHJldHVybiB0aGlzLmRldmljZVNvZnR3YXJlVHlwZU1vZGVsLnZhbGlkYXRlKGNvbnRyb2wpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVEdXBsaWNhdGVzQnlTb2Z0d2FyZVR5cGUobGlzdDogSU1hbmFnZWRPYmplY3RbXSk6IElNYW5hZ2VkT2JqZWN0W10ge1xuICAgIGNvbnN0IHVuaXF1ZUJ5U29mdHdhcmVUeXBlOiBJTWFuYWdlZE9iamVjdFtdID0gdW5pcUJ5KGxpc3QsICdzb2Z0d2FyZVR5cGUnKS5maWx0ZXIoXG4gICAgICAoc3c6IElNYW5hZ2VkT2JqZWN0KSA9PiAhdGhpcy5zb2Z0d2FyZVR5cGVzLmhhcyhzdy5zb2Z0d2FyZVR5cGUpXG4gICAgKTtcbiAgICB1bmlxdWVCeVNvZnR3YXJlVHlwZS5mb3JFYWNoKChzdzogSU1hbmFnZWRPYmplY3QpID0+IHRoaXMuc29mdHdhcmVUeXBlcy5hZGQoc3cuc29mdHdhcmVUeXBlKSk7XG4gICAgcmV0dXJuIHVuaXF1ZUJ5U29mdHdhcmVUeXBlO1xuICB9XG59XG4iLCI8Yzh5LXR5cGVhaGVhZFxuICBbKG5nTW9kZWwpXT1cInNvZnR3YXJlVHlwZU1PXCJcbiAgW3JlcXVpcmVkXT1cInJlcXVpcmVkXCJcbiAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgbmFtZT1cInNvZnR3YXJlVHlwZVwiXG4gIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gIFthbGxvd0ZyZWVFbnRyaWVzXT1cImFsbG93RnJlZUVudHJpZXNcIlxuICAjZGV2aWNlU29mdHdhcmVUeXBlTW9kZWxcbiAgKG9uU2VhcmNoKT1cInNlYXJjaCQubmV4dCgkZXZlbnQpXCJcbiAgZGlzcGxheVByb3BlcnR5PVwic29mdHdhcmVUeXBlXCJcbiAgW25nU3R5bGVdPVwic3R5bGVcIlxuPlxuICA8Yzh5LWxpXG4gICAgKm5nSWY9XCJzaG93Q2xlYXJTZWxlY3Rpb25PcHRpb25cIlxuICAgIGNsYXNzPVwicC1sLTggcC1yLTggYzh5LWxpc3RfX2l0ZW0tLWxpbmtcIlxuICAgIChjbGljayk9XCJjbGVhclNvZnR3YXJlKClcIlxuICAgIFthY3RpdmVdPVwiIXNvZnR3YXJlVHlwZU1PPy5zb2Z0d2FyZVR5cGVcIlxuICA+XG4gICAgPHNwYW4+e3sgY2xlYXJTZWxlY3Rpb25PcHRpb25MYWJlbCB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj5cbiAgPC9jOHktbGk+XG4gIDxjOHktbGlcbiAgICAqYzh5Rm9yPVwiXG4gICAgICBsZXQgc29mdHdhcmUgb2Ygc29mdHdhcmVzUmVzdWx0JDtcbiAgICAgIHBpcGU6IGZpbHRlclBpcGU7XG4gICAgICBsb2FkTW9yZTogJ2F1dG8nO1xuICAgICAgbm90Rm91bmQ6IG5vdEZvdW5kVGVtcGxhdGVUb1VzZVxuICAgIFwiXG4gICAgY2xhc3M9XCJwLWwtOCBwLXItOCBjOHktbGlzdF9faXRlbS0tbGlua1wiXG4gICAgKGNsaWNrKT1cInNlbGVjdFNvZnR3YXJlKHNvZnR3YXJlKVwiXG4gICAgW2FjdGl2ZV09XCJzb2Z0d2FyZVR5cGVNTz8uc29mdHdhcmVUeXBlID09PSBzb2Z0d2FyZS5zb2Z0d2FyZVR5cGVcIlxuICA+XG4gICAgPGM4eS1oaWdobGlnaHRcbiAgICAgIFt0ZXh0XT1cInNvZnR3YXJlLnNvZnR3YXJlVHlwZSB8fCAnLS0nXCJcbiAgICAgIFtwYXR0ZXJuXT1cInNlYXJjaCQgfCBhc3luY1wiXG4gICAgPjwvYzh5LWhpZ2hsaWdodD5cbiAgPC9jOHktbGk+XG4gIDxuZy10ZW1wbGF0ZSAjbm90Rm91bmRUeXBlQWRkTmV3VGVtcGxhdGU+XG4gICAgPGM4eS1saSBjbGFzcz1cImJnLWxldmVsLTIgcC04XCIgKm5nSWY9XCIoc2VhcmNoJCB8IGFzeW5jKT8ubGVuZ3RoID4gMFwiPlxuICAgICAgPHNwYW4gdHJhbnNsYXRlPk5vIG1hdGNoIGZvdW5kLjwvc3Bhbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdGl0bGU9XCJ7eyAnQWRkIG5ld2Bzb2Z0d2FyZSB0eXBlYCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXhzIG0tbC04XCJcbiAgICAgICAgdHJhbnNsYXRlXG4gICAgICA+XG4gICAgICAgIEFkZCBuZXdgc29mdHdhcmUgdHlwZWBcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvYzh5LWxpPlxuICA8L25nLXRlbXBsYXRlPlxuICA8bmctdGVtcGxhdGUgI25vdEZvdW5kVHlwZVRlbXBsYXRlPlxuICAgIDxjOHktbGlcbiAgICAgIGNsYXNzPVwiYmctbGV2ZWwtMiBwLThcIlxuICAgICAgKm5nSWY9XCIoc2VhcmNoJCB8IGFzeW5jKT8ubGVuZ3RoID4gMCAmJiAoc29mdHdhcmVzUmVzdWx0JCB8IGFzeW5jKT8uZGF0YT8ubGVuZ3RoID09PSAwXCJcbiAgICA+XG4gICAgICA8c3BhbiB0cmFuc2xhdGU+Tm8gbWF0Y2ggZm91bmQuIFJlZmluZSB5b3VyIHNlYXJjaCB0ZXJtcyBvciBjaGVjayB5b3VyIHNwZWxsaW5nLjwvc3Bhbj5cbiAgICA8L2M4eS1saT5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvYzh5LXR5cGVhaGVhZD5cbiJdfQ==
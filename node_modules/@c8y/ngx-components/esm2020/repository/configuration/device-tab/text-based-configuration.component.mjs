import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, OperationStatus } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
import { DeviceConfigurationOperation, RepositoryService } from '@c8y/ngx-components/repository/shared';
import { DeviceConfigurationService } from './device-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@c8y/ngx-components/repository/shared";
import * as i4 from "./device-configuration.service";
import * as i5 from "@c8y/client";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@c8y/ngx-components/operations/operation-details";
export class TextBasedConfigurationComponent {
    constructor(route, alertService, repositoryService, deviceConfigurationService, inventoryService) {
        this.route = route;
        this.alertService = alertService;
        this.repositoryService = repositoryService;
        this.deviceConfigurationService = deviceConfigurationService;
        this.inventoryService = inventoryService;
        this.reloadingConfig = false;
    }
    async ngOnInit() {
        await this.load();
    }
    async load() {
        this.device = this.route.snapshot.parent.data.contextData;
        await this.loadDevice();
        await this.loadOperation();
        this.showTextBasedConfigReload = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.SEND_CONFIG]);
        this.showTextBasedConfigSave = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.CONFIG]);
        if (this.device.c8y_Configuration && this.device.c8y_Configuration.config) {
            this.config = this.device.c8y_Configuration.config;
        }
    }
    async loadOperation() {
        const operation = await this.repositoryService.getLastConfigUpdateOperation(this.device.id);
        if (operation !== null) {
            this.reloadingConfig =
                !!operation.c8y_SendConfiguration &&
                    (operation.status === OperationStatus.PENDING ||
                        operation.status === OperationStatus.EXECUTING);
            this.repositoryService.observeOperation(operation).subscribe(operationUpdate => {
                this.latestOperation = operationUpdate;
            });
        }
    }
    get savingConfig() {
        return this.latestOperation
            ? !!this.latestOperation.c8y_Configuration &&
                (this.latestOperation.status === OperationStatus.PENDING ||
                    this.latestOperation.status === OperationStatus.EXECUTING)
            : false;
    }
    async reloadConfiguration() {
        this.reloadingConfig = true;
        const operationCfg = await this.repositoryService.createTextBasedConfigurationReloadOperation(this.device);
        try {
            this.repositoryService.createObservedOperation(operationCfg).subscribe(operationUpdate => this.onOperationReloadSuccess(operationUpdate), operationUpdate => this.onOperationReloadError(operationUpdate), () => this.onOperationReloadComplete());
        }
        catch (ex) {
            this.alertService.addServerFailure(ex);
        }
    }
    async updateConfiguration(config) {
        const operationCfg = await this.repositoryService.createTextBasedConfigurationUpdateOperation(this.device, config);
        try {
            this.repositoryService.createObservedOperation(operationCfg).subscribe(operationUpdate => this.onOperationUpdateSuccess(operationUpdate), operationUpdate => this.onOperationUpdateError(operationUpdate), () => this.onOperationUpdateComplete());
        }
        catch (ex) {
            this.alertService.addServerFailure(ex);
        }
    }
    onOperationReloadSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be reloaded.'));
        }
    }
    onOperationReloadError(operationUpdate) {
        this.latestOperation = operationUpdate;
        this.reloadingConfig = false;
    }
    async onOperationReloadComplete() {
        await this.loadDevice();
        this.config = this.device.c8y_Configuration.config;
        this.reloadingConfig = false;
    }
    onOperationUpdateSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be updated.'));
        }
    }
    onOperationUpdateError(operationUpdate) {
        this.latestOperation = operationUpdate;
    }
    onOperationUpdateComplete() {
        this.device.c8y_Configuration.config = this.config;
    }
    async loadDevice() {
        this.device = (await this.inventoryService.detail(this.device.id, {
            withChildren: false
        })).data;
    }
}
TextBasedConfigurationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TextBasedConfigurationComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.AlertService }, { token: i3.RepositoryService }, { token: i4.DeviceConfigurationService }, { token: i5.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
TextBasedConfigurationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: TextBasedConfigurationComponent, selector: "c8y-text-based-configuration", ngImport: i0, template: "<div class=\"d-flex d-col fit-h\">\n  <fieldset class=\"card-block bg-level-1 fit-w\">\n    <div class=\"content-flex-50\">\n      <div class=\"m-l-auto d-flex\">\n        <button\n          title=\"{{ 'Get configuration from device' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm a-s-center m-t-8 m-b-8\"\n          *ngIf=\"showTextBasedConfigReload\"\n          (click)=\"reloadConfiguration()\"\n          [disabled]=\"reloadingConfig || savingConfig\"\n        >\n          <i\n            c8yIcon=\"refresh\"\n            *ngIf=\"reloadingConfig\"\n            class=\"m-r-4\"\n            [ngClass]=\"{ 'icon-spin': reloadingConfig }\"\n          ></i>\n          <i c8yIcon=\"download\" *ngIf=\"!reloadingConfig\" class=\"m-r-4\"></i>\n\n          {{ 'Get configuration from device' | translate }}\n        </button>\n      </div>\n      <c8y-operation-details\n        *ngIf=\"latestOperation !== undefined\"\n        [operation]=\"latestOperation\"\n        class=\"flex-grow\"\n      ></c8y-operation-details>\n    </div>\n  </fieldset>\n  <div class=\"flex-grow\">\n    <textarea\n      [attr.aria-label]=\"'Operations' | translate\"\n      [(ngModel)]=\"config\"\n      class=\"form-control fit-h p-r-16 p-l-16\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      c8y-spellcheck=\"false\"\n    ></textarea>\n  </div>\n  <div class=\"card-footer fit-w separator\" *ngIf=\"showTextBasedConfigSave\">\n    <button\n      type=\"button\"\n      id=\"send-config-btn\"\n      (click)=\"updateConfiguration(config)\"\n      [disabled]=\"reloadingConfig || savingConfig || !config\"\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': savingConfig }\"\n    >\n      <span title=\"{{ 'Send' | translate }}\" *ngIf=\"!savingConfig\">\n        {{ 'Send configuration to device' | translate }}\n      </span>\n      <span title=\"{{ 'Sending\u2026' | translate }}\" *ngIf=\"savingConfig\">\n        {{ 'Sending\u2026' | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i8.OperationDetailsComponent, selector: "c8y-operation-details", inputs: ["operation"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: TextBasedConfigurationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-text-based-configuration', template: "<div class=\"d-flex d-col fit-h\">\n  <fieldset class=\"card-block bg-level-1 fit-w\">\n    <div class=\"content-flex-50\">\n      <div class=\"m-l-auto d-flex\">\n        <button\n          title=\"{{ 'Get configuration from device' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm a-s-center m-t-8 m-b-8\"\n          *ngIf=\"showTextBasedConfigReload\"\n          (click)=\"reloadConfiguration()\"\n          [disabled]=\"reloadingConfig || savingConfig\"\n        >\n          <i\n            c8yIcon=\"refresh\"\n            *ngIf=\"reloadingConfig\"\n            class=\"m-r-4\"\n            [ngClass]=\"{ 'icon-spin': reloadingConfig }\"\n          ></i>\n          <i c8yIcon=\"download\" *ngIf=\"!reloadingConfig\" class=\"m-r-4\"></i>\n\n          {{ 'Get configuration from device' | translate }}\n        </button>\n      </div>\n      <c8y-operation-details\n        *ngIf=\"latestOperation !== undefined\"\n        [operation]=\"latestOperation\"\n        class=\"flex-grow\"\n      ></c8y-operation-details>\n    </div>\n  </fieldset>\n  <div class=\"flex-grow\">\n    <textarea\n      [attr.aria-label]=\"'Operations' | translate\"\n      [(ngModel)]=\"config\"\n      class=\"form-control fit-h p-r-16 p-l-16\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      c8y-spellcheck=\"false\"\n    ></textarea>\n  </div>\n  <div class=\"card-footer fit-w separator\" *ngIf=\"showTextBasedConfigSave\">\n    <button\n      type=\"button\"\n      id=\"send-config-btn\"\n      (click)=\"updateConfiguration(config)\"\n      [disabled]=\"reloadingConfig || savingConfig || !config\"\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': savingConfig }\"\n    >\n      <span title=\"{{ 'Send' | translate }}\" *ngIf=\"!savingConfig\">\n        {{ 'Send configuration to device' | translate }}\n      </span>\n      <span title=\"{{ 'Sending\u2026' | translate }}\" *ngIf=\"savingConfig\">\n        {{ 'Sending\u2026' | translate }}\n      </span>\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.AlertService }, { type: i3.RepositoryService }, { type: i4.DeviceConfigurationService }, { type: i5.InventoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
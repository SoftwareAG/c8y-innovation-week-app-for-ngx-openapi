import { BaseColumn, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';
import { DeviceTypeCellRendererComponent } from './device-type.cell-renderer.component';
export class DeviceTypeGridColumn extends BaseColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'deviceType';
        this.path = 'c8y_Filter.type';
        this.header = gettext('Device type');
        this.cellRendererComponent = DeviceTypeCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: [
                ...getBasicInputArrayFormFieldConfig({
                    key: 'types',
                    label: gettext('Filter software by device type'),
                    addText: gettext('Add next`type`'),
                    tooltip: gettext('Use * as a wildcard character'),
                    placeholder: 'c8y_Linux',
                    optional: true
                }),
                {
                    key: 'noDeviceType',
                    type: 'switch',
                    templateOptions: {
                        label: gettext('No device type')
                    }
                }
            ],
            getFilter(model) {
                const filter = { __or: {} };
                if (model.types?.length) {
                    filter.__or = {
                        'c8y_Filter.type': { __in: model.types }
                    };
                }
                if (model.noDeviceType) {
                    filter.__or = {
                        ...filter.__or,
                        __or: {
                            __not: { __has: 'c8y_Filter.type' },
                            'c8y_Filter.type': ''
                        }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: this.path }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXR5cGUuZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NvZnR3YXJlL2xpc3QvY29sdW1ucy9kZXZpY2UtdHlwZS5ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUVWLGlDQUFpQyxFQUNqQyxPQUFPLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUV4RixNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBVTtJQUNsRCxZQUFZLG1CQUFrQztRQUM1QyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxxQkFBcUIsR0FBRywrQkFBK0IsQ0FBQztRQUU3RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUV2QixJQUFJLENBQUMsZUFBZSxHQUFHO1lBQ3JCLE1BQU0sRUFBRTtnQkFDTixHQUFHLGlDQUFpQyxDQUFDO29CQUNuQyxHQUFHLEVBQUUsT0FBTztvQkFDWixLQUFLLEVBQUUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO29CQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO29CQUNsQyxPQUFPLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO29CQUNqRCxXQUFXLEVBQUUsV0FBVztvQkFDeEIsUUFBUSxFQUFFLElBQUk7aUJBQ2YsQ0FBQztnQkFDRjtvQkFDRSxHQUFHLEVBQUUsY0FBYztvQkFDbkIsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsZUFBZSxFQUFFO3dCQUNmLEtBQUssRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7cUJBQ2pDO2lCQUNGO2FBQ0Y7WUFDRCxTQUFTLENBQUMsS0FBVTtnQkFDbEIsTUFBTSxNQUFNLEdBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ2pDLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7b0JBQ3ZCLE1BQU0sQ0FBQyxJQUFJLEdBQUc7d0JBQ1osaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRTtxQkFDekMsQ0FBQztpQkFDSDtnQkFDRCxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7b0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLEdBQUc7d0JBQ1osR0FBRyxNQUFNLENBQUMsSUFBSTt3QkFDZCxJQUFJLEVBQUU7NEJBQ0osS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFOzRCQUNuQyxpQkFBaUIsRUFBRSxFQUFFO3lCQUN0QjtxQkFDRixDQUFDO2lCQUNIO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmFzZUNvbHVtbixcbiAgQ29sdW1uQ29uZmlnLFxuICBnZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcsXG4gIGdldHRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2UtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBEZXZpY2VUeXBlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG4gICAgdGhpcy5uYW1lID0gJ2RldmljZVR5cGUnO1xuICAgIHRoaXMucGF0aCA9ICdjOHlfRmlsdGVyLnR5cGUnO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnRGV2aWNlIHR5cGUnKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IERldmljZVR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuXG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBmaWVsZHM6IFtcbiAgICAgICAgLi4uZ2V0QmFzaWNJbnB1dEFycmF5Rm9ybUZpZWxkQ29uZmlnKHtcbiAgICAgICAgICBrZXk6ICd0eXBlcycsXG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ0ZpbHRlciBzb2Z0d2FyZSBieSBkZXZpY2UgdHlwZScpLFxuICAgICAgICAgIGFkZFRleHQ6IGdldHRleHQoJ0FkZCBuZXh0YHR5cGVgJyksXG4gICAgICAgICAgdG9vbHRpcDogZ2V0dGV4dCgnVXNlICogYXMgYSB3aWxkY2FyZCBjaGFyYWN0ZXInKSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ2M4eV9MaW51eCcsXG4gICAgICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICAgICAgfSksXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdub0RldmljZVR5cGUnLFxuICAgICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxuICAgICAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICAgICAgbGFiZWw6IGdldHRleHQoJ05vIGRldmljZSB0eXBlJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWw6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0geyBfX29yOiB7fSB9O1xuICAgICAgICBpZiAobW9kZWwudHlwZXM/Lmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgJ2M4eV9GaWx0ZXIudHlwZSc6IHsgX19pbjogbW9kZWwudHlwZXMgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLm5vRGV2aWNlVHlwZSkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgLi4uZmlsdGVyLl9fb3IsXG4gICAgICAgICAgICBfX29yOiB7XG4gICAgICAgICAgICAgIF9fbm90OiB7IF9faGFzOiAnYzh5X0ZpbHRlci50eXBlJyB9LFxuICAgICAgICAgICAgICAnYzh5X0ZpbHRlci50eXBlJzogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW3sgcGF0aDogdGhpcy5wYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19
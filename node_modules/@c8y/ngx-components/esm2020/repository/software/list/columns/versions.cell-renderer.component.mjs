import { __decorate, __metadata } from "tslib";
import { Component } from '@angular/core';
import { CellRendererContext, memoize } from '@c8y/ngx-components';
import { property } from 'lodash-es';
import { Observable } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { RepositoryService } from '@c8y/ngx-components/repository/shared';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/repository/shared";
import * as i3 from "@angular/common";
export class VersionsCellRendererComponent {
    constructor(context, repositoryService) {
        this.context = context;
        this.repositoryService = repositoryService;
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software = context.item;
    }
    getBaseVersionsCount$(software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    }
}
VersionsCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionsCellRendererComponent, deps: [{ token: i1.CellRendererContext }, { token: i2.RepositoryService }], target: i0.ɵɵFactoryTarget.Component });
VersionsCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: VersionsCellRendererComponent, selector: "ng-component", ngImport: i0, template: "<span class=\"label label-warning m-l-auto-sm\" *ngIf=\"isLegacy(software)\">\n  <span translate> Legacy </span>\n</span>\n<span *ngIf=\"!isLegacy(software)\">\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n    <span class=\"badge badge-info m-l-auto-sm\">\n      <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n    </span>\n  </span>\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n    <span class=\"badge badge-info m-l-auto-sm\">\n      {{ getBaseVersionsCount$(software) | async }}\n    </span>\n  </span>\n</span>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Observable)
], VersionsCellRendererComponent.prototype, "getBaseVersionsCount$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionsCellRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<span class=\"label label-warning m-l-auto-sm\" *ngIf=\"isLegacy(software)\">\n  <span translate> Legacy </span>\n</span>\n<span *ngIf=\"!isLegacy(software)\">\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n    <span class=\"badge badge-info m-l-auto-sm\">\n      <i class=\"icon-spin\" c8yIcon=\"circle-o-notch\"></i>\n    </span>\n  </span>\n  <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n    <span class=\"badge badge-info m-l-auto-sm\">\n      {{ getBaseVersionsCount$(software) | async }}\n    </span>\n  </span>\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }, { type: i2.RepositoryService }]; }, propDecorators: { getBaseVersionsCount$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbnMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9yZXBvc2l0b3J5L3NvZnR3YXJlL2xpc3QvY29sdW1ucy92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3JlcG9zaXRvcnkvc29mdHdhcmUvbGlzdC9jb2x1bW5zL3ZlcnNpb25zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7Ozs7O0FBSzFFLE1BQU0sT0FBTyw2QkFBNkI7SUFHeEMsWUFBbUIsT0FBNEIsRUFBVSxpQkFBb0M7UUFBMUUsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRjdGLGFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUczRSxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUdELHFCQUFxQixDQUFDLFFBQXdCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDOzswSEFWVSw2QkFBNkI7OEdBQTdCLDZCQUE2QixvRENYMUMsbWtCQWVBO0FER0U7SUFBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7b0NBQ3lCLFVBQVU7MEVBRTFEOzJGQVZVLDZCQUE2QjtrQkFIekMsU0FBUzs7MElBV1IscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IENlbGxSZW5kZXJlckNvbnRleHQsIG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvc2hhcmVkJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi92ZXJzaW9ucy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uc0NlbGxSZW5kZXJlckNvbXBvbmVudCB7XG4gIGlzTGVnYWN5ID0gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5pc0xlZ2FjeUVudHJ5LmJpbmQodGhpcy5yZXBvc2l0b3J5U2VydmljZSk7XG4gIHNvZnR3YXJlO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCwgcHJpdmF0ZSByZXBvc2l0b3J5U2VydmljZTogUmVwb3NpdG9yeVNlcnZpY2UpIHtcbiAgICB0aGlzLnNvZnR3YXJlID0gY29udGV4dC5pdGVtO1xuICB9XG5cbiAgQG1lbW9pemUocHJvcGVydHkoJ2lkJykpXG4gIGdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZTogSU1hbmFnZWRPYmplY3QpOiBPYnNlcnZhYmxlPG51bWJlciB8IHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJhc2VWZXJzaW9uc0NvdW50JChzb2Z0d2FyZSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gIH1cbn1cbiIsIjxzcGFuIGNsYXNzPVwibGFiZWwgbGFiZWwtd2FybmluZyBtLWwtYXV0by1zbVwiICpuZ0lmPVwiaXNMZWdhY3koc29mdHdhcmUpXCI+XG4gIDxzcGFuIHRyYW5zbGF0ZT4gTGVnYWN5IDwvc3Bhbj5cbjwvc3Bhbj5cbjxzcGFuICpuZ0lmPVwiIWlzTGVnYWN5KHNvZnR3YXJlKVwiPlxuICA8c3BhbiAqbmdJZj1cIihnZXRCYXNlVmVyc2lvbnNDb3VudCQoc29mdHdhcmUpIHwgYXN5bmMpID09PSBudWxsXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1pbmZvIG0tbC1hdXRvLXNtXCI+XG4gICAgICA8aSBjbGFzcz1cImljb24tc3BpblwiIGM4eUljb249XCJjaXJjbGUtby1ub3RjaFwiPjwvaT5cbiAgICA8L3NwYW4+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gKm5nSWY9XCIoZ2V0QmFzZVZlcnNpb25zQ291bnQkKHNvZnR3YXJlKSB8IGFzeW5jKSAhPT0gbnVsbFwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmFkZ2UtaW5mbyBtLWwtYXV0by1zbVwiPlxuICAgICAge3sgZ2V0QmFzZVZlcnNpb25zQ291bnQkKHNvZnR3YXJlKSB8IGFzeW5jIH19XG4gICAgPC9zcGFuPlxuICA8L3NwYW4+XG48L3NwYW4+XG4iXX0=
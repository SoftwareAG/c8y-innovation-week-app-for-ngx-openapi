import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
export class AppLogsService {
    constructor(application) {
        this.application = application;
    }
    getLogs$(appId, instanceName, params = {}) {
        const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        const modifiedParams = {
            ...params,
            ...(formattedDateFrom && { dateFrom: formattedDateFrom }),
            ...(formattedDateTo && { dateTo: formattedDateTo })
        };
        return from(this.application.getInstanceLog(appId, instanceName, modifiedParams)).pipe(map(res => res.data));
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
}
AppLogsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppLogsService, deps: [{ token: i1.ApplicationService }], target: i0.ɵɵFactoryTarget.Injectable });
AppLogsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppLogsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppLogsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC1sb2dzL2FwcC1sb2dzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQVNyQyxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUFvQixXQUErQjtRQUEvQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFBRyxDQUFDO0lBRXZELFFBQVEsQ0FBQyxLQUFhLEVBQUUsWUFBb0IsRUFBRSxTQUF3QixFQUFFO1FBQ3RFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlFLE1BQU0sY0FBYyxHQUFHO1lBQ3JCLEdBQUcsTUFBTTtZQUNULEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDO1lBQ3pELEdBQUcsQ0FBQyxlQUFlLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLENBQUM7U0FDcEQsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3BGLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FDckIsQ0FBQztJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsWUFBb0I7UUFDN0IsT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzsyR0FuQlUsY0FBYzsrR0FBZCxjQUFjOzJGQUFkLGNBQWM7a0JBRDFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dzSlNPTiB9IGZyb20gJy4vbG9ncy5tb2RlbCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmludGVyZmFjZSBSZXF1ZXN0UGFyYW1zIHtcbiAgZGF0ZUZyb20/O1xuICBkYXRlVG8/O1xuICBsaW1pdD87XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBMb2dzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwbGljYXRpb246IEFwcGxpY2F0aW9uU2VydmljZSkge31cblxuICBnZXRMb2dzJChhcHBJZDogc3RyaW5nLCBpbnN0YW5jZU5hbWU6IHN0cmluZywgcGFyYW1zOiBSZXF1ZXN0UGFyYW1zID0ge30pOiBPYnNlcnZhYmxlPExvZ3NKU09OPiB7XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZUZyb20gPSBwYXJhbXMuZGF0ZUZyb20gPyB0aGlzLmZvcm1hdERhdGUocGFyYW1zLmRhdGVGcm9tKSA6IG51bGw7XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZVRvID0gcGFyYW1zLmRhdGVUbyA/IHRoaXMuZm9ybWF0RGF0ZShwYXJhbXMuZGF0ZVRvKSA6IG51bGw7XG4gICAgY29uc3QgbW9kaWZpZWRQYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZUZyb20gJiYgeyBkYXRlRnJvbTogZm9ybWF0dGVkRGF0ZUZyb20gfSksXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZVRvICYmIHsgZGF0ZVRvOiBmb3JtYXR0ZWREYXRlVG8gfSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZyb20odGhpcy5hcHBsaWNhdGlvbi5nZXRJbnN0YW5jZUxvZyhhcHBJZCwgaW5zdGFuY2VOYW1lLCBtb2RpZmllZFBhcmFtcykpLnBpcGUoXG4gICAgICBtYXAocmVzID0+IHJlcy5kYXRhKVxuICAgICk7XG4gIH1cblxuICBmb3JtYXREYXRlKGRhdGVUb0Zvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVRvRm9ybWF0KS50b0lTT1N0cmluZygpO1xuICB9XG59XG4iXX0=
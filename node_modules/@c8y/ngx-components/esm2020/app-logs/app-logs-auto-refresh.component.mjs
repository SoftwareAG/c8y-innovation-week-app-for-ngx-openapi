import { Component, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';
import { AppLogsService } from './app-logs.service';
import { fromEvent, Subject, of, interval, NEVER } from 'rxjs';
import { filter, catchError, tap, debounce, switchMap, takeUntil, finalize, delay, repeat, merge, scan } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./app-logs.service";
import * as i2 from "@angular/common";
import * as i3 from "@c8y/ngx-components";
export class AppLogsAutoRefreshComponent {
    set buttonsDisabled(areDisabled) {
        this.isAutoRefreshDisabled = areDisabled;
        if (areDisabled && this.isAutoRefreshOn) {
            this.isAutoRefreshOn = false;
            this.cancel$.next(false);
        }
    }
    constructor(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = true;
        this.onNewLogs = new EventEmitter();
        this.isRealtimeEnabled = new EventEmitter();
        this.toggleState = currentState => !currentState;
    }
    ngAfterViewInit() {
        const clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(() => interval(300)), scan(this.toggleState, false), tap(isAutoRefreshOn => this.setButtonState(isAutoRefreshOn)), switchMap(isOn => (isOn ? this.watchForNewLogs() : NEVER)));
        this.subscription = clicks$.subscribe();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    setButtonState(isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
        this.isRealtimeEnabled.emit(isAutoRefreshOn);
    }
    watchForNewLogs() {
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(isAutoRefreshOn => isAutoRefreshOn === false))), finalize(() => {
            this.isAutoRefreshOn = false;
        }));
    }
    startPolling() {
        return of(1).pipe(switchMap(() => this.getNewLogs().pipe(catchError(() => of(this.getEmptyLogsJson())))), tap(logs => this.updateLogsToOutput(logs)), delay(10000), repeat());
    }
    getNewLogs() {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    }
    getAppId() {
        return this.mo.applicationId;
    }
    getInstanceName() {
        return this.selectedInstance.name;
    }
    updateLogsToOutput(newLogs) {
        const { dateFrom, dateTo } = newLogs;
        if (dateFrom && dateTo) {
            this.logsToOutput = { ...newLogs };
            this.onNewLogs.emit(this.logsToOutput);
        }
    }
    getEmptyLogsJson() {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    }
}
AppLogsAutoRefreshComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppLogsAutoRefreshComponent, deps: [{ token: i1.AppLogsService }], target: i0.ɵɵFactoryTarget.Component });
AppLogsAutoRefreshComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AppLogsAutoRefreshComponent, selector: "c8y-app-logs-auto-refresh", inputs: { selectedInstance: "selectedInstance", mo: "mo", buttonsDisabled: "buttonsDisabled" }, outputs: { onNewLogs: "onNewLogs", isRealtimeEnabled: "isRealtimeEnabled" }, viewQueries: [{ propertyName: "button", first: true, predicate: ["autoRefresh"], descendants: true, static: true }], ngImport: i0, template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppLogsAutoRefreshComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-app-logs-auto-refresh', template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>" }]
        }], ctorParameters: function () { return [{ type: i1.AppLogsService }]; }, propDecorators: { selectedInstance: [{
                type: Input
            }], mo: [{
                type: Input
            }], buttonsDisabled: [{
                type: Input
            }], onNewLogs: [{
                type: Output
            }], isRealtimeEnabled: [{
                type: Output
            }], button: [{
                type: ViewChild,
                args: ['autoRefresh', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
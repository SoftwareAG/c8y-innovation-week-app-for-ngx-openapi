import { Injectable } from '@angular/core';
import { AlertService } from '@c8y/ngx-components';
import { orderBy, isEqual, remove, some } from 'lodash-es';
import { InventoryService, FetchClient } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/client";
import * as i3 from "@ngx-translate/core";
export class ReportsService {
    constructor(alertService, inventoryService, client, translateService) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.translateService = translateService;
        this.microserviceUrl = '/service/reporting';
        this.headers = { 'Content-Type': 'application/json' };
        this.isReportAgentSubscribed = true;
        this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE = 'microservice/not found';
    }
    async getExport(exportId) {
        let exp;
        const exportDetail = await this.inventoryService.detail(exportId);
        const { data, res } = exportDetail;
        if (res.status !== 200) {
            this.alertService.addServerFailure({ data, res });
        }
        else {
            exp = data ? data : {};
        }
        return exp;
    }
    async getScheduleList(exportId) {
        const exp = await this.getExport(exportId);
        return this.extractScheduleListFromExport(exp);
    }
    extractScheduleListFromExport(exp) {
        let scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    }
    async addSchedule(schedule, exportId) {
        return await this.updateSchedules(exportId, [], [schedule]);
    }
    async updateSchedule(oldSchedule, schedule, exportId) {
        return await this.updateSchedules(exportId, [oldSchedule], [schedule]);
    }
    async updateSchedules(exportId, schedulesToRemove = [], schedulesToAdd = []) {
        let success = false;
        const exp = await this.getExport(exportId);
        const schedules = this.extractScheduleListFromExport(exp);
        remove(schedules, (schedule) => some(schedulesToRemove, (scheduleToRemove) => isEqual(schedule, scheduleToRemove)));
        schedules.push(...schedulesToAdd);
        exp.c8y_ScheduleConfiguration = schedules;
        const { data, res } = await this.inventoryService.update(exp);
        if (res.status === 200) {
            success = await this.reschedule(exportId);
        }
        else {
            this.alertService.addServerFailure({ data, res });
        }
        return success;
    }
    async reschedule(exportId) {
        const options = {
            method: 'PUT',
            headers: this.headers
        };
        const rescheduling = await this.client.fetch(`${this.microserviceUrl}/schedule/${exportId}`, options);
        return rescheduling.status === 200;
    }
    async deleteSchedule(schedule, exportId) {
        return await this.updateSchedules(exportId, [schedule], []);
    }
    /**
     * Removes report configuration.
     *
     * Note: fallback strategy is based on error code returned by backend
     * in case of missing subscription for report-agent microservice.
     * @param config entity of report configuration
     * @returns Response wrapped in [[IFetchResponse]]
     */
    async removeConfiguration(config) {
        let res;
        if (!this.isReportAgentSubscribed) {
            res = await this.fallbackConfigurationRemoval(config);
        }
        else {
            res = await this.normalConfigurationRemoval(config);
            if (res.status === 404) {
                const data = await res.json();
                if (data &&
                    data.error &&
                    data.error.toLowerCase() === this.REPORT_AGENT_NOT_SUBSCRIBED_EXPECTED_ERROR_LOWER_CASE) {
                    res = await this.fallbackConfigurationRemoval(config);
                    this.isReportAgentSubscribed = false;
                }
            }
        }
        return res;
    }
    async normalConfigurationRemoval(config) {
        const url = `${this.microserviceUrl}/config/${config.id}`;
        return await this.client.fetch(url, { method: 'DELETE' });
    }
    async fallbackConfigurationRemoval(config) {
        let res;
        try {
            res = (await this.inventoryService.delete(config)).res;
        }
        catch (e) {
            // this could be an error related to not existing object or anything else which makes request return error status code
            // in case of concurrent removal everything is fine, therefor warning message. But it might not recover from some errors
            this.alertService.addServerFailure(e, 'warning');
        }
        return res;
    }
}
ReportsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportsService, deps: [{ token: i1.AlertService }, { token: i2.InventoryService }, { token: i2.FetchClient }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AlertService }, { type: i2.InventoryService }, { type: i2.FetchClient }, { type: i3.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,
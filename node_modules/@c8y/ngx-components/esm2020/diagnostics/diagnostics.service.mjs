import { Injectable } from '@angular/core';
import { InventoryBinaryService, OperationService, OperationStatus } from '@c8y/client';
import { AlertService, gettext, ModalService } from '@c8y/ngx-components';
import { assign } from 'lodash-es';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class DiagnosticsService {
    constructor(operationService, inventoryBinary, modalService, alertService) {
        this.operationService = operationService;
        this.inventoryBinary = inventoryBinary;
        this.modalService = modalService;
        this.alertService = alertService;
        this.fragment = 'c8y_DiagnosticReport';
    }
    isSupportedDevice(device) {
        const supportedOperations = (device && device.c8y_SupportedOperations) || [];
        return supportedOperations.includes(this.fragment);
    }
    getOperations$(device$) {
        return device$.pipe(switchMap(device => this.operationService.list({
            deviceId: device.id,
            fragmentType: this.fragment,
            dateFrom: new Date(0).toISOString(),
            dateTo: new Date(Date.now()).toISOString(),
            revert: true,
            pageSize: 10,
            withTotalPages: true
        })));
    }
    async createOperation(deviceId) {
        const operation = {
            deviceId,
            description: gettext('Diagnostic file request'),
            [this.fragment]: {}
        };
        try {
            await this.operationService.create(operation);
            this.alertService.success(gettext('Diagnostic file request sent.'));
        }
        catch (error) {
            this.alertService.addServerFailure(error);
        }
    }
    async deleteOperation(operation) {
        try {
            const result = await this.modalService.confirm(gettext('Delete diagnostic file'), gettext('You are about to delete this diagnostic file. Do you want to proceed?'), 'danger', {
                ok: gettext('Delete'),
                cancel: gettext('Cancel')
            });
            if (result) {
                this.deleteDiagnosticsBinary(operation);
            }
        }
        catch (error) {
            // Do nothing
        }
    }
    async cancelOperation(operation) {
        try {
            const operationAfterUpdate = (await this.operationService.update({
                id: operation.id,
                status: OperationStatus.FAILED,
                failureReason: gettext('Operation cancelled by user.')
            })).data;
            assign(operation, operationAfterUpdate);
            this.alertService.success(gettext('Diagnostic file request cancelled.'));
        }
        catch (ex) {
            this.alertService.addServerFailure(ex);
        }
    }
    getOperation(op) {
        if (!op) {
            return null;
        }
        return op && op[this.fragment];
    }
    async deleteDiagnosticsBinary(op) {
        const operation = this.getOperation(op);
        if (operation && operation.file) {
            const { file } = operation;
            try {
                const binaryId = this.inventoryBinary.getIdFromUrl(file);
                const result = await this.inventoryBinary.delete(binaryId);
                if (result) {
                    this.deleteDiagnosticsFragment(op);
                }
            }
            catch (err) {
                if (err.res.status === 404) {
                    // In case the file is already deleted via other means we want to delete the fragment
                    this.deleteDiagnosticsFragment(op);
                }
                else {
                    const msg = gettext('Could not delete the diagnostic file.');
                    this.alertService.danger(msg);
                }
            }
        }
    }
    async deleteDiagnosticsFragment(op) {
        const deleteOp = {
            id: op.id,
            status: op.status,
            [this.fragment]: null
        };
        try {
            const operationAfterUpdate = (await this.operationService.update(deleteOp)).data;
            assign(op, operationAfterUpdate);
            this.alertService.success(gettext('Diagnostic file deleted.'));
        }
        catch (error) {
            this.alertService.addServerFailure(error);
        }
    }
}
DiagnosticsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DiagnosticsService, deps: [{ token: i1.OperationService }, { token: i1.InventoryBinaryService }, { token: i2.ModalService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
DiagnosticsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DiagnosticsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DiagnosticsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.OperationService }, { type: i1.InventoryBinaryService }, { type: i2.ModalService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,
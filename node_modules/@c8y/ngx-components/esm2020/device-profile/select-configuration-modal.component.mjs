import { Component, EventEmitter, forwardRef } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { gettext, PRODUCT_EXPERIENCE_EVENT_SOURCE } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE, RepositoryService, RepositoryType } from '@c8y/ngx-components/repository/shared';
import { Subject } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/repository/shared";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@angular/common";
export class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
}
SelectConfigurationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectConfigurationModalComponent, deps: [{ token: i1.RepositoryService }], target: i0.ɵɵFactoryTarget.Component });
SelectConfigurationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SelectConfigurationModalComponent, selector: "c8y-select-configuration-modal", providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => SelectConfigurationModalComponent)
        }
    ], ngImport: i0, template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n  c8yProductExperience\n  inherit\n  suppressDataOverriding\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.SHARED.COMPONENTS.SELECT_CONFIGURATION_MODAL }\"\n></c8y-select-modal>\n", dependencies: [{ kind: "component", type: i2.SelectModalComponent, selector: "c8y-select-modal", inputs: ["icon", "title", "subTitle", "items", "mode", "disableSelected", "showFilter", "additionalFilterTemplate", "areMoreEntries", "labels", "noItemsMessage"], outputs: ["result", "search", "onChoiceUpdated"] }, { kind: "directive", type: i2.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectConfigurationModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-select-configuration-modal', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => SelectConfigurationModalComponent)
                        }
                    ], template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n  c8yProductExperience\n  inherit\n  suppressDataOverriding\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.SHARED.COMPONENTS.SELECT_CONFIGURATION_MODAL }\"\n></c8y-select-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1.RepositoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { FetchClient, ApplicationService, InventoryService } from '@c8y/client';
import { AppStateService, gettext, OptionsService } from '@c8y/ngx-components';
import { some } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/ngx-components";
export var ErrorName;
(function (ErrorName) {
    ErrorName["NoConnectivityPlansError"] = "NoConnectivityPlansError";
    ErrorName["NoFreeSlotsInConnectivityPlansError"] = "NoFreeSlotsInConnectivityPlansError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["ConnectivitySettingsError"] = "ConnectivitySettingsError";
    ErrorName["NoDeviceProfilesError"] = "NoDeviceProfilesError";
    ErrorName["DeviceProfilesFetchError"] = "DeviceProfilesFetchError";
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
    ErrorName["RegistrationError"] = "RegistrationError";
})(ErrorName || (ErrorName = {}));
export class ActilityDeviceRegistrationService {
    constructor(inventoryService, client, translateService, applicationService, optionsService, appState) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.translateService = translateService;
        this.applicationService = applicationService;
        this.optionsService = optionsService;
        this.appState = appState;
        this.baseUrl = '/service/actility';
        this.registrationUrl = `${this.baseUrl}/newDeviceRequest`;
        this.connectivityPlansUrl = `${this.baseUrl}/connectivityPlans`;
        this.deviceProfilesUrl = `${this.baseUrl}/deviceProfiles`;
        this.headers = {
            'Content-Type': 'application/json'
        };
    }
    async getConnections() {
        const options = {
            method: 'GET',
            headers: this.headers
        };
        const res = await this.client.fetch(`${this.baseUrl}/lns-connection`, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                await this.throwNoConnectivitySettingsError();
            }
        }
        else {
            await this.throwConnectivitySettingsError(data);
        }
        return { res, data };
    }
    /**
     * Gets connectivity plans from LoRa platform.
     * @param connectionName The name of connection for which connectivity plans will be retrieved
     * @returns The result list with connectivity plans, or throws an error with exception.
     */
    async getConnectivityPlans(connectionName) {
        const options = {
            method: 'GET',
            headers: this.headers,
            params: {
                actilityConnectionName: connectionName
            }
        };
        const res = await this.client.fetch(this.connectivityPlansUrl, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoConnectivityPlansError();
            }
            else {
                if (!this.hasAvailableConnections(data)) {
                    this.throwNoFreeSlotsInConnectivityPlansError();
                }
            }
        }
        else {
            await this.throwConnectivitySettingsError(data);
        }
        return { res, data };
    }
    /**
     * Gets the device profiles from LoRa platform.
     * @param connectionName The name of connection for which device profiles will be retrieved
     * @returns The result list with device profiles, or throws an error with exception.
     */
    async getDeviceProfiles(connectionName) {
        const options = {
            method: 'GET',
            headers: this.headers,
            params: {
                actilityConnectionName: connectionName
            }
        };
        const res = await this.client.fetch(this.deviceProfilesUrl, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoDeviceProfilesError();
            }
        }
        else {
            this.throwDeviceProfilesFetchError();
        }
        return { res, data };
    }
    /**
     * Gets the device protocols
     */
    async getDeviceProtocols(filter = { withTotalPages: true }) {
        const query = {
            __filter: {
                __and: [
                    { __has: 'c8y_IsDeviceType' },
                    {
                        type: { __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'] }
                    }
                ]
            },
            __orderby: [{ name: 1 }]
        };
        const deviceProtocolsList = await this.inventoryService.listQuery(query, filter);
        const { res, data } = deviceProtocolsList;
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoDeviceProtocolsError();
            }
        }
        else {
            this.throwDeviceProtocolsFetchError();
        }
        return deviceProtocolsList;
    }
    /**
     * Creates device registration
     */
    async register(registration) {
        const options = {
            method: 'POST',
            headers: this.headers,
            body: JSON.stringify(registration)
        };
        const res = await this.client.fetch(this.registrationUrl, options);
        const data = await res.json();
        if (res.status !== 201) {
            this.throwRegistrationError(data);
        }
        return { res, data };
    }
    /**
     * checks if used connections is less then granted connections
     */
    hasAvailableConnections(connectivityPlans) {
        return some(connectivityPlans, plan => parseInt(plan.grantedConnections, 10) > parseInt(plan.usedConnections, 10));
    }
    async throwNoConnectivitySettingsError() {
        const error = new Error();
        error.name = ErrorName.NoConnectivitySettingsError;
        if (await this.appState.isApplicationAvailable('administration')) {
            error.message = this.translateService.instant(gettext(`Could not get connectivity plans from the LoRa platform. Verify the ThingPark credentials in the Administration application under <a href="{{ link }}">Settings</a>.`), {
                link: '/apps/administration/index.html#/connectivitySettings/actility_lora_provider_settings'
            });
        }
        else {
            error.message = gettext('Could not get connectivity plans from the LoRa platform. Please contact the administrator.');
        }
        throw error;
    }
    throwConnectivitySettingsError(data) {
        const error = new Error();
        error.name = ErrorName.ConnectivitySettingsError;
        error.message = data.message;
        throw error;
    }
    throwNoConnectivityPlansError() {
        const error = new Error();
        error.name = ErrorName.NoConnectivityPlansError;
        error.message = gettext('No connectivity plans found. New connectivity plans must be created via the LoRa platform.');
        throw error;
    }
    throwNoFreeSlotsInConnectivityPlansError() {
        const companyName = this.optionsService.get('companyName', 'Cumulocity IoT');
        const error = new Error();
        error.name = ErrorName.NoFreeSlotsInConnectivityPlansError;
        error.message = this.translateService.instant(gettext(`No connectivity plans with free slots available. Please contact ThingPark on the device quota limits for your connectivity plans or remove unused devices from ThingPark and retry registering the device in the {{companyName}} platform.`), {
            companyName
        });
        throw error;
    }
    throwDeviceProfilesFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProfilesFetchError;
        error.message = gettext('Could not load device profiles from the LoRa platform.');
        throw error;
    }
    throwNoDeviceProfilesError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProfilesError;
        error.message = gettext('No device profiles found. Create a new device profile via the LoRa platform.');
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a LoRa device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
}
ActilityDeviceRegistrationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActilityDeviceRegistrationService, deps: [{ token: i1.InventoryService }, { token: i1.FetchClient }, { token: i2.TranslateService }, { token: i1.ApplicationService }, { token: i3.OptionsService }, { token: i3.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
ActilityDeviceRegistrationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActilityDeviceRegistrationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ActilityDeviceRegistrationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i1.FetchClient }, { type: i2.TranslateService }, { type: i1.ApplicationService }, { type: i3.OptionsService }, { type: i3.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, forwardRef, HostBinding, Input, Output } from '@angular/core';
import { PRODUCT_EXPERIENCE_EVENT_SOURCE } from '@c8y/ngx-components';
import { ACTIONS } from '@c8y/ngx-components/operations/product-experience';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@angular/common";
import * as i3 from "ngx-bootstrap/dropdown";
export class StatusFilterComponent {
    constructor() {
        this.ACTIONS = ACTIONS;
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    /** List of filter options to be displayed */
    set options(options) {
        this.statusOptions = (Object.values(options) || []).map(option => ({
            selected: false,
            option
        }));
    }
    /**
     * Allows multiple options to be active simultaneosly.
     */
    set _multiple(multiple) {
        this.multiple = coerceBooleanProperty(multiple);
    }
    /** Display the filter as a small button group */
    set _small(small) {
        this.small = coerceBooleanProperty(small);
    }
    get displaySmall() {
        return this.small;
    }
    changeFilter(option) {
        this.isAllButtonSelected = false;
        let emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    }
    removeFilter() {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(op => (op.selected = false));
        this.emitSelectedOptions();
    }
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `StatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    preset(filters, emit = true) {
        let firstSelected = false;
        this.statusOptions.forEach(option => (option.selected = false));
        this.statusOptions
            .filter(option => (filters || []).map(o => o.label).includes(option.option.label))
            .filter(() => {
            // only first option passed will be set in single selection mode
            const include = this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(option => (option.selected = true));
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    }
    reset() {
        this.removeFilter();
    }
    activeFilters() {
        return this.statusOptions.filter(option => option.selected).map(option => option.option);
    }
    isFilterApplied() {
        return this.statusOptions.some(option => option.selected);
    }
    emitSelectedOptions() {
        this.onFilterChanged.emit(this.statusOptions.filter(option => option.selected).map(option => option.option));
    }
}
StatusFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StatusFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StatusFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: StatusFilterComponent, selector: "c8y-status-filter", inputs: { options: "options", _multiple: ["multiple", "_multiple"], _small: ["small", "_small"] }, outputs: { onFilterChanged: "onFilterChanged" }, host: { properties: { "class.btn-group-sm": "this.displaySmall" } }, providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => StatusFilterComponent)
        }
    ], ngImport: i0, template: "<div dropdown placement=\"bottom left\" class=\"dropdown c8y-child-assets-selector\">\n  <button\n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    type=\"button\"\n    title=\"{{ 'Status filter' | translate }}\"\n    dropdownToggle\n  >\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul\n    id=\"dropdown-status-filter\"\n    *dropdownMenu\n    class=\"dropdown-menu\"\n    role=\"menu\"\n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\">\n      <button\n        type=\"button\"\n        [title]=\"option.option.label | translate\"\n        (click)=\"changeFilter(option)\"\n        c8yProductExperience\n        inherit\n        [actionData]=\"{\n          action: ACTIONS.FILTER,\n          filterBy: 'status',\n          filterValue: option.option.label\n        }\"\n      >\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button\n        type=\"button\"\n        title=\"{{ 'All statuses' | translate }}\"\n        (click)=\"removeFilter()\"\n        c8yProductExperience\n        inherit\n        [actionData]=\"{\n          action: ACTIONS.FILTER,\n          filterBy: 'status'\n        }\"\n      >\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "directive", type: i3.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i3.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i3.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StatusFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-status-filter', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => StatusFilterComponent)
                        }
                    ], template: "<div dropdown placement=\"bottom left\" class=\"dropdown c8y-child-assets-selector\">\n  <button\n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    type=\"button\"\n    title=\"{{ 'Status filter' | translate }}\"\n    dropdownToggle\n  >\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul\n    id=\"dropdown-status-filter\"\n    *dropdownMenu\n    class=\"dropdown-menu\"\n    role=\"menu\"\n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\">\n      <button\n        type=\"button\"\n        [title]=\"option.option.label | translate\"\n        (click)=\"changeFilter(option)\"\n        c8yProductExperience\n        inherit\n        [actionData]=\"{\n          action: ACTIONS.FILTER,\n          filterBy: 'status',\n          filterValue: option.option.label\n        }\"\n      >\n        <i [c8yIcon]=\"option.option.icon\" [ngClass]=\"option.option.styleClass\"></i>\n        <span class=\"m-l-4\">{{ option.option.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button\n        type=\"button\"\n        title=\"{{ 'All statuses' | translate }}\"\n        (click)=\"removeFilter()\"\n        c8yProductExperience\n        inherit\n        [actionData]=\"{\n          action: ACTIONS.FILTER,\n          filterBy: 'status'\n        }\"\n      >\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n" }]
        }], propDecorators: { options: [{
                type: Input
            }], _multiple: [{
                type: Input,
                args: ['multiple']
            }], _small: [{
                type: Input,
                args: ['small']
            }], displaySmall: [{
                type: HostBinding,
                args: ['class.btn-group-sm']
            }], onFilterChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
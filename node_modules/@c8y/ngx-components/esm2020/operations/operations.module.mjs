import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, hookTab, hookNavigator } from '@c8y/ngx-components';
import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
import { BulkOperationFromSingleModule } from '@c8y/ngx-components/operations/bulk-operation-from-single';
import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
import { StepperBulkTypeConfigurationModule } from '@c8y/ngx-components/operations/stepper-bulk-type-configuration';
import { StepperBulkTypeDeviceProfileModule } from '@c8y/ngx-components/operations/stepper-bulk-type-device-profile';
import { StepperBulkTypeFirmwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-firmware';
import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
import { OperationsListModule } from '@c8y/ngx-components/operations/operations-list';
import { TabsFactory } from './factories/tabs.factory';
import { NavigationFactory } from './factories/nav.factory';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export const routes = [
    {
        path: 'devicecontrol',
        redirectTo: 'devicecontrol/single',
        pathMatch: 'full'
    }
];
/**
 * This module sets up the 'Device control' view. By importing it in your custom application you will have:
 * - a 'Device control' tab in device details view
 * - a 'Device control' entry in the 'Overviews' section of navigator
 * - 'Bulk operations' tab on the 'Device control' page
 * - list view of existing bulk operations with expandable details and options to filter
 * - guided stepper dialogs to schedule new bulk operations of supported types
 * (Configuration update, Firmware update, Software update, Apply device profile).
 *
 * Additionaly you can use the modules imported by {@link OperationsModule} separately to achieve
 * the results you wish to have in your application, e.g.:
 * - import {@link BulkOperationsListModule} and {@link BulkOperationsServiceModule}
 * to have an overview of existing bulk operation with expandable details
 * - additionaly import {@link BulkOperationsStepperContainerModule} and any of the existing
 * `StepperBulkType*Module` modules ({@link StepperBulkTypeConfigurationModule},
 * {@link StepperBulkTypeFirmwareModule}, {@link StepperBulkTypeSoftwareModule},
 * {@link StepperBulkTypeDeviceProfileModule}) to have the option
 * to create new bulk operation in a guided stepper dialog.
 *
 * ```typescript
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * respectively
 * ```typescript
 * import { BulkOperationsStepperContainerModule } from '@c8y/ngx-components/operations/bulk-operations-stepper-container';
 * import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
 * import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
 * import { StepperBulkTypeSoftwareModule } from '@c8y/ngx-components/operations/stepper-bulk-type-software';
 *
 * @NgModule({
 *   imports: [
 *     [...]
 *     BulkOperationsServiceModule,
 *     BulkOperationsListModule,
 *     BulkOperationsStepperContainerModule,
 *     StepperBulkTypeSoftwareModule
 *   ],
 *   [...]
 * })
 * export class CustomOperationsModule {}```
 * You can provide your own bulk operation stepper by registering a component via the `hookListBulkType`:
 *
 * ```typescript
 * import {
 *   hookListBulkType,
 *   baseUrl
 * } from '@c8y/ngx-components/operations/bulk-operations-service';
 *
 * [...]
 *
 * providers: [
 *   hookListBulkType({
 *     type: 'my-bulk-op-type',
 *     c8yIcon: 'c8y-tools',
 *     name: 'My bulk op type',
 *     path: `${baseUrl}my-type`,
 *     component: StepperMyBulkTypeComponent,
 *     fragments: ['c8y_MyType'],
 *     selected: false
 *   })
 * ]```
 */
export class OperationsModule {
}
OperationsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
OperationsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: OperationsModule, imports: [CoreModule, i1.RouterModule, BulkOperationFromSingleModule,
        BulkOperationsListModule,
        BulkOperationsServiceModule,
        BulkOperationsStepperContainerModule,
        StepperBulkTypeConfigurationModule,
        StepperBulkTypeFirmwareModule,
        StepperBulkTypeSoftwareModule,
        StepperBulkTypeDeviceProfileModule,
        OperationsListModule] });
OperationsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsModule, providers: [hookTab(TabsFactory), hookNavigator(NavigationFactory)], imports: [CoreModule,
        RouterModule.forChild(routes),
        BulkOperationFromSingleModule,
        BulkOperationsListModule,
        BulkOperationsServiceModule,
        BulkOperationsStepperContainerModule,
        StepperBulkTypeConfigurationModule,
        StepperBulkTypeFirmwareModule,
        StepperBulkTypeSoftwareModule,
        StepperBulkTypeDeviceProfileModule,
        OperationsListModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        RouterModule.forChild(routes),
                        BulkOperationFromSingleModule,
                        BulkOperationsListModule,
                        BulkOperationsServiceModule,
                        BulkOperationsStepperContainerModule,
                        StepperBulkTypeConfigurationModule,
                        StepperBulkTypeFirmwareModule,
                        StepperBulkTypeSoftwareModule,
                        StepperBulkTypeDeviceProfileModule,
                        OperationsListModule
                    ],
                    providers: [hookTab(TabsFactory), hookNavigator(NavigationFactory)]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
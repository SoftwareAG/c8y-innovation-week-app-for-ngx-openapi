import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DATA_GRID_CONFIGURATION_CONTEXT, DATA_GRID_CONFIGURATION_STRATEGY, FilteringActionType, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { AlarmsDeviceGridColumn, DeviceGridComponent, GroupDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, StatusDeviceGridColumn, TypeDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { Observable, Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/device-grid";
export class DeviceSelectorComponent {
    constructor() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe((types) => {
                this.deviceGrid.updateFiltering([this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
}
DeviceSelectorComponent.GRID_CONFIG_KEY = 'device-grid-bulk';
DeviceSelectorComponent.GRID_CONFIG_CONTEXT = {
    key: DeviceSelectorComponent.GRID_CONFIG_KEY,
    configFilter: {
        filter: false
    }
};
DeviceSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceSelectorComponent, selector: "c8y-device-selector", inputs: { deviceTypes: "deviceTypes" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange" }, providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT,
            useValue: DeviceSelectorComponent.GRID_CONFIG_CONTEXT
        }
    ], viewQueries: [{ propertyName: "deviceGrid", first: true, predicate: DeviceGridComponent, descendants: true, static: true }], ngImport: i0, template: "<c8y-device-grid\n  [title]=\"'Target devices' | translate\"\n  [columns]=\"columns\"\n  [infiniteScroll]=\"'auto'\"\n  [showSearch]=\"false\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"'bulkOperations'\"\n></c8y-device-grid>\n", dependencies: [{ kind: "directive", type: i1.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i2.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-selector', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT,
                            useValue: DeviceSelectorComponent.GRID_CONFIG_CONTEXT
                        }
                    ], template: "<c8y-device-grid\n  [title]=\"'Target devices' | translate\"\n  [columns]=\"columns\"\n  [infiniteScroll]=\"'auto'\"\n  [showSearch]=\"false\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"'bulkOperations'\"\n></c8y-device-grid>\n" }]
        }], propDecorators: { deviceGrid: [{
                type: ViewChild,
                args: [DeviceGridComponent, { static: true }]
            }], deviceTypes: [{
                type: Input
            }], onDeviceQueryStringChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvZGV2aWNlLXNlbGVjdG9yL2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9vcGVyYXRpb25zL2RldmljZS1zZWxlY3Rvci9kZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUVMLCtCQUErQixFQUMvQixnQ0FBZ0MsRUFDaEMsbUJBQW1CLEVBQ25CLG9DQUFvQyxFQUVyQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQixxQkFBcUIsRUFDckIsb0JBQW9CLEVBQ3BCLGdDQUFnQyxFQUNoQyxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3JCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBZ0JqRSxNQUFNLE9BQU8sdUJBQXVCO0lBZHBDO1FBNkJFLGVBQVUsR0FBVyxJQUFJLG9CQUFvQixFQUFFLENBQUM7UUFHaEQsOEJBQXlCLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFFN0UsWUFBTyxHQUFhO1lBQ2xCLElBQUksc0JBQXNCLEVBQUU7WUFDNUIsSUFBSSxvQkFBb0IsRUFBRTtZQUMxQixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUkscUJBQXFCLEVBQUU7WUFDM0IsSUFBSSxxQkFBcUIsRUFBRTtZQUMzQixJQUFJLGdDQUFnQyxFQUFFO1lBQ3RDLElBQUksc0JBQXNCLEVBQUU7U0FDN0IsQ0FBQztRQUVNLGlCQUFZLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7S0E4QnhEO0lBNUJDLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVc7aUJBQ2IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDMUQsU0FBUyxDQUFDLENBQUMsS0FBZSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdEQsSUFBSSxFQUNGLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTTt3QkFDbkIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFdBQVc7d0JBQ2pDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO29CQUNyQyxPQUFPLEVBQUUsS0FBSzt3QkFDWixDQUFDLENBQUM7NEJBQ0UsaUJBQWlCLEVBQUU7Z0NBQ2pCLG1CQUFtQixFQUFFO29DQUNuQixLQUFLO2lDQUNOOzZCQUNGO3lCQUNGO3dCQUNILENBQUMsQ0FBQyxTQUFTO2lCQUNkLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7QUExRGUsdUNBQWUsR0FBRyxrQkFBa0IsQ0FBQztBQUNyQywyQ0FBbUIsR0FBcUM7SUFDdEUsR0FBRyxFQUFFLHVCQUF1QixDQUFDLGVBQWU7SUFDNUMsWUFBWSxFQUFFO1FBQ1osTUFBTSxFQUFFLEtBQUs7S0FDZDtDQUNGLENBQUM7b0hBUFMsdUJBQXVCO3dHQUF2Qix1QkFBdUIsMkpBWHZCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsZ0NBQWdDO1lBQ3pDLFFBQVEsRUFBRSxvQ0FBb0M7U0FDL0M7UUFDRDtZQUNFLE9BQU8sRUFBRSwrQkFBK0I7WUFDeEMsUUFBUSxFQUFFLHVCQUF1QixDQUFDLG1CQUFtQjtTQUN0RDtLQUNGLHNFQVdVLG1CQUFtQiw4RENyRGhDLDhTQVNBOzJGRG1DYSx1QkFBdUI7a0JBZG5DLFNBQVM7K0JBQ0UscUJBQXFCLGFBRXBCO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxnQ0FBZ0M7NEJBQ3pDLFFBQVEsRUFBRSxvQ0FBb0M7eUJBQy9DO3dCQUNEOzRCQUNFLE9BQU8sRUFBRSwrQkFBK0I7NEJBQ3hDLFFBQVEsRUFBRSx3QkFBd0IsbUJBQW1CO3lCQUN0RDtxQkFDRjs4QkFZRCxVQUFVO3NCQURULFNBQVM7dUJBQUMsbUJBQW1CLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUloRCxXQUFXO3NCQURWLEtBQUs7Z0JBTU4seUJBQXlCO3NCQUR4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb2x1bW4sXG4gIERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX0NPTlRFWFQsXG4gIERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX1NUUkFURUdZLFxuICBGaWx0ZXJpbmdBY3Rpb25UeXBlLFxuICBVc2VyUHJlZmVyZW5jZXNDb25maWd1cmF0aW9uU3RyYXRlZ3ksXG4gIFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0XG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgQWxhcm1zRGV2aWNlR3JpZENvbHVtbixcbiAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgR3JvdXBEZXZpY2VHcmlkQ29sdW1uLFxuICBNb2RlbERldmljZUdyaWRDb2x1bW4sXG4gIE5hbWVEZXZpY2VHcmlkQ29sdW1uLFxuICBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbixcbiAgU3RhdHVzRGV2aWNlR3JpZENvbHVtbixcbiAgVHlwZURldmljZUdyaWRDb2x1bW5cbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZGV2aWNlLXNlbGVjdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICdkZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBEQVRBX0dSSURfQ09ORklHVVJBVElPTl9TVFJBVEVHWSxcbiAgICAgIHVzZUNsYXNzOiBVc2VyUHJlZmVyZW5jZXNDb25maWd1cmF0aW9uU3RyYXRlZ3lcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IERBVEFfR1JJRF9DT05GSUdVUkFUSU9OX0NPTlRFWFQsXG4gICAgICB1c2VWYWx1ZTogRGV2aWNlU2VsZWN0b3JDb21wb25lbnQuR1JJRF9DT05GSUdfQ09OVEVYVFxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgc3RhdGljIHJlYWRvbmx5IEdSSURfQ09ORklHX0tFWSA9ICdkZXZpY2UtZ3JpZC1idWxrJztcbiAgc3RhdGljIHJlYWRvbmx5IEdSSURfQ09ORklHX0NPTlRFWFQ6IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0ID0ge1xuICAgIGtleTogRGV2aWNlU2VsZWN0b3JDb21wb25lbnQuR1JJRF9DT05GSUdfS0VZLFxuICAgIGNvbmZpZ0ZpbHRlcjoge1xuICAgICAgZmlsdGVyOiBmYWxzZVxuICAgIH1cbiAgfTtcblxuICBAVmlld0NoaWxkKERldmljZUdyaWRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGRldmljZUdyaWQ6IERldmljZUdyaWRDb21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgZGV2aWNlVHlwZXM6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuXG4gIHR5cGVDb2x1bW46IENvbHVtbiA9IG5ldyBUeXBlRGV2aWNlR3JpZENvbHVtbigpO1xuXG4gIEBPdXRwdXQoKVxuICBvbkRldmljZVF1ZXJ5U3RyaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbHVtbnM6IENvbHVtbltdID0gW1xuICAgIG5ldyBTdGF0dXNEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IE5hbWVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgdGhpcy50eXBlQ29sdW1uLFxuICAgIG5ldyBNb2RlbERldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgR3JvdXBEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IEFsYXJtc0RldmljZUdyaWRDb2x1bW4oKVxuICBdO1xuXG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZXZpY2VUeXBlcykge1xuICAgICAgdGhpcy5kZXZpY2VUeXBlc1xuICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCB0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKVxuICAgICAgICAuc3Vic2NyaWJlKCh0eXBlczogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICB0aGlzLmRldmljZUdyaWQudXBkYXRlRmlsdGVyaW5nKFt0aGlzLnR5cGVDb2x1bW4ubmFtZV0sIHtcbiAgICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICAgIHR5cGVzICYmIHR5cGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gRmlsdGVyaW5nQWN0aW9uVHlwZS5BcHBseUZpbHRlclxuICAgICAgICAgICAgICAgIDogRmlsdGVyaW5nQWN0aW9uVHlwZS5SZXNldEZpbHRlcixcbiAgICAgICAgICAgIHBheWxvYWQ6IHR5cGVzXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgZmlsdGVyaW5nTW9kaWZpZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQodHJ1ZSk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIiwiPGM4eS1kZXZpY2UtZ3JpZFxuICBbdGl0bGVdPVwiJ1RhcmdldCBkZXZpY2VzJyB8IHRyYW5zbGF0ZVwiXG4gIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxuICBbaW5maW5pdGVTY3JvbGxdPVwiJ2F1dG8nXCJcbiAgW3Nob3dTZWFyY2hdPVwiZmFsc2VcIlxuICAob25EZXZpY2VRdWVyeVN0cmluZ0NoYW5nZSk9XCJvbkRldmljZVF1ZXJ5U3RyaW5nQ2hhbmdlLmVtaXQoJGV2ZW50KVwiXG4gIGM4eVByb2R1Y3RFeHBlcmllbmNlXG4gIFthY3Rpb25OYW1lXT1cIididWxrT3BlcmF0aW9ucydcIlxuPjwvYzh5LWRldmljZS1ncmlkPlxuIl19
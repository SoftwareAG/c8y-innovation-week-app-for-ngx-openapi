import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CoreModule, gettext, hookRoute, ViewContext } from '@c8y/ngx-components';
import { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';
import { OperationsListItemDetailsModule } from '@c8y/ngx-components/operations/operations-list-item-details';
import { BulkOperationListItemService } from '@c8y/ngx-components/operations/bulk-operation-list-item';
import { OperationsSharedModule } from '@c8y/ngx-components/operations/shared';
import { OperationsListComponent } from './operations-list.component';
import { OperationsListItemComponent } from './operations-list-item.component';
import { OperationsListService } from './operations-list.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export const singleOperationListRoutes = [
    {
        path: 'devicecontrol/single',
        component: OperationsListComponent
    }
];
/**
 * This module allows for displaying the list item details of single and bulk operations.
 */
export class OperationsListModule {
}
OperationsListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
OperationsListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: OperationsListModule, declarations: [OperationsListComponent, OperationsListItemComponent], imports: [CoreModule,
        StatusFilterModule,
        OperationsListItemDetailsModule,
        OperationsSharedModule,
        TooltipModule, i1.RouterModule], exports: [OperationsListComponent, OperationsListItemComponent] });
OperationsListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsListModule, providers: [
        OperationsListService,
        BulkOperationListItemService,
        hookRoute({
            context: ViewContext.Device,
            path: 'control',
            component: OperationsListComponent,
            label: gettext('Control'),
            icon: 'c8y-icon c8y-icon-device-control',
            priority: 600
        })
    ], imports: [CoreModule,
        StatusFilterModule,
        OperationsListItemDetailsModule,
        OperationsSharedModule,
        TooltipModule,
        RouterModule.forChild(singleOperationListRoutes)] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationsListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        StatusFilterModule,
                        OperationsListItemDetailsModule,
                        OperationsSharedModule,
                        TooltipModule,
                        RouterModule.forChild(singleOperationListRoutes)
                    ],
                    declarations: [OperationsListComponent, OperationsListItemComponent],
                    exports: [OperationsListComponent, OperationsListItemComponent],
                    providers: [
                        OperationsListService,
                        BulkOperationListItemService,
                        hookRoute({
                            context: ViewContext.Device,
                            path: 'control',
                            component: OperationsListComponent,
                            label: gettext('Control'),
                            icon: 'c8y-icon c8y-icon-device-control',
                            priority: 600
                        })
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy1saXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvb3BlcmF0aW9ucy1saXN0L29wZXJhdGlvbnMtbGlzdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBUyxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUM5RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUUvRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBRWxFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFZO0lBQ2hEO1FBQ0UsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixTQUFTLEVBQUUsdUJBQXVCO0tBQ25DO0NBQ0YsQ0FBQztBQUVGOztHQUVHO0FBeUJILE1BQU0sT0FBTyxvQkFBb0I7O2lIQUFwQixvQkFBb0I7a0hBQXBCLG9CQUFvQixpQkFmaEIsdUJBQXVCLEVBQUUsMkJBQTJCLGFBUGpFLFVBQVU7UUFDVixrQkFBa0I7UUFDbEIsK0JBQStCO1FBQy9CLHNCQUFzQjtRQUN0QixhQUFhLDhCQUlMLHVCQUF1QixFQUFFLDJCQUEyQjtrSEFjbkQsb0JBQW9CLGFBYnBCO1FBQ1QscUJBQXFCO1FBQ3JCLDRCQUE0QjtRQUM1QixTQUFTLENBQUM7WUFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07WUFDM0IsSUFBSSxFQUFFLFNBQVM7WUFDZixTQUFTLEVBQUUsdUJBQXVCO1lBQ2xDLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3pCLElBQUksRUFBRSxrQ0FBa0M7WUFDeEMsUUFBUSxFQUFFLEdBQUc7U0FDZCxDQUFDO0tBQ0gsWUFwQkMsVUFBVTtRQUNWLGtCQUFrQjtRQUNsQiwrQkFBK0I7UUFDL0Isc0JBQXNCO1FBQ3RCLGFBQWE7UUFDYixZQUFZLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDOzJGQWlCdkMsb0JBQW9CO2tCQXhCaEMsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsVUFBVTt3QkFDVixrQkFBa0I7d0JBQ2xCLCtCQUErQjt3QkFDL0Isc0JBQXNCO3dCQUN0QixhQUFhO3dCQUNiLFlBQVksQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7cUJBQ2pEO29CQUNELFlBQVksRUFBRSxDQUFDLHVCQUF1QixFQUFFLDJCQUEyQixDQUFDO29CQUNwRSxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSwyQkFBMkIsQ0FBQztvQkFDL0QsU0FBUyxFQUFFO3dCQUNULHFCQUFxQjt3QkFDckIsNEJBQTRCO3dCQUM1QixTQUFTLENBQUM7NEJBQ1IsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNOzRCQUMzQixJQUFJLEVBQUUsU0FBUzs0QkFDZixTQUFTLEVBQUUsdUJBQXVCOzRCQUNsQyxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQzs0QkFDekIsSUFBSSxFQUFFLGtDQUFrQzs0QkFDeEMsUUFBUSxFQUFFLEdBQUc7eUJBQ2QsQ0FBQztxQkFDSDtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBnZXR0ZXh0LCBob29rUm91dGUsIFJvdXRlLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU3RhdHVzRmlsdGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0YXR1cy1maWx0ZXInO1xuaW1wb3J0IHsgT3BlcmF0aW9uc0xpc3RJdGVtRGV0YWlsc01vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9vcGVyYXRpb25zLWxpc3QtaXRlbS1kZXRhaWxzJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25MaXN0SXRlbVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tbGlzdC1pdGVtJztcbmltcG9ydCB7IE9wZXJhdGlvbnNTaGFyZWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvc2hhcmVkJztcblxuaW1wb3J0IHsgT3BlcmF0aW9uc0xpc3RDb21wb25lbnQgfSBmcm9tICcuL29wZXJhdGlvbnMtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3BlcmF0aW9uc0xpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9vcGVyYXRpb25zLWxpc3QtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3BlcmF0aW9uc0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi9vcGVyYXRpb25zLWxpc3Quc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBzaW5nbGVPcGVyYXRpb25MaXN0Um91dGVzOiBSb3V0ZVtdID0gW1xuICB7XG4gICAgcGF0aDogJ2RldmljZWNvbnRyb2wvc2luZ2xlJyxcbiAgICBjb21wb25lbnQ6IE9wZXJhdGlvbnNMaXN0Q29tcG9uZW50XG4gIH1cbl07XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgYWxsb3dzIGZvciBkaXNwbGF5aW5nIHRoZSBsaXN0IGl0ZW0gZGV0YWlscyBvZiBzaW5nbGUgYW5kIGJ1bGsgb3BlcmF0aW9ucy5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgU3RhdHVzRmlsdGVyTW9kdWxlLFxuICAgIE9wZXJhdGlvbnNMaXN0SXRlbURldGFpbHNNb2R1bGUsXG4gICAgT3BlcmF0aW9uc1NoYXJlZE1vZHVsZSxcbiAgICBUb29sdGlwTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZS5mb3JDaGlsZChzaW5nbGVPcGVyYXRpb25MaXN0Um91dGVzKVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtPcGVyYXRpb25zTGlzdENvbXBvbmVudCwgT3BlcmF0aW9uc0xpc3RJdGVtQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW09wZXJhdGlvbnNMaXN0Q29tcG9uZW50LCBPcGVyYXRpb25zTGlzdEl0ZW1Db21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBPcGVyYXRpb25zTGlzdFNlcnZpY2UsXG4gICAgQnVsa09wZXJhdGlvbkxpc3RJdGVtU2VydmljZSxcbiAgICBob29rUm91dGUoe1xuICAgICAgY29udGV4dDogVmlld0NvbnRleHQuRGV2aWNlLFxuICAgICAgcGF0aDogJ2NvbnRyb2wnLFxuICAgICAgY29tcG9uZW50OiBPcGVyYXRpb25zTGlzdENvbXBvbmVudCxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdDb250cm9sJyksXG4gICAgICBpY29uOiAnYzh5LWljb24gYzh5LWljb24tZGV2aWNlLWNvbnRyb2wnLFxuICAgICAgcHJpb3JpdHk6IDYwMFxuICAgIH0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uc0xpc3RNb2R1bGUge31cbiJdfQ==
import { Component, ViewChild } from '@angular/core';
import { gettext, ModalService, Status } from '@c8y/ngx-components';
import { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { TranslateService } from '@ngx-translate/core';
import { uniq } from 'lodash-es';
import { SelectSoftwareStepComponent } from './select-software-step.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/ngx-components/operations/bulk-operation-stepper";
import * as i4 from "./confirm-software-selection-step.component";
import * as i5 from "./select-software-step.component";
export class StepperBulkTypeSoftwareComponent extends BaseStepperComponent {
    constructor(modal, translate) {
        super();
        this.modal = modal;
        this.translate = translate;
        this.type = BulkOperationType.SOFTWARE;
        this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        this.selectedSoftware = [];
    }
    onSoftwareSelected(selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(item => item.software.id !== selectedItem.software.id);
        this.selectedSoftware.push(selectedItem);
    }
    async confirmSoftwareSelection($event) {
        const deviceTypes = this.getUniqueDeviceTypes();
        this.deviceTypes = deviceTypes;
        if (deviceTypes.length > 1) {
            try {
                await this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') });
                $event.stepper.next();
            }
            catch (ex) {
                this.selectedSoftware = [];
                this.selectSoftware.resetSelection();
            }
        }
        else {
            $event.stepper.next();
        }
    }
    retrieveOperationPrototype() {
        const softwareList = this.selectedSoftware.map(item => ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }));
        const interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        let description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    }
    getUniqueDeviceTypes() {
        return uniq(this.selectedSoftware
            .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)
            .filter(type => !!type));
    }
}
StepperBulkTypeSoftwareComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeSoftwareComponent, deps: [{ token: i1.ModalService }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
StepperBulkTypeSoftwareComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: StepperBulkTypeSoftwareComponent, selector: "c8y-stepper-bulk-type-software", viewQueries: [{ propertyName: "selectSoftware", first: true, predicate: SelectSoftwareStepComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<c8y-bulk-operation-stepper [type]=\"type\">\n  <ng-container\n    *customStep=\"\n      'Select software' | translate;\n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length;\n      onNext: confirmSoftwareSelection.bind(this)\n    \"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n", dependencies: [{ kind: "component", type: i3.BulkOperationStepper, selector: "c8y-bulk-operation-stepper", inputs: ["type"], outputs: ["selectionChange"] }, { kind: "directive", type: i3.CustomStep, selector: "[customStep]", inputs: ["customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"] }, { kind: "component", type: i4.ConfirmSoftwareSelectionStepComponent, selector: "c8y-confirm-software-selection-step", inputs: ["selectedItems"] }, { kind: "component", type: i5.SelectSoftwareStepComponent, selector: "c8y-select-software-step", outputs: ["software"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeSoftwareComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-stepper-bulk-type-software', template: "<c8y-bulk-operation-stepper [type]=\"type\">\n  <ng-container\n    *customStep=\"\n      'Select software' | translate;\n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length;\n      onNext: confirmSoftwareSelection.bind(this)\n    \"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ModalService }, { type: i2.TranslateService }]; }, propDecorators: { selectSoftware: [{
                type: ViewChild,
                args: [SelectSoftwareStepComponent, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
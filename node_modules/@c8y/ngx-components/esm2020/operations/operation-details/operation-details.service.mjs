import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { OperationService } from '@c8y/client';
import { OperationDetailsModalComponent } from './operation-details-modal.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "ngx-bootstrap/modal";
export class OperationDetailsService {
    constructor(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    async openDetails(operationOrOperationId, options) {
        const operation = operationOrOperationId.id
            ? operationOrOperationId
            : (await this.operationService.detail(operationOrOperationId)).data;
        const initialState = { operation, ...options };
        this.modalService.show(OperationDetailsModalComponent, {
            initialState,
            class: 'modal-lg',
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title'
        });
    }
}
OperationDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationDetailsService, deps: [{ token: i1.OperationService }, { token: i2.BsModalService }], target: i0.ɵɵFactoryTarget.Injectable });
OperationDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationDetailsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationDetailsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.OperationService }, { type: i2.BsModalService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLWRldGFpbHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvb3BlcmF0aW9uLWRldGFpbHMvb3BlcmF0aW9uLWRldGFpbHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0QsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7QUFHckYsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQyxZQUFvQixnQkFBa0MsRUFBVSxZQUE0QjtRQUF4RSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQUcsQ0FBQztJQUVoRzs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUNmLHNCQUFvRCxFQUNwRCxPQUFxRDtRQUVyRCxNQUFNLFNBQVMsR0FBZ0Isc0JBQXFDLENBQUMsRUFBRTtZQUNyRSxDQUFDLENBQUUsc0JBQXFDO1lBQ3hDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RFLE1BQU0sWUFBWSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFFL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUU7WUFDckQsWUFBWTtZQUNaLEtBQUssRUFBRSxVQUFVO1lBQ2pCLGVBQWUsRUFBRSxZQUFZO1lBQzdCLGNBQWMsRUFBRSxhQUFhO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7O29IQXpCVSx1QkFBdUI7d0hBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IElPcGVyYXRpb24sIE9wZXJhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPcGVyYXRpb25EZXRhaWxzTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL29wZXJhdGlvbi1kZXRhaWxzLW1vZGFsLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcGVyYXRpb25EZXRhaWxzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3BlcmF0aW9uU2VydmljZTogT3BlcmF0aW9uU2VydmljZSwgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIG1vZGFsIHdpbmRvdyB3aXRoIHRoZSBkZXRhaWxzIG9mIGdpdmVuIHNpbmdsZSBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBvcGVyYXRpb25Pck9wZXJhdGlvbklkIE9wZXJhdGlvbidzIG9iamVjdCBvciBpZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zOlxuICAgKiAtIGBjb2xsYXBzZWRgOiBib29sZWFuIC0gd2hldGhlciB0aGUgZGV0YWlscyBwYW5lIHNob3VsZCBiZSBpbml0aWFsbHkgY29sbGFwc2VkXG4gICAqIC0gYHJlYWRPbmx5YDogYm9vbGVhbiAtIHdoZXRoZXIgdGhlIGRldGFpbHMgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiByZWFkLW9ubHkgbW9kZVxuICAgKi9cbiAgYXN5bmMgb3BlbkRldGFpbHMoXG4gICAgb3BlcmF0aW9uT3JPcGVyYXRpb25JZDogSU9wZXJhdGlvbiB8IHN0cmluZyB8IG51bWJlcixcbiAgICBvcHRpb25zPzogeyBjb2xsYXBzZWQ/OiBib29sZWFuOyByZWFkT25seT86IGJvb2xlYW4gfVxuICApIHtcbiAgICBjb25zdCBvcGVyYXRpb246IElPcGVyYXRpb24gPSAob3BlcmF0aW9uT3JPcGVyYXRpb25JZCBhcyBJT3BlcmF0aW9uKS5pZFxuICAgICAgPyAob3BlcmF0aW9uT3JPcGVyYXRpb25JZCBhcyBJT3BlcmF0aW9uKVxuICAgICAgOiAoYXdhaXQgdGhpcy5vcGVyYXRpb25TZXJ2aWNlLmRldGFpbChvcGVyYXRpb25Pck9wZXJhdGlvbklkKSkuZGF0YTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7IG9wZXJhdGlvbiwgLi4ub3B0aW9ucyB9O1xuXG4gICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhPcGVyYXRpb25EZXRhaWxzTW9kYWxDb21wb25lbnQsIHtcbiAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgIGNsYXNzOiAnbW9kYWwtbGcnLFxuICAgICAgYXJpYURlc2NyaWJlZGJ5OiAnbW9kYWwtYm9keScsXG4gICAgICBhcmlhTGFiZWxsZWRCeTogJ21vZGFsLXRpdGxlJ1xuICAgIH0pO1xuICB9XG59XG4iXX0=
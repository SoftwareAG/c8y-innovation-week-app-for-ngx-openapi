import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './bulk-operation-stepper.component';
import * as i0 from "@angular/core";
export class BaseStepperComponent {
    constructor() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    set deviceTypes(deviceTypes) {
        if (this.operationStepper) {
            this.operationStepper.changeDeviceTypes(deviceTypes);
        }
    }
    ngOnInit() {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    onSelectionChange(event) {
        const { selectedIndex, previouslySelectedIndex } = event;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    }
    getStepDataKeyByIndex(index) {
        return Object.keys(this.stepData)[index];
    }
}
BaseStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BaseStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BaseStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: BaseStepperComponent, selector: "c8y-base-stepper", viewQueries: [{ propertyName: "operationStepper", first: true, predicate: BulkOperationStepper, descendants: true, static: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BaseStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c8y-base-stepper',
                    template: ''
                }]
        }], propDecorators: { operationStepper: [{
                type: ViewChild,
                args: [BulkOperationStepper, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tc3RlcHBlci9iYXNlLXN0ZXBwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7QUFPMUUsTUFBTSxPQUFnQixvQkFBb0I7SUFKMUM7UUFhRTs7OztXQUlHO1FBQ0gsYUFBUSxHQUFzQyxFQUFFLENBQUM7UUFFekMscUJBQWdCLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7S0ErQnpEO0lBNUNDLElBQUksV0FBVyxDQUFDLFdBQThCO1FBQzVDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFXRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWU7YUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUN0QyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBSVMsaUJBQWlCLENBQUMsS0FBNEI7UUFDdEQsTUFBTSxFQUFFLGFBQWEsRUFBRSx1QkFBdUIsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN6RCxJQUNFLGFBQWEsR0FBRyx1QkFBdUI7WUFDdkMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFDakQ7WUFDQSx3REFBd0Q7WUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsS0FBYTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7O2lIQTlDbUIsb0JBQW9CO3FHQUFwQixvQkFBb0IsMEdBQzdCLG9CQUFvQiw4REFIckIsRUFBRTsyRkFFUSxvQkFBb0I7a0JBSnpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OEJBRW9ELGdCQUFnQjtzQkFBbEUsU0FBUzt1QkFBQyxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGVwcGVyU2VsZWN0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvblN0ZXBwZXIgfSBmcm9tICcuL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYmFzZS1zdGVwcGVyJyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTdGVwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKEJ1bGtPcGVyYXRpb25TdGVwcGVyLCB7IHN0YXRpYzogdHJ1ZSB9KSBvcGVyYXRpb25TdGVwcGVyOiBCdWxrT3BlcmF0aW9uU3RlcHBlcjtcblxuICBzZXQgZGV2aWNlVHlwZXMoZGV2aWNlVHlwZXM6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uU3RlcHBlcikge1xuICAgICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLmNoYW5nZURldmljZVR5cGVzKGRldmljZVR5cGVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBtYXAgaG9sZGluZyBzdGVwIGRhdGEuIFRoZSBvcmRlciBvZiBwcm9wZXJ0aWVzIG5lZWQgdG8gbWF0Y2ggdGhlIG9yZGVyIG9mXG4gICAqIHRoZSBzdGVwcyB0aGV5IGhvbGQgZGF0YSBmb3IgYXMgdGhlIGluZGV4IG9mIHRoZSBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNsZWFyXG4gICAqIHN0ZXAgZGF0YSB3aGVuIG5hdmlnYXRpbmcgZm9ydGggYWZ0ZXIgY2hhbmdpbmcgZGF0YSBhdCBhbiBlYXJsaWVyIHN0ZXAuXG4gICAqL1xuICBzdGVwRGF0YTogeyBba2V5OiBzdHJpbmddOiBJTWFuYWdlZE9iamVjdCB9ID0ge307XG5cbiAgcHJpdmF0ZSBlbmRTdWJzY3JpcHRpb25zOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9wZXJhdGlvblN0ZXBwZXIucmV0cmlldmVPcGVyYXRpb25EZXRhaWxzID0gdGhpcy5yZXRyaWV2ZU9wZXJhdGlvblByb3RvdHlwZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLnNlbGVjdGlvbkNoYW5nZVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZW5kU3Vic2NyaXB0aW9ucykpXG4gICAgICAuc3Vic2NyaWJlKHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMubmV4dCgpO1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9ucy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJldHJpZXZlT3BlcmF0aW9uUHJvdG90eXBlKCk6IE9wZXJhdGlvbkRldGFpbHMgfCBQcm9taXNlPE9wZXJhdGlvbkRldGFpbHM+O1xuXG4gIHByb3RlY3RlZCBvblNlbGVjdGlvbkNoYW5nZShldmVudDogU3RlcHBlclNlbGVjdGlvbkV2ZW50KSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZEluZGV4LCBwcmV2aW91c2x5U2VsZWN0ZWRJbmRleCB9ID0gZXZlbnQ7XG4gICAgaWYgKFxuICAgICAgc2VsZWN0ZWRJbmRleCA+IHByZXZpb3VzbHlTZWxlY3RlZEluZGV4ICYmXG4gICAgICBzZWxlY3RlZEluZGV4IDwgT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSkubGVuZ3RoXG4gICAgKSB7XG4gICAgICAvLyBUT0RPIGNsZWFyIHN0ZXAgZGF0YSBvbmx5IGlmIHByZXZpb3VzIHN0ZXAgaXMgXCJkaXJ0eVwiXG4gICAgICB0aGlzLnN0ZXBEYXRhW3RoaXMuZ2V0U3RlcERhdGFLZXlCeUluZGV4KHNlbGVjdGVkSW5kZXgpXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFN0ZXBEYXRhS2V5QnlJbmRleChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdGVwRGF0YSlbaW5kZXhdO1xuICB9XG59XG4iXX0=
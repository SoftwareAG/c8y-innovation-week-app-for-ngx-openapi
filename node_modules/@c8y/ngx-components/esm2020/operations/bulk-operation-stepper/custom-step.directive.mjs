import { Directive, Input, TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
export class CustomStep {
    constructor(templateRef) {
        this.templateRef = templateRef;
        this.buttonsDisabled = false;
        this.onNext = ({ stepper, step }) => {
            // steps without own `onNext` handler, e.g. preview steps need to mark themselves as `completed`,
            // otherwise stepper will not allow to move forth from them as soon as the user navigates back
            // and the `c8y-stepper-buttons` component marks the step as incomplete.
            step.completed = true;
            stepper.next();
        };
    }
}
CustomStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CustomStep, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomStep.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: CustomStep, selector: "[customStep]", inputs: { label: ["customStep", "label"], completed: ["customStepCompleted", "completed"], buttonsDisabled: ["customStepButtonsDisabled", "buttonsDisabled"], onNext: ["customStepOnNext", "onNext"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CustomStep, decorators: [{
            type: Directive,
            args: [{ selector: '[customStep]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { label: [{
                type: Input,
                args: ['customStep']
            }], completed: [{
                type: Input,
                args: ['customStepCompleted']
            }], buttonsDisabled: [{
                type: Input,
                args: ['customStepButtonsDisabled']
            }], onNext: [{
                type: Input,
                args: ['customStepOnNext']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXN0ZXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyL2N1c3RvbS1zdGVwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTlELE1BQU0sT0FBTyxVQUFVO0lBSXJCLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQURaLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRWpDLFdBQU0sR0FBNEQsQ0FBQyxFQUM1RixPQUFPLEVBQ1AsSUFBSSxFQUNMLEVBQUUsRUFBRTtZQUNILGlHQUFpRztZQUNqRyw4RkFBOEY7WUFDOUYsd0VBQXdFO1lBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUM7SUFWaUQsQ0FBQzs7dUdBSnpDLFVBQVU7MkZBQVYsVUFBVTsyRkFBVixVQUFVO2tCQUR0QixTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtrR0FFaEIsS0FBSztzQkFBekIsS0FBSzt1QkFBQyxZQUFZO2dCQUNXLFNBQVM7c0JBQXRDLEtBQUs7dUJBQUMscUJBQXFCO2dCQUNRLGVBQWU7c0JBQWxELEtBQUs7dUJBQUMsMkJBQTJCO2dCQUVQLE1BQU07c0JBQWhDLEtBQUs7dUJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2RrU3RlcCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDOHlTdGVwcGVyIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjdXN0b21TdGVwXScgfSlcbmV4cG9ydCBjbGFzcyBDdXN0b21TdGVwIHtcbiAgQElucHV0KCdjdXN0b21TdGVwJykgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCdjdXN0b21TdGVwQ29tcGxldGVkJykgY29tcGxldGVkOiBzdHJpbmc7XG4gIEBJbnB1dCgnY3VzdG9tU3RlcEJ1dHRvbnNEaXNhYmxlZCcpIGJ1dHRvbnNEaXNhYmxlZCA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG4gIEBJbnB1dCgnY3VzdG9tU3RlcE9uTmV4dCcpIG9uTmV4dDogKGV2ZW50OiB7IHN0ZXBwZXI6IEM4eVN0ZXBwZXI7IHN0ZXA6IENka1N0ZXAgfSkgPT4gdm9pZCA9ICh7XG4gICAgc3RlcHBlcixcbiAgICBzdGVwXG4gIH0pID0+IHtcbiAgICAvLyBzdGVwcyB3aXRob3V0IG93biBgb25OZXh0YCBoYW5kbGVyLCBlLmcuIHByZXZpZXcgc3RlcHMgbmVlZCB0byBtYXJrIHRoZW1zZWx2ZXMgYXMgYGNvbXBsZXRlZGAsXG4gICAgLy8gb3RoZXJ3aXNlIHN0ZXBwZXIgd2lsbCBub3QgYWxsb3cgdG8gbW92ZSBmb3J0aCBmcm9tIHRoZW0gYXMgc29vbiBhcyB0aGUgdXNlciBuYXZpZ2F0ZXMgYmFja1xuICAgIC8vIGFuZCB0aGUgYGM4eS1zdGVwcGVyLWJ1dHRvbnNgIGNvbXBvbmVudCBtYXJrcyB0aGUgc3RlcCBhcyBpbmNvbXBsZXRlLlxuICAgIHN0ZXAuY29tcGxldGVkID0gdHJ1ZTtcbiAgICBzdGVwcGVyLm5leHQoKTtcbiAgfTtcbn1cbiJdfQ==
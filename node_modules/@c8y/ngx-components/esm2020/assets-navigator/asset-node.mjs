import { DeviceStatusComponent, gettext, GroupFragment, NavigatorNode } from '@c8y/ngx-components';
import { debounce } from 'lodash-es';
import { BehaviorSubject, Subject } from 'rxjs';
import { Action } from './action.enum';
import { LoadMoreNode } from './load-more-node';
export class AssetNode extends NavigatorNode {
    get hasChildren() {
        return this.root || this.service.isGroup(this.mo);
    }
    get isDevice() {
        return !!this.mo.c8y_IsDevice;
    }
    get isDeviceOrProbablyChildDevice() {
        return this.isDevice || this.isNeitherDeviceOrGroup;
    }
    get isNeitherDeviceOrGroup() {
        return (!this.service.isGroup(this.mo) &&
            !this.service.isDynamicGroup(this.mo) &&
            !this.isDevice &&
            !this.root);
    }
    constructor(service, config = {}) {
        super(config);
        this.service = service;
        this.config = config;
        this.hideDevices = false;
        this.filterQuery$ = new BehaviorSubject('');
        this.showChildDevices = false;
        /**
         * Asset node children (subentries).
         */
        this.children = [];
        this.nodesFetched = new Subject();
        this.root = this.root || false;
        this.hideDevices = config.hideDevices ?? this.hideDevices;
        this.mo = this.mo || {};
        this.path = this.getPath();
        this.draggable = !this.service?.moduleConfig?.disableDragAndDrop && !this.root;
        this.droppable =
            !this.service?.moduleConfig?.disableDragAndDrop && !this.isDeviceOrProbablyChildDevice;
        this.routerLinkExact = this.root;
        this.updateIcon(false);
        this.onUpdateSubscription = this.service
            .onUpdate(this)
            .subscribe(({ data, method }) => this.refresh(data, method));
        this.setLabel();
        this.iconComponent = this.isDeviceOrProbablyChildDevice ? DeviceStatusComponent : undefined;
    }
    getPath() {
        if (this.config.path) {
            return this.config.path;
        }
        return this.root
            ? 'group'
            : this.isDeviceOrProbablyChildDevice
                ? `device/${this.mo.id}`
                : `group/${this.mo.id}`;
    }
    refresh(mo = {}, method = 'GET') {
        if (mo?.id === this.mo.id) {
            this.mo = mo;
            this.setLabel();
        }
        else if (method === 'DELETE') {
            this.parents.forEach((node) => node.refresh());
            return;
        }
        if (this.events) {
            this.events.next(Action.REFRESH);
        }
    }
    setLabel() {
        if (this.config.label || this.root) {
            this.label = this.config.label || gettext('Groups');
            this.translateLabel = true;
        }
        else {
            this.label = this.mo.name || '--';
            this.translateLabel = false;
        }
    }
    click(options = {}) {
        if (this.isDeviceOrProbablyChildDevice && !this.showChildDevices) {
            this.service.preferBreadcrumb(this.parents);
            return;
        }
        this.hookEvents();
        this.updateIcon(options.open);
        if (options.open) {
            this.events.next(Action.FETCH);
        }
    }
    sort() {
        this.children.sort((a, b) => {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    addManagedObject(mo) {
        const { childAdditions } = this.mo;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode(mo, { hideDevices: this.hideDevices }));
        }
    }
    isChildAddition(childAdditions, mo) {
        return (childAdditions && childAdditions.references.some(({ managedObject: { id } }) => id === mo.id));
    }
    destroy() {
        this.onUpdateSubscription.unsubscribe();
    }
    get canDrop() {
        const nodeToMove = this.service.draggedData;
        if (nodeToMove) {
            const shouldGetChildOfItsOwn = !!nodeToMove.find(child => child === this);
            const isAlreadyChild = this.children.some(child => child.mo && child.mo.id === nodeToMove.mo.id);
            const preventMove = this === nodeToMove || shouldGetChildOfItsOwn || isAlreadyChild;
            return this.droppable && !preventMove && this.service.canDropNode(this.root);
        }
        return this.droppable;
    }
    dragStart($event) {
        super.dragStart($event);
        this.service.draggedData = this;
        this.service.rootNode.droppable = !this.isDeviceOrProbablyChildDevice;
    }
    dragEnd($event) {
        super.dragEnd($event);
    }
    async drop($event) {
        const nodeToMove = this.service.draggedData;
        // TODO remove when asset type node can be used on the root level.
        if (this.root && this.isAsset(nodeToMove)) {
            this.service.alert.info(gettext('Asset type node cannot become root node.'));
            this.draggedHover = false;
            this.service.draggedData = undefined;
            return;
        }
        super.drop($event);
        if (this.canDrop) {
            await this.moveNode(nodeToMove);
        }
        else {
            this.draggedHover = false;
            this.service.draggedData = undefined;
        }
    }
    hookEvents() {
        if (!this.events) {
            this.events = new Subject();
            this.events.subscribe(evt => {
                if (!this.loading) {
                    this.handleEvent(evt);
                }
            });
        }
    }
    toString() {
        return AssetNode.NAME;
    }
    /**
     * Checks if the current node has child devices.
     */
    hasChildDevices() {
        return this.mo && this.mo.c8y_IsDevice && this.mo.childDevices.references.length > 0;
    }
    fetch() {
        return this.root
            ? this.service.getRootNodes()
            : this.service.getGroupItems(this.mo.id, this.hideDevices
                ? {
                    query: `$filter=(has(${GroupFragment.groupFragmentType}))$orderby=name`
                }
                : {});
    }
    async updateIcon(open) {
        this.icon = await this.service.icon(
        // if it's root we are going to pass a fake mo to get the same icon as groups
        this.root ? { c8y_IsDeviceGroup: {} } : this.mo, open);
    }
    countChildren() {
        return this.children.length;
    }
    async handleEvent(evt) {
        if (!this.countChildren() && evt === Action.FETCH) {
            this.loading = true;
            this.addNodes(await this.fetch());
            this.loading = false;
        }
        else if (evt === Action.NEXT) {
            this.loadMoreNode.loading = true;
            this.addNodes(await this.paging.next());
            this.loadMoreNode.loading = false;
        }
        else if (evt === Action.REFRESH) {
            this.loading = false;
            this.paging = undefined;
            this.loadMoreNode = undefined;
            this.empty();
            this.events.next(Action.FETCH);
        }
    }
    addNodes(res) {
        if (res.paging) {
            const { currentPage, nextPage, pageSize } = (this.paging = res.paging);
            if (currentPage === 1) {
                this.empty();
            }
            const itemsCount = res.data.length;
            const moreItemsAvailable = !!nextPage && itemsCount === pageSize;
            this.toggleLoadMore(moreItemsAvailable);
        }
        (res.data || res).map(mo => {
            return this.addManagedObject(mo);
        });
        this.events.next(Action.LOADING_DONE);
        this.nodesFetched.next();
    }
    toggleLoadMore(show) {
        if (!this.loadMoreNode && show) {
            this.loadMoreNode = new LoadMoreNode();
            this.add(this.loadMoreNode);
            this.loadMoreNode.click = debounce(() => this.events.next(Action.NEXT), 300, {
                leading: true,
                trailing: false
            });
        }
        if (this.loadMoreNode) {
            this.loadMoreNode.hidden = !show;
        }
    }
    async moveNode(nodeToMove) {
        try {
            const isCopy = await this.showDropConfirm(nodeToMove);
            await this.verifyNodeAccess(nodeToMove);
            await this.addMovedNode(nodeToMove);
            if (!isCopy) {
                await this.removeMovedNode(nodeToMove);
            }
            this.expand();
        }
        catch (ex) {
            if (ex) {
                this.service.alert.addServerFailure(ex);
            }
        }
        finally {
            this.draggedHover = false;
            this.service.draggedData = undefined;
        }
    }
    async showDropConfirm(nodeToMove) {
        this.confirm.title = gettext('Move');
        this.confirm.message = gettext('Do you want to move the group?');
        const buttons = [
            {
                label: gettext('Cancel'),
                action: () => Promise.reject()
            },
            {
                label: gettext('Move'),
                status: 'default',
                action: () => Promise.resolve(false)
            }
        ];
        if (nodeToMove.isDeviceOrProbablyChildDevice) {
            this.confirm.title = gettext('Move or add');
            this.confirm.message = gettext('Do you want to move or add the device?');
            buttons.push({
                label: gettext('Add'),
                status: 'primary',
                action: () => Promise.resolve(true)
            });
        }
        return this.confirm.show(buttons);
    }
    async verifyNodeAccess(nodeToMove) {
        return this.service.inventory.update({ id: nodeToMove.mo.id });
    }
    async addMovedNode(nodeToMove) {
        let mo;
        if (this.root && !this.isAsset(nodeToMove)) {
            mo = (await this.service.inventory.update({
                id: nodeToMove.mo.id,
                type: GroupFragment.groupType
            })).data;
            this.addManagedObject(mo);
            return;
        }
        mo = (await this.service.inventory.childAssetsAdd(nodeToMove.mo, this.mo)).data;
        this.addManagedObject(mo);
    }
    isAsset(nodeToMove) {
        // TODO use isAsset check when https://github.softwareag.com/IOTA/cumulocity-ui/pull/690 is merged.
        // Do not override asset type!
        return nodeToMove.mo?.c8y_IsAsset;
    }
    async removeMovedNode(nodeToMove) {
        for (const parent of nodeToMove.parents) {
            if (parent.mo && parent.mo.type === GroupFragment.dynamicGroupType) {
                break; // smart groups don't need to be changed
            }
            if (parent.root && !this.isAsset(nodeToMove)) {
                await this.service.inventory.update({
                    id: nodeToMove.mo.id,
                    type: GroupFragment.subGroupType
                });
            }
            if (!parent.root) {
                await this.service.inventory.childAssetsRemove(nodeToMove.mo, parent.mo);
            }
            parent.remove(nodeToMove);
        }
    }
}
AssetNode.NAME = 'AssetNode';
//# sourceMappingURL=data:application/json;base64,
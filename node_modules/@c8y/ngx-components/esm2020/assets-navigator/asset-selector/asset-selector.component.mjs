import { Component, EventEmitter, Input, Output, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { InventoryService } from '@c8y/client';
import { GroupNodeService } from './group-node.service';
import { AssetSelectorService } from './asset-selector.service';
import { GroupNode } from './group-node';
import { CONFIG_OPTIONS_DEFAULT } from './asset-selector.model';
import { UnassignedDevicesNode } from './unassigned-devices-node';
import { AssetSelectorBase } from './asset-selector-base';
import { Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./group-node.service";
import * as i2 from "@c8y/client";
import * as i3 from "./asset-selector.service";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "./asset-selector-node.component";
/**
 * Displays a hierarchical tree selector for assets.
 */
export class AssetSelectorComponent extends AssetSelectorBase {
    /**
     * @ignore only DI
     */
    constructor(groupNodeService, inventory, assetSelectorService, cd) {
        super(groupNodeService, inventory, assetSelectorService);
        this.groupNodeService = groupNodeService;
        this.inventory = inventory;
        this.assetSelectorService = assetSelectorService;
        this.cd = cd;
        /**
         * Config object containing all options for the asset selector.
         */
        this.config = {};
        /**
         * Used only for miller-view, displays the column level for the current node.
         * E.g if the index is one, this will be second column.
         */
        this.index = 0;
        /**
         * The asset to use as root.
         */
        this.asset = undefined;
        /**
         * The selected device.
         */
        this.selectedDevice = undefined;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * All currently selected assets.
         */
        this.selectedItems = [];
        this.container = 'body';
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onSelected = new EventEmitter();
        /**
         * Emits if the currently selected asset is cleared.
         */
        this.onClearSelected = new EventEmitter();
        /**
         * Used only for miller view. Emit the selected node and use it as a 'rootNode' for the new column.
         */
        this.onRowSelected = new EventEmitter();
        /**
         * Emits the current loading state of the node.
         */
        this.onLoad = new EventEmitter();
        /**
         * The current filter applied.
         */
        this.filterText = '';
        /**
         * Displays the global search at all times if the miller view is used
         * on root group level.
         */
        this.root = false;
        /**
         * @ignore
         */
        this.unsubscribe$ = new Subject();
    }
    /**
     * Checks when a node was selected, if a new column needs to be added.
     * @param node The node that was clicked.
     * @param index The current index of this node.
     * @returns True if the click was handled and a new column was added.
     */
    handleNextMillerViewColumn(node, index) {
        const nodeCopy = Object.create(node);
        const isSameAsRoot = this.rootNode === node;
        const isUnassignedDevicesNode = node.toString() === UnassignedDevicesNode.NAME;
        const isNewColumnNeeded = !isSameAsRoot && (node.isGroup() || isUnassignedDevicesNode || node.hasChildDevices());
        if (isNewColumnNeeded) {
            this.onRowSelected.emit({ nodeCopy, index });
            return false;
        }
        return true;
    }
    /**
     * @ignore
     */
    async ngOnInit() {
        if (this.index === 0) {
            this.config = { ...CONFIG_OPTIONS_DEFAULT, ...this.config };
        }
        const shouldResetNameFilter = this.rootNode && this.rootNode.mo && this.config.view === 'miller';
        if (shouldResetNameFilter) {
            await this.applyFilter('');
        }
        const isOnlyAssetNodeDefined = this.asset;
        if (isOnlyAssetNodeDefined) {
            this.rootNode = await this.createManagedObjectRootNode(this.asset);
        }
        const isAnyNodeDefined = !this.rootNode && (!this.asset || Object.keys(this.asset).length === 0);
        if (isAnyNodeDefined) {
            this.rootNode = this.createDefaultRootNode();
        }
        if (this.config.showUnassignedDevices &&
            (!this.asset || Object.keys(this.asset).length === 0) &&
            this.rootNode.root) {
            this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                showChildDevices: this.config.showChildDevices
            }));
        }
        this.root = this.rootNode.root;
    }
    async ngOnChanges(changes) {
        if (changes.asset &&
            changes.asset.currentValue &&
            Object.keys(changes.asset.currentValue).length !== 0) {
            this.rootNode = await this.createManagedObjectRootNode(changes.asset.currentValue);
        }
    }
    /**
     * Changes the current root to one level back.
     */
    back() {
        const index = this.index - 1;
        const nodeCopy = Object.create(this.rootNode.parents[0]);
        this.onRowSelected.emit({ nodeCopy, index });
    }
    /**
     * Clears the current filter.
     */
    clearFilters() {
        this.filterText = '';
        this.applyFilter('');
    }
    clearSelectedDevices() {
        this.selectedDevice = undefined;
        this.applyFilter('');
        this.onClearSelected.emit();
    }
    isGroupSelected() {
        if (this.selectedItems.some(selectedNode => selectedNode.id === this.rootNode.mo?.id)) {
            return true;
        }
        return false;
    }
    groupNameFilter(nameFilter, moId, showUnassignedDevices) {
        if (nameFilter) {
            const filterByName = showUnassignedDevices
                ? {
                    __filter: {
                        name: nameFilter
                    },
                    __orderby: [{ name: 1 }]
                }
                : {
                    __filter: {
                        name: nameFilter,
                        __bygroupid: moId
                    }
                };
            return this.assetSelectorService.queriesUtil.buildQuery(filterByName);
        }
        const defaultFilter = {
            __filter: {
                __bygroupid: moId
            },
            __orderby: [{ name: 1 }]
        };
        return this.assetSelectorService.queriesUtil.buildQuery(defaultFilter);
    }
    /**
     * Applies a filter.
     * @param filter The filter to apply.
     */
    async applyFilter(filter) {
        this.rootNode.filterQuery$.next(this.groupNameFilter(filter, this.rootNode.mo.id, this.isUnassignedDevicesNode() ? true : false));
        this.rootNode.refresh();
        this.onLoad.emit({
            loading: true,
            filterText: this.filterText,
            index: this.index,
            selectedDevice: this.selectedDevice
        });
        this.cd.detectChanges();
    }
    /**
     * Check if the UnassignedDevice node is the rootNode.
     */
    isUnassignedDevicesNode() {
        return this.rootNode.toString() === UnassignedDevicesNode.NAME;
    }
    /**
     * Called when the user resets the search result.
     */
    onSearchResultReset(selectedItem) {
        if (selectedItem) {
            this.rootNode = this.createDefaultRootNode();
            if (this.config.showUnassignedDevices) {
                this.rootNode.add(new UnassignedDevicesNode(this.groupNodeService, {
                    showChildDevices: this.config.showChildDevices
                }));
            }
            if (this.config.view === 'miller') {
                this.onRowSelected.emit({ root: true });
            }
            this.rootNode.click({ open: true });
            this.rootNode.nodesFetched
                .pipe(tap(() => this.cd.detectChanges()), takeUntil(this.unsubscribe$))
                .subscribe();
            if (this.config.view === 'tree') {
                this.rootNode.open = true;
            }
        }
    }
    /**
     * Called if the user clicks on a search result.
     */
    async onSearchResultClick(mo) {
        const canSelectNode = this.config.groupsSelectable || !this.groupNodeService.isGroup(mo);
        if (this.config.view === 'miller') {
            this.rootNode = await this.createManagedObjectRootNode(mo);
            this.rootNode.click({ open: true });
            const nodeCopy = Object.create(this.rootNode);
            this.onRowSelected.emit({
                nodeCopy,
                index: 0,
                selectedDevices: this.selectedDevice,
                root: true
            });
        }
        if (!this.config.multi) {
            this.deselectAll();
        }
        if (canSelectNode) {
            this.select(mo);
        }
    }
    onLoading(isLoading) {
        this.onLoad.emit({ loading: isLoading, filterText: this.filterText });
        this.cd.markForCheck();
    }
    onSelect(mo) {
        this.select(mo);
    }
    onDeselect(config) {
        switch (config?.deselectMode) {
            case 'single':
                this.deselect(config.mo);
                this.cd.markForCheck();
                break;
            case 'all':
                this.deselectAll(config.mo);
                break;
        }
    }
}
AssetSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetSelectorComponent, deps: [{ token: i1.GroupNodeService }, { token: i2.InventoryService }, { token: i3.AssetSelectorService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AssetSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AssetSelectorComponent, selector: "c8y-asset-selector", inputs: { config: "config", active: "active", index: "index", asset: "asset", selectedDevice: "selectedDevice", selected: "selected", rootNode: "rootNode", selectedItems: "selectedItems", container: "container" }, outputs: { onSelected: "onSelected", onClearSelected: "onClearSelected", onRowSelected: "onRowSelected", onLoad: "onLoad" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => AssetSelectorComponent)
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => AssetSelectorComponent),
            multi: true
        }
    ], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"bg-inherit p-t-8 p-b-8 separator-bottom\"\n  [ngStyle]=\"{ 'z-index': config.singleColumn && config.search ? '30' : '20' }\"\n  [ngClass]=\"{ 'p-l-16 p-absolute p-r-16': config.view === 'miller', 'sticky-top': config.multi }\"\n  *ngIf=\"!selectedDevice && index === 0 && (config.search || config.singleColumn)\"\n>\n  <p\n    class=\"text-medium\"\n    [ngClass]=\"{ 'm-b-4': config.search && root }\"\n  >\n    {{ config.label | translate }}\n  </p>\n  <c8y-search-input\n    *ngIf=\"config.search && root\"\n    (onClick)=\"onSearchResultClick($event)\"\n    (reset)=\"onSearchResultReset($event)\"\n    [mode]=\"'select'\"\n    [container]=\"container\"\n    [groupsOnly]=\"config.groupsOnly\"\n  ></c8y-search-input>\n  <div\n    class=\"bg-component p-t-4 d-flex flex-wrap gap-4\"\n    *ngIf=\"config.multi\"\n  >\n    <span\n      class=\"label label-info chip\"\n      *ngFor=\"let selectedItem of selected\"\n    >\n      <button\n        class=\"btn btn-xs btn-clean text-10\"\n        title=\"{{ selectedItem.name }}\"\n        type=\"button\"\n        (click)=\"deselect(selectedItem)\"\n      >\n        <i c8yIcon=\"times\"></i>\n      </button>\n      {{ selectedItem.name }}\n    </span>\n  </div>\n</div>\n\n<div\n  class=\"p-r-16\"\n  *ngIf=\"selectedDevice\"\n>\n  <div class=\"d-flex p-b-4\">\n    <p\n      class=\"text-medium p-t-8 m-r-8\"\n      *ngIf=\"selectedDevice; else multiAssets\"\n    >\n      {{ 'Selected asset' | translate }}\n    </p>\n    <ng-template #multiAssets>\n      <p class=\"text-medium m-r-8\">{{ 'Selected assets' | translate }}</p>\n    </ng-template>\n    <button\n      class=\"btn btn-default btn-xs a-s-center m-t-4 m-l-auto\"\n      title=\"{{ 'Change' | translate }}\"\n      type=\"button\"\n      (click)=\"clearSelectedDevices()\"\n    >\n      {{ 'Change' | translate }}\n    </button>\n  </div>\n  <div class=\"d-flex\">\n    <i\n      class=\"text-success p-l-0 p-r-8\"\n      [c8yIcon]=\"'check-circle'\"\n    ></i>\n    <i\n      class=\"m-r-4 icon-20\"\n      [c8yIcon]=\"(selectedDevice | getGroupIcon | async)\"\n    ></i>\n    <span>{{ selectedDevice.name }}</span>\n  </div>\n</div>\n\n<!-- miller columns header -->\n<div\n  class=\"miller-column__header sticky-top bg-inherit separator-bottom\"\n  [ngStyle]=\"{ top: config.search && !config.singleColumn ? '72px' : '0' }\"\n  *ngIf=\"\n    config.view === 'miller' &&\n    ((config.showFilter && !rootNode.root) || config.columnHeaders || config.singleColumn) &&\n    !selectedDevice\n  \"\n  [ngClass]=\"{ 'm-t-72 p-t-8': config.search, 'm-t-32': !config.search && config.singleColumn }\"\n>\n  <p\n    class=\"text-12 text-muted text-truncate m-b-4\"\n    title=\"{{ rootNode.breadcrumb || rootNode.label | translate }}\"\n    *ngIf=\"config.singleColumn && index !== 0\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"home\"\n    ></i>\n    {{ rootNode.breadcrumb || rootNode.label | translate }}\n  </p>\n  <div\n    class=\"d-flex a-i-center\"\n    *ngIf=\"config.columnHeaders || config.singleColumn\"\n  >\n    <button\n      class=\"btn btn-default btn-xs m-r-8 p-t-0 p-b-0 p-l-4 p-r-4 l-h-1\"\n      title=\"{{ 'Back' | translate }}\"\n      type=\"button\"\n      *ngIf=\"config.singleColumn && !rootNode.root && index !== 0\"\n      (click)=\"back()\"\n    >\n      <i c8yIcon=\"angle-left\"></i>\n    </button>\n    <label\n      class=\"c8y-radio checkbox-inline m-r-8\"\n      *ngIf=\"!rootNode.root && index === 0 && (config.groupsSelectable || !rootNode.isGroup())\"\n    >\n      <input\n        title=\"{{ 'Select group' | translate }}\"\n        type=\"radio\"\n        (change)=\"select(rootNode.mo)\"\n        [checked]=\"isGroupSelected()\"\n      />\n      <span></span>\n    </label>\n\n    <i\n      class=\"icon-20 c8y-icon-duocolor m-r-4\"\n      [c8yIcon]=\"(this.rootNode.mo | getGroupIcon: true: this.rootNode.icon | async)\"\n      *ngIf=\"config.columnHeaders && (config.singleColumn || (!rootNode.root && index === 0))\"\n    ></i>\n    <p\n      class=\"text-truncate\"\n      title=\"{{ rootNode.label | translate }}\"\n      *ngIf=\"config.columnHeaders\"\n      [ngClass]=\"{\n        'text-label-small': !config.singleColumn,\n        'text-medium': config.singleColumn\n      }\"\n    >\n      {{ rootNode.label | translate }}\n    </p>\n  </div>\n\n  <div\n    *ngIf=\"!rootNode.root && config.showFilter\"\n    [ngClass]=\"{ 'p-t-4': config.columnHeaders }\"\n  >\n    <div class=\"input-group input-group-sm input-group-search\">\n      <input\n        class=\"form-control\"\n        placeholder=\"{{ 'Filter this column\u2026' | translate }}\"\n        [(ngModel)]=\"filterText\"\n        (keyup.enter)=\"applyFilter('*' + filterText + '*')\"\n      />\n      <span class=\"input-group-btn\">\n        <button\n          class=\"btn btn-dot p-r-8 p-l-4\"\n          title=\"{{ 'Apply filter' | translate }}\"\n          type=\"button\"\n          (click)=\"applyFilter('*' + filterText + '*')\"\n        >\n          <i c8yIcon=\"filter\"></i>\n        </button>\n        <button\n          class=\"btn btn-dot p-r-8 p-l-4\"\n          title=\" {{ 'Clear filters' | translate }}\"\n          type=\"button\"\n          (click)=\"clearFilters()\"\n          *ngIf=\"filterText.length\"\n        >\n          <i c8yIcon=\"times\"></i>\n        </button>\n      </span>\n    </div>\n  </div>\n</div>\n\n<c8y-asset-selector-node\n  class=\"d-block bg-inherit p-relative\"\n  style=\"z-index: 9\"\n  *ngIf=\"rootNode && !selectedDevice\"\n  [node]=\"rootNode\"\n  [rootNode]=\"rootNode\"\n  [preselected]=\"selected\"\n  [multi]=\"config.multi\"\n  [view]=\"config.view\"\n  [index]=\"index\"\n  [selectedItems]=\"selectedItems\"\n  [active]=\"active\"\n  [handleNextMillerViewColumn]=\"handleNextMillerViewColumn.bind(this)\"\n  (isLoadingState)=\"onLoading($event)\"\n  (onSelect)=\"onSelect($event)\"\n  (onDeselect)=\"onDeselect($event)\"\n  [ngClass]=\"{ 'collapse show': !rootNode.root && !rootNode.hidden && config.view !== 'miller' }\"\n></c8y-asset-selector-node>\n", dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i4.SearchInputComponent, selector: "c8y-search-input", inputs: ["mode", "enableCustomTemplatePlaceholder", "customPlaceholder", "externalTerm", "customDataQuery", "container", "groupsOnly"], outputs: ["filter", "search", "reset", "onClick"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i7.AssetSelectorNodeComponent, selector: "c8y-asset-selector-node", inputs: ["node", "rootNode", "preselected", "showPath", "multi", "view", "index", "active", "selectedItems", "handleNextMillerViewColumn"], outputs: ["isLoadingState", "onSelect", "onDeselect"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.GetGroupIconPipe, name: "getGroupIcon" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-asset-selector', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => AssetSelectorComponent)
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => AssetSelectorComponent),
                            multi: true
                        }
                    ], template: "<div\n  class=\"bg-inherit p-t-8 p-b-8 separator-bottom\"\n  [ngStyle]=\"{ 'z-index': config.singleColumn && config.search ? '30' : '20' }\"\n  [ngClass]=\"{ 'p-l-16 p-absolute p-r-16': config.view === 'miller', 'sticky-top': config.multi }\"\n  *ngIf=\"!selectedDevice && index === 0 && (config.search || config.singleColumn)\"\n>\n  <p\n    class=\"text-medium\"\n    [ngClass]=\"{ 'm-b-4': config.search && root }\"\n  >\n    {{ config.label | translate }}\n  </p>\n  <c8y-search-input\n    *ngIf=\"config.search && root\"\n    (onClick)=\"onSearchResultClick($event)\"\n    (reset)=\"onSearchResultReset($event)\"\n    [mode]=\"'select'\"\n    [container]=\"container\"\n    [groupsOnly]=\"config.groupsOnly\"\n  ></c8y-search-input>\n  <div\n    class=\"bg-component p-t-4 d-flex flex-wrap gap-4\"\n    *ngIf=\"config.multi\"\n  >\n    <span\n      class=\"label label-info chip\"\n      *ngFor=\"let selectedItem of selected\"\n    >\n      <button\n        class=\"btn btn-xs btn-clean text-10\"\n        title=\"{{ selectedItem.name }}\"\n        type=\"button\"\n        (click)=\"deselect(selectedItem)\"\n      >\n        <i c8yIcon=\"times\"></i>\n      </button>\n      {{ selectedItem.name }}\n    </span>\n  </div>\n</div>\n\n<div\n  class=\"p-r-16\"\n  *ngIf=\"selectedDevice\"\n>\n  <div class=\"d-flex p-b-4\">\n    <p\n      class=\"text-medium p-t-8 m-r-8\"\n      *ngIf=\"selectedDevice; else multiAssets\"\n    >\n      {{ 'Selected asset' | translate }}\n    </p>\n    <ng-template #multiAssets>\n      <p class=\"text-medium m-r-8\">{{ 'Selected assets' | translate }}</p>\n    </ng-template>\n    <button\n      class=\"btn btn-default btn-xs a-s-center m-t-4 m-l-auto\"\n      title=\"{{ 'Change' | translate }}\"\n      type=\"button\"\n      (click)=\"clearSelectedDevices()\"\n    >\n      {{ 'Change' | translate }}\n    </button>\n  </div>\n  <div class=\"d-flex\">\n    <i\n      class=\"text-success p-l-0 p-r-8\"\n      [c8yIcon]=\"'check-circle'\"\n    ></i>\n    <i\n      class=\"m-r-4 icon-20\"\n      [c8yIcon]=\"(selectedDevice | getGroupIcon | async)\"\n    ></i>\n    <span>{{ selectedDevice.name }}</span>\n  </div>\n</div>\n\n<!-- miller columns header -->\n<div\n  class=\"miller-column__header sticky-top bg-inherit separator-bottom\"\n  [ngStyle]=\"{ top: config.search && !config.singleColumn ? '72px' : '0' }\"\n  *ngIf=\"\n    config.view === 'miller' &&\n    ((config.showFilter && !rootNode.root) || config.columnHeaders || config.singleColumn) &&\n    !selectedDevice\n  \"\n  [ngClass]=\"{ 'm-t-72 p-t-8': config.search, 'm-t-32': !config.search && config.singleColumn }\"\n>\n  <p\n    class=\"text-12 text-muted text-truncate m-b-4\"\n    title=\"{{ rootNode.breadcrumb || rootNode.label | translate }}\"\n    *ngIf=\"config.singleColumn && index !== 0\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"home\"\n    ></i>\n    {{ rootNode.breadcrumb || rootNode.label | translate }}\n  </p>\n  <div\n    class=\"d-flex a-i-center\"\n    *ngIf=\"config.columnHeaders || config.singleColumn\"\n  >\n    <button\n      class=\"btn btn-default btn-xs m-r-8 p-t-0 p-b-0 p-l-4 p-r-4 l-h-1\"\n      title=\"{{ 'Back' | translate }}\"\n      type=\"button\"\n      *ngIf=\"config.singleColumn && !rootNode.root && index !== 0\"\n      (click)=\"back()\"\n    >\n      <i c8yIcon=\"angle-left\"></i>\n    </button>\n    <label\n      class=\"c8y-radio checkbox-inline m-r-8\"\n      *ngIf=\"!rootNode.root && index === 0 && (config.groupsSelectable || !rootNode.isGroup())\"\n    >\n      <input\n        title=\"{{ 'Select group' | translate }}\"\n        type=\"radio\"\n        (change)=\"select(rootNode.mo)\"\n        [checked]=\"isGroupSelected()\"\n      />\n      <span></span>\n    </label>\n\n    <i\n      class=\"icon-20 c8y-icon-duocolor m-r-4\"\n      [c8yIcon]=\"(this.rootNode.mo | getGroupIcon: true: this.rootNode.icon | async)\"\n      *ngIf=\"config.columnHeaders && (config.singleColumn || (!rootNode.root && index === 0))\"\n    ></i>\n    <p\n      class=\"text-truncate\"\n      title=\"{{ rootNode.label | translate }}\"\n      *ngIf=\"config.columnHeaders\"\n      [ngClass]=\"{\n        'text-label-small': !config.singleColumn,\n        'text-medium': config.singleColumn\n      }\"\n    >\n      {{ rootNode.label | translate }}\n    </p>\n  </div>\n\n  <div\n    *ngIf=\"!rootNode.root && config.showFilter\"\n    [ngClass]=\"{ 'p-t-4': config.columnHeaders }\"\n  >\n    <div class=\"input-group input-group-sm input-group-search\">\n      <input\n        class=\"form-control\"\n        placeholder=\"{{ 'Filter this column\u2026' | translate }}\"\n        [(ngModel)]=\"filterText\"\n        (keyup.enter)=\"applyFilter('*' + filterText + '*')\"\n      />\n      <span class=\"input-group-btn\">\n        <button\n          class=\"btn btn-dot p-r-8 p-l-4\"\n          title=\"{{ 'Apply filter' | translate }}\"\n          type=\"button\"\n          (click)=\"applyFilter('*' + filterText + '*')\"\n        >\n          <i c8yIcon=\"filter\"></i>\n        </button>\n        <button\n          class=\"btn btn-dot p-r-8 p-l-4\"\n          title=\" {{ 'Clear filters' | translate }}\"\n          type=\"button\"\n          (click)=\"clearFilters()\"\n          *ngIf=\"filterText.length\"\n        >\n          <i c8yIcon=\"times\"></i>\n        </button>\n      </span>\n    </div>\n  </div>\n</div>\n\n<c8y-asset-selector-node\n  class=\"d-block bg-inherit p-relative\"\n  style=\"z-index: 9\"\n  *ngIf=\"rootNode && !selectedDevice\"\n  [node]=\"rootNode\"\n  [rootNode]=\"rootNode\"\n  [preselected]=\"selected\"\n  [multi]=\"config.multi\"\n  [view]=\"config.view\"\n  [index]=\"index\"\n  [selectedItems]=\"selectedItems\"\n  [active]=\"active\"\n  [handleNextMillerViewColumn]=\"handleNextMillerViewColumn.bind(this)\"\n  (isLoadingState)=\"onLoading($event)\"\n  (onSelect)=\"onSelect($event)\"\n  (onDeselect)=\"onDeselect($event)\"\n  [ngClass]=\"{ 'collapse show': !rootNode.root && !rootNode.hidden && config.view !== 'miller' }\"\n></c8y-asset-selector-node>\n" }]
        }], ctorParameters: function () { return [{ type: i1.GroupNodeService }, { type: i2.InventoryService }, { type: i3.AssetSelectorService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { config: [{
                type: Input
            }], active: [{
                type: Input
            }], index: [{
                type: Input
            }], asset: [{
                type: Input
            }], selectedDevice: [{
                type: Input
            }], selected: [{
                type: Input
            }], rootNode: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], container: [{
                type: Input
            }], onSelected: [{
                type: Output
            }], onClearSelected: [{
                type: Output
            }], onRowSelected: [{
                type: Output
            }], onLoad: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { gettext } from '@c8y/ngx-components';
import { Action } from '../action.enum';
import { GroupNode } from './group-node';
export class UnassignedDevicesNode extends GroupNode {
    constructor(service, config = {}) {
        super(service, config);
        this.service = service;
        this.label = gettext('Unassigned devices');
        this.icon = 'delete-folder';
        this.groupsSelectable = false;
        this.groupsOnly = false;
        this.showChildDevices = false;
        this.mo = {};
        this.priority = Infinity;
        this.showChildDevices = config.showChildDevices || false;
    }
    click(options = {}) {
        this.hookEvents();
        if (options.open) {
            this.events.next(Action.FETCH);
        }
    }
    addManagedObject(mo) {
        this.add(this.service.createChildNode({ mo, showChildDevices: this.showChildDevices }));
    }
    fetch() {
        return this.service.getUnassignedDevices(this.showChildDevices, this.filterQuery$.value);
    }
    isGroup() {
        return true;
    }
    toString() {
        return UnassignedDevicesNode.NAME;
    }
    setLabel() {
        // do nothing, as this item has a hardcoded label.
        // This is only to overwrite the default inherited method.
        this.label = this.label;
    }
    async updateIcon() {
        // do nothing, as this item has a hardcoded label.
        // This is only to overwrite the default inherited method.
        this.icon = this.icon;
    }
}
UnassignedDevicesNode.NAME = 'UnassignedDevicesNode';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ25lZC1kZXZpY2VzLW5vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0LXNlbGVjdG9yL3VuYXNzaWduZWQtZGV2aWNlcy1ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHekMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFNBQVM7SUFTbEQsWUFBc0IsT0FBeUIsRUFBRSxTQUEwQixFQUFFO1FBQzNFLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFESCxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQVAvQyxVQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdEMsU0FBSSxHQUFHLGVBQWUsQ0FBQztRQUN2QixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDekIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDekIsT0FBRSxHQUFHLEVBQUUsQ0FBQztRQUlOLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDO0lBQzNELENBQUM7SUFFRCxLQUFLLENBQUMsVUFBd0IsRUFBRTtRQUM5QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxRQUFRO1FBQ04sa0RBQWtEO1FBQ2xELDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ2Qsa0RBQWtEO1FBQ2xELDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7QUEvQ00sMEJBQUksR0FBRyx1QkFBdUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWNrT3B0aW9ucywgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9uLmVudW0nO1xuaW1wb3J0IHsgR3JvdXBOb2RlQ29uZmlnIH0gZnJvbSAnLi9hc3NldC1zZWxlY3Rvci5tb2RlbCc7XG5pbXBvcnQgeyBHcm91cE5vZGUgfSBmcm9tICcuL2dyb3VwLW5vZGUnO1xuaW1wb3J0IHsgR3JvdXBOb2RlU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtbm9kZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFVuYXNzaWduZWREZXZpY2VzTm9kZSBleHRlbmRzIEdyb3VwTm9kZSB7XG4gIHN0YXRpYyBOQU1FID0gJ1VuYXNzaWduZWREZXZpY2VzTm9kZSc7XG4gIGxhYmVsID0gZ2V0dGV4dCgnVW5hc3NpZ25lZCBkZXZpY2VzJyk7XG4gIGljb24gPSAnZGVsZXRlLWZvbGRlcic7XG4gIGdyb3Vwc1NlbGVjdGFibGUgPSBmYWxzZTtcbiAgZ3JvdXBzT25seSA9IGZhbHNlO1xuICBzaG93Q2hpbGREZXZpY2VzID0gZmFsc2U7XG4gIG1vID0ge307XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNlcnZpY2U6IEdyb3VwTm9kZVNlcnZpY2UsIGNvbmZpZzogR3JvdXBOb2RlQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihzZXJ2aWNlLCBjb25maWcpO1xuICAgIHRoaXMucHJpb3JpdHkgPSBJbmZpbml0eTtcbiAgICB0aGlzLnNob3dDaGlsZERldmljZXMgPSBjb25maWcuc2hvd0NoaWxkRGV2aWNlcyB8fCBmYWxzZTtcbiAgfVxuXG4gIGNsaWNrKG9wdGlvbnM6IENsaWNrT3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5ob29rRXZlbnRzKCk7XG4gICAgaWYgKG9wdGlvbnMub3Blbikge1xuICAgICAgdGhpcy5ldmVudHMubmV4dChBY3Rpb24uRkVUQ0gpO1xuICAgIH1cbiAgfVxuXG4gIGFkZE1hbmFnZWRPYmplY3QobW8pIHtcbiAgICB0aGlzLmFkZCh0aGlzLnNlcnZpY2UuY3JlYXRlQ2hpbGROb2RlKHsgbW8sIHNob3dDaGlsZERldmljZXM6IHRoaXMuc2hvd0NoaWxkRGV2aWNlcyB9KSk7XG4gIH1cblxuICBmZXRjaCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmdldFVuYXNzaWduZWREZXZpY2VzKHRoaXMuc2hvd0NoaWxkRGV2aWNlcywgdGhpcy5maWx0ZXJRdWVyeSQudmFsdWUpO1xuICB9XG5cbiAgaXNHcm91cCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBVbmFzc2lnbmVkRGV2aWNlc05vZGUuTkFNRTtcbiAgfVxuXG4gIHNldExhYmVsKCkge1xuICAgIC8vIGRvIG5vdGhpbmcsIGFzIHRoaXMgaXRlbSBoYXMgYSBoYXJkY29kZWQgbGFiZWwuXG4gICAgLy8gVGhpcyBpcyBvbmx5IHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBpbmhlcml0ZWQgbWV0aG9kLlxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmxhYmVsO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlSWNvbigpIHtcbiAgICAvLyBkbyBub3RoaW5nLCBhcyB0aGlzIGl0ZW0gaGFzIGEgaGFyZGNvZGVkIGxhYmVsLlxuICAgIC8vIFRoaXMgaXMgb25seSB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgaW5oZXJpdGVkIG1ldGhvZC5cbiAgICB0aGlzLmljb24gPSB0aGlzLmljb247XG4gIH1cbn1cbiJdfQ==
import { GroupFragment } from '@c8y/ngx-components';
import { AssetNode } from '../asset-node';
export class GroupNode extends AssetNode {
    /**
     * Creates a new node which shows only groups.
     *
     * @param service The service to use.
     * @param config  The default configuration of the node.
     * @param groupsOnly Set this true, if only groups should be shown.
     * @param selectable Set this true, if it is selectable.
     */
    constructor(service, config = {}) {
        super(service, config);
        this.service = service;
        /**
         * Set this true, if only groups should be shown.
         */
        this.groupsOnly = false;
        /**
         * Set this true, if it groups are also selectable.
         */
        this.groupsSelectable = false;
        /**
         * Devices with children can be selected to show their child devices.
         */
        this.showChildDevices = false;
        /**
         * Group node children (subentries).
         */
        this.children = [];
        this.groupsOnly = config.groupsOnly || false;
        this.groupsSelectable = config.groupsSelectable || false;
        this.showChildDevices = config.showChildDevices || false;
    }
    /**
     * Adds the MO as a child node.
     * @param mo ManagedObject
     */
    addManagedObject(mo) {
        const { childAdditions } = this.mo;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode({
                mo,
                groupsOnly: this.groupsOnly,
                groupsSelectable: this.groupsSelectable,
                showChildDevices: this.showChildDevices
            }));
        }
    }
    /**
     * Counts the number of children for the current node (with the exception of the UnassignedDevicesNode).
     */
    countChildren() {
        return this.children.filter(value => value.toString() !== 'UnassignedDevicesNode').length;
    }
    /**
     * Removes all child nodes except the UnassignedDevicesNode.
     */
    empty() {
        this.children = this.children.filter(value => value.toString() === 'UnassignedDevicesNode');
    }
    fetch() {
        const isRoot = this.root;
        const isDevice = this.mo.c8y_IsDevice;
        return isRoot
            ? this.service.getRootNodes()
            : isDevice
                ? this.service.getDeviceChildren(this.mo.id, {}, this.filterQuery$.value, this.showChildDevices)
                : this.service.getGroupItems(this.mo.id, this.groupsOnly
                    ? {
                        query: `$filter=(has(${GroupFragment.groupFragmentType}))`
                    }
                    : {}, this.showChildDevices, this.filterQuery$.value);
    }
    toString() {
        return GroupNode.NAME;
    }
    isGroup() {
        return this.mo && this.service.isGroup(this.mo);
    }
}
GroupNode.NAME = 'GroupNode';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Fzc2V0cy1uYXZpZ2F0b3IvYXNzZXQtc2VsZWN0b3IvZ3JvdXAtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxQyxNQUFNLE9BQU8sU0FBVSxTQUFRLFNBQVM7SUFzQnRDOzs7Ozs7O09BT0c7SUFFSCxZQUFzQixPQUF5QixFQUFFLFNBQTBCLEVBQUU7UUFDM0UsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQURILFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBNUIvQzs7V0FFRztRQUNILGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFbkI7O1dBRUc7UUFDSCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDekI7O1dBRUc7UUFDSCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFFekI7O1dBRUc7UUFDSCxhQUFRLEdBQWdCLEVBQUUsQ0FBQztRQWF6QixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDO1FBQ3pELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDO0lBQzNELENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsR0FBRyxDQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO2dCQUMzQixFQUFFO2dCQUNGLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtnQkFDdkMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjthQUN4QyxDQUFDLENBQ0gsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDNUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssdUJBQXVCLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDdEMsT0FBTyxNQUFNO1lBQ1gsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzdCLENBQUMsQ0FBQyxRQUFRO2dCQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDVixFQUFFLEVBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDdEI7Z0JBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDVixJQUFJLENBQUMsVUFBVTtvQkFDYixDQUFDLENBQUM7d0JBQ0UsS0FBSyxFQUFFLGdCQUFnQixhQUFhLENBQUMsaUJBQWlCLElBQUk7cUJBQzNEO29CQUNILENBQUMsQ0FBQyxFQUFFLEVBQ04sSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FDeEIsQ0FBQztJQUNSLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDOztBQW5HTSxjQUFJLEdBQUcsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXBGcmFnbWVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgR3JvdXBOb2RlU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFzc2V0Tm9kZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUnO1xuaW1wb3J0IHsgR3JvdXBOb2RlQ29uZmlnIH0gZnJvbSAnLi9hc3NldC1zZWxlY3Rvci5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBHcm91cE5vZGUgZXh0ZW5kcyBBc3NldE5vZGUge1xuICBzdGF0aWMgTkFNRSA9ICdHcm91cE5vZGUnO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0cnVlLCBpZiBvbmx5IGdyb3VwcyBzaG91bGQgYmUgc2hvd24uXG4gICAqL1xuICBncm91cHNPbmx5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRydWUsIGlmIGl0IGdyb3VwcyBhcmUgYWxzbyBzZWxlY3RhYmxlLlxuICAgKi9cbiAgZ3JvdXBzU2VsZWN0YWJsZSA9IGZhbHNlO1xuICAvKipcbiAgICogRGV2aWNlcyB3aXRoIGNoaWxkcmVuIGNhbiBiZSBzZWxlY3RlZCB0byBzaG93IHRoZWlyIGNoaWxkIGRldmljZXMuXG4gICAqL1xuICBzaG93Q2hpbGREZXZpY2VzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEdyb3VwIG5vZGUgY2hpbGRyZW4gKHN1YmVudHJpZXMpLlxuICAgKi9cbiAgY2hpbGRyZW46IEdyb3VwTm9kZVtdID0gW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgbm9kZSB3aGljaCBzaG93cyBvbmx5IGdyb3Vwcy5cbiAgICpcbiAgICogQHBhcmFtIHNlcnZpY2UgVGhlIHNlcnZpY2UgdG8gdXNlLlxuICAgKiBAcGFyYW0gY29uZmlnICBUaGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9mIHRoZSBub2RlLlxuICAgKiBAcGFyYW0gZ3JvdXBzT25seSBTZXQgdGhpcyB0cnVlLCBpZiBvbmx5IGdyb3VwcyBzaG91bGQgYmUgc2hvd24uXG4gICAqIEBwYXJhbSBzZWxlY3RhYmxlIFNldCB0aGlzIHRydWUsIGlmIGl0IGlzIHNlbGVjdGFibGUuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBHcm91cE5vZGVTZXJ2aWNlLCBjb25maWc6IEdyb3VwTm9kZUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoc2VydmljZSwgY29uZmlnKTtcbiAgICB0aGlzLmdyb3Vwc09ubHkgPSBjb25maWcuZ3JvdXBzT25seSB8fCBmYWxzZTtcbiAgICB0aGlzLmdyb3Vwc1NlbGVjdGFibGUgPSBjb25maWcuZ3JvdXBzU2VsZWN0YWJsZSB8fCBmYWxzZTtcbiAgICB0aGlzLnNob3dDaGlsZERldmljZXMgPSBjb25maWcuc2hvd0NoaWxkRGV2aWNlcyB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBNTyBhcyBhIGNoaWxkIG5vZGUuXG4gICAqIEBwYXJhbSBtbyBNYW5hZ2VkT2JqZWN0XG4gICAqL1xuICBhZGRNYW5hZ2VkT2JqZWN0KG1vKSB7XG4gICAgY29uc3QgeyBjaGlsZEFkZGl0aW9ucyB9ID0gdGhpcy5tbztcbiAgICBpZiAoIXRoaXMuaXNDaGlsZEFkZGl0aW9uKGNoaWxkQWRkaXRpb25zLCBtbykpIHtcbiAgICAgIHRoaXMuYWRkKFxuICAgICAgICB0aGlzLnNlcnZpY2UuY3JlYXRlQ2hpbGROb2RlKHtcbiAgICAgICAgICBtbyxcbiAgICAgICAgICBncm91cHNPbmx5OiB0aGlzLmdyb3Vwc09ubHksXG4gICAgICAgICAgZ3JvdXBzU2VsZWN0YWJsZTogdGhpcy5ncm91cHNTZWxlY3RhYmxlLFxuICAgICAgICAgIHNob3dDaGlsZERldmljZXM6IHRoaXMuc2hvd0NoaWxkRGV2aWNlc1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZm9yIHRoZSBjdXJyZW50IG5vZGUgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgVW5hc3NpZ25lZERldmljZXNOb2RlKS5cbiAgICovXG4gIGNvdW50Q2hpbGRyZW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5maWx0ZXIodmFsdWUgPT4gdmFsdWUudG9TdHJpbmcoKSAhPT0gJ1VuYXNzaWduZWREZXZpY2VzTm9kZScpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjaGlsZCBub2RlcyBleGNlcHQgdGhlIFVuYXNzaWduZWREZXZpY2VzTm9kZS5cbiAgICovXG4gIGVtcHR5KCkge1xuICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZS50b1N0cmluZygpID09PSAnVW5hc3NpZ25lZERldmljZXNOb2RlJyk7XG4gIH1cblxuICBmZXRjaCgpIHtcbiAgICBjb25zdCBpc1Jvb3QgPSB0aGlzLnJvb3Q7XG4gICAgY29uc3QgaXNEZXZpY2UgPSB0aGlzLm1vLmM4eV9Jc0RldmljZTtcbiAgICByZXR1cm4gaXNSb290XG4gICAgICA/IHRoaXMuc2VydmljZS5nZXRSb290Tm9kZXMoKVxuICAgICAgOiBpc0RldmljZVxuICAgICAgPyB0aGlzLnNlcnZpY2UuZ2V0RGV2aWNlQ2hpbGRyZW4oXG4gICAgICAgICAgdGhpcy5tby5pZCxcbiAgICAgICAgICB7fSxcbiAgICAgICAgICB0aGlzLmZpbHRlclF1ZXJ5JC52YWx1ZSxcbiAgICAgICAgICB0aGlzLnNob3dDaGlsZERldmljZXNcbiAgICAgICAgKVxuICAgICAgOiB0aGlzLnNlcnZpY2UuZ2V0R3JvdXBJdGVtcyhcbiAgICAgICAgICB0aGlzLm1vLmlkLFxuICAgICAgICAgIHRoaXMuZ3JvdXBzT25seVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IGAkZmlsdGVyPShoYXMoJHtHcm91cEZyYWdtZW50Lmdyb3VwRnJhZ21lbnRUeXBlfSkpYFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9LFxuICAgICAgICAgIHRoaXMuc2hvd0NoaWxkRGV2aWNlcyxcbiAgICAgICAgICB0aGlzLmZpbHRlclF1ZXJ5JC52YWx1ZVxuICAgICAgICApO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEdyb3VwTm9kZS5OQU1FO1xuICB9XG5cbiAgaXNHcm91cCgpIHtcbiAgICByZXR1cm4gdGhpcy5tbyAmJiB0aGlzLnNlcnZpY2UuaXNHcm91cCh0aGlzLm1vKTtcbiAgfVxufVxuIl19
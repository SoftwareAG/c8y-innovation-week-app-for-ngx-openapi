import { EventEmitter } from '@angular/core';
export class AssetSelectorBase {
    constructor(groupNodeService, inventory, assetSelectorService) {
        this.groupNodeService = groupNodeService;
        this.inventory = inventory;
        this.assetSelectorService = assetSelectorService;
        /**
         * Config object containing all options for the asset selector.
         */
        this.config = {};
        /**
         * The loading state of the current node.
         */
        this.isLoading = false;
        /**
         * Emit the selected asset or assets.
         */
        this.onSelected = new EventEmitter();
        /**
         * Emits if the currently selected asset is cleared.
         */
        this.onClearSelected = new EventEmitter();
    }
    /**
     * @ignore
     */
    validate(control) {
        if (this.config.required && (!control.value || control.value.length === 0)) {
            return { required: true };
        }
        return null;
    }
    /**
     * @ignore
     */
    writeValue(obj) {
        this.selected = this.assetSelectorService.normalizeValue(obj, this.config.modelMode);
    }
    /**
     * @ignore
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @ignore
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @ignore
     */
    doBlur() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * Deselects all expect the given one.
     * @param selectedMo The selected asset (optional, if empty -> just deselect all).
     */
    deselectAll(selectedMo) {
        this.selected = [];
        if (selectedMo) {
            this.selected = [this.assetSelectorService.simplifyModel(selectedMo, this.config.modelMode)];
        }
        this.emitChange(this.selected, selectedMo, !!selectedMo);
        this.doBlur();
    }
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    select(selectedMo) {
        if (!this.config.multi) {
            this.selected = [];
        }
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(this.assetSelectorService.simplifyModel(selectedMo, this.config.modelMode));
        }
        this.emitChange(this.selected, selectedMo, true);
        this.doBlur();
    }
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    deselect(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.emitChange(this.selected, selectedMo, false);
        this.doBlur();
    }
    /**
     * Returns the index of the currently selected item.
     * @param selected All selected items
     * @param selectedMo The new selected item-
     * @returns An index, or -1 if not found.
     */
    getIndexOfSelected(selected, selectedMo) {
        return selected.findIndex(mo => mo.id === selectedMo.id);
    }
    emitChange(selected, item, isSelected) {
        const changes = this.config.multi ? selected : selected[0];
        if (this.onChange) {
            this.onChange(changes);
        }
        this.onSelected.emit({ items: changes, change: { item, isSelected } });
    }
    createDefaultRootNode() {
        return this.groupNodeService.createGroupNode({
            root: true,
            groupsSelectable: this.config.groupsSelectable,
            groupsOnly: this.config.groupsOnly,
            showChildDevices: this.config.showChildDevices
        });
    }
    async createManagedObjectRootNode(asset) {
        if (asset.id) {
            return this.groupNodeService.createGroupNode({
                mo: asset,
                groupsSelectable: this.config.groupsSelectable,
                groupsOnly: this.config.groupsOnly,
                showChildDevices: this.config.showChildDevices
            });
        }
        const { data: mo } = await this.inventory.detail(asset);
        return this.groupNodeService.createGroupNode({
            mo,
            groupsSelectable: this.config.groupsSelectable,
            groupsOnly: this.config.groupsOnly,
            showChildDevices: this.config.showChildDevices
        });
    }
}
//# sourceMappingURL=data:application/json;base64,
import { NgModule } from '@angular/core';
import { DeviceStatusComponent, DeviceStatusModule, hookNavigator, ModalModule, ModalService } from '@c8y/ngx-components';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { AssetNodeFactory } from './asset-node.factory';
import { AssetNodeService } from './asset-node.service';
import { AssetSelectorModule } from './asset-selector/asset-selector.module';
import * as i0 from "@angular/core";
export class AssetsNavigatorModule {
    static config(config = {}) {
        return {
            ngModule: AssetsNavigatorModule,
            providers: [
                {
                    provide: ASSET_NAVIGATOR_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
AssetsNavigatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetsNavigatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AssetsNavigatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: AssetsNavigatorModule, imports: [ModalModule, AssetSelectorModule, DeviceStatusModule] });
AssetsNavigatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetsNavigatorModule, providers: [ModalService, AssetNodeService, hookNavigator(AssetNodeFactory)], imports: [ModalModule, AssetSelectorModule, DeviceStatusModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetsNavigatorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [ModalModule, AssetSelectorModule, DeviceStatusModule],
                    providers: [ModalService, AssetNodeService, hookNavigator(AssetNodeFactory)],
                    entryComponents: [DeviceStatusComponent]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLW5hdmlnYXRvci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMtbmF2aWdhdG9yL2Fzc2V0cy1uYXZpZ2F0b3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsa0JBQWtCLEVBQ2xCLGFBQWEsRUFDYixXQUFXLEVBQ1gsWUFBWSxFQUNiLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUF3QixzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOztBQVE3RSxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBK0IsRUFBRTtRQUM3QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjtvQkFDL0IsUUFBUSxFQUFFLE1BQU07aUJBQ2pCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7a0hBWFUscUJBQXFCO21IQUFyQixxQkFBcUIsWUFKdEIsV0FBVyxFQUFFLG1CQUFtQixFQUFFLGtCQUFrQjttSEFJbkQscUJBQXFCLGFBSHJCLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFlBRGxFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0I7MkZBSW5ELHFCQUFxQjtrQkFOakMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsRUFBRTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDO29CQUMvRCxTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQzVFLGVBQWUsRUFBRSxDQUFDLHFCQUFxQixDQUFDO2lCQUN6QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEZXZpY2VTdGF0dXNDb21wb25lbnQsXG4gIERldmljZVN0YXR1c01vZHVsZSxcbiAgaG9va05hdmlnYXRvcixcbiAgTW9kYWxNb2R1bGUsXG4gIE1vZGFsU2VydmljZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEFzc2V0TmF2aWdhdG9yQ29uZmlnLCBBU1NFVF9OQVZJR0FUT1JfQ09ORklHIH0gZnJvbSAnLi9hc3NldC1ub2RlLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBBc3NldE5vZGVGYWN0b3J5IH0gZnJvbSAnLi9hc3NldC1ub2RlLmZhY3RvcnknO1xuaW1wb3J0IHsgQXNzZXROb2RlU2VydmljZSB9IGZyb20gJy4vYXNzZXQtbm9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFzc2V0U2VsZWN0b3JNb2R1bGUgfSBmcm9tICcuL2Fzc2V0LXNlbGVjdG9yL2Fzc2V0LXNlbGVjdG9yLm1vZHVsZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGltcG9ydHM6IFtNb2RhbE1vZHVsZSwgQXNzZXRTZWxlY3Rvck1vZHVsZSwgRGV2aWNlU3RhdHVzTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbTW9kYWxTZXJ2aWNlLCBBc3NldE5vZGVTZXJ2aWNlLCBob29rTmF2aWdhdG9yKEFzc2V0Tm9kZUZhY3RvcnkpXSxcbiAgZW50cnlDb21wb25lbnRzOiBbRGV2aWNlU3RhdHVzQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBBc3NldHNOYXZpZ2F0b3JNb2R1bGUge1xuICBzdGF0aWMgY29uZmlnKGNvbmZpZzogQXNzZXROYXZpZ2F0b3JDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QXNzZXRzTmF2aWdhdG9yTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBc3NldHNOYXZpZ2F0b3JNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFTU0VUX05BVklHQVRPUl9DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19
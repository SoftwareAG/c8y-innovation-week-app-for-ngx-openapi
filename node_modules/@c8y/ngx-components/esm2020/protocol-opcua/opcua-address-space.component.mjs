import { Component, Output, EventEmitter } from '@angular/core';
import { AddressSpaceService } from './address-space.service';
import { gettext } from '@c8y/ngx-components';
import { OpcuaService } from './opcuaService';
import * as i0 from "@angular/core";
import * as i1 from "./address-space.service";
import * as i2 from "./opcuaService";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "./opcua-address-space-tree.component";
import * as i7 from "./opcua-address-space-detail.component";
export class OpcuaAddressSpaceComponent {
    constructor(addressSpaceService, opcuaService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.selectednode = false;
        this.loading = false;
        this.searchInProgress = false;
        this.focusStatus = new EventEmitter();
        this.moId = '';
    }
    async ngOnInit() {
        this.filterLabel = gettext('Filter…');
        this.moId = this.opcuaService.getMoId();
    }
    ngOnDestroy() {
        // The BehaviourSubject will store the last array of ancestorNodes from the previous search
        // this would cause the component while subscribing in the init-phase to the subject to travers
        // to the last searched node again. From user perspective it does not make sense, because the user
        // left the Address space (tab) and should loose the context and just request a new search or
        // browse the tree manually.
        this.addressSpaceService.resetTreeToRootNode();
    }
    async searchNodes() {
        this.searchInProgress = true;
        this.clearNodeListAndCheckSearchString();
        if (this.isSearch) {
            this.currentNode = undefined;
            this.nodeList = await this.addressSpaceService.getSearchedNodes(this.searchKey, this.moId);
            this.searchInProgress = false;
            this.nodeList.resultLabel = gettext('Results found');
        }
    }
    clearNodeListAndCheckSearchString() {
        this.isSearch = this.searchKey !== undefined && this.searchKey !== '' ? true : false;
        if (!this.isSearch) {
            this.searchInProgress = false;
        }
    }
    clearSearch() {
        this.isSearch = false;
        this.searchKey = '';
        this.currentNode = undefined;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    async selectNode(node) {
        if (node && node.nodeId && node.nodeId.length > 0) {
            const res = await this.addressSpaceService.getNodeById(this.moId, node.nodeId);
            this.toggleCurrentNode((await res.json()));
        }
    }
    toggleCurrentNode(node) {
        this.currentNode = this.isNodeSet(node) ? undefined : node;
    }
    backHandler(node) {
        this.isSearch = false;
        this.focusStatus.emit(node);
        this.toggleCurrentNode(node);
    }
    isNodeSet(node) {
        if (this.currentNode !== undefined && this.currentNode.nodeId === node.nodeId) {
            return true;
        }
        return false;
    }
}
OpcuaAddressSpaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaAddressSpaceComponent, deps: [{ token: i1.AddressSpaceService }, { token: i2.OpcuaService }], target: i0.ɵɵFactoryTarget.Component });
OpcuaAddressSpaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OpcuaAddressSpaceComponent, selector: "opcua-address-space", outputs: { focusStatus: "focusStatus" }, ngImport: i0, template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-level-2 split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -8px 0\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button\n              *ngIf=\"!isSearch\"\n              title=\"{{ 'Search' | translate }}\"\n              type=\"submit\"\n              class=\"btn btn-dot\"\n              (click)=\"searchNodes()\"\n            >\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button\n              *ngIf=\"isSearch\"\n              class=\"btn btn-dot\"\n              title=\"{{ 'Clear`input`' | translate }}\"\n              type=\"button\"\n              (click)=\"clearSearch()\"\n            >\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em>\n            &nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div class=\"p-t-8\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <c8y-loading></c8y-loading>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div class=\"list-group list-group-links\" *ngIf=\"isSearch && !loading\">\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item d-flex': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"m-r-4\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span>\n              {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.LoadingComponent, selector: "c8y-loading" }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i6.OpcuaAddressSpaceTreeComponent, selector: "opcua-address-space-tree", inputs: ["moId", "node", "focusEmitter"], outputs: ["selectedNode"] }, { kind: "component", type: i7.OpcuaAddressSpaceDetailComponent, selector: "opcua-address-space-detail", inputs: ["node"], outputs: ["toggleAttrDetail"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaAddressSpaceComponent, decorators: [{
            type: Component,
            args: [{ selector: 'opcua-address-space', template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-level-2 split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -8px 0\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button\n              *ngIf=\"!isSearch\"\n              title=\"{{ 'Search' | translate }}\"\n              type=\"submit\"\n              class=\"btn btn-dot\"\n              (click)=\"searchNodes()\"\n            >\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button\n              *ngIf=\"isSearch\"\n              class=\"btn btn-dot\"\n              title=\"{{ 'Clear`input`' | translate }}\"\n              type=\"button\"\n              (click)=\"clearSearch()\"\n            >\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em>\n            &nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div class=\"p-t-8\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <c8y-loading></c8y-loading>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div class=\"list-group list-group-links\" *ngIf=\"isSearch && !loading\">\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item d-flex': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"m-r-4\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span>\n              {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AddressSpaceService }, { type: i2.OpcuaService }]; }, propDecorators: { focusStatus: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
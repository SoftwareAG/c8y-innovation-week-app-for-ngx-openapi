import { Directive, forwardRef, ElementRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { some, isEqual, isEmpty } from 'lodash-es';
import * as i0 from "@angular/core";
export class OpcuaDeviceProtocolBrowsePathValidation {
    constructor(el) {
        this.el = el;
    }
    validate(control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    }
    isValidJson(value) {
        try {
            const browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    }
    toArray(str) {
        return JSON.parse(str);
    }
    isBrowsePathUnique(value) {
        const mappings = this.getMappings();
        const found = some(mappings, item => {
            if (isEqual(item.browsePath, this.toArray(value)) && item.id !== this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    }
}
OpcuaDeviceProtocolBrowsePathValidation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaDeviceProtocolBrowsePathValidation, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
OpcuaDeviceProtocolBrowsePathValidation.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.7", type: OpcuaDeviceProtocolBrowsePathValidation, selector: "[c8yBrowsePathValidator][ngModel]", inputs: { getMappings: "getMappings", model: "model" }, providers: [
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
            multi: true
        }
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaDeviceProtocolBrowsePathValidation, decorators: [{
            type: Directive,
            args: [{
                    selector: '[c8yBrowsePathValidator][ngModel]',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation),
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { getMappings: [{
                type: Input
            }], model: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtb3BjdWEvb3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUE4QixhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBWW5ELE1BQU0sT0FBTyx1Q0FBdUM7SUFJbEQsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7SUFBRyxDQUFDO0lBRXRDLFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0wsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMxQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQ3RDO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFLO1FBQ2YsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBSztRQUN0QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNsQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUM5RSxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQzs7b0lBeENVLHVDQUF1Qzt3SEFBdkMsdUNBQXVDLG9IQVJ2QztRQUNUO1lBQ0UsT0FBTyxFQUFFLGFBQWE7WUFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQztZQUN0RSxLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0Y7MkZBRVUsdUNBQXVDO2tCQVZuRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQ0FBbUM7b0JBQzdDLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsYUFBYTs0QkFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsd0NBQXdDLENBQUM7NEJBQ3RFLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO2lCQUNGO2lHQUVVLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBzb21lLCBpc0VxdWFsLCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUJyb3dzZVBhdGhWYWxpZGF0b3JdW25nTW9kZWxdJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE9wY3VhRGV2aWNlUHJvdG9jb2xCcm93c2VQYXRoVmFsaWRhdGlvbiksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBPcGN1YURldmljZVByb3RvY29sQnJvd3NlUGF0aFZhbGlkYXRpb24gaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBASW5wdXQoKSBnZXRNYXBwaW5nczogKCkgPT4gW107XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICBpZiAoY29udHJvbC52YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRKc29uKGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGludmFsaWRCcm93c2VQYXRoTm90YXRpb246IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzQnJvd3NlUGF0aFVuaXF1ZShjb250cm9sLnZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB7IGJyb3dzZVBhdGhOb3RVbmlxdWU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlzVmFsaWRKc29uKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJyb3dzZVBhdGggPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIHJldHVybiAhaXNFbXB0eShicm93c2VQYXRoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRvQXJyYXkoc3RyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfVxuXG4gIGlzQnJvd3NlUGF0aFVuaXF1ZSh2YWx1ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5nZXRNYXBwaW5ncygpO1xuICAgIGNvbnN0IGZvdW5kID0gc29tZShtYXBwaW5ncywgaXRlbSA9PiB7XG4gICAgICBpZiAoaXNFcXVhbChpdGVtLmJyb3dzZVBhdGgsIHRoaXMudG9BcnJheSh2YWx1ZSkpICYmIGl0ZW0uaWQgIT09IHRoaXMubW9kZWwuaWQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG59XG4iXX0=
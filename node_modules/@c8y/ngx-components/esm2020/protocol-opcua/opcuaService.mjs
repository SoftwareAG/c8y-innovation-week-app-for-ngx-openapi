import { Injectable } from '@angular/core';
import { FetchClient, InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { AlertService } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@angular/router";
import * as i3 from "@c8y/ngx-components";
export class OpcuaService {
    constructor(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    getServers(id) {
        if (id && id.length > 0) {
            const options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(`${this.microserviceUrl}/${id}`, options);
        }
    }
    createServer(data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch(`${this.microserviceUrl}`, options);
        }
    }
    async updateServer(server) {
        if (this.doesGatewayIdExist(server) && this.doesIdExist(server)) {
            this.cleanUpPayload(server);
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(server)
            };
            const res = await this.client.fetch(`${this.microserviceUrl}`, options);
            let data;
            try {
                data = await res.json();
            }
            catch (e) {
                // nothing
            }
            if (res.status !== 200) {
                this.alertService.addServerFailure({ data, res });
            }
            else {
                return data;
            }
        }
    }
    removeServer(data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            const options = {
                method: 'DELETE'
            };
            return this.client.fetch(`${this.microserviceUrl}/${data.gatewayId}/${data.id}`, options);
        }
    }
    getKeystore(binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    }
    uploadKeystore(file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    }
    async updateKeystore(id, file) {
        if (id && id.length > 0 && file && file.size > 0) {
            const { res } = await this.removeKeystore(id);
            if (res && res.status === 204) {
                return this.uploadKeystore(file);
            }
        }
        return Promise.reject('Invalid file');
    }
    removeKeystore(id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    }
    getMoId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    }
    getId() {
        const currentUrl = this.router.routerState.snapshot.url;
        const isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    }
    async getDeviceProtocol(id) {
        const options = {
            method: 'GET',
            headers: this.header
        };
        return this.client.fetch(`${this.deviceTypeProtocolUrl}/${id}`, options);
    }
    async updateDeviceProtocol(data) {
        const options = {
            method: 'PUT',
            headers: this.header,
            body: JSON.stringify(data)
        };
        return this.client.fetch(`${this.deviceTypeProtocolUrl}/${data.id}`, options);
    }
    async createDeviceProtocol(data) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(data)
        };
        return this.client.fetch(`${this.deviceTypeProtocolUrl}`, options);
    }
    doesGatewayIdExist(data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    }
    doesIdExist(data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    }
    cleanUpPayload(data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    }
}
OpcuaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaService, deps: [{ token: i1.FetchClient }, { token: i1.InventoryService }, { token: i2.Router }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
OpcuaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i1.InventoryService }, { type: i2.Router }, { type: i3.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Component, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { Router } from '@angular/router';
import { OpcuaService } from './opcuaService';
import { AlertService, gettext } from '@c8y/ngx-components';
import { find, assign, omit, findIndex, pick, get, isNil } from 'lodash-es';
import { OpcuaDeviceProtocolMapping } from './opcua-device-protocol-mapping.component';
import * as i0 from "@angular/core";
import * as i1 from "./opcuaService";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "./opcua-device-protocol-description.component";
import * as i7 from "./opcua-device-protocol-data-reporting.component";
import * as i8 from "./opcua-device-protocol-mapping.component";
import * as i9 from "./opcua-auto-apply-settings.component";
export class OpcuaDeviceProtocolDetailComponent {
    constructor(changeDetectorRef, opcuaService, alertService, router) {
        this.changeDetectorRef = changeDetectorRef;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.router = router;
        this.initialModel = {
            id: '',
            fieldbusType: 'opcuaV2',
            description: '',
            unit: '',
            fieldbusVersion: 4,
            name: '',
            referencedServerId: '',
            referencedRootNodeId: '',
            subscriptionType: {
                type: 'None'
            },
            mappings: [],
            overriddenSubscriptions: [],
            applyConstraints: {
                browsePathMatchesRegex: '',
                matchesNodeIds: [],
                serverObjectHasFragment: '',
                matchesServerIds: []
            },
            enabled: ''
        };
        this.isLoaded = true;
        this.getParentAttr = key => get(this.model, key);
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    getMapping() {
        return this.model.mappings;
    }
    getEmptyMappingObject() {
        return {
            id: 'new',
            browsePath: []
        };
    }
    getOverriddenSubscriptionsByPath(browsePath) {
        if (isNil(browsePath) || browsePath.length === 0) {
            return undefined;
        }
        return find(this.model.overriddenSubscriptions, { browsePath });
    }
    getStructuredResource(resource) {
        const overriddenSubscriptions = this.getOverriddenSubscriptionsByPath(resource.browsePath);
        let result = assign({}, resource);
        if (overriddenSubscriptions) {
            result = assign({}, resource, { subscriptionType: overriddenSubscriptions.subscriptionType });
        }
        return result;
    }
    async ngOnInit() {
        const id = this.opcuaService.getId();
        if (id) {
            const res = await this.opcuaService.getDeviceProtocol(id);
            if (res && res.status !== 200) {
                const data = res.json ? await res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
                this.isLoaded = false;
            }
            else {
                const data = await res.json();
                if (data && data.applyConstraints === null) {
                    delete data.applyConstraints;
                }
                if (data && data.subscriptionType === null) {
                    delete data.subscriptionType;
                }
                this.model = assign(this.initialModel, data);
                if (!this.model.mappings) {
                    this.model.mappings = [];
                }
                this.model = assign(this.initialModel, this.updateViableMapping(data));
                this.isLoaded = false;
            }
        }
    }
    updateViableMapping(model) {
        const { mappings } = model;
        let result = [];
        if (mappings) {
            result = mappings.map((item, i) => {
                return assign(this.getStructuredResource(item), { id: i });
            });
        }
        return assign(model, { mappings: result });
    }
    trackById(index, el) {
        return get(el, 'id', 'new');
    }
    addVariable() {
        this.model.mappings.push(this.getEmptyMappingObject());
    }
    updateVariable(mappingObject) {
        const { mappings } = this.model;
        const { id } = mappingObject;
        const index = findIndex(mappings, { id });
        if (index > -1) {
            mappings.splice(index, 1);
        }
        if (mappingObject.id === 'new') {
            mappingObject.id = mappings.length > 0 ? Math.max(...mappings.map(m => m.id)) + 1 : 0;
        }
        mappings.push(mappingObject);
    }
    removeVariable(mappingObject) {
        const { mappings } = this.model;
        const { id } = mappingObject;
        let index = -1;
        // id typeof string || number
        if (!isNil(id) && (id.length > 0 || id > -1)) {
            index = findIndex(mappings, { id });
        }
        if (index > -1) {
            mappings.splice(index, 1);
        }
    }
    actionHandler(actionObject) {
        switch (actionObject.action) {
            case 'save':
                this.updateVariable(actionObject.data);
                break;
            case 'delete':
                this.removeVariable(actionObject.data);
                break;
        }
    }
    extractOverridSubscriptionType(_mapping) {
        const overriddenSubscriptions = [];
        const variableMapping = [];
        _mapping.forEach(element => {
            if (element.id !== 'new') {
                if (element.subscriptionType) {
                    overriddenSubscriptions.push(assign({ browsePath: element.browsePath }, { subscriptionType: element.subscriptionType }));
                }
                variableMapping.push(omit(element, ['subscriptionType']));
            }
        });
        return [variableMapping, overriddenSubscriptions];
    }
    prepareRequestJson(_model) {
        let requestJson = {};
        const [mappings, overriddenSubscriptions] = this.extractOverridSubscriptionType(_model.mappings);
        requestJson = assign(requestJson, pick(_model, Object.keys(this.initialModel)), {
            mappings,
            overriddenSubscriptions
        });
        return requestJson;
    }
    async save() {
        try {
            const res = await this.opcuaService.updateDeviceProtocol(this.prepareRequestJson(this.model));
            const data = await res.json();
            if (res && res.status === 200) {
                this.router.navigate(['deviceprotocols']);
                this.alertService.success(gettext('Device protocol saved.'));
            }
            else {
                const { details } = data;
                this.alertService.addServerFailure({ res, data: details });
            }
        }
        catch (ex) {
            this.alertService.danger(gettext('Failed to save. Try again.'));
        }
    }
    canSave(deviceTypeForm) {
        if (this.instanceList) {
            const activeInstances = this.instanceList.filter(item => item.isActive());
            if (activeInstances.length > 0) {
                return true;
            }
        }
        return !deviceTypeForm.form.valid;
    }
}
OpcuaDeviceProtocolDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaDeviceProtocolDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.OpcuaService }, { token: i2.AlertService }, { token: i3.Router }], target: i0.ɵɵFactoryTarget.Component });
OpcuaDeviceProtocolDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OpcuaDeviceProtocolDetailComponent, selector: "opcua-device-protocol-detail", viewQueries: [{ propertyName: "instanceList", predicate: OpcuaDeviceProtocolMapping, descendants: true }], ngImport: i0, template: "<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-protocols'\"\n    [label]=\"'Device types' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-protocols'\"\n    [label]=\"'Device protocols' | translate\"\n    [path]=\"'deviceprotocols'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'c8y-device-protocols'\" [label]=\"model?.name\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\" class=\"card card--fullpage\">\n      <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n      <div class=\"inner-scroll\">\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n            <div class=\"h4\" translate>Variables</div>\n          </div>\n          <div class=\"p-l-16 p-r-16\">\n            <div class=\"c8y-list__group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n              <opcua-device-protocol-mapping\n                *ngFor=\"let resource of getMapping(); index as i; trackBy: trackById\"\n                [index]=\"i\"\n                [referencedServerId]=\"model.referencedServerId\"\n                [referencedRootNodeId]=\"model.referencedRootNodeId\"\n                [resource]=\"getStructuredResource(resource)\"\n                [getParentAttr]=\"getParentAttr\"\n                (onAction)=\"actionHandler($event)\"\n              ></opcua-device-protocol-mapping>\n            </div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16\">\n            <c8y-ui-empty-state\n              *ngIf=\"model.mappings.length === 0\"\n              [icon]=\"'sliders'\"\n              [title]=\"'No variables to display.' | translate\"\n              [subtitle]=\"'Click below to add your first variable.' | translate\"\n            ></c8y-ui-empty-state>\n\n            <div class=\"card-footer\">\n              <button\n                type=\"button\"\n                title=\"{{ 'Add variable' | translate }}\"\n                class=\"btn btn-default addVariableBtn\"\n                (click)=\"addVariable()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                {{ 'Add variable' | translate }}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n            <div class=\"h4\" translate>Data reporting</div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16\" ngModelGroup=\"subscription\">\n            <opcua-device-protocol-data-reporting\n              [groupName]=\"'subscription'\"\n              [model]=\"model\"\n            ></opcua-device-protocol-data-reporting>\n          </div>\n        </div>\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom sticky-top\">\n            <div class=\"h4\" translate>Auto apply constraints</div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16 overflow-visible\" ngModelGroup=\"autoApply\">\n            <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n          </div>\n        </div>\n\n        <div class=\"card-footer sticky-bottom separator\" style=\"z-index: 101\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            type=\"button\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i2.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i2.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "component", type: i2.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i5.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { kind: "directive", type: i5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i6.OpcuaDeviceProtocolDescription, selector: "opcua-device-protocol-description", inputs: ["model"] }, { kind: "component", type: i7.OpcuaDeviceProtocolDataReportingComponent, selector: "opcua-device-protocol-data-reporting", inputs: ["model", "groupName"], outputs: ["onSubscriptionChange"] }, { kind: "component", type: i8.OpcuaDeviceProtocolMapping, selector: "opcua-device-protocol-mapping", inputs: ["resource", "index", "getParentAttr", "referencedServerId", "referencedRootNodeId"], outputs: ["onAction"] }, { kind: "component", type: i9.OpcuaAutoApplySettingsComponent, selector: "opcua-auto-apply", inputs: ["model"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaDeviceProtocolDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'opcua-device-protocol-detail', template: "<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-protocols'\"\n    [label]=\"'Device types' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-protocols'\"\n    [label]=\"'Device protocols' | translate\"\n    [path]=\"'deviceprotocols'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [icon]=\"'c8y-device-protocols'\" [label]=\"model?.name\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n<div class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\" class=\"card card--fullpage\">\n      <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n      <div class=\"inner-scroll\">\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n            <div class=\"h4\" translate>Variables</div>\n          </div>\n          <div class=\"p-l-16 p-r-16\">\n            <div class=\"c8y-list__group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n              <opcua-device-protocol-mapping\n                *ngFor=\"let resource of getMapping(); index as i; trackBy: trackById\"\n                [index]=\"i\"\n                [referencedServerId]=\"model.referencedServerId\"\n                [referencedRootNodeId]=\"model.referencedRootNodeId\"\n                [resource]=\"getStructuredResource(resource)\"\n                [getParentAttr]=\"getParentAttr\"\n                (onAction)=\"actionHandler($event)\"\n              ></opcua-device-protocol-mapping>\n            </div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16\">\n            <c8y-ui-empty-state\n              *ngIf=\"model.mappings.length === 0\"\n              [icon]=\"'sliders'\"\n              [title]=\"'No variables to display.' | translate\"\n              [subtitle]=\"'Click below to add your first variable.' | translate\"\n            ></c8y-ui-empty-state>\n\n            <div class=\"card-footer\">\n              <button\n                type=\"button\"\n                title=\"{{ 'Add variable' | translate }}\"\n                class=\"btn btn-default addVariableBtn\"\n                (click)=\"addVariable()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                {{ 'Add variable' | translate }}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n            <div class=\"h4\" translate>Data reporting</div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16\" ngModelGroup=\"subscription\">\n            <opcua-device-protocol-data-reporting\n              [groupName]=\"'subscription'\"\n              [model]=\"model\"\n            ></opcua-device-protocol-data-reporting>\n          </div>\n        </div>\n        <div class=\"d-contents\">\n          <div class=\"card-header separator-top-bottom sticky-top\">\n            <div class=\"h4\" translate>Auto apply constraints</div>\n          </div>\n          <div class=\"p-l-16 p-r-16 p-t-16 overflow-visible\" ngModelGroup=\"autoApply\">\n            <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n          </div>\n        </div>\n\n        <div class=\"card-footer sticky-bottom separator\" style=\"z-index: 101\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            type=\"button\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.OpcuaService }, { type: i2.AlertService }, { type: i3.Router }]; }, propDecorators: { instanceList: [{
                type: ViewChildren,
                args: [OpcuaDeviceProtocolMapping]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, Optional } from '@angular/core';
import { AlertService, ContextRouteComponent, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { OpcuaService } from './opcuaService';
import * as i0 from "@angular/core";
import * as i1 from "./opcuaService";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@ngx-translate/core";
import * as i4 from "@angular/common";
import * as i5 from "ngx-bootstrap/popover";
import * as i6 from "./opcua-server-list.component";
import * as i7 from "./opcua-server-config.component";
export class OpcuaServersComponent {
    constructor(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    async ngOnInit() {
        this.moId = this.opcuaService.getMoId();
        if (this.moId && this.moId.length > 0) {
            const res = await this.opcuaService.getServers(this.moId);
            if (res && res.status !== 200) {
                const data = res.json ? await res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
            }
            else {
                this.serverObjectList = (await res.json());
                this.serverObjectList.map(server => this.setQuickInfo(server));
            }
        }
    }
    localServerObjectExist() {
        return !!this.serverObjectList.find(server => server.id === this.NEW_SERVER_ID);
    }
    addServer() {
        const server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    }
    onSaved(server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    }
    reloadTabs() {
        if (this.context) {
            this.context.refreshTabs();
        }
    }
    onCanceled(server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(item => {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    }
    onRemoved(server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    }
    async getKeystore(binaryId) {
        const { data } = await this.opcuaService.getKeystore(binaryId);
        return data;
    }
    async onPresent(server) {
        if (server &&
            server.id !== this.NEW_SERVER_ID &&
            server.config &&
            server.config.keystoreBinaryId) {
            try {
                const mo = await this.getKeystore(server.config.keystoreBinaryId);
                server.config.keystoreFilename = mo.name;
            }
            catch (ex) {
                this.server = Object.assign({}, server);
                console.log('Could not get existing keystore:', ex);
            }
        }
        if (this.serverObjectList.length > 0) {
            this.serverObjectList.forEach(item => {
                item.active = false;
                if (item.id === server.id) {
                    item.active = true;
                    server.active = item.active;
                }
            });
            this.setQuickInfo(server);
            this.server = Object.assign({}, server);
        }
    }
    async createServer(server) {
        const response = await this.opcuaService.createServer(server);
        const svr = (await response.json());
        this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
        this.reloadTabs();
    }
    async updateServer(server) {
        const updatedServer = (await this.opcuaService.updateServer(server));
        if (updatedServer) {
            this.updateServerObjectListById(updatedServer.id, updatedServer);
        }
    }
    async removeServer(server) {
        try {
            await this.opcuaService.removeServer(server);
            this.removeServerObjectListById(server.id);
            this.reloadTabs();
        }
        catch (ex) {
            console.log('Could not remove OPC UA server:', ex);
        }
    }
    removeServerObjectListById(id) {
        this.serverObjectList.forEach((item, index) => {
            if (item.id === id) {
                this.serverObjectList.splice(index, 1);
                delete this.server;
            }
        });
    }
    updateServerObjectListById(id, server) {
        const idx = this.serverObjectList.findIndex(item => item.id === id);
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    }
    setQuickInfo(server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    }
}
OpcuaServersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaServersComponent, deps: [{ token: i1.OpcuaService }, { token: i2.AlertService }, { token: i3.TranslateService }, { token: i2.ContextRouteComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
OpcuaServersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OpcuaServersComponent, selector: "opcua-servers", ngImport: i0, template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header grid__col--fullspan separator\">\n    <div class=\"h4 card-title\">OPC UA servers</div>\n    <button\n      class=\"btn-help\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected.'\n          | translate\n      }}\"\n      placement=\"right\"\n      triggers=\"focus\"\n    ></button>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-level-1 flex-grow\">\n      <div class=\"c8y-nav-stacked\">\n        <opcua-server-list\n          [serverList]=\"serverObjectList\"\n          (present)=\"onPresent($event)\"\n        ></opcua-server-list>\n      </div>\n    </div>\n    <div class=\"card-footer separator sticky-bottom\">\n      <button\n        class=\"btn btn-default\"\n        title=\"{{ 'Add server' | translate }}\"\n        type=\"button\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"inner-scroll split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  ></opcua-server-config>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "component", type: i6.OpcuaServerListComponent, selector: "opcua-server-list", inputs: ["serverList"], outputs: ["present"] }, { kind: "component", type: i7.OpcuaServerConfigComponent, selector: "opcua-server-config", inputs: ["server"], outputs: ["canceled", "removed", "saved"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OpcuaServersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'opcua-servers', template: "<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header grid__col--fullspan separator\">\n    <div class=\"h4 card-title\">OPC UA servers</div>\n    <button\n      class=\"btn-help\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to connected.'\n          | translate\n      }}\"\n      placement=\"right\"\n      triggers=\"focus\"\n    ></button>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-level-1 flex-grow\">\n      <div class=\"c8y-nav-stacked\">\n        <opcua-server-list\n          [serverList]=\"serverObjectList\"\n          (present)=\"onPresent($event)\"\n        ></opcua-server-list>\n      </div>\n    </div>\n    <div class=\"card-footer separator sticky-bottom\">\n      <button\n        class=\"btn btn-default\"\n        title=\"{{ 'Add server' | translate }}\"\n        type=\"button\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"inner-scroll split-view__detail\"\n    [ngClass]=\"{ 'split-view__detail--selected': server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  ></opcua-server-config>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.OpcuaService }, { type: i2.AlertService }, { type: i3.TranslateService }, { type: i2.ContextRouteComponent, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
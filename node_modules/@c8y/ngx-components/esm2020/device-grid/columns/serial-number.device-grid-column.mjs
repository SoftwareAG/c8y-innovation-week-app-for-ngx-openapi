import { BaseColumn, getBasicInputArrayFormFieldConfig, gettext } from '@c8y/ngx-components';
import { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';
export class SerialNumberDeviceGridColumn extends BaseColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        const vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        this.name = 'serialNumber';
        this.header = gettext('Serial number');
        this.cellRendererComponent = SerialNumberCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            fields: getBasicInputArrayFormFieldConfig({
                key: 'serialNumbers',
                label: gettext('Show items with serial number'),
                addText: gettext('Add next`serial number`'),
                tooltip: gettext('Use * as a wildcard character'),
                placeholder: '54321-123'
            }),
            getFilter(model) {
                const filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = {
                        [hardwareSerialNumberPath]: { __in: model.serialNumbers },
                        [vendingSerialNumberPath]: { __in: model.serialNumbers }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsLW51bWJlci5kZXZpY2UtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2UtZ3JpZC9jb2x1bW5zL3NlcmlhbC1udW1iZXIuZGV2aWNlLWdyaWQtY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxVQUFVLEVBRVYsaUNBQWlDLEVBQ2pDLE9BQU8sRUFDUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRTVGLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVO0lBQzFELFlBQVksbUJBQWtDO1FBQzVDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTNCLE1BQU0sd0JBQXdCLEdBQUcsMkJBQTJCLENBQUM7UUFDN0QsTUFBTSx1QkFBdUIsR0FDM0IsaUVBQWlFLENBQUM7UUFFcEUsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGlDQUFpQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFLGlDQUFpQyxDQUFDO2dCQUN4QyxHQUFHLEVBQUUsZUFBZTtnQkFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztnQkFDL0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztnQkFDM0MsT0FBTyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsV0FBVyxFQUFFLFdBQVc7YUFDekIsQ0FBQztZQUNGLFNBQVMsQ0FBQyxLQUFVO2dCQUNsQixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7b0JBQzlCLE1BQU0sQ0FBQyxJQUFJLEdBQUc7d0JBQ1osQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7d0JBQ3pELENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFO3FCQUN6RCxDQUFDO2lCQUNIO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztTQUM1RixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmFzZUNvbHVtbixcbiAgQ29sdW1uQ29uZmlnLFxuICBnZXRCYXNpY0lucHV0QXJyYXlGb3JtRmllbGRDb25maWcsXG4gIGdldHRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL3NlcmlhbC1udW1iZXIuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG5cbiAgICBjb25zdCBoYXJkd2FyZVNlcmlhbE51bWJlclBhdGggPSAnYzh5X0hhcmR3YXJlLnNlcmlhbE51bWJlcic7XG4gICAgY29uc3QgdmVuZGluZ1NlcmlhbE51bWJlclBhdGggPVxuICAgICAgJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX2ZyYWdtZW50c19WZW5kaW5nTWFjaGluZVR5cGVJbmZvLnNlcmlhbCc7XG5cbiAgICB0aGlzLm5hbWUgPSAnc2VyaWFsTnVtYmVyJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1NlcmlhbCBudW1iZXInKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudDtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBmaWVsZHM6IGdldEJhc2ljSW5wdXRBcnJheUZvcm1GaWVsZENvbmZpZyh7XG4gICAgICAgIGtleTogJ3NlcmlhbE51bWJlcnMnLFxuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnU2hvdyBpdGVtcyB3aXRoIHNlcmlhbCBudW1iZXInKSxcbiAgICAgICAgYWRkVGV4dDogZ2V0dGV4dCgnQWRkIG5leHRgc2VyaWFsIG51bWJlcmAnKSxcbiAgICAgICAgdG9vbHRpcDogZ2V0dGV4dCgnVXNlICogYXMgYSB3aWxkY2FyZCBjaGFyYWN0ZXInKSxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICc1NDMyMS0xMjMnXG4gICAgICB9KSxcbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKG1vZGVsLnNlcmlhbE51bWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZmlsdGVyLl9fb3IgPSB7XG4gICAgICAgICAgICBbaGFyZHdhcmVTZXJpYWxOdW1iZXJQYXRoXTogeyBfX2luOiBtb2RlbC5zZXJpYWxOdW1iZXJzIH0sXG4gICAgICAgICAgICBbdmVuZGluZ1NlcmlhbE51bWJlclBhdGhdOiB7IF9faW46IG1vZGVsLnNlcmlhbE51bWJlcnMgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiBoYXJkd2FyZVNlcmlhbE51bWJlclBhdGggfSwgeyBwYXRoOiB2ZW5kaW5nU2VyaWFsTnVtYmVyUGF0aCB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==
import { Component } from '@angular/core';
import { CellRendererContext } from '@c8y/ngx-components';
import { ColumnUtilService } from './column-util.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "./column-util.service";
export class GroupCellRendererComponent {
    constructor(context, columnUtilService) {
        this.context = context;
        this.columnUtilService = columnUtilService;
    }
}
GroupCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupCellRendererComponent, deps: [{ token: i1.CellRendererContext }, { token: i2.ColumnUtilService }], target: i0.ɵɵFactoryTarget.Component });
GroupCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: GroupCellRendererComponent, selector: "ng-component", ngImport: i0, template: "<span\n  title=\"{{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n>\n  {{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupCellRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<span\n  title=\"{{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n>\n  {{\n    columnUtilService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }, { type: i2.ColumnUtilService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kZXZpY2UtZ3JpZC9jb2x1bW5zL2dyb3VwLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vZGV2aWNlLWdyaWQvY29sdW1ucy9ncm91cC5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFLMUQsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxZQUFtQixPQUE0QixFQUFTLGlCQUFvQztRQUF6RSxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFTLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFBRyxDQUFDOzt1SEFEckYsMEJBQTBCOzJHQUExQiwwQkFBMEIsb0RDUHZDLHFUQWVBOzJGRFJhLDBCQUEwQjtrQkFIdEMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbFJlbmRlcmVyQ29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29sdW1uVXRpbFNlcnZpY2UgfSBmcm9tICcuL2NvbHVtbi11dGlsLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2dyb3VwLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IENlbGxSZW5kZXJlckNvbnRleHQsIHB1YmxpYyBjb2x1bW5VdGlsU2VydmljZTogQ29sdW1uVXRpbFNlcnZpY2UpIHt9XG59XG4iLCI8c3BhblxuICB0aXRsZT1cInt7XG4gICAgY29sdW1uVXRpbFNlcnZpY2UuZ2V0UGFyZW50c05hbWVzKFxuICAgICAgY29udGV4dC5pdGVtLFxuICAgICAgY29udGV4dC5wcm9wZXJ0eS5leHRlcm5hbEZpbHRlclF1ZXJ5Py5kZXZpY2VHcm91cElkXG4gICAgKVxuICB9fVwiXG4+XG4gIHt7XG4gICAgY29sdW1uVXRpbFNlcnZpY2UuZ2V0UGFyZW50c05hbWVzKFxuICAgICAgY29udGV4dC5pdGVtLFxuICAgICAgY29udGV4dC5wcm9wZXJ0eS5leHRlcm5hbEZpbHRlclF1ZXJ5Py5kZXZpY2VHcm91cElkXG4gICAgKVxuICB9fVxuPC9zcGFuPlxuIl19
import { FormGroup } from '@angular/forms';
import { BaseColumn, gettext, PushStatus, SendStatus } from '@c8y/ngx-components';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
export class StatusDeviceGridColumn extends BaseColumn {
    constructor() {
        super();
        const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';
        const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };
        const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };
        const availabilityStatusPath = 'c8y_Availability.status';
        const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };
        const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };
        const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };
        const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };
        const connectionStatusPath = 'c8y_Connection.status';
        const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };
        const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };
        const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };
        const deviceUnderMaintenance = {
            __or: [
                responseIntervalLessThanOrEqualTo0,
                availabilityStatusMaintenance,
                connectionStatusMaintenance
            ]
        };
        const deviceNotUnderMaintenance = {
            // using __and of __nots because backend does not support __not with __ors
            __and: [
                { __not: responseIntervalLessThanOrEqualTo0 },
                { __not: availabilityStatusMaintenance },
                { __not: connectionStatusMaintenance }
            ]
        };
        this.name = 'status';
        this.header = gettext('Status');
        this.dataType = "icon" /* ColumnDataType.Icon */;
        this.cellRendererComponent = StatusCellRendererComponent;
        this.resizable = false;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendStatus: {
                        title: gettext('Show devices with send status'),
                        type: 'object',
                        properties: {
                            sendOnline: {
                                type: 'switch',
                                title: gettext('Online')
                            },
                            sendOffline: {
                                type: 'switch',
                                title: gettext('Offline')
                            },
                            sendUnknown: {
                                type: 'switch',
                                title: gettext('Unknown')
                            },
                            sendNotMonitored: {
                                type: 'switch',
                                title: gettext('Not monitored')
                            }
                        }
                    },
                    pushStatus: {
                        title: gettext('Show devices with push status'),
                        type: 'object',
                        properties: {
                            pushOnline: {
                                type: 'switch',
                                title: gettext('Online')
                            },
                            pushOffline: {
                                type: 'switch',
                                title: gettext('Offline')
                            },
                            pushNotMonitored: {
                                type: 'switch',
                                title: gettext('Not monitored')
                            }
                        }
                    },
                    maintenanceStatus: {
                        title: gettext('Show devices with maintenance status'),
                        type: 'object',
                        properties: {
                            maintenance: {
                                type: 'switch',
                                title: gettext('Device is under maintenance')
                            }
                        }
                    }
                }
            },
            formGroup: new FormGroup({}),
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model?.sendStatus?.sendOnline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]
                    });
                }
                if (model?.sendStatus?.sendOffline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]
                    });
                }
                if (model?.sendStatus?.sendUnknown) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]
                    });
                }
                if (model?.sendStatus?.sendNotMonitored || model?.pushStatus?.pushNotMonitored) {
                    ors.push(responseIntervalNotDefined);
                }
                if (model?.pushStatus?.pushOnline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, connectionStatusConnected]
                    });
                }
                if (model?.pushStatus?.pushOffline) {
                    ors.push({
                        __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]
                    });
                }
                if (model?.maintenanceStatus?.maintenance) {
                    ors.push(deviceUnderMaintenance);
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { map, remove, sortBy } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/**
 * Service contains logic extracted from the device-grid service to avoid circular dependency MTM-40239.
 */
export class ColumnUtilService {
    constructor(translateService) {
        this.translateService = translateService;
    }
    getAlarmsHref(device) {
        return `${this.getHref(device)}/alarms`;
    }
    getHref(groupOrDevice, prefix = '#/') {
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return `${prefix}group/${groupOrDevice.id}`;
        }
        return `${prefix}device/${groupOrDevice.id}`;
    }
    getParentsNames(device, featuredParentId) {
        const assetParentsReferences = device.assetParents.references;
        const assetParents = map(assetParentsReferences, 'managedObject');
        const sortedByName = sortBy(assetParents, ['name']);
        const featuredItems = remove(sortedByName, { id: featuredParentId });
        const items = featuredItems.concat(sortedByName);
        const names = map(items, 'name');
        return names.join(', ');
    }
    getModel(device) {
        const hardware = this.getHardware(device);
        return hardware && hardware.model;
    }
    getProperName(device) {
        const { id, name } = device;
        return name ? name : this.translateService.instant('Device {{id}}', { id });
    }
    getSerialNumber(device) {
        const hardware = this.getHardware(device);
        const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    }
    getHardware(device) {
        const hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    }
    isVendme(device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    }
}
ColumnUtilService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ColumnUtilService, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });
ColumnUtilService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ColumnUtilService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ColumnUtilService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1ncmlkL2NvbHVtbnMvY29sdW1uLXV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQzs7O0FBRWhEOztHQUVHO0FBR0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFzQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFHLENBQUM7SUFFNUQsYUFBYSxDQUFDLE1BQXNCO1FBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQztJQUVELE9BQU8sQ0FBQyxhQUE2QixFQUFFLE1BQU0sR0FBRyxJQUFJO1FBQ2xELElBQUksYUFBYSxDQUFDLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRTtZQUN2RSxPQUFPLEdBQUcsTUFBTSxTQUFTLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUM3QztRQUNELE9BQU8sR0FBRyxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxlQUFlLENBQUMsTUFBc0IsRUFBRSxnQkFBa0M7UUFDeEUsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUM5RCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbEUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDcEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQXNCO1FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQsYUFBYSxDQUFDLE1BQXNCO1FBQ2xDLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQXNCO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUM3RSxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU8sV0FBVyxDQUFDLE1BQXNCO1FBQ3hDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDaEQsQ0FBQyxDQUFDLDBEQUEwRDtZQUM1RCxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ25CLE9BQU8sTUFBTSxJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyxRQUFRLENBQUMsTUFBc0I7UUFDckMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLHdDQUF3QyxDQUFDO0lBQ2xFLENBQUM7OzhHQWpEVSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQURKLE1BQU07MkZBQ25CLGlCQUFpQjtrQkFEN0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IG1hcCwgcmVtb3ZlLCBzb3J0QnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG4vKipcbiAqIFNlcnZpY2UgY29udGFpbnMgbG9naWMgZXh0cmFjdGVkIGZyb20gdGhlIGRldmljZS1ncmlkIHNlcnZpY2UgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBNVE0tNDAyMzkuXG4gKi9cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb2x1bW5VdGlsU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIGdldEFsYXJtc0hyZWYoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0SHJlZihkZXZpY2UpfS9hbGFybXNgO1xuICB9XG5cbiAgZ2V0SHJlZihncm91cE9yRGV2aWNlOiBJTWFuYWdlZE9iamVjdCwgcHJlZml4ID0gJyMvJyk6IHN0cmluZyB7XG4gICAgaWYgKGdyb3VwT3JEZXZpY2UuYzh5X0lzRGV2aWNlR3JvdXAgfHwgZ3JvdXBPckRldmljZS5jOHlfSXNEeW5hbWljR3JvdXApIHtcbiAgICAgIHJldHVybiBgJHtwcmVmaXh9Z3JvdXAvJHtncm91cE9yRGV2aWNlLmlkfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtwcmVmaXh9ZGV2aWNlLyR7Z3JvdXBPckRldmljZS5pZH1gO1xuICB9XG5cbiAgZ2V0UGFyZW50c05hbWVzKGRldmljZTogSU1hbmFnZWRPYmplY3QsIGZlYXR1cmVkUGFyZW50SWQ/OiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFzc2V0UGFyZW50c1JlZmVyZW5jZXMgPSBkZXZpY2UuYXNzZXRQYXJlbnRzLnJlZmVyZW5jZXM7XG4gICAgY29uc3QgYXNzZXRQYXJlbnRzID0gbWFwKGFzc2V0UGFyZW50c1JlZmVyZW5jZXMsICdtYW5hZ2VkT2JqZWN0Jyk7XG4gICAgY29uc3Qgc29ydGVkQnlOYW1lID0gc29ydEJ5KGFzc2V0UGFyZW50cywgWyduYW1lJ10pO1xuICAgIGNvbnN0IGZlYXR1cmVkSXRlbXMgPSByZW1vdmUoc29ydGVkQnlOYW1lLCB7IGlkOiBmZWF0dXJlZFBhcmVudElkIH0pO1xuICAgIGNvbnN0IGl0ZW1zID0gZmVhdHVyZWRJdGVtcy5jb25jYXQoc29ydGVkQnlOYW1lKTtcbiAgICBjb25zdCBuYW1lcyA9IG1hcChpdGVtcywgJ25hbWUnKTtcbiAgICByZXR1cm4gbmFtZXMuam9pbignLCAnKTtcbiAgfVxuXG4gIGdldE1vZGVsKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhhcmR3YXJlID0gdGhpcy5nZXRIYXJkd2FyZShkZXZpY2UpO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZS5tb2RlbDtcbiAgfVxuXG4gIGdldFByb3Blck5hbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBpZCwgbmFtZSB9ID0gZGV2aWNlO1xuICAgIHJldHVybiBuYW1lID8gbmFtZSA6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdEZXZpY2Uge3tpZH19JywgeyBpZCB9KTtcbiAgfVxuXG4gIGdldFNlcmlhbE51bWJlcihkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBoYXJkd2FyZSA9IHRoaXMuZ2V0SGFyZHdhcmUoZGV2aWNlKTtcbiAgICBjb25zdCBzZXJpYWxQcm9wZXJ0eU5hbWUgPSB0aGlzLmlzVmVuZG1lKGRldmljZSkgPyAnc2VyaWFsJyA6ICdzZXJpYWxOdW1iZXInO1xuICAgIHJldHVybiBoYXJkd2FyZSAmJiBoYXJkd2FyZVtzZXJpYWxQcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIYXJkd2FyZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogYW55IHtcbiAgICBjb25zdCBoYXJkd2FyZVByb3BlcnR5TmFtZSA9IHRoaXMuaXNWZW5kbWUoZGV2aWNlKVxuICAgICAgPyAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8nXG4gICAgICA6ICdjOHlfSGFyZHdhcmUnO1xuICAgIHJldHVybiBkZXZpY2UgJiYgZGV2aWNlW2hhcmR3YXJlUHJvcGVydHlOYW1lXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWZW5kbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBkZXZpY2UudHlwZSA9PT0gJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX1ZlbmRpbmdNYWNoaW5lJztcbiAgfVxufVxuIl19
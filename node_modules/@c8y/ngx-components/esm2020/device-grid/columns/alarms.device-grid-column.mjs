import { BaseColumn, gettext } from '@c8y/ngx-components';
import { map } from 'lodash-es';
import { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';
import { AlarmsHeaderCellRendererComponent } from './alarms.header-cell-renderer.component';
export class AlarmsDeviceGridColumn extends BaseColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'alarms';
        this.header = gettext('Alarms');
        this.headerCellRendererComponent = AlarmsHeaderCellRendererComponent;
        this.cellRendererComponent = AlarmsCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    alarm: {
                        type: 'object',
                        title: gettext('Show items'),
                        properties: {
                            critical: {
                                type: 'switch',
                                title: gettext('With active critical alarms')
                            },
                            major: {
                                type: 'switch',
                                title: gettext('With active major alarms')
                            },
                            minor: {
                                type: 'switch',
                                title: gettext('With active minor alarms')
                            },
                            warning: {
                                type: 'switch',
                                title: gettext('With active warnings')
                            },
                            none: {
                                type: 'switch',
                                title: gettext('With no active alarms or warnings')
                            }
                        }
                    }
                }
            },
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.alarm.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.alarm.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.alarm.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.alarm.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.alarm.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], sev => {
                            const zero = {};
                            const has = { __not: { __has: undefined } };
                            const key = `c8y_ActiveAlarmsStatus.${sev}`;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2RldmljZS1ncmlkL2NvbHVtbnMvYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFnQixPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRTVGLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxVQUFVO0lBQ3BELFlBQVksbUJBQWtDO1FBQzVDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxpQ0FBaUMsQ0FBQztRQUNyRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7UUFFekQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLEtBQUssRUFBRTt3QkFDTCxJQUFJLEVBQUUsUUFBUTt3QkFDZCxLQUFLLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQzt3QkFDNUIsVUFBVSxFQUFFOzRCQUNWLFFBQVEsRUFBRTtnQ0FDUixJQUFJLEVBQUUsUUFBUTtnQ0FDZCxLQUFLLEVBQUUsT0FBTyxDQUFDLDZCQUE2QixDQUFDOzZCQUM5Qzs0QkFDRCxLQUFLLEVB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QUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTtnQkFDeEMsRUFBRSxJQUFJLEVBQUUsZ0NBQWdDLEVBQUU7YUFDM0M7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUNvbHVtbiwgQ29sdW1uQ29uZmlnLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9hbGFybXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWxhcm1zSGVhZGVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9hbGFybXMuaGVhZGVyLWNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIEFsYXJtc0RldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoaW5pdGlhbENvbHVtbkNvbmZpZz86IENvbHVtbkNvbmZpZykge1xuICAgIHN1cGVyKGluaXRpYWxDb2x1bW5Db25maWcpO1xuICAgIHRoaXMubmFtZSA9ICdhbGFybXMnO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnQWxhcm1zJyk7XG4gICAgdGhpcy5oZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgPSBBbGFybXNIZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgYWxhcm06IHtcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1Nob3cgaXRlbXMnKSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgY3JpdGljYWw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2l0aCBhY3RpdmUgY3JpdGljYWwgYWxhcm1zJylcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2l0aCBhY3RpdmUgbWFqb3IgYWxhcm1zJylcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWlub3I6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2l0aCBhY3RpdmUgbWlub3IgYWxhcm1zJylcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgd2FybmluZzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzd2l0Y2gnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdXaXRoIGFjdGl2ZSB3YXJuaW5ncycpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5vbmU6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3dpdGNoJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2l0aCBubyBhY3RpdmUgYWxhcm1zIG9yIHdhcm5pbmdzJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldEZpbHRlcihtb2RlbCkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBjb25zdCBvcnMgPSBbXTtcbiAgICAgICAgaWYgKG1vZGVsLmFsYXJtLmNyaXRpY2FsKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5jcml0aWNhbCc6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC5hbGFybS5tYWpvcikge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMubWFqb3InOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwuYWxhcm0ubWlub3IpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1pbm9yJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLmFsYXJtLndhcm5pbmcpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLndhcm5pbmcnOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwuYWxhcm0ubm9uZSkge1xuICAgICAgICAgIG9ycy5wdXNoKHsgX19ub3Q6IHsgX19oYXM6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzJyB9IH0pO1xuICAgICAgICAgIG9ycy5wdXNoKHtcbiAgICAgICAgICAgIF9fYW5kOiBtYXAoWydjcml0aWNhbCcsICdtYWpvcicsICdtaW5vcicsICd3YXJuaW5nJ10sIHNldiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHplcm8gPSB7fTtcbiAgICAgICAgICAgICAgY29uc3QgaGFzID0geyBfX25vdDogeyBfX2hhczogdW5kZWZpbmVkIH0gfTtcbiAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYGM4eV9BY3RpdmVBbGFybXNTdGF0dXMuJHtzZXZ9YDtcbiAgICAgICAgICAgICAgemVyb1trZXldID0gMDtcbiAgICAgICAgICAgICAgaGFzLl9fbm90Ll9faGFzID0ga2V5O1xuICAgICAgICAgICAgICByZXR1cm4geyBfX29yOiBbemVybywgaGFzXSB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JzLmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0gb3JzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW1xuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLmNyaXRpY2FsJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1ham9yJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1pbm9yJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLndhcm5pbmcnIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=
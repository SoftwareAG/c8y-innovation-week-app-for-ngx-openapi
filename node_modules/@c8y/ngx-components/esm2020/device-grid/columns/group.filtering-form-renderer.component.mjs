import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { FilteringFormRendererContext } from '@c8y/ngx-components';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
export class GroupFilteringFormRendererComponent {
    constructor(context) {
        this.context = context;
        this.preselected = [];
    }
    onEnterKeyUp(event) {
        event.stopPropagation();
        this.applyFilter();
    }
    onEscapeKeyDown(event) {
        event.stopPropagation();
        this.resetFilter();
    }
    ngOnInit() {
        const column = this.context.property;
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.preselected = this.model.selectedNodes || [];
    }
    ngAfterViewInit() {
        setTimeout(() => {
            try {
                this.assetSelector.nativeElement.querySelector('input').focus();
            }
            catch (ex) {
                // intended empty
            }
        }, 250);
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
    selectionChanged(nodes) {
        this.model.selectedNodes = nodes.items;
    }
}
GroupFilteringFormRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupFilteringFormRendererComponent, deps: [{ token: i1.FilteringFormRendererContext }], target: i0.ɵɵFactoryTarget.Component });
GroupFilteringFormRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: GroupFilteringFormRendererComponent, selector: "ng-component", host: { listeners: { "keyup.enter": "onEnterKeyUp($event)", "keydown.escape": "onEscapeKeyDown($event)" } }, viewQueries: [{ propertyName: "assetSelector", first: true, predicate: ["assetSelector"], descendants: true, read: ElementRef }], ngImport: i0, template: "<c8y-asset-selector\n  #assetSelector\n  [config]=\"{\n    groupsOnly: true,\n    multi: true,\n    groupsSelectable: true,\n    search: true\n  }\"\n  [selected]=\"preselected\"\n  (onSelected)=\"selectionChanged($event)\"\n  class=\"bg-component\"\n></c8y-asset-selector>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n", dependencies: [{ kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i2.AssetSelectorComponent, selector: "c8y-asset-selector", inputs: ["config", "active", "index", "asset", "selectedDevice", "selected", "rootNode", "selectedItems", "container"], outputs: ["onSelected", "onClearSelected", "onRowSelected", "onLoad"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupFilteringFormRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<c8y-asset-selector\n  #assetSelector\n  [config]=\"{\n    groupsOnly: true,\n    multi: true,\n    groupsSelectable: true,\n    search: true\n  }\"\n  [selected]=\"preselected\"\n  (onSelected)=\"selectionChanged($event)\"\n  class=\"bg-component\"\n></c8y-asset-selector>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FilteringFormRendererContext }]; }, propDecorators: { assetSelector: [{
                type: ViewChild,
                args: ['assetSelector', { static: false, read: ElementRef }]
            }], onEnterKeyUp: [{
                type: HostListener,
                args: ['keyup.enter', ['$event']]
            }], onEscapeKeyDown: [{
                type: HostListener,
                args: ['keydown.escape', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZGV2aWNlLWdyaWQvY29sdW1ucy9ncm91cC5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9kZXZpY2UtZ3JpZC9jb2x1bW5zL2dyb3VwLmZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFVLDRCQUE0QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7OztBQUt0QyxNQUFNLE9BQU8sbUNBQW1DO0lBSzlDLFlBQW1CLE9BQXFDO1FBQXJDLFlBQU8sR0FBUCxPQUFPLENBQThCO1FBRnhELGdCQUFXLEdBQWEsRUFBRSxDQUFDO0lBRWdDLENBQUM7SUFFbkIsWUFBWSxDQUFDLEtBQW9CO1FBQ3hFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUMyQyxlQUFlLENBQUMsS0FBb0I7UUFDOUUsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQzdDLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsZUFBZTtRQUNiLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJO2dCQUNGLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNqRTtZQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNYLGlCQUFpQjthQUNsQjtRQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDdkIsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFLO1FBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQzs7Z0lBNUNVLG1DQUFtQztvSEFBbkMsbUNBQW1DLDRQQUNLLFVBQVUsNkJDUi9ELHVzQkFnQ0E7MkZEekJhLG1DQUFtQztrQkFIL0MsU0FBUzs7bUhBSXlELGFBQWE7c0JBQTdFLFNBQVM7dUJBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO2dCQU10QixZQUFZO3NCQUFwRCxZQUFZO3VCQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFJSyxlQUFlO3NCQUExRCxZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW4sIEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJy4vZ3JvdXAuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgnYXNzZXRTZWxlY3RvcicsIHsgc3RhdGljOiBmYWxzZSwgcmVhZDogRWxlbWVudFJlZiB9KSBhc3NldFNlbGVjdG9yOiBFbGVtZW50UmVmO1xuICBtb2RlbDogYW55O1xuICBwcmVzZWxlY3RlZDogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29udGV4dDogRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCkge31cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cC5lbnRlcicsIFsnJGV2ZW50J10pIG9uRW50ZXJLZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuYXBwbHlGaWx0ZXIoKTtcbiAgfVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVzY2FwZScsIFsnJGV2ZW50J10pIG9uRXNjYXBlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucmVzZXRGaWx0ZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGNvbHVtbjogQ29sdW1uID0gdGhpcy5jb250ZXh0LnByb3BlcnR5O1xuICAgIHRoaXMubW9kZWwgPSBjbG9uZURlZXAoY29sdW1uLmV4dGVybmFsRmlsdGVyUXVlcnkgfHwge30pO1xuICAgIHRoaXMucHJlc2VsZWN0ZWQgPSB0aGlzLm1vZGVsLnNlbGVjdGVkTm9kZXMgfHwgW107XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmFzc2V0U2VsZWN0b3IubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmZvY3VzKCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBpbnRlbmRlZCBlbXB0eVxuICAgICAgfVxuICAgIH0sIDI1MCk7XG4gIH1cblxuICBhcHBseUZpbHRlcigpIHtcbiAgICB0aGlzLmNvbnRleHQuYXBwbHlGaWx0ZXIoe1xuICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeTogdGhpcy5tb2RlbFxuICAgIH0pO1xuICB9XG5cbiAgcmVzZXRGaWx0ZXIoKSB7XG4gICAgdGhpcy5jb250ZXh0LnJlc2V0RmlsdGVyKCk7XG4gIH1cblxuICBzZWxlY3Rpb25DaGFuZ2VkKG5vZGVzKSB7XG4gICAgdGhpcy5tb2RlbC5zZWxlY3RlZE5vZGVzID0gbm9kZXMuaXRlbXM7XG4gIH1cbn1cbiIsIjxjOHktYXNzZXQtc2VsZWN0b3JcbiAgI2Fzc2V0U2VsZWN0b3JcbiAgW2NvbmZpZ109XCJ7XG4gICAgZ3JvdXBzT25seTogdHJ1ZSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICBncm91cHNTZWxlY3RhYmxlOiB0cnVlLFxuICAgIHNlYXJjaDogdHJ1ZVxuICB9XCJcbiAgW3NlbGVjdGVkXT1cInByZXNlbGVjdGVkXCJcbiAgKG9uU2VsZWN0ZWQpPVwic2VsZWN0aW9uQ2hhbmdlZCgkZXZlbnQpXCJcbiAgY2xhc3M9XCJiZy1jb21wb25lbnRcIlxuPjwvYzh5LWFzc2V0LXNlbGVjdG9yPlxuXG48ZGl2IGNsYXNzPVwiZGF0YS1ncmlkX19kcm9wZG93bl9fZm9vdGVyIGQtZmxleCBzZXBhcmF0b3ItdG9wXCI+XG4gIDxidXR0b25cbiAgICBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gbS1yLTggZmxleC1ncm93XCJcbiAgICAoY2xpY2spPVwicmVzZXRGaWx0ZXIoKVwiXG4gICAgdGl0bGU9XCJ7eyAnUmVzZXQnIHwgdHJhbnNsYXRlIH19XCJcbiAgICB0cmFuc2xhdGVcbiAgPlxuICAgIFJlc2V0XG4gIDwvYnV0dG9uPlxuXG4gIDxidXR0b25cbiAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tc20gZmxleC1ncm93XCJcbiAgICAoY2xpY2spPVwiYXBwbHlGaWx0ZXIoKVwiXG4gICAgdGl0bGU9XCJ7eyAnQXBwbHknIHwgdHJhbnNsYXRlIH19XCJcbiAgICB0cmFuc2xhdGVcbiAgPlxuICAgIEFwcGx5XG4gIDwvYnV0dG9uPlxuPC9kaXY+XG4iXX0=
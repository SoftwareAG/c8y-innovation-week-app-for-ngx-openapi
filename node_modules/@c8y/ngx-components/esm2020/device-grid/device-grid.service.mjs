import { Injectable } from '@angular/core';
import { InventoryService, UserService } from '@c8y/client';
import { AlertService, DataGridService, gettext, ModalService, Status, UserPreferencesService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';
import { ColumnUtilService } from './columns/column-util.service';
import { GroupDeviceGridColumn } from './columns/group.device-grid-column';
import { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';
import { ModelDeviceGridColumn } from './columns/model.device-grid-column';
import { NameDeviceGridColumn } from './columns/name.device-grid-column';
import { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';
import { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';
import { StatusDeviceGridColumn } from './columns/status.device-grid-column';
import { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "./columns/column-util.service";
export class DeviceGridService extends DataGridService {
    constructor(inventoryService, userService, translateService, alertService, modal, columnUtilService, userPreferencesService) {
        super(userPreferencesService);
        this.inventoryService = inventoryService;
        this.userService = userService;
        this.translateService = translateService;
        this.alertService = alertService;
        this.modal = modal;
        this.columnUtilService = columnUtilService;
        this.userPreferencesService = userPreferencesService;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';
    }
    getDefaultColumns() {
        const defaultColumns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getChildDeviceGridColumns() {
        const childDeviceGridColumn = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return childDeviceGridColumn;
    }
    getDefaultPagination() {
        return {
            pageSize: 25,
            currentPage: 1
        };
    }
    getInfiniteScrollPagination() {
        return {
            pageSize: 50,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [
            {
                type: "DELETE" /* DeviceGridActionType.Delete */,
                callback: (item) => this.delete(item)
            }
        ];
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getDefaultHeaderActionControls() {
        return [];
    }
    getProperName(device) {
        return this.columnUtilService.getProperName(device);
    }
    getModel(device) {
        return this.columnUtilService.getModel(device);
    }
    getSerialNumber(device) {
        return this.columnUtilService.getSerialNumber(device);
    }
    getParentsNames(device, featuredParentId) {
        return this.columnUtilService.getParentsNames(device, featuredParentId);
    }
    getHref(groupOrDevice, prefix = '#/') {
        return this.columnUtilService.getHref(groupOrDevice, prefix);
    }
    getAlarmsHref(device) {
        return this.columnUtilService.getAlarmsHref(device);
    }
    async delete(device) {
        try {
            const deviceWithChildren = await (await this.inventoryService.detail(device, { withChildren: true })).data;
            const hasChildDevices = deviceWithChildren.childDevices?.references?.length > 0;
            const hasChildAdditions = deviceWithChildren.childAdditions?.references?.length > 0;
            const hasChildAssets = deviceWithChildren.childAssets?.references?.length > 0;
            const showDeleteChildren = () => hasChildAdditions || hasChildDevices || hasChildAssets;
            const modalResult = await this.modal.confirm(gettext('Delete device'), this.translateService.instant(gettext(`You are about to delete device "{{ name }}". Do you want to proceed?`), device), Status.DANGER, { ok: gettext('Delete'), cancel: gettext('Cancel') }, {
                cascade: {
                    text: gettext('Also delete child hierarchy of this device.'),
                    checked: showDeleteChildren(),
                    showIf: showDeleteChildren,
                    disabledByKey: 'withDeviceUser'
                },
                withDeviceUser: {
                    text: this.translateService.instant(gettext('Also delete associated device owner "{{ owner }}".'), device),
                    checked: false,
                    showIf: () => {
                        const isRootDevice = device.c8y_IsDevice;
                        const hasDeviceUserAsOwner = device.owner &&
                            this.userService.isDeviceUser({ id: device.owner });
                        return Boolean(isRootDevice && hasDeviceUserAsOwner);
                    },
                    disabledByKey: 'cascade'
                }
            });
            await this.inventoryService.delete(device, modalResult.confirmOptions);
            this.alertService.success(gettext('Device deleted.'));
            return Promise.resolve();
        }
        catch (ex) {
            // only if not cancel from modal
            if (ex) {
                this.alertService.addServerFailure(ex);
            }
            return Promise.reject();
        }
    }
    async getData(columns, pagination, query = {}, withChildren = false, text = null) {
        const filters = {
            ...this.getDevicesFilters(columns, pagination, query, false, text),
            withGroups: true,
            withChildren
        };
        return this.inventoryService.list(filters);
    }
    async getChildDeviceData(columns, pagination, query = {}, withChildren = false, id) {
        const childDeviceFilters = true;
        const filters = {
            ...this.getDevicesFilters(columns, pagination, query, childDeviceFilters),
            withGroups: true,
            withChildren
        };
        return this.inventoryService.childDevicesList(id, filters);
    }
    async getCount(columns, pagination, query = {}, text = null) {
        const filters = {
            ...this.getDevicesFilters(columns, pagination, query, false, text),
            pageSize: 1,
            currentPage: 1
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    async getCountChildDevices(columns, pagination, query = {}, id) {
        const childDeviceFilters = true;
        const filters = {
            ...this.getDevicesFilters(columns, pagination, query, childDeviceFilters),
            pageSize: 1,
            currentPage: 1
        };
        return (await this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
    }
    async getTotalChildDevices(query = {}, id) {
        const filters = {
            q: this.queriesUtil.buildQuery(query),
            pageSize: 1,
            withTotalPages: true
        };
        return (await this.inventoryService.childDevicesList(id, filters)).paging.totalPages;
    }
    async getTotal(query = {}) {
        const filters = {
            q: this.queriesUtil.buildQuery(query),
            pageSize: 1,
            withTotalPages: true
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    getDeviceQueryString(columns, query) {
        let fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    clearConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        super.clearConfig(key);
    }
    getConfig$(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return super.getConfig$(key);
    }
    saveConfig$(config, key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return super.saveConfig$(config, key);
    }
    getDevicesFilters(columns, pagination, query, childDeviceFilters, text) {
        return {
            ...(childDeviceFilters
                ? { query: this.getDeviceQueryString(columns, query) }
                : { q: this.getDeviceQueryString(columns, query) }),
            ...(text && { text }),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withChildren: false,
            withTotalPages: true
        };
    }
}
DeviceGridService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridService, deps: [{ token: i1.InventoryService }, { token: i1.UserService }, { token: i2.TranslateService }, { token: i3.AlertService }, { token: i3.ModalService }, { token: i4.ColumnUtilService }, { token: i3.UserPreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceGridService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i1.UserService }, { type: i2.TranslateService }, { type: i3.AlertService }, { type: i3.ModalService }, { type: i4.ColumnUtilService }, { type: i3.UserPreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,
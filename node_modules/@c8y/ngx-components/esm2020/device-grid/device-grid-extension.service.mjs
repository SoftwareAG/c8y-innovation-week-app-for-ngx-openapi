import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ExtensionPointWithoutStateForPlugins, fromTriggerOnce, hookGeneric, PluginsResolveService } from '@c8y/ngx-components';
import { flatten } from 'lodash-es';
import { shareReplay } from 'rxjs/operators';
import { DeviceGridService } from './device-grid.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@angular/router";
import * as i3 from "./device-grid.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookDeviceGridAction` function instead.
 */
export const HOOK_DEVICE_GRID_ACTION = new InjectionToken('DeviceGridActionHook');
/**
 * You can either provide a single `DeviceGridActionExtension` as parameter:
 * ```typescript
 *  hookDeviceGridAction(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDeviceGridAction([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DeviceGridActionExtension>`
 * ```typescript
 *  export class MyDeviceGridActionFactory implements ExtensionFactory<DeviceGridActionExtension> {...}
 *  ...
 *  hookDeviceGridAction(MyDeviceGridActionFactory)
 * ```
 * A typed alternative to `HOOK_DEVICE_GRID_ACTION_DELETE`.
 * @param action The `DeviceGridDeleteExtension`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDeviceGridAction(action, options) {
    return hookGeneric(action, HOOK_DEVICE_GRID_ACTION, options);
}
/**
 * A service which defines device grid action options.
 */
export class DeviceGridExtensionService extends ExtensionPointWithoutStateForPlugins {
    constructor(rootInjector, plugins, router, deviceGridService) {
        super(rootInjector, plugins);
        this.router = router;
        this.deviceGridService = deviceGridService;
        this.items$ = this.setupItemsObservable();
    }
    setupItemsObservable() {
        return fromTriggerOnce(this.router, this.refresh$, [
            () => flatten(this.injectors.map(injector => injector.get(HOOK_DEVICE_GRID_ACTION, [
                {
                    type: "DELETE" /* BuiltInActionType.Delete */,
                    deviceMatches: (_mo) => true,
                    onAction: (mo) => this.deviceGridService.delete(mo),
                    refreshAfterActionDone: true
                }
            ], { self: true }))),
            () => this.factories
        ]).pipe(shareReplay(1));
    }
}
DeviceGridExtensionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridExtensionService, deps: [{ token: i0.Injector }, { token: i1.PluginsResolveService }, { token: i2.Router }, { token: i3.DeviceGridService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceGridExtensionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridExtensionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceGridExtensionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.PluginsResolveService }, { type: i2.Router }, { type: i3.DeviceGridService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXh0ZW5zaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC9kZXZpY2UtZ3JpZC1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFFTCxvQ0FBb0MsRUFDcEMsZUFBZSxFQUVmLFdBQVcsRUFDWCxxQkFBcUIsRUFHdEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7QUF5QjFEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUN2RCxzQkFBc0IsQ0FDdkIsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FDbEMsTUFBa0QsRUFDbEQsT0FBOEI7SUFFOUIsT0FBTyxXQUFXLENBQTRCLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxRixDQUFDO0FBRUQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsb0NBQTBEO0lBQ3hHLFlBQ0UsWUFBc0IsRUFDdEIsT0FBOEIsRUFDdEIsTUFBYyxFQUNkLGlCQUFvQztRQUU1QyxLQUFLLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBSHJCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLGVBQWUsQ0FBdUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3ZFLEdBQUcsRUFBRSxDQUNILE9BQU8sQ0FDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUM1QixRQUFRLENBQUMsR0FBRyxDQUNWLHVCQUF1QixFQUN2QjtnQkFDRTtvQkFDRSxJQUFJLHlDQUEwQjtvQkFDOUIsYUFBYSxFQUFFLENBQUMsR0FBbUIsRUFBRSxFQUFFLENBQUMsSUFBSTtvQkFDNUMsUUFBUSxFQUFFLENBQUMsRUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQ25FLHNCQUFzQixFQUFFLElBQUk7aUJBQzdCO2FBQ0YsRUFDRCxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FDZixDQUNGLENBQ0Y7WUFDSCxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUztTQUNyQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7O3VIQWhDVSwwQkFBMEI7MkhBQTFCLDBCQUEwQixjQUZ6QixNQUFNOzJGQUVQLDBCQUEwQjtrQkFIdEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7XG4gIEV4dGVuc2lvbkZhY3RvcnksXG4gIEV4dGVuc2lvblBvaW50V2l0aG91dFN0YXRlRm9yUGx1Z2lucyxcbiAgZnJvbVRyaWdnZXJPbmNlLFxuICBHZW5lcmljSG9va1R5cGUsXG4gIGhvb2tHZW5lcmljLFxuICBQbHVnaW5zUmVzb2x2ZVNlcnZpY2UsXG4gIEhvb2tPcHRpb25zLFxuICBCdWlsdEluQWN0aW9uVHlwZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQWN0aW9uSG9vayB9IGZyb20gJy4vZGV2aWNlLWdyaWQubW9kZWwnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICcuL2RldmljZS1ncmlkLnNlcnZpY2UnO1xuXG4vKipcbiAqIEFuIGV4dGVuc2lvbiBIT09LIGNhbiB1c2UgZWl0aGVyIGEgcHVyZSB2YWx1ZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlVmFsdWU6IHsgLi4uaG9va1ZhbHVlIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICpcbiAqIE9yIGFuIGFycmF5IHRvIGRpcmVjdGx5IHJlZ2lzdGVyIG11bHRpcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VWYWx1ZTogW3sgLi4uaG9va1ZhbHVlcyB9XSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKlxuICogT3IgYW4gRXh0ZW5zaW9uRmFjdG9yeSB3aGljaCBhbGxvd3MgdG8gZGVmaW5lIGEgZ2V0KCkgZnVuY3Rpb24uIFRoaXMgZnVuY3Rpb25cbiAqIGdldHMgY2FsbGVkIG9uIGVhY2ggbmF2aWdhdGlvbiB3aXRoIHRoZSBjdXJyZW50IHJvdXRlIGFuZCBjYW4gcmV0dXJuIHZhbHVlc1xuICogYXN5bmMgKG9ic2VydmFibGUgb3IgcHJvbWlzZSkuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZUZhY3Rvcnk6IHsgZ2V0OiAocm91dGUpID0+IGRvU29tZXRoaW5nQXN5bmMocm91dGUpIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICovXG5leHBvcnQgdHlwZSBEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uID1cbiAgfCBEZXZpY2VHcmlkQWN0aW9uSG9va1xuICB8IERldmljZUdyaWRBY3Rpb25Ib29rW11cbiAgfCBFeHRlbnNpb25GYWN0b3J5PERldmljZUdyaWRBY3Rpb25Ib29rPjtcblxuLyoqXG4gKiBBIGhvb2sgdG8gdXNlIGZvciBNdWx0aSBQcm92aWRlciBleHRlbnNpb24uXG4gKiBAZGVwcmVjYXRlZCBDb25zaWRlciB1c2luZyB0aGUgYGhvb2tEZXZpY2VHcmlkQWN0aW9uYCBmdW5jdGlvbiBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgSE9PS19ERVZJQ0VfR1JJRF9BQ1RJT04gPSBuZXcgSW5qZWN0aW9uVG9rZW48RGV2aWNlR3JpZEFjdGlvbkV4dGVuc2lvbj4oXG4gICdEZXZpY2VHcmlkQWN0aW9uSG9vaydcbik7XG5cbi8qKlxuICogWW91IGNhbiBlaXRoZXIgcHJvdmlkZSBhIHNpbmdsZSBgRGV2aWNlR3JpZEFjdGlvbkV4dGVuc2lvbmAgYXMgcGFyYW1ldGVyOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tEZXZpY2VHcmlkQWN0aW9uKC4uLilcbiAqIGBgYFxuICpcbiAqIE9yIGFuIGFycmF5IHRvIGRpcmVjdGx5IHJlZ2lzdGVyIG11bHRpcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGhvb2tEZXZpY2VHcmlkQWN0aW9uKFsuLi5dKVxuICogYGBgXG4gKlxuICogT3IgeW91IHByb3ZpZGUgYW4gU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8RGV2aWNlR3JpZEFjdGlvbkV4dGVuc2lvbj5gXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgZXhwb3J0IGNsYXNzIE15RGV2aWNlR3JpZEFjdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PERldmljZUdyaWRBY3Rpb25FeHRlbnNpb24+IHsuLi59XG4gKiAgLi4uXG4gKiAgaG9va0RldmljZUdyaWRBY3Rpb24oTXlEZXZpY2VHcmlkQWN0aW9uRmFjdG9yeSlcbiAqIGBgYFxuICogQSB0eXBlZCBhbHRlcm5hdGl2ZSB0byBgSE9PS19ERVZJQ0VfR1JJRF9BQ1RJT05fREVMRVRFYC5cbiAqIEBwYXJhbSBhY3Rpb24gVGhlIGBEZXZpY2VHcmlkRGVsZXRlRXh0ZW5zaW9uYCdzIG9yIGBFeHRlbnNpb25GYWN0b3J5YCB0byBiZSBwcm92aWRlZC5cbiAqIEByZXR1cm5zIEFuIGBQcm92aWRlcmAgdG8gYmUgcHJvdmlkZWQgaW4geW91ciBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob29rRGV2aWNlR3JpZEFjdGlvbihcbiAgYWN0aW9uOiBHZW5lcmljSG9va1R5cGU8RGV2aWNlR3JpZEFjdGlvbkV4dGVuc2lvbj4sXG4gIG9wdGlvbnM/OiBQYXJ0aWFsPEhvb2tPcHRpb25zPlxuKSB7XG4gIHJldHVybiBob29rR2VuZXJpYzxEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uPihhY3Rpb24sIEhPT0tfREVWSUNFX0dSSURfQUNUSU9OLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggZGVmaW5lcyBkZXZpY2UgZ3JpZCBhY3Rpb24gb3B0aW9ucy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlR3JpZEV4dGVuc2lvblNlcnZpY2UgZXh0ZW5kcyBFeHRlbnNpb25Qb2ludFdpdGhvdXRTdGF0ZUZvclBsdWdpbnM8RGV2aWNlR3JpZEFjdGlvbkhvb2s+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcm9vdEluamVjdG9yOiBJbmplY3RvcixcbiAgICBwbHVnaW5zOiBQbHVnaW5zUmVzb2x2ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGRldmljZUdyaWRTZXJ2aWNlOiBEZXZpY2VHcmlkU2VydmljZVxuICApIHtcbiAgICBzdXBlcihyb290SW5qZWN0b3IsIHBsdWdpbnMpO1xuICAgIHRoaXMuaXRlbXMkID0gdGhpcy5zZXR1cEl0ZW1zT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldHVwSXRlbXNPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8RGV2aWNlR3JpZEFjdGlvbkhvb2tbXT4ge1xuICAgIHJldHVybiBmcm9tVHJpZ2dlck9uY2U8RGV2aWNlR3JpZEFjdGlvbkhvb2s+KHRoaXMucm91dGVyLCB0aGlzLnJlZnJlc2gkLCBbXG4gICAgICAoKSA9PlxuICAgICAgICBmbGF0dGVuKFxuICAgICAgICAgIHRoaXMuaW5qZWN0b3JzLm1hcChpbmplY3RvciA9PlxuICAgICAgICAgICAgaW5qZWN0b3IuZ2V0KFxuICAgICAgICAgICAgICBIT09LX0RFVklDRV9HUklEX0FDVElPTixcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IEJ1aWx0SW5BY3Rpb25UeXBlLkRlbGV0ZSxcbiAgICAgICAgICAgICAgICAgIGRldmljZU1hdGNoZXM6IChfbW86IElNYW5hZ2VkT2JqZWN0KSA9PiB0cnVlLFxuICAgICAgICAgICAgICAgICAgb25BY3Rpb246IChtbzogSU1hbmFnZWRPYmplY3QpID0+IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZGVsZXRlKG1vKSxcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hBZnRlckFjdGlvbkRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHsgc2VsZjogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgKCkgPT4gdGhpcy5mYWN0b3JpZXNcbiAgICBdKS5waXBlKHNoYXJlUmVwbGF5KDEpKTtcbiAgfVxufVxuIl19
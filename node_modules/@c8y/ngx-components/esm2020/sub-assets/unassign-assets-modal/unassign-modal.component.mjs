import { Component, Input, ViewChild } from '@angular/core';
import { ConfirmModalComponent, GainsightService, gettext, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import { PRODUCT_EXPERIENCE } from '../shared/sub-assets.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@c8y/ngx-components";
export class UnassignModalComponent {
    constructor(translateService, gainsightService) {
        this.translateService = translateService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign "{{name}}". Do you want to proceed?'), { name: this.asset.name });
    }
    async ngAfterViewInit() {
        try {
            await this.modalRef.result;
            this.onClose();
        }
        catch (error) {
            this.onDismiss();
        }
    }
    onClose() {
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENT, {
            component: PRODUCT_EXPERIENCE.UNASSIGN_MODAL.COMPONENTS.UNASSIGN_MODAL,
            result: PRODUCT_EXPERIENCE.UNASSIGN_MODAL.RESULTS.ASSET_UNASSIGNED,
            url: this.CURRENT_LOCATION
        });
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENT, {
            component: PRODUCT_EXPERIENCE.UNASSIGN_MODAL.COMPONENTS.UNASSIGN_MODAL,
            action: PRODUCT_EXPERIENCE.UNASSIGN_MODAL.ACTIONS.CANCEL,
            url: this.CURRENT_LOCATION
        });
        this.closeSubject.complete();
    }
}
UnassignModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UnassignModalComponent, deps: [{ token: i1.TranslateService }, { token: i2.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
UnassignModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: UnassignModalComponent, selector: "c8y-unassign-modal", inputs: { asset: "asset" }, viewQueries: [{ propertyName: "modalRef", first: true, predicate: ["modalRef"], descendants: true }], ngImport: i0, template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n", dependencies: [{ kind: "component", type: i2.ConfirmModalComponent, selector: "c8y-confirm-modal", inputs: ["title", "body", "confirmOptions", "status", "labels"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UnassignModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-unassign-modal', template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.GainsightService }]; }, propDecorators: { asset: [{
                type: Input
            }], modalRef: [{
                type: ViewChild,
                args: ['modalRef', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy91bmFzc2lnbi1hc3NldHMtbW9kYWwvdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy91bmFzc2lnbi1hc3NldHMtbW9kYWwvdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFFUCxNQUFNLEVBRVAsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7O0FBTWhFLE1BQU0sT0FBTyxzQkFBc0I7SUFVakMsWUFDVSxnQkFBa0MsRUFDbEMsZ0JBQWtDO1FBRGxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVg1QyxxQkFBZ0IsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBSWpDLGlCQUFZLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDL0MsV0FBTSxHQUFnQixFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQzdFLFVBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUIsV0FBTSxHQUFlLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFLakMsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQzFDLE9BQU8sQ0FBQywrREFBK0QsQ0FBQyxFQUN4RSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlO1FBQ25CLElBQUk7WUFDRixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRTtZQUMzRCxTQUFTLEVBQUUsa0JBQWtCLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxjQUFjO1lBQ3RFLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtZQUNsRSxHQUFHLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtTQUMzQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7WUFDM0QsU0FBUyxFQUFFLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYztZQUN0RSxNQUFNLEVBQUUsa0JBQWtCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1lBQ3hELEdBQUcsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1NBQzNCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7bUhBaERVLHNCQUFzQjt1R0FBdEIsc0JBQXNCLDRMQ2xCbkMsMkpBR0E7MkZEZWEsc0JBQXNCO2tCQUpsQyxTQUFTOytCQUNFLG9CQUFvQjtzSUFLckIsS0FBSztzQkFBYixLQUFLO2dCQUNvQyxRQUFRO3NCQUFqRCxTQUFTO3VCQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQ29uZmlybU1vZGFsQ29tcG9uZW50LFxuICBHYWluc2lnaHRTZXJ2aWNlLFxuICBnZXR0ZXh0LFxuICBNb2RhbExhYmVscyxcbiAgU3RhdHVzLFxuICBTdGF0dXNUeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUFJPRFVDVF9FWFBFUklFTkNFIH0gZnJvbSAnLi4vc2hhcmVkL3N1Yi1hc3NldHMubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdW5hc3NpZ24tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVuYXNzaWduTW9kYWxDb21wb25lbnQge1xuICBDVVJSRU5UX0xPQ0FUSU9OID0gbG9jYXRpb24uaHJlZjtcbiAgQElucHV0KCkgYXNzZXQ6IElNYW5hZ2VkT2JqZWN0O1xuICBAVmlld0NoaWxkKCdtb2RhbFJlZicsIHsgc3RhdGljOiBmYWxzZSB9KSBtb2RhbFJlZjogQ29uZmlybU1vZGFsQ29tcG9uZW50O1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNsb3NlU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGxhYmVsczogTW9kYWxMYWJlbHMgPSB7IG9rOiBnZXR0ZXh0KCdVbmFzc2lnbicpLCBjYW5jZWw6IGdldHRleHQoJ0NhbmNlbCcpIH07XG4gIHRpdGxlID0gZ2V0dGV4dCgnVW5hc3NpZ24nKTtcbiAgc3RhdHVzOiBTdGF0dXNUeXBlID0gU3RhdHVzLldBUk5JTkc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZ2FpbnNpZ2h0U2VydmljZTogR2FpbnNpZ2h0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIHVuYXNzaWduIFwie3tuYW1lfX1cIi4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD8nKSxcbiAgICAgIHsgbmFtZTogdGhpcy5hc3NldC5uYW1lIH1cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsUmVmLnJlc3VsdDtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRGlzbWlzcygpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudChQUk9EVUNUX0VYUEVSSUVOQ0UuRVZFTlQsIHtcbiAgICAgIGNvbXBvbmVudDogUFJPRFVDVF9FWFBFUklFTkNFLlVOQVNTSUdOX01PREFMLkNPTVBPTkVOVFMuVU5BU1NJR05fTU9EQUwsXG4gICAgICByZXN1bHQ6IFBST0RVQ1RfRVhQRVJJRU5DRS5VTkFTU0lHTl9NT0RBTC5SRVNVTFRTLkFTU0VUX1VOQVNTSUdORUQsXG4gICAgICB1cmw6IHRoaXMuQ1VSUkVOVF9MT0NBVElPTlxuICAgIH0pO1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxuXG4gIG9uRGlzbWlzcygpIHtcbiAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KFBST0RVQ1RfRVhQRVJJRU5DRS5FVkVOVCwge1xuICAgICAgY29tcG9uZW50OiBQUk9EVUNUX0VYUEVSSUVOQ0UuVU5BU1NJR05fTU9EQUwuQ09NUE9ORU5UUy5VTkFTU0lHTl9NT0RBTCxcbiAgICAgIGFjdGlvbjogUFJPRFVDVF9FWFBFUklFTkNFLlVOQVNTSUdOX01PREFMLkFDVElPTlMuQ0FOQ0VMLFxuICAgICAgdXJsOiB0aGlzLkNVUlJFTlRfTE9DQVRJT05cbiAgICB9KTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG59XG4iLCI8Yzh5LWNvbmZpcm0tbW9kYWwgW3RpdGxlXT1cInRpdGxlXCIgW3N0YXR1c109XCJzdGF0dXNcIiBbbGFiZWxzXT1cImxhYmVsc1wiICNtb2RhbFJlZj5cbiAgPHNwYW4+e3sgbWVzc2FnZSB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj5cbjwvYzh5LWNvbmZpcm0tbW9kYWw+XG4iXX0=
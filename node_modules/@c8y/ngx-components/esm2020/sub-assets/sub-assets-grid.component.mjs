import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { SmartGroupsService } from '@c8y/client';
import { DataGridComponent, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, DATA_GRID_CONFIGURATION_STRATEGY, gettext, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { PRODUCT_EXPERIENCE } from './shared/sub-assets.model';
import { SmartGroupGridConfigurationStrategy } from './smart-group-grid-configuration-strategy.service';
import { SubAssetsGridConfigurationStrategy } from './sub-assets-grid-configuration-strategy.service';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import * as i0 from "@angular/core";
import * as i1 from "./sub-assets.service";
import * as i2 from "ngx-bootstrap/modal";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components/device-grid";
import * as i5 from "@c8y/ngx-components/assets-navigator";
import * as i6 from "@c8y/ngx-components";
import * as i7 from "@angular/common";
export class SubAssetsGridComponent {
    get columns() {
        return this._columns;
    }
    set columns(value) {
        this._columns = value ?? this.subAssetsGridService.getDefaultColumns();
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.subAssetsGridService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.subAssetsGridService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        }
    }
    get isRootGroup() {
        return !this.parentGroup;
    }
    get getInfiniteScrollMode() {
        return this.isRootGroup && this.subAssetsGridService.isUsingInventoryRoles()
            ? 'auto'
            : undefined;
    }
    set _displayOptions(displayOptions) {
        this.displayOptions = { ...this.displayOptions, ...displayOptions };
    }
    constructor(subAssetsGridService, bsModalService, smartGroupsService, deviceGridService, assetNodeService) {
        this.subAssetsGridService = subAssetsGridService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.deviceGridService = deviceGridService;
        this.assetNodeService = assetNodeService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.title = gettext('Subassets');
        this.emptyStateText = gettext('Add your first group or assign devices using the buttons on the action bar.');
        this.loadingItemsLabel = gettext('Loading assets…');
        this.selectable = false;
        this.baseQuery = {};
        this.filterable = true;
        this.sortable = true;
        this.onColumnsChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.pagination = this.subAssetsGridService.getDefaultPagination();
        this.showCounterWarning = false;
        this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.showSearch = false;
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    getGridConfigContext() {
        if (!!this.columnsConfigKey) {
            return { key: this.columnsConfigKey, group: this.parentGroup };
        }
    }
    ngOnInit() {
        const isDynamicGroup = !!this.parentGroup && this.assetNodeService.isDynamicGroup(this.parentGroup);
        if (!this.isRootGroup) {
            this.columns = isDynamicGroup
                ? this.deviceGridService.getDefaultColumns()
                : this.subAssetsGridService.getDefaultColumns(this.filterable, this.sortable);
        }
        if (!this.filterable || !this.sortable) {
            this.displayOptions.filter = this.filterable;
            this.columns.forEach(column => {
                column.filterable = this.filterable;
                column.sortable = this.sortable;
            });
        }
        this.setActionControls();
        this.showSearch = isDynamicGroup || !this.parentGroup;
    }
    async setActionControls() {
        const actionControls = [];
        const { data: isMicroserviceInstalled } = await this.smartGroupsService.isSmartGroupsV2MicroserviceInstalled();
        const deleteAction = {
            type: "DELETE" /* BuiltInActionType.Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup),
            showIf: (asset) => {
                if (this.smartGroupsService.isSmartGroupV2(asset)) {
                    return isMicroserviceInstalled ? this.subAssetsGridService.canDeleteSmartGroup() : false;
                }
                if (this.smartGroupsService.isSmartGroup(asset)) {
                    return this.subAssetsGridService.canDeleteSmartGroup();
                }
                return true;
            }
        };
        actionControls.push(deleteAction);
        const unassignAction = {
            type: 'UNASSIGN',
            icon: 'unlink',
            text: gettext('Unassign'),
            callback: (asset) => this.onUnassignAsset(asset, this.parentGroup),
            showIf: (asset) => this.subAssetsGridService.isDevice(asset) &&
                !this.subAssetsGridService.isSmartGroup(this.parentGroup)
        };
        actionControls.push(unassignAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    onUnassignAsset(asset, parentRef) {
        const initialState = {
            asset
        };
        const modalRef = this.bsModalService.show(UnassignModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe(async (result) => {
            if (result) {
                await this.subAssetsGridService.unassignAsset(asset, parentRef);
                this.refresh.emit();
            }
        });
    }
    async onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe(async (result) => {
            if (result) {
                await this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                if (result.cascade) {
                    this.showCounterWarning = true;
                }
                this.refresh.emit();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.parentGroup && !changes.parentGroup.firstChange) {
            this.dataGrid.reload();
        }
    }
    trackByName(_index, column) {
        return column.name;
    }
    async onDataSourceModifier(dataSourceModifier) {
        const promises = [];
        let counters;
        promises.push(this.subAssetsGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery, dataSourceModifier.searchText));
        promises.push(this.subAssetsGridService.getTotal(this.parentGroup, this.baseQuery));
        promises.push(this.subAssetsGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery, dataSourceModifier.searchText));
        const [dataResponse, size, filteredSize] = await Promise.all(promises);
        if (!counters) {
            counters = {
                size,
                filteredSize
            };
        }
        this.onColumnsChange.emit(dataSourceModifier.columns);
        return {
            res: dataResponse.res,
            data: dataResponse.data,
            paging: dataResponse.paging,
            ...counters
        };
    }
}
SubAssetsGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SubAssetsGridComponent, deps: [{ token: i1.SubAssetsService }, { token: i2.BsModalService }, { token: i3.SmartGroupsService }, { token: i4.DeviceGridService }, { token: i5.AssetNodeService }], target: i0.ɵɵFactoryTarget.Component });
SubAssetsGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SubAssetsGridComponent, selector: "c8y-sub-assets-grid", inputs: { parentGroup: ["parent-group", "parentGroup"], refresh: "refresh", title: "title", emptyStateText: "emptyStateText", loadingItemsLabel: "loadingItemsLabel", columnsConfigKey: "columnsConfigKey", columns: "columns", _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], selectable: "selectable", baseQuery: "baseQuery", _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], filterable: "filterable", sortable: "sortable", _displayOptions: ["displayOptions", "_displayOptions"] }, outputs: { onColumnsChange: "onColumnsChange", itemsSelect: "itemsSelect" }, providers: [
        {
            provide: UserPreferencesConfigurationStrategy,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: SmartGroupGridConfigurationStrategy,
            useClass: SmartGroupGridConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: SubAssetsGridConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
            useExisting: SubAssetsGridComponent
        }
    ], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [showCounterWarning]=\"showCounterWarning\"\n  [refresh]=\"refresh\"\n  [showSearch]=\"showSearch\"\n  [displayOptions]=\"displayOptions\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n>\n  <c8y-ui-empty-state\n    [icon]=\"'c8y-group-add'\"\n    [title]=\"'No items to display.' | translate\"\n    [subtitle]=\"emptyStateText | translate\"\n    [horizontal]=\"true\"\n  ></c8y-ui-empty-state>\n\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n", dependencies: [{ kind: "component", type: i6.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.ColumnDirective, selector: "c8y-column", inputs: ["name"] }, { kind: "component", type: i6.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "singleSelection", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning", "activeClassName"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "directive", type: i6.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "pipe", type: i6.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SubAssetsGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-sub-assets-grid', providers: [
                        {
                            provide: UserPreferencesConfigurationStrategy,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: SmartGroupGridConfigurationStrategy,
                            useClass: SmartGroupGridConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: SubAssetsGridConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
                            useExisting: SubAssetsGridComponent
                        }
                    ], template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [showCounterWarning]=\"showCounterWarning\"\n  [refresh]=\"refresh\"\n  [showSearch]=\"showSearch\"\n  [displayOptions]=\"displayOptions\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n>\n  <c8y-ui-empty-state\n    [icon]=\"'c8y-group-add'\"\n    [title]=\"'No items to display.' | translate\"\n    [subtitle]=\"emptyStateText | translate\"\n    [horizontal]=\"true\"\n  ></c8y-ui-empty-state>\n\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n" }]
        }], ctorParameters: function () { return [{ type: i1.SubAssetsService }, { type: i2.BsModalService }, { type: i3.SmartGroupsService }, { type: i4.DeviceGridService }, { type: i5.AssetNodeService }]; }, propDecorators: { parentGroup: [{
                type: Input,
                args: ['parent-group']
            }], refresh: [{
                type: Input
            }], title: [{
                type: Input
            }], emptyStateText: [{
                type: Input
            }], loadingItemsLabel: [{
                type: Input
            }], columnsConfigKey: [{
                type: Input
            }], columns: [{
                type: Input
            }], _pagination: [{
                type: Input,
                args: ['pagination']
            }], _actionControls: [{
                type: Input,
                args: ['actionControls']
            }], selectable: [{
                type: Input
            }], baseQuery: [{
                type: Input
            }], _bulkActionControls: [{
                type: Input,
                args: ['bulkActionControls']
            }], filterable: [{
                type: Input
            }], sortable: [{
                type: Input
            }], onColumnsChange: [{
                type: Output
            }], itemsSelect: [{
                type: Output
            }], dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: true }]
            }], _displayOptions: [{
                type: Input,
                args: ['displayOptions']
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryBinaryService, InventoryService } from '@c8y/client';
import { AlertService, AssetTypesService, ContextRouteService, gettext } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/client";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
import * as i5 from "ngx-bootstrap/tooltip";
import * as i6 from "./asset-properties-item.component";
export class AssetPropertiesComponent {
    constructor(assetTypes, inventory, inventoryBinary, alert, contextRouteService, activatedRoute) {
        this.assetTypes = assetTypes;
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
        this.alert = alert;
        this.contextRouteService = contextRouteService;
        this.activatedRoute = activatedRoute;
        this.assetChange = new EventEmitter();
        this.properties = [];
        this.customProperties = [];
        this.isEdit = false;
        this.isLoading = false;
    }
    ngOnChanges(changes) {
        if (changes.asset) {
            // Back button handling, as component is not destroyed
            this.assetType = undefined;
            this.customProperties = [];
            this.loadAsset();
        }
    }
    async loadAsset() {
        this.isLoading = true;
        this.assetType = this.assetTypes.getAssetTypeByName(this.asset.type);
        try {
            this.properties = this.keepOrder(this.assetType?.c8y_IsAssetType?.properties, this.properties);
        }
        catch (ex) {
            console.warn(ex);
        }
        this.customProperties = await this.resolveCustomProperties(this.properties);
        this.isLoading = false;
    }
    async resolveCustomProperties(managedObjects) {
        const properties = [];
        for (const mo of managedObjects) {
            if (mo.c8y_JsonSchema) {
                const [item] = await this.parseItem(mo, mo.c8y_JsonSchema.properties, this.asset);
                this.setItemRequired(item, mo);
                properties.push(item);
            }
        }
        return properties;
    }
    deleteTitleFromMOJsonSchema(mo) {
        const schemaProperties = mo?.c8y_JsonSchema?.properties;
        const property = Object.keys(schemaProperties || {})[0];
        delete (mo?.c8y_JsonSchema?.properties[property] || {}).title;
    }
    async parseItem(mo, properties, asset) {
        if (!asset) {
            return [];
        }
        const keys = Object.keys(properties);
        const items = [];
        for (const key of keys) {
            let value = asset[key];
            const type = properties[key].type;
            const title = properties[key].title;
            let file;
            if (type === 'file' && value) {
                const fileId = typeof value === 'object' ? value[0]?.file?.id : value;
                const fileData = await this.getFileManagedObject(fileId);
                file = fileData;
                value = [fileData];
            }
            else if (type === 'date') {
                const valueDate = new Date(value);
                value = !isNaN(valueDate.getTime()) ? valueDate : null;
            }
            if (type === 'object') {
                // remove title to avoid excessive property name on asset complex properties form
                this.deleteTitleFromMOJsonSchema(mo);
                if (!value) {
                    value = {};
                    for (const prop in properties[key].properties) {
                        value[prop] = undefined;
                    }
                }
            }
            items.push({
                key,
                value,
                label: title || mo.label,
                type,
                description: mo.description,
                file,
                complex: type === 'object'
                    ? await this.parseItem(mo, properties[key].properties, value)
                    : undefined,
                isEdit: false,
                jsonSchema: mo.c8y_JsonSchema
            });
        }
        return items;
    }
    toggleEdit(prop) {
        prop.isEdit = !prop.isEdit;
    }
    async getFileManagedObject(id) {
        try {
            const { data } = await this.inventory.detail(id);
            return data;
        }
        catch (ex) {
            this.alert.addServerFailure(ex);
        }
    }
    async save(propertyValue, prop) {
        try {
            if (prop.type === 'object') {
                propertyValue[prop.key] = await this.uploadFiles(propertyValue[prop.key], prop.value);
            }
            else {
                for (const [key, value] of Object.entries(propertyValue)) {
                    if (value === undefined) {
                        propertyValue[key] = null;
                    }
                }
                propertyValue = await this.uploadFiles(propertyValue, prop.value);
            }
            // Avoid making a PUT request containing just the id, as response body might be incomplete
            const hasValues = Object.values(propertyValue).some(value => value !== undefined);
            if (!hasValues) {
                this.toggleEdit(prop);
                return;
            }
            const updatedAsset = { id: this.asset.id, ...propertyValue };
            const { data } = await this.inventory.update(updatedAsset);
            this.toggleEdit(prop);
            this.asset = data;
            this.assetChange.emit(this.asset);
            await this.loadAsset();
            this.alert.success(gettext('Asset properties updated.'));
        }
        catch (ex) {
            this.alert.addServerFailure(ex);
        }
    }
    keepOrder(correctOrderedIds, properties) {
        const orderedProperties = correctOrderedIds.map(({ id }) => {
            const foundProperty = properties.find(property => property.id === id);
            if (!foundProperty) {
                throw new Error('Custom property mismatch');
            }
            return foundProperty;
        });
        return orderedProperties;
    }
    async uploadFiles(model, moId) {
        const keys = Object.keys(model);
        for (const key of keys) {
            if (Array.isArray(model[key]) && model[key][0]?.file instanceof File) {
                try {
                    const upload = await this.inventoryBinary.create(model[key][0].file);
                    try {
                        if (moId && moId[0]) {
                            await this.inventory.childAdditionsRemove(moId[0], this.asset.id);
                        }
                    }
                    catch (ex) {
                        this.alert.addServerFailure(ex);
                    }
                    model[key] = upload.data.id;
                    await this.inventory.childAdditionsAdd(upload.data.id, this.asset.id);
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
            }
        }
        return model;
    }
    setItemRequired(item, mo) {
        const isAssetPropertyRequired = !!this.assetType?.c8y_IsAssetType?.properties.find(p => p.id === mo.id)?.isRequired;
        if (!isAssetPropertyRequired) {
            return;
        }
        const isComplexProperty = !!item?.complex?.length;
        if (isComplexProperty) {
            const complexProperty = item.jsonSchema?.properties?.[mo.c8y_JsonSchema.key];
            complexProperty.required = item.complex.map(({ key }) => key);
        }
        else {
            item.jsonSchema.required = [mo.c8y_JsonSchema.key];
        }
    }
}
AssetPropertiesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetPropertiesComponent, deps: [{ token: i1.AssetTypesService }, { token: i2.InventoryService }, { token: i2.InventoryBinaryService }, { token: i1.AlertService }, { token: i1.ContextRouteService }, { token: i3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
AssetPropertiesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AssetPropertiesComponent, selector: "c8y-asset-properties", inputs: { asset: "asset", properties: "properties" }, outputs: { assetChange: "assetChange" }, usesOnChanges: true, ngImport: i0, template: "<ng-container>\n  <div class=\"card-header bg-inherit separator sticky-top\">\n    <h1\n      class=\"card-title p-t-4 p-b-4\"\n      ngNonBindable\n      translate\n      [translateParams]=\"{ label: assetType?.label || '' | translate }\"\n    >\n      {{ label }} properties\n    </h1>\n  </div>\n  <div class=\"card-block\">\n    <div class=\"text-center\" *ngIf=\"isLoading\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <ng-container *ngIf=\"!isLoading\">\n      <div\n        class=\"card m-b-8\"\n        *ngFor=\"let prop of customProperties\"\n        [ngClass]=\"{ 'card-highlight': prop.isEdit }\"\n        title=\"{{ prop.description | translate }}\"\n      >\n        <div class=\"card-block\" [ngClass]=\"{ 'p-b-0': prop.isEdit }\">\n          <div class=\"d-flex p-b-8 a-i-center\" *ngIf=\"!prop.isEdit\">\n            <p title=\"{{ prop?.label | translate }}\" class=\"text-medium text-truncate\">\n              {{ prop?.label | translate }}\n            </p>\n            <button\n              class=\"btn btn-dot m-l-auto text-12\"\n              type=\"button\"\n              tooltip=\"{{ 'Edit' | translate }}\"\n              [attr.aria-label]=\"'Edit' | translate\"\n              [delay]=\"500\"\n              (click)=\"toggleEdit(prop)\"\n            >\n              <i c8yIcon=\"pencil\"></i>\n            </button>\n          </div>\n          <c8y-asset-properties-item\n            #assetProps\n            [file]=\"prop.file\"\n            [key]=\"prop.key\"\n            [type]=\"prop.type\"\n            [value]=\"prop.value\"\n            [complex]=\"prop.complex\"\n            [isEdit]=\"prop.isEdit\"\n            [jsonSchema]=\"prop.jsonSchema\"\n          ></c8y-asset-properties-item>\n        </div>\n        <div class=\"card-footer p-t-0\" *ngIf=\"prop.isEdit\">\n          <button\n            class=\"btn btn-default btn-sm\"\n            type=\"button\"\n            title=\"{{ 'Cancel' | translate }}\"\n            (click)=\"toggleEdit(prop)\"\n          >\n            {{ 'Cancel' | translate }}\n          </button>\n          <button\n            class=\"btn btn-primary btn-sm\"\n            type=\"button\"\n            title=\"{{ 'Save' | translate }}\"\n            [disabled]=\"!assetProps?.form?.valid\"\n            (click)=\"save(assetProps.form.value, prop)\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.LoadingComponent, selector: "c8y-loading" }, { kind: "directive", type: i5.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "component", type: i6.AssetPropertiesItemComponent, selector: "c8y-asset-properties-item", inputs: ["key", "value", "label", "type", "file", "complex", "isEdit", "jsonSchema"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetPropertiesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-asset-properties', template: "<ng-container>\n  <div class=\"card-header bg-inherit separator sticky-top\">\n    <h1\n      class=\"card-title p-t-4 p-b-4\"\n      ngNonBindable\n      translate\n      [translateParams]=\"{ label: assetType?.label || '' | translate }\"\n    >\n      {{ label }} properties\n    </h1>\n  </div>\n  <div class=\"card-block\">\n    <div class=\"text-center\" *ngIf=\"isLoading\">\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <ng-container *ngIf=\"!isLoading\">\n      <div\n        class=\"card m-b-8\"\n        *ngFor=\"let prop of customProperties\"\n        [ngClass]=\"{ 'card-highlight': prop.isEdit }\"\n        title=\"{{ prop.description | translate }}\"\n      >\n        <div class=\"card-block\" [ngClass]=\"{ 'p-b-0': prop.isEdit }\">\n          <div class=\"d-flex p-b-8 a-i-center\" *ngIf=\"!prop.isEdit\">\n            <p title=\"{{ prop?.label | translate }}\" class=\"text-medium text-truncate\">\n              {{ prop?.label | translate }}\n            </p>\n            <button\n              class=\"btn btn-dot m-l-auto text-12\"\n              type=\"button\"\n              tooltip=\"{{ 'Edit' | translate }}\"\n              [attr.aria-label]=\"'Edit' | translate\"\n              [delay]=\"500\"\n              (click)=\"toggleEdit(prop)\"\n            >\n              <i c8yIcon=\"pencil\"></i>\n            </button>\n          </div>\n          <c8y-asset-properties-item\n            #assetProps\n            [file]=\"prop.file\"\n            [key]=\"prop.key\"\n            [type]=\"prop.type\"\n            [value]=\"prop.value\"\n            [complex]=\"prop.complex\"\n            [isEdit]=\"prop.isEdit\"\n            [jsonSchema]=\"prop.jsonSchema\"\n          ></c8y-asset-properties-item>\n        </div>\n        <div class=\"card-footer p-t-0\" *ngIf=\"prop.isEdit\">\n          <button\n            class=\"btn btn-default btn-sm\"\n            type=\"button\"\n            title=\"{{ 'Cancel' | translate }}\"\n            (click)=\"toggleEdit(prop)\"\n          >\n            {{ 'Cancel' | translate }}\n          </button>\n          <button\n            class=\"btn btn-primary btn-sm\"\n            type=\"button\"\n            title=\"{{ 'Save' | translate }}\"\n            [disabled]=\"!assetProps?.form?.valid\"\n            (click)=\"save(assetProps.form.value, prop)\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AssetTypesService }, { type: i2.InventoryService }, { type: i2.InventoryBinaryService }, { type: i1.AlertService }, { type: i1.ContextRouteService }, { type: i3.ActivatedRoute }]; }, propDecorators: { asset: [{
                type: Input
            }], assetChange: [{
                type: Output
            }], properties: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
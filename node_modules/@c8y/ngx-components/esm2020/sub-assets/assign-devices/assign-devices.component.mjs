import { Component, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { AlertService, DATA_GRID_CONFIGURATION_CONTEXT, DATA_GRID_CONFIGURATION_STRATEGY, GainsightService, gettext, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE } from '../shared/sub-assets.model';
import { SubAssetsService } from '../sub-assets.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "../sub-assets.service";
import * as i3 from "@c8y/client";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@c8y/ngx-components/device-grid";
import * as i7 from "ngx-bootstrap/popover";
export class AssignDevicesComponent {
    constructor(alert, subAssetsService, inventoryService, gainsightService) {
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.inventoryService = inventoryService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.refresh = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.onShowChildDevices = new EventEmitter();
        this.selectedDevice = new EventEmitter();
        this.pendingStatus = false;
        this.pagination = { pageSize: 20, currentPage: 1 };
        this.selected = [];
        this.canAssignDevice = false;
        this.actionControls = [];
        this.headerActionControls = [];
        this.showChildren = false;
        this.isSelectable = true;
    }
    onEnterKeyDown(_event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    }
    onEscapeKeyDown(_event) {
        this.onCancel.emit();
    }
    async ngOnInit() {
        this.setNotIncludedInGroupQuery();
        this.canAssignDevice = await this.subAssetsService.canAssignDevice({
            id: this.currentGroupId
        });
        this.setHeaderActionControls();
    }
    setNotIncludedInGroupQuery() {
        const notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    }
    setHeaderActionControls() {
        const headerActionControls = [];
        const showChildDevices = {
            type: 'DISPLAY_CHILD_DEVICES_BUTTON',
            text: gettext('Enable child devices selection'),
            template: this.showDevicesToggle,
            callback: () => {
                this.showChildren = !this.showChildren;
                this.setActionControls(this.showChildren);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENT, {
                    component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES,
                    action: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.ACTIONS.DISPLAY_CHILD_DEVICES,
                    url: this.CURRENT_LOCATION
                });
            }
        };
        headerActionControls.push(showChildDevices);
        this.headerActionControls = headerActionControls;
    }
    setActionControls(showChildren) {
        const actionControls = [];
        const selectChildrenAction = {
            type: 'SHOW_TARGET_CHILD_DEVICES',
            icon: 'enter-bottom',
            text: gettext('Select target child devices'),
            callback: (asset) => this.selectChildren(asset),
            showIf: (asset) => asset.childDevices.references.length > 0
        };
        if (showChildren) {
            actionControls.push(selectChildrenAction);
        }
        this.actionControls = actionControls;
        this.refresh.emit();
    }
    async assignDevices() {
        if (this.canAssignDevice === false) {
            return;
        }
        this.pendingStatus = true;
        try {
            await this.inventoryService.childAssetsBulkAdd(this.selected, this.currentGroupId);
            this.refresh.emit();
            this.alert.success(gettext('Devices assigned.'));
        }
        catch (error) {
            this.alert.danger(gettext('Could not assign devices.'), error);
        }
        this.pendingStatus = false;
        this.selected = [];
        this.onCancel.emit();
    }
    onSelected(selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    }
    selectChildren(asset) {
        this.onShowChildDevices.emit(true);
        this.selectedDevice.emit(asset);
    }
}
AssignDevicesComponent.GRID_CONFIG_CONTEXT = {
    key: 'assign-devices-grid',
    configFilter: {
        filter: false
    }
};
AssignDevicesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssignDevicesComponent, deps: [{ token: i1.AlertService }, { token: i2.SubAssetsService }, { token: i3.InventoryService }, { token: i1.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
AssignDevicesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AssignDevicesComponent, selector: "c8y-assign-devices", inputs: { currentGroupId: "currentGroupId", refresh: "refresh" }, outputs: { onCancel: "onCancel", onShowChildDevices: "onShowChildDevices", selectedDevice: "selectedDevice" }, host: { listeners: { "document:keydown.enter": "onEnterKeyDown($event)", "document:keydown.escape": "onEscapeKeyDown($event)" } }, providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT,
            useValue: AssignDevicesComponent.GRID_CONFIG_CONTEXT
        }
    ], viewQueries: [{ propertyName: "showDevicesToggle", first: true, predicate: ["showDevicesToggle"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <div class=\"h4 text-center text-medium\">\n        {{ 'Assign devices' | translate }}\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-device-grid\n  [title]=\"''\"\n  [actionControls]=\"actionControls\"\n  [infiniteScroll]=\"'auto'\"\n  [selectable]=\"isSelectable\"\n  [pagination]=\"pagination\"\n  (itemsSelect)=\"onSelected($event)\"\n  [refresh]=\"refresh\"\n  [baseQuery]=\"baseQuery\"\n  [headerActionControls]=\"headerActionControls\"\n  [withChildren]=\"true\"\n  class=\"flex-grow col-xs-12 no-gutter\"\n  c8yProductExperience\n  [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES }\"\n></c8y-device-grid>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Cancel' | translate }}\"\n    (click)=\"onCancel.emit()\"\n    c8yProductExperience\n    [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n    [actionData]=\"{\n      component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES,\n      action: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.ACTIONS.CANCEL\n    }\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    type=\"button\"\n    title=\"{{ 'Assign' | translate }}\"\n    (click)=\"assignDevices()\"\n    [disabled]=\"selected.length === 0 || !canAssignDevice\"\n    c8yProductExperience\n    [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n    [actionData]=\"{\n      component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES,\n      action: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.ACTIONS.ASSIGN\n    }\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n\n<ng-template #showDevicesToggle let-control=\"headerActionControl\">\n  <label class=\"c8y-switch a-s-center\" title=\"{{ control.text | translate }}\">\n    <input type=\"checkbox\" [(ngModel)]=\"showChildren\" (click)=\"control.callback()\" />\n    <span></span>\n    <span>{{ control.text | translate }}</span>\n  </label>\n  <button\n    class=\"btn-help m-r-16 a-s-center\"\n    type=\"button\"\n    [attr.aria-label]=\"'Help' | translate\"\n    [popover]=\"childDevicesPop\"\n    placement=\"bottom\"\n    triggers=\"focus\"\n  ></button>\n  <ng-template #childDevicesPop>\n    <span translate>\n      Displays the button\n      <span title=\"Child devices icon\" class=\"btn btn-dot btn-icon no-pointer\">\n        <i class=\"text-primary dlt-c8y-icon-enter-bottom\"></i>\n      </span>\n      next to target devices with children. Clicking it displays a list with all child devices of\n      the selected target device.\n    </span>\n  </ng-template>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i6.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "directive", type: i7.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssignDevicesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-assign-devices', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT,
                            useValue: AssignDevicesComponent.GRID_CONFIG_CONTEXT
                        }
                    ], template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <div class=\"h4 text-center text-medium\">\n        {{ 'Assign devices' | translate }}\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-device-grid\n  [title]=\"''\"\n  [actionControls]=\"actionControls\"\n  [infiniteScroll]=\"'auto'\"\n  [selectable]=\"isSelectable\"\n  [pagination]=\"pagination\"\n  (itemsSelect)=\"onSelected($event)\"\n  [refresh]=\"refresh\"\n  [baseQuery]=\"baseQuery\"\n  [headerActionControls]=\"headerActionControls\"\n  [withChildren]=\"true\"\n  class=\"flex-grow col-xs-12 no-gutter\"\n  c8yProductExperience\n  [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES }\"\n></c8y-device-grid>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    class=\"btn btn-default\"\n    type=\"button\"\n    title=\"{{ 'Cancel' | translate }}\"\n    (click)=\"onCancel.emit()\"\n    c8yProductExperience\n    [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n    [actionData]=\"{\n      component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES,\n      action: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.ACTIONS.CANCEL\n    }\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    type=\"button\"\n    title=\"{{ 'Assign' | translate }}\"\n    (click)=\"assignDevices()\"\n    [disabled]=\"selected.length === 0 || !canAssignDevice\"\n    c8yProductExperience\n    [actionName]=\"PRODUCT_EXPERIENCE.EVENT\"\n    [actionData]=\"{\n      component: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.COMPONENTS.ASSIGN_DEVICES,\n      action: PRODUCT_EXPERIENCE.ASSIGN_DEVICES.ACTIONS.ASSIGN\n    }\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n\n<ng-template #showDevicesToggle let-control=\"headerActionControl\">\n  <label class=\"c8y-switch a-s-center\" title=\"{{ control.text | translate }}\">\n    <input type=\"checkbox\" [(ngModel)]=\"showChildren\" (click)=\"control.callback()\" />\n    <span></span>\n    <span>{{ control.text | translate }}</span>\n  </label>\n  <button\n    class=\"btn-help m-r-16 a-s-center\"\n    type=\"button\"\n    [attr.aria-label]=\"'Help' | translate\"\n    [popover]=\"childDevicesPop\"\n    placement=\"bottom\"\n    triggers=\"focus\"\n  ></button>\n  <ng-template #childDevicesPop>\n    <span translate>\n      Displays the button\n      <span title=\"Child devices icon\" class=\"btn btn-dot btn-icon no-pointer\">\n        <i class=\"text-primary dlt-c8y-icon-enter-bottom\"></i>\n      </span>\n      next to target devices with children. Clicking it displays a list with all child devices of\n      the selected target device.\n    </span>\n  </ng-template>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AlertService }, { type: i2.SubAssetsService }, { type: i3.InventoryService }, { type: i1.GainsightService }]; }, propDecorators: { currentGroupId: [{
                type: Input
            }], refresh: [{
                type: Input
            }], onCancel: [{
                type: Output
            }], onShowChildDevices: [{
                type: Output
            }], selectedDevice: [{
                type: Output
            }], showDevicesToggle: [{
                type: ViewChild,
                args: ['showDevicesToggle', { read: TemplateRef }]
            }], onEnterKeyDown: [{
                type: HostListener,
                args: ['document:keydown.enter', ['$event']]
            }], onEscapeKeyDown: [{
                type: HostListener,
                args: ['document:keydown.escape', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
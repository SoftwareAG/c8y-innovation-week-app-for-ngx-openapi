import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@c8y/ngx-components/assets-navigator";
import * as i3 from "@angular/common";
export class AssetTypeCellRendererComponent {
    constructor(context, assetNodeService) {
        this.context = context;
        this.assetNodeService = assetNodeService;
    }
    async ngOnInit() {
        this.isAnyGroup = this.assetNodeService.isAnyGroup(this.context.item);
        this.groupIcon = this.assetNodeService.icon(this.context.item);
        this.isDevice = this.assetNodeService.isDevice(this.context.item);
        this.isAsset = this.assetNodeService.isAsset(this.context.item);
        this.iconTitle = this.getIconTitle(await this.groupIcon);
    }
    getIconTitle(icon) {
        if (this.isAsset) {
            return this.context.item.type;
        }
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            case 'exchange':
                return gettext('Device');
            default:
                return gettext('Asset');
        }
    }
}
AssetTypeCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetTypeCellRendererComponent, deps: [{ token: i1.CellRendererContext }, { token: i2.AssetNodeService }], target: i0.ɵɵFactoryTarget.Component });
AssetTypeCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AssetTypeCellRendererComponent, selector: "ng-component", ngImport: i0, template: "<device-status\n  class=\"m-l-8\"\n  [mo]=\"context.item\"\n  *ngIf=\"isDevice\"\n></device-status>\n<i\n  class=\"m-l-8 c8y-icon-duocolor\"\n  [c8yIcon]=\"groupIcon | async\"\n  title=\"{{ iconTitle | translate }}\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n", dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.DeviceStatusComponent, selector: "device-status", inputs: ["mo"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AssetTypeCellRendererComponent, decorators: [{
            type: Component,
            args: [{ template: "<device-status\n  class=\"m-l-8\"\n  [mo]=\"context.item\"\n  *ngIf=\"isDevice\"\n></device-status>\n<i\n  class=\"m-l-8 c8y-icon-duocolor\"\n  [c8yIcon]=\"groupIcon | async\"\n  title=\"{{ iconTitle | translate }}\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CellRendererContext }, { type: i2.AssetNodeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N1Yi1hc3NldHMvY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vc3ViLWFzc2V0cy9jb2x1bW5zL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7Ozs7QUFLeEUsTUFBTSxPQUFPLDhCQUE4QjtJQU16QyxZQUFtQixPQUE0QixFQUFZLGdCQUFrQztRQUExRSxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUFZLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRWpHLEtBQUssQ0FBQyxRQUFRO1FBQ1osSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTyxZQUFZLENBQUMsSUFBWTtRQUMvQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDL0I7UUFFRCxRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssV0FBVztnQkFDZCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixLQUFLLGlCQUFpQjtnQkFDcEIsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDaEMsS0FBSywyQkFBMkI7Z0JBQzlCLE9BQU8sdUJBQXVCLENBQUM7WUFDakMsS0FBSyxrQkFBa0I7Z0JBQ3JCLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ2pDLEtBQUssVUFBVTtnQkFDYixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQjtnQkFDRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7OzJIQW5DVSw4QkFBOEI7K0dBQTlCLDhCQUE4QixvRENQM0Msd1FBV0E7MkZESmEsOEJBQThCO2tCQUgxQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxSZW5kZXJlckNvbnRleHQsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEFzc2V0Tm9kZVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2Fzc2V0cy1uYXZpZ2F0b3InO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXNzZXRUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZ3JvdXBJY29uOiBQcm9taXNlPHN0cmluZz47XG4gIGlzQW55R3JvdXA6IGJvb2xlYW47XG4gIGlzRGV2aWNlOiBib29sZWFuO1xuICBpc0Fzc2V0OiBib29sZWFuO1xuICBpY29uVGl0bGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IENlbGxSZW5kZXJlckNvbnRleHQsIHByb3RlY3RlZCBhc3NldE5vZGVTZXJ2aWNlOiBBc3NldE5vZGVTZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaXNBbnlHcm91cCA9IHRoaXMuYXNzZXROb2RlU2VydmljZS5pc0FueUdyb3VwKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmdyb3VwSWNvbiA9IHRoaXMuYXNzZXROb2RlU2VydmljZS5pY29uKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmlzRGV2aWNlID0gdGhpcy5hc3NldE5vZGVTZXJ2aWNlLmlzRGV2aWNlKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmlzQXNzZXQgPSB0aGlzLmFzc2V0Tm9kZVNlcnZpY2UuaXNBc3NldCh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pY29uVGl0bGUgPSB0aGlzLmdldEljb25UaXRsZShhd2FpdCB0aGlzLmdyb3VwSWNvbik7XG4gIH1cblxuICBwcml2YXRlIGdldEljb25UaXRsZShpY29uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLmlzQXNzZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuaXRlbS50eXBlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoaWNvbikge1xuICAgICAgY2FzZSAnYzh5LWdyb3VwJzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ0dyb3VwJyk7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtc21hcnQnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnU21hcnQgZ3JvdXAnKTtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1yZW1vdGUtaW5hY3RpdmUnOlxuICAgICAgICByZXR1cm4gJ0luYWN0aXZlIHJlbW90ZSBncm91cCc7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtcmVtb3RlJzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ1JlbW90ZSBncm91cCcpO1xuICAgICAgY2FzZSAnZXhjaGFuZ2UnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnRGV2aWNlJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnQXNzZXQnKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkZXZpY2Utc3RhdHVzXG4gIGNsYXNzPVwibS1sLThcIlxuICBbbW9dPVwiY29udGV4dC5pdGVtXCJcbiAgKm5nSWY9XCJpc0RldmljZVwiXG4+PC9kZXZpY2Utc3RhdHVzPlxuPGlcbiAgY2xhc3M9XCJtLWwtOCBjOHktaWNvbi1kdW9jb2xvclwiXG4gIFtjOHlJY29uXT1cImdyb3VwSWNvbiB8IGFzeW5jXCJcbiAgdGl0bGU9XCJ7eyBpY29uVGl0bGUgfCB0cmFuc2xhdGUgfX1cIlxuICAqbmdJZj1cImlzQW55R3JvdXAgfHwgIWlzRGV2aWNlXCJcbj48L2k+XG4iXX0=
import { Inject, Injectable, Optional } from '@angular/core';
import { AbstractConfigurationStrategy, DATA_GRID_CONFIGURATION_CONTEXT, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { cloneDeep } from 'lodash-es';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class SmartGroupGridConfigurationStrategy extends AbstractConfigurationStrategy {
    constructor(userPreferencesConfigurationStrategy, context, contextProvider) {
        super(context, contextProvider);
        this.userPreferencesConfigurationStrategy = userPreferencesConfigurationStrategy;
        this.context = context;
        this.contextProvider = contextProvider;
    }
    getConfig$(context) {
        const group = cloneDeep(this.retrieveContext(context)?.group);
        if (group?.c8y_DeviceColumnsConfig?.columns?.length) {
            group.c8y_DeviceColumnsConfig.columns = group.c8y_DeviceColumnsConfig.columns.map(column => {
                delete column.filter;
                return column;
            });
        }
        return of(group?.c8y_DeviceColumnsConfig);
    }
    saveConfig$(config, _context) {
        return of(config);
    }
}
SmartGroupGridConfigurationStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmartGroupGridConfigurationStrategy, deps: [{ token: i1.UserPreferencesConfigurationStrategy }, { token: DATA_GRID_CONFIGURATION_CONTEXT, optional: true }, { token: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SmartGroupGridConfigurationStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmartGroupGridConfigurationStrategy, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmartGroupGridConfigurationStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserPreferencesConfigurationStrategy }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_GRID_CONFIGURATION_CONTEXT]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtZ3JvdXAtZ3JpZC1jb25maWd1cmF0aW9uLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zdWItYXNzZXRzL3NtYXJ0LWdyb3VwLWdyaWQtY29uZmlndXJhdGlvbi1zdHJhdGVneS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQ0wsNkJBQTZCLEVBQzdCLCtCQUErQixFQUMvQix3Q0FBd0MsRUFJeEMsb0NBQW9DLEVBQ3JDLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFJdEMsTUFBTSxPQUFPLG1DQUFvQyxTQUFRLDZCQUE2QjtJQUNwRixZQUNZLG9DQUEwRSxFQUcxRSxPQUEwQixFQUcxQixlQUEwQztRQUVwRCxLQUFLLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBUnRCLHlDQUFvQyxHQUFwQyxvQ0FBb0MsQ0FBc0M7UUFHMUUsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFHMUIsb0JBQWUsR0FBZixlQUFlLENBQTJCO0lBR3RELENBQUM7SUFFRCxVQUFVLENBQUMsT0FBb0M7UUFDN0MsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFOUQsSUFBSSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtZQUNuRCxLQUFLLENBQUMsdUJBQXVCLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN6RixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ3JCLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWtCLEVBQUUsUUFBcUM7UUFDbkUsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7Z0lBNUJVLG1DQUFtQyxzRUFHcEMsK0JBQStCLDZCQUcvQix3Q0FBd0M7b0lBTnZDLG1DQUFtQyxjQUR0QixNQUFNOzJGQUNuQixtQ0FBbUM7a0JBRC9DLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzswQkFJN0IsTUFBTTsyQkFBQywrQkFBK0I7OzBCQUN0QyxRQUFROzswQkFFUixNQUFNOzJCQUFDLHdDQUF3Qzs7MEJBQy9DLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBYnN0cmFjdENvbmZpZ3VyYXRpb25TdHJhdGVneSxcbiAgREFUQV9HUklEX0NPTkZJR1VSQVRJT05fQ09OVEVYVCxcbiAgREFUQV9HUklEX0NPTkZJR1VSQVRJT05fQ09OVEVYVF9QUk9WSURFUixcbiAgR3JpZENvbmZpZyxcbiAgR3JpZENvbmZpZ0NvbnRleHQsXG4gIEdyaWRDb25maWdDb250ZXh0UHJvdmlkZXIsXG4gIFVzZXJQcmVmZXJlbmNlc0NvbmZpZ3VyYXRpb25TdHJhdGVneVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3ViQXNzZXRzR3JpZENvbmZpZ0NvbnRleHQgfSBmcm9tICcuL3N1Yi1hc3NldHMtZ3JpZC1jb25maWd1cmF0aW9uLXN0cmF0ZWd5LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFNtYXJ0R3JvdXBHcmlkQ29uZmlndXJhdGlvblN0cmF0ZWd5IGV4dGVuZHMgQWJzdHJhY3RDb25maWd1cmF0aW9uU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdXNlclByZWZlcmVuY2VzQ29uZmlndXJhdGlvblN0cmF0ZWd5OiBVc2VyUHJlZmVyZW5jZXNDb25maWd1cmF0aW9uU3RyYXRlZ3ksXG4gICAgQEluamVjdChEQVRBX0dSSURfQ09ORklHVVJBVElPTl9DT05URVhUKVxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJvdGVjdGVkIGNvbnRleHQ6IEdyaWRDb25maWdDb250ZXh0LFxuICAgIEBJbmplY3QoREFUQV9HUklEX0NPTkZJR1VSQVRJT05fQ09OVEVYVF9QUk9WSURFUilcbiAgICBAT3B0aW9uYWwoKVxuICAgIHByb3RlY3RlZCBjb250ZXh0UHJvdmlkZXI6IEdyaWRDb25maWdDb250ZXh0UHJvdmlkZXJcbiAgKSB7XG4gICAgc3VwZXIoY29udGV4dCwgY29udGV4dFByb3ZpZGVyKTtcbiAgfVxuXG4gIGdldENvbmZpZyQoY29udGV4dD86IFN1YkFzc2V0c0dyaWRDb25maWdDb250ZXh0KTogT2JzZXJ2YWJsZTxHcmlkQ29uZmlnPiB7XG4gICAgY29uc3QgZ3JvdXAgPSBjbG9uZURlZXAodGhpcy5yZXRyaWV2ZUNvbnRleHQoY29udGV4dCk/Lmdyb3VwKTtcblxuICAgIGlmIChncm91cD8uYzh5X0RldmljZUNvbHVtbnNDb25maWc/LmNvbHVtbnM/Lmxlbmd0aCkge1xuICAgICAgZ3JvdXAuYzh5X0RldmljZUNvbHVtbnNDb25maWcuY29sdW1ucyA9IGdyb3VwLmM4eV9EZXZpY2VDb2x1bW5zQ29uZmlnLmNvbHVtbnMubWFwKGNvbHVtbiA9PiB7XG4gICAgICAgIGRlbGV0ZSBjb2x1bW4uZmlsdGVyO1xuICAgICAgICByZXR1cm4gY29sdW1uO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKGdyb3VwPy5jOHlfRGV2aWNlQ29sdW1uc0NvbmZpZyk7XG4gIH1cblxuICBzYXZlQ29uZmlnJChjb25maWc6IEdyaWRDb25maWcsIF9jb250ZXh0PzogU3ViQXNzZXRzR3JpZENvbmZpZ0NvbnRleHQpOiBPYnNlcnZhYmxlPEdyaWRDb25maWc+IHtcbiAgICByZXR1cm4gb2YoY29uZmlnKTtcbiAgfVxufVxuIl19
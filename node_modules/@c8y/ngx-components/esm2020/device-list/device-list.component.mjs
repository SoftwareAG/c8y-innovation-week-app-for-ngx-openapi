import { Component } from '@angular/core';
import { DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, DATA_GRID_CONFIGURATION_STRATEGY, gettext, Permissions, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { ReplaceDeviceService } from '@c8y/ngx-components/replace-device';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AddSmartGroupComponent } from './add-smart-group.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/device-grid";
import * as i2 from "ngx-bootstrap/modal";
import * as i3 from "@c8y/ngx-components/replace-device";
import * as i4 from "@c8y/ngx-components";
import * as i5 from "@angular/common";
export class DeviceListComponent {
    constructor(deviceGridService, bsModalService, replaceDeviceService, permissions) {
        this.deviceGridService = deviceGridService;
        this.bsModalService = bsModalService;
        this.replaceDeviceService = replaceDeviceService;
        this.permissions = permissions;
        this.GRID_CONFIG_KEY = 'device-grid-all';
        this.count$ = this.deviceGridService.getTotal({});
        this.actionControls = [];
        this.actionControls = [
            {
                type: 'replace',
                icon: 'replace',
                showOnHover: true,
                text: gettext('Replace device'),
                callback: (mo, reload) => {
                    this.replaceDeviceService.openDrawer(mo, reload);
                },
                showIf: () => this.permissions.hasAllRoles([
                    'ROLE_INVENTORY_READ',
                    'ROLE_INVENTORY_ADMIN',
                    'ROLE_IDENTITY_READ',
                    'ROLE_IDENTITY_ADMIN'
                ])
            }
        ];
    }
    getGridConfigContext() {
        return {
            key: this.GRID_CONFIG_KEY,
            defaultColumns: this.deviceGridService.getDefaultColumns(),
            legacyConfigKey: 'all-devices-columns-meta_',
            legacyFilterKey: 'all-devices-columns-config'
        };
    }
    async createSmartGroup() {
        const initialState = {
            configKey: this.GRID_CONFIG_KEY,
            deviceQuery: this.deviceQueryStringOutput
        };
        this.bsModalService.show(AddSmartGroupComponent, {
            class: 'modal-sm',
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            initialState
        });
    }
}
DeviceListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListComponent, deps: [{ token: i1.DeviceGridService }, { token: i2.BsModalService }, { token: i3.ReplaceDeviceService }, { token: i4.Permissions }], target: i0.ɵɵFactoryTarget.Component });
DeviceListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceListComponent, selector: "c8y-device-list", providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
            useExisting: DeviceListComponent
        }
    ], ngImport: i0, template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'exchange'\" [label]=\"'Devices' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-management'\"\n    [label]=\"'All devices' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n    [actionControls]=\"actionControls\"\n    c8yProductExperience\n    [actionName]=\"'allDevices'\"\n  ></c8y-device-grid>\n\n  <c8y-replace-device-drawer></c8y-replace-device-drawer>\n</div>\n", dependencies: [{ kind: "component", type: i4.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i4.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i4.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "component", type: i4.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i4.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i4.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "component", type: i1.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "component", type: i3.ReplaceDeviceDrawerComponent, selector: "c8y-replace-device-drawer" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-list', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
                            useExisting: DeviceListComponent
                        }
                    ], template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'exchange'\" [label]=\"'Devices' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-management'\"\n    [label]=\"'All devices' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n    [actionControls]=\"actionControls\"\n    c8yProductExperience\n    [actionName]=\"'allDevices'\"\n  ></c8y-device-grid>\n\n  <c8y-replace-device-drawer></c8y-replace-device-drawer>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DeviceGridService }, { type: i2.BsModalService }, { type: i3.ReplaceDeviceService }, { type: i4.Permissions }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWxpc3QvZGV2aWNlLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZGV2aWNlLWxpc3QvZGV2aWNlLWxpc3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBRUwsd0NBQXdDLEVBQ3hDLGdDQUFnQyxFQUNoQyxPQUFPLEVBRVAsV0FBVyxFQUNYLG9DQUFvQyxFQUVyQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7OztBQWdCckUsTUFBTSxPQUFPLG1CQUFtQjtJQVE5QixZQUNZLGlCQUFvQyxFQUN0QyxjQUE4QixFQUM5QixvQkFBMEMsRUFDMUMsV0FBd0I7UUFIdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUN0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQVh6QixvQkFBZSxHQUFHLGlCQUFpQixDQUFDO1FBRTdDLFdBQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRzdDLG1CQUFjLEdBQW9CLEVBQUUsQ0FBQztRQVFuQyxJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3BCO2dCQUNFLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxTQUFTO2dCQUNmLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixJQUFJLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2dCQUMvQixRQUFRLEVBQUUsQ0FBQyxFQUFrQixFQUFFLE1BQU0sRUFBRSxFQUFFO29CQUN2QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbkQsQ0FBQztnQkFDRCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQ1gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7b0JBQzNCLHFCQUFxQjtvQkFDckIsc0JBQXNCO29CQUN0QixvQkFBb0I7b0JBQ3BCLHFCQUFxQjtpQkFDdEIsQ0FBQzthQUNMO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUN6QixjQUFjLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFO1lBQzFELGVBQWUsRUFBRSwyQkFBMkI7WUFDNUMsZUFBZSxFQUFFLDRCQUE0QjtTQUM5QyxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxnQkFBZ0I7UUFDcEIsTUFBTSxZQUFZLEdBQUc7WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQy9CLFdBQVcsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1NBQzFDLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQyxLQUFLLEVBQUUsVUFBVTtZQUNqQixlQUFlLEVBQUUsWUFBWTtZQUM3QixjQUFjLEVBQUUsYUFBYTtZQUM3QixZQUFZO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0hBdkRVLG1CQUFtQjtvR0FBbkIsbUJBQW1CLDBDQVhuQjtRQUNUO1lBQ0UsT0FBTyxFQUFFLGdDQUFnQztZQUN6QyxRQUFRLEVBQUUsb0NBQW9DO1NBQy9DO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsd0NBQXdDO1lBQ2pELFdBQVcsRUFBRSxtQkFBbUI7U0FDakM7S0FDRiwwQkM3QkgsNm5DQW9DQTsyRkRMYSxtQkFBbUI7a0JBZC9CLFNBQVM7K0JBQ0UsaUJBQWlCLGFBRWhCO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxnQ0FBZ0M7NEJBQ3pDLFFBQVEsRUFBRSxvQ0FBb0M7eUJBQy9DO3dCQUNEOzRCQUNFLE9BQU8sRUFBRSx3Q0FBd0M7NEJBQ2pELFdBQVcscUJBQXFCO3lCQUNqQztxQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQge1xuICBBY3Rpb25Db250cm9sLFxuICBEQVRBX0dSSURfQ09ORklHVVJBVElPTl9DT05URVhUX1BST1ZJREVSLFxuICBEQVRBX0dSSURfQ09ORklHVVJBVElPTl9TVFJBVEVHWSxcbiAgZ2V0dGV4dCxcbiAgR3JpZENvbmZpZ0NvbnRleHRQcm92aWRlcixcbiAgUGVybWlzc2lvbnMsXG4gIFVzZXJQcmVmZXJlbmNlc0NvbmZpZ3VyYXRpb25TdHJhdGVneSxcbiAgVXNlclByZWZlcmVuY2VzR3JpZENvbmZpZ0NvbnRleHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHsgUmVwbGFjZURldmljZVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcGxhY2UtZGV2aWNlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBBZGRTbWFydEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9hZGQtc21hcnQtZ3JvdXAuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWRldmljZS1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RldmljZS1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogREFUQV9HUklEX0NPTkZJR1VSQVRJT05fU1RSQVRFR1ksXG4gICAgICB1c2VDbGFzczogVXNlclByZWZlcmVuY2VzQ29uZmlndXJhdGlvblN0cmF0ZWd5XG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBEQVRBX0dSSURfQ09ORklHVVJBVElPTl9DT05URVhUX1BST1ZJREVSLFxuICAgICAgdXNlRXhpc3Rpbmc6IERldmljZUxpc3RDb21wb25lbnRcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIEdyaWRDb25maWdDb250ZXh0UHJvdmlkZXIge1xuICByZWFkb25seSBHUklEX0NPTkZJR19LRVkgPSAnZGV2aWNlLWdyaWQtYWxsJztcblxuICBjb3VudCQgPSB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldFRvdGFsKHt9KTtcblxuICBkZXZpY2VRdWVyeVN0cmluZ091dHB1dDogc3RyaW5nO1xuICBhY3Rpb25Db250cm9sczogQWN0aW9uQ29udHJvbFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGRldmljZUdyaWRTZXJ2aWNlOiBEZXZpY2VHcmlkU2VydmljZSxcbiAgICBwcml2YXRlIGJzTW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHJlcGxhY2VEZXZpY2VTZXJ2aWNlOiBSZXBsYWNlRGV2aWNlU2VydmljZSxcbiAgICBwcml2YXRlIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9uc1xuICApIHtcbiAgICB0aGlzLmFjdGlvbkNvbnRyb2xzID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiAncmVwbGFjZScsXG4gICAgICAgIGljb246ICdyZXBsYWNlJyxcbiAgICAgICAgc2hvd09uSG92ZXI6IHRydWUsXG4gICAgICAgIHRleHQ6IGdldHRleHQoJ1JlcGxhY2UgZGV2aWNlJyksXG4gICAgICAgIGNhbGxiYWNrOiAobW86IElNYW5hZ2VkT2JqZWN0LCByZWxvYWQpID0+IHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VEZXZpY2VTZXJ2aWNlLm9wZW5EcmF3ZXIobW8sIHJlbG9hZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dJZjogKCkgPT5cbiAgICAgICAgICB0aGlzLnBlcm1pc3Npb25zLmhhc0FsbFJvbGVzKFtcbiAgICAgICAgICAgICdST0xFX0lOVkVOVE9SWV9SRUFEJyxcbiAgICAgICAgICAgICdST0xFX0lOVkVOVE9SWV9BRE1JTicsXG4gICAgICAgICAgICAnUk9MRV9JREVOVElUWV9SRUFEJyxcbiAgICAgICAgICAgICdST0xFX0lERU5USVRZX0FETUlOJ1xuICAgICAgICAgIF0pXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGdldEdyaWRDb25maWdDb250ZXh0KCk6IFVzZXJQcmVmZXJlbmNlc0dyaWRDb25maWdDb250ZXh0IHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiB0aGlzLkdSSURfQ09ORklHX0tFWSxcbiAgICAgIGRlZmF1bHRDb2x1bW5zOiB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKCksXG4gICAgICBsZWdhY3lDb25maWdLZXk6ICdhbGwtZGV2aWNlcy1jb2x1bW5zLW1ldGFfJyxcbiAgICAgIGxlZ2FjeUZpbHRlcktleTogJ2FsbC1kZXZpY2VzLWNvbHVtbnMtY29uZmlnJ1xuICAgIH07XG4gIH1cblxuICBhc3luYyBjcmVhdGVTbWFydEdyb3VwKCkge1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgIGNvbmZpZ0tleTogdGhpcy5HUklEX0NPTkZJR19LRVksXG4gICAgICBkZXZpY2VRdWVyeTogdGhpcy5kZXZpY2VRdWVyeVN0cmluZ091dHB1dFxuICAgIH07XG5cbiAgICB0aGlzLmJzTW9kYWxTZXJ2aWNlLnNob3coQWRkU21hcnRHcm91cENvbXBvbmVudCwge1xuICAgICAgY2xhc3M6ICdtb2RhbC1zbScsXG4gICAgICBhcmlhRGVzY3JpYmVkYnk6ICdtb2RhbC1ib2R5JyxcbiAgICAgIGFyaWFMYWJlbGxlZEJ5OiAnbW9kYWwtdGl0bGUnLFxuICAgICAgaW5pdGlhbFN0YXRlXG4gICAgfSk7XG4gIH1cbn1cbiIsIjxjOHktdGl0bGU+XG4gIHt7ICdBbGwgZGV2aWNlcycgfCB0cmFuc2xhdGUgfX1cbjwvYzh5LXRpdGxlPlxuXG48Yzh5LWJyZWFkY3J1bWI+XG4gIDxjOHktYnJlYWRjcnVtYi1pdGVtIFtpY29uXT1cIidleGNoYW5nZSdcIiBbbGFiZWxdPVwiJ0RldmljZXMnIHwgdHJhbnNsYXRlXCI+PC9jOHktYnJlYWRjcnVtYi1pdGVtPlxuICA8Yzh5LWJyZWFkY3J1bWItaXRlbVxuICAgIFtpY29uXT1cIidjOHktZGV2aWNlLW1hbmFnZW1lbnQnXCJcbiAgICBbbGFiZWxdPVwiJ0FsbCBkZXZpY2VzJyB8IHRyYW5zbGF0ZVwiXG4gID48L2M4eS1icmVhZGNydW1iLWl0ZW0+XG48L2M4eS1icmVhZGNydW1iPlxuXG48Yzh5LWFjdGlvbi1iYXItaXRlbSBbcGxhY2VtZW50XT1cIidyaWdodCdcIj5cbiAgPGJ1dHRvblxuICAgIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCJcbiAgICB0aXRsZT1cInt7ICdDcmVhdGUgc21hcnQgZ3JvdXAnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAoY2xpY2spPVwiY3JlYXRlU21hcnRHcm91cCgpXCJcbiAgPlxuICAgIDxpIGM4eUljb249XCJjOHktZ3JvdXAtc21hcnRcIj48L2k+XG4gICAge3sgJ0NyZWF0ZSBzbWFydCBncm91cCcgfCB0cmFuc2xhdGUgfX1cbiAgPC9idXR0b24+XG48L2M4eS1hY3Rpb24tYmFyLWl0ZW0+XG5cbjxjOHktaGVscCBzcmM9XCIvdXNlcnMtZ3VpZGUvZGV2aWNlLW1hbmFnZW1lbnQvI3ZpZXdpbmctZGV2aWNlc1wiPjwvYzh5LWhlbHA+XG5cbjxkaXYgY2xhc3M9XCJjb250ZW50LWZ1bGxwYWdlIGJvcmRlci10b3AgYm9yZGVyLWJvdHRvbVwiPlxuICA8Yzh5LWRldmljZS1ncmlkXG4gICAgW2luZmluaXRlU2Nyb2xsXT1cIihjb3VudCQgfCBhc3luYykgPT09IHVuZGVmaW5lZCA/ICdhdXRvJyA6IHVuZGVmaW5lZFwiXG4gICAgKG9uRGV2aWNlUXVlcnlTdHJpbmdDaGFuZ2UpPVwiZGV2aWNlUXVlcnlTdHJpbmdPdXRwdXQgPSAkZXZlbnRcIlxuICAgIFthY3Rpb25Db250cm9sc109XCJhY3Rpb25Db250cm9sc1wiXG4gICAgYzh5UHJvZHVjdEV4cGVyaWVuY2VcbiAgICBbYWN0aW9uTmFtZV09XCInYWxsRGV2aWNlcydcIlxuICA+PC9jOHktZGV2aWNlLWdyaWQ+XG5cbiAgPGM4eS1yZXBsYWNlLWRldmljZS1kcmF3ZXI+PC9jOHktcmVwbGFjZS1kZXZpY2UtZHJhd2VyPlxuPC9kaXY+XG4iXX0=
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, CoreModule, hookNavigator } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { ReplaceDeviceDrawerComponent, ReplaceDeviceService } from '@c8y/ngx-components/replace-device';
import { AddSmartGroupComponent } from './add-smart-group.component';
import { DeviceListNavigationFactory } from './device-list-navigation.factory';
import { DeviceListComponent } from './device-list.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
const routes = [
    {
        path: 'device',
        component: DeviceListComponent
    }
];
export class DeviceListModule {
}
DeviceListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, declarations: [DeviceListComponent, AddSmartGroupComponent], imports: [CoreModule,
        CommonModule,
        DeviceGridModule, i1.RouterModule, ReplaceDeviceDrawerComponent] });
DeviceListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, providers: [hookNavigator(DeviceListNavigationFactory), ReplaceDeviceService], imports: [CoreModule,
        CommonModule,
        DeviceGridModule,
        RouterModule.forChild(routes),
        ReplaceDeviceDrawerComponent] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        CommonModule,
                        DeviceGridModule,
                        RouterModule.forChild(routes),
                        ReplaceDeviceDrawerComponent
                    ],
                    declarations: [DeviceListComponent, AddSmartGroupComponent],
                    entryComponents: [DeviceListComponent],
                    exports: [],
                    providers: [hookNavigator(DeviceListNavigationFactory), ReplaceDeviceService]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWxpc3QubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWxpc3QvZGV2aWNlLWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFTLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsb0JBQW9CLEVBQ3JCLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7OztBQUU5RCxNQUFNLE1BQU0sR0FBWTtJQUN0QjtRQUNFLElBQUksRUFBRSxRQUFRO1FBQ2QsU0FBUyxFQUFFLG1CQUFtQjtLQUMvQjtDQUNGLENBQUM7QUFlRixNQUFNLE9BQU8sZ0JBQWdCOzs2R0FBaEIsZ0JBQWdCOzhHQUFoQixnQkFBZ0IsaUJBTFosbUJBQW1CLEVBQUUsc0JBQXNCLGFBTnhELFVBQVU7UUFDVixZQUFZO1FBQ1osZ0JBQWdCLG1CQUVoQiw0QkFBNEI7OEdBT25CLGdCQUFnQixhQUZoQixDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLFlBVDNFLFVBQVU7UUFDVixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzdCLDRCQUE0QjsyRkFPbkIsZ0JBQWdCO2tCQWI1QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxVQUFVO3dCQUNWLFlBQVk7d0JBQ1osZ0JBQWdCO3dCQUNoQixZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzt3QkFDN0IsNEJBQTRCO3FCQUM3QjtvQkFDRCxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxzQkFBc0IsQ0FBQztvQkFDM0QsZUFBZSxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ3RDLE9BQU8sRUFBRSxFQUFFO29CQUNYLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLG9CQUFvQixDQUFDO2lCQUM5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZSwgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSwgQ29yZU1vZHVsZSwgaG9va05hdmlnYXRvciB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHtcbiAgUmVwbGFjZURldmljZURyYXdlckNvbXBvbmVudCxcbiAgUmVwbGFjZURldmljZVNlcnZpY2Vcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBsYWNlLWRldmljZSc7XG5cbmltcG9ydCB7IEFkZFNtYXJ0R3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2FkZC1zbWFydC1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlTGlzdE5hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9kZXZpY2UtbGlzdC1uYXZpZ2F0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgRGV2aWNlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLWxpc3QuY29tcG9uZW50JztcblxuY29uc3Qgcm91dGVzOiBSb3V0ZVtdID0gW1xuICB7XG4gICAgcGF0aDogJ2RldmljZScsXG4gICAgY29tcG9uZW50OiBEZXZpY2VMaXN0Q29tcG9uZW50XG4gIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZSxcbiAgICBEZXZpY2VHcmlkTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZS5mb3JDaGlsZChyb3V0ZXMpLFxuICAgIFJlcGxhY2VEZXZpY2VEcmF3ZXJDb21wb25lbnRcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbRGV2aWNlTGlzdENvbXBvbmVudCwgQWRkU21hcnRHcm91cENvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0RldmljZUxpc3RDb21wb25lbnRdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbaG9va05hdmlnYXRvcihEZXZpY2VMaXN0TmF2aWdhdGlvbkZhY3RvcnkpLCBSZXBsYWNlRGV2aWNlU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlTGlzdE1vZHVsZSB7fVxuIl19
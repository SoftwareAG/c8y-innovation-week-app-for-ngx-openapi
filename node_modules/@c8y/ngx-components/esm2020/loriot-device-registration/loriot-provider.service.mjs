import { Injectable } from '@angular/core';
import { FetchClient, InventoryService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { gettext, AppStateService } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@c8y/ngx-components";
export var ErrorName;
(function (ErrorName) {
    ErrorName["NoDeviceProtocolsError"] = "NoDeviceProtocolsError";
    ErrorName["NoConnectivitySettingsError"] = "NoConnectivitySettingsError";
    ErrorName["ConnectivitySettingsError"] = "ConnectivitySettingsError";
    ErrorName["RegistrationError"] = "RegistrationError";
    ErrorName["DeviceProtocolsFetchError"] = "DeviceProtocolsFetchError";
    ErrorName["ApplicationError"] = "ApplicationError";
})(ErrorName || (ErrorName = {}));
export class LoriotProviderService {
    constructor(client, inventoryService, translateService, appState) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.appState = appState;
        this.baseUrl = '/service/loriot/';
        this.registrationUrl = `${this.baseUrl}newDeviceRequest`;
        this.header = { 'Content-Type': 'application/json' };
        this.applicationsUrl = `${this.baseUrl}applications`;
    }
    async getConnections() {
        const options = {
            method: 'GET',
            headers: this.header
        };
        const res = await this.client.fetch(`${this.baseUrl}lns-connection`, options);
        const data = await res.json();
        if (res.status === 200) {
            if (data.length === 0) {
                await this.throwNoConnectivitySettingsError();
            }
        }
        else {
            await this.throwConnectivitySettingsError(data);
        }
        return { res, data };
    }
    async createDevice(device) {
        const options = {
            method: 'POST',
            headers: this.header,
            body: JSON.stringify(device)
        };
        const res = await this.client.fetch(this.registrationUrl, options);
        const data = await res.json();
        if (res.status !== 201) {
            this.throwRegistrationError(data);
        }
        return { res, data };
    }
    async getAvailableProtocols(filter = { withTotalPages: true }) {
        const query = {
            __filter: {
                __and: [
                    { __has: 'c8y_IsDeviceType' },
                    {
                        type: { __in: ['c8y_LoraDeviceType', 'c8y_LpwanDeviceType'] }
                    }
                ]
            },
            __orderby: [{ name: 1 }]
        };
        const deviceProtocolsList = await this.inventoryService.listQuery(query, filter);
        const { res, data } = deviceProtocolsList;
        if (res.status === 200) {
            if (data.length === 0) {
                this.throwNoDeviceProtocolsError();
            }
        }
        else {
            this.throwDeviceProtocolsFetchError();
        }
        return deviceProtocolsList;
    }
    async getApplications(connectionName) {
        const options = {
            method: 'GET',
            headers: this.header,
            params: {
                loriotConnectionName: connectionName
            }
        };
        const res = await this.client.fetch(this.applicationsUrl, options);
        const data = await res.json();
        /* Every connection will have atleast 1 application,
        so having check for this enpoint returning empty result is not needed*/
        if (res.status !== 200) {
            this.throwApplicationError(data);
        }
        return { res, data };
    }
    async throwNoConnectivitySettingsError() {
        const error = new Error();
        error.name = ErrorName.NoConnectivitySettingsError;
        const hasAdminRight = await this.appState.isApplicationAvailable('administration');
        if (hasAdminRight) {
            error.message = this.translateService.instant(gettext(`Connectivity settings are not configured. Configure them in the Administration application under <a href="{{ link }}">Settings</a>.`), {
                link: '/apps/administration/index.html#/connectivitySettings/multiple_lns_connectors_loriot'
            });
        }
        else {
            error.message = gettext('Connectivity settings are not configured. Contact the administrator.');
        }
        throw error;
    }
    throwConnectivitySettingsError(data) {
        const error = new Error();
        error.name = ErrorName.ConnectivitySettingsError;
        error.message = data.message;
        throw error;
    }
    throwRegistrationError(data) {
        const error = new Error();
        error.name = ErrorName.RegistrationError;
        error.message = data.message;
        throw error;
    }
    throwDeviceProtocolsFetchError() {
        const error = new Error();
        error.name = ErrorName.DeviceProtocolsFetchError;
        error.message = gettext('Could not load device protocols.');
        throw error;
    }
    throwNoDeviceProtocolsError() {
        const error = new Error();
        error.name = ErrorName.NoDeviceProtocolsError;
        error.message = this.translateService.instant(gettext(`No device protocols configured. Create a LoRa device protocol in <a href="{{ link }}">Device protocols</a>.`), {
            link: '/apps/devicemanagement/#/deviceprotocols'
        });
        throw error;
    }
    throwApplicationError(data) {
        const error = new Error();
        error.name = ErrorName.ApplicationError;
        error.message = data.message;
        throw error;
    }
}
LoriotProviderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoriotProviderService, deps: [{ token: i1.FetchClient }, { token: i1.InventoryService }, { token: i2.TranslateService }, { token: i3.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
LoriotProviderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoriotProviderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoriotProviderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i1.InventoryService }, { type: i2.TranslateService }, { type: i3.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,
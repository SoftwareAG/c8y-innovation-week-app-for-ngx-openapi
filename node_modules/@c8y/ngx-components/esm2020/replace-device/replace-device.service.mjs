import { Injectable } from '@angular/core';
import { AuditRecordType, AuditService, EventService, IdentityService, InventoryService, QueriesUtil, UserService } from '@c8y/client';
import { AlertService, AppStateService, BreadcrumbService, gettext, toObservable } from '@c8y/ngx-components';
import { cloneDeep, pick } from 'lodash-es';
import { BehaviorSubject, combineLatest, forkJoin, from, of, pipe, Subject } from 'rxjs';
import { catchError, concatMap, distinctUntilChanged, map, scan, share, shareReplay, switchMap, tap, withLatestFrom } from 'rxjs/operators';
import { isValidReplaceDeviceStepState, REPLACE_DEVICE_STEP_STATE } from './replace-device.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class ReplaceDeviceService {
    get drawerOpen$() {
        return this.drawerOpenedObs$;
    }
    get deviceToReplace$() {
        return this.deviceToReplaceObs$;
    }
    get replacementDeviceId$() {
        return this.replacementDeviceIdObs$;
    }
    constructor(inventory, identity, audit, event, user, appState, breadcrumbService, alert) {
        this.inventory = inventory;
        this.identity = identity;
        this.audit = audit;
        this.event = event;
        this.user = user;
        this.appState = appState;
        this.breadcrumbService = breadcrumbService;
        this.alert = alert;
        this.steps = [];
        this.drawerOpenSubject$ = new BehaviorSubject(false);
        this.drawerOpenedObs$ = this.drawerOpenSubject$
            .asObservable()
            .pipe(shareReplay());
        this.deviceToReplaceSubject$ = new BehaviorSubject(null);
        this.deviceToReplaceObs$ = this.deviceToReplaceSubject$
            .asObservable()
            .pipe(shareReplay());
        this.replacementDeviceIdSubject$ = new Subject();
        this.replacementDeviceIdObs$ = this.replacementDeviceIdSubject$
            .asObservable()
            .pipe(shareReplay());
        this.checkExternalId$ = new Subject();
        this.externalIdsLoadingSubject$ = new BehaviorSubject(false);
        this.triggerDeviceReplacementSubject$ = new Subject();
        this.deviceReplacementInProgressSubject$ = new Subject();
        this.queriesUtil = new QueriesUtil();
        this.externalIdsLoading$ = this.externalIdsLoadingSubject$.asObservable().pipe(shareReplay());
        this.externalIds$ = this.replacementDeviceIdSubject$.pipe(distinctUntilChanged(), tap(() => this.externalIdsLoadingSubject$.next(true)), switchMap(deviceId => this.identity.list(deviceId)), tap(() => this.externalIdsLoadingSubject$.next(false)), tap(() => this.checkExternalId(null, false)), catchError(err => {
            this.alert.addServerFailure(err);
            return of(null);
        }), shareReplay());
        this.externalIdsWithSelection$ = combineLatest([
            this.externalIds$.pipe(map(result => result?.data), map(externalIds => externalIds?.map(id => ({ id, selected: true })))),
            this.checkExternalId$
        ]).pipe(scan((acc, val) => {
            const [selectedIds, lastAction] = acc;
            const [_, checkAction] = val;
            if (!(lastAction?.checked === checkAction?.checked &&
                this.areExtIdsEqual(lastAction?.id, checkAction?.id))) {
                selectedIds.forEach(id => (id.selected = this.areExtIdsEqual(id.id, checkAction.id)
                    ? checkAction.checked
                    : id.selected));
            }
            return val;
        }), map(([externalIds]) => externalIds), shareReplay());
        this.selectedExternalIds$ = this.externalIdsWithSelection$.pipe(map(ids => ids.filter(id => id.selected).map(id => id.id)), shareReplay());
        this.defineSteps();
        const toContext = ([_, deviceToReplace, replacementDeviceId, newExternalIds]) => ({
            deviceToReplace,
            replacementDeviceId,
            newExternalIds
        });
        this.deviceReplaced$ = this.triggerDeviceReplacementSubject$.pipe(tap(() => this.deviceReplacementInProgressSubject$.next(true)), withLatestFrom(this.deviceToReplace$, this.replacementDeviceId$, this.selectedExternalIds$), map(toContext), concatMap(context => this.steps
            .map(step => this.executeStep(step))
            .reduce((ctx, step) => ctx.pipe(step), of(context))), tap(() => this.deviceReplacementInProgressSubject$.next(false)), map(() => !this.steps.some(step => step.state === 'Failed')), share());
        this.deviceReplacementInProgress$ = this.deviceReplacementInProgressSubject$
            .asObservable()
            .pipe(shareReplay());
    }
    openDrawer(deviceToReplace, closeCallback) {
        this.deviceToReplaceSubject$.next(deviceToReplace);
        this.drawerOpenSubject$.next(true);
        this.appendBreadcrumbs();
        this.closeCallback = closeCallback;
    }
    closeDrawer() {
        this.drawerOpenSubject$.next(false);
        this.removeBreadcrumbs();
        if (this.closeCallback && typeof this.closeCallback === 'function') {
            this.closeCallback();
        }
    }
    changeReplacementDeviceId(replacementDeviceId) {
        this.replacementDeviceIdSubject$.next(replacementDeviceId);
    }
    checkExternalId(id, checked) {
        this.checkExternalId$.next({ id, checked });
    }
    replaceDevice() {
        this.triggerDeviceReplacementSubject$.next();
    }
    retryStep(step) {
        this.steps.forEach(s => {
            if ((s.label === step?.label || !step) &&
                !ReplaceDeviceService.NON_REENTRANT_STATES.includes(s.state)) {
                s.skip = false;
                s.seed = s.context;
                s.state = 'Pending';
                delete s.error;
            }
            else {
                s.skip = true;
            }
        });
        this.replaceDevice();
    }
    resetSteps() {
        this.steps.forEach(s => {
            delete s.skip;
            delete s.error;
            delete s.state;
            delete s.context;
            delete s.seed;
        });
    }
    defineSteps() {
        this.steps = [
            {
                label: gettext('Gather required data'),
                overrideContext: true,
                action: (context) => {
                    const { deviceToReplace, replacementDeviceId, newExternalIds } = context;
                    if (deviceToReplace.id === replacementDeviceId) {
                        throw new Error(gettext('The device to replace and the replacement device cannot be one and the same device.'));
                    }
                    return forkJoin([
                        from(this.inventory.list({
                            query: this.queriesUtil.buildQuery({ owner: deviceToReplace.owner })
                        })).pipe(map(result => result?.data?.length === 1)),
                        from(this.inventory.detail(replacementDeviceId)).pipe(map(result => result?.data)),
                        from(this.identity.list(deviceToReplace.id)).pipe(map(result => result?.data))
                    ]).pipe(map(([deleteReplacedDeviceOwner, replacementDevice, oldExternalIds]) => ({
                        deviceToReplace,
                        replacementDevice,
                        newExternalIds,
                        oldExternalIds,
                        deleteReplacedDeviceOwner,
                        time: new Date().toISOString()
                    })));
                }
            },
            {
                label: gettext('Delete external IDs of replacement device'),
                action: (context) => {
                    const { newExternalIds } = context;
                    return forkJoin(newExternalIds.map(id => this.identity.delete(id)));
                }
            },
            {
                label: gettext('Create new external IDs for the original device'),
                action: (context) => {
                    const { newExternalIds, deviceToReplace } = context;
                    return forkJoin(newExternalIds
                        .map(extId => ({
                        ...pick(extId, ['type', 'externalId']),
                        managedObject: { ...pick(deviceToReplace, ['id']) }
                    }))
                        .map(id => this.identity.create(id)));
                }
            },
            {
                label: gettext('Delete old external IDs of original device'),
                action: (context) => {
                    const { oldExternalIds } = context;
                    return oldExternalIds?.length
                        ? forkJoin(oldExternalIds.map(id => this.identity.delete(id)))
                        : of(REPLACE_DEVICE_STEP_STATE.SKIPPED);
                },
                info: {
                    getMessage: (_, step) => step.state === 'Skipped'
                        ? gettext('No existing external IDs were determined.')
                        : undefined
                }
            },
            {
                label: gettext('Change owner of original device'),
                action: (context) => {
                    const { deviceToReplace, replacementDevice, oldExternalIds, time } = context;
                    return this.inventory.update({
                        id: deviceToReplace.id,
                        owner: replacementDevice.owner,
                        c8y_LastReplacement: {
                            time,
                            user: this.appState.currentUser.value.id,
                            previousExternalIds: oldExternalIds.map(id => pick(id, ['externalId', 'type']))
                        }
                    });
                }
            },
            {
                label: gettext('Delete old owner of original device'),
                action: (context) => {
                    const { deleteReplacedDeviceOwner, deviceToReplace } = context;
                    return deleteReplacedDeviceOwner
                        ? this.user.delete(deviceToReplace.owner)
                        : of(REPLACE_DEVICE_STEP_STATE.SKIPPED);
                },
                info: {
                    getMessage: (_, step) => step.state === 'Skipped'
                        ? gettext('User was not deleted because it is assigned as an owner of other devices.')
                        : undefined
                }
            },
            {
                label: gettext('Delete replacement device'),
                action: (context) => {
                    const { replacementDevice } = context;
                    return this.inventory.delete(replacementDevice.id);
                }
            },
            {
                label: gettext('Create event'),
                action: (context) => {
                    const { deviceToReplace, oldExternalIds, newExternalIds, time } = context;
                    return this.event.create({
                        source: { id: deviceToReplace.id },
                        text: `Device with external ID(s) ${this.extIdsToString(oldExternalIds)} was replaced by device with external ID(s) ${this.extIdsToString(newExternalIds)}`,
                        time,
                        type: 'c8y_DeviceReplaced'
                    });
                }
            },
            {
                label: gettext('Create audit log'),
                action: (context) => {
                    const { deviceToReplace, oldExternalIds, newExternalIds, time } = context;
                    return this.audit.create({
                        activity: gettext('Device replaced'),
                        source: { id: deviceToReplace.id },
                        text: `Device with external ID(s) ${this.extIdsToString(oldExternalIds)} was replaced by device with external ID(s) ${this.extIdsToString(newExternalIds)}`,
                        time,
                        type: AuditRecordType.INVENTORY,
                        user: this.appState.currentUser.value.id
                    });
                }
            }
        ];
    }
    executeStep(step) {
        return pipe(tap((ctx) => (step.state = step?.skip || ctx.skip ? step.state : REPLACE_DEVICE_STEP_STATE.EXECUTING)), concatMap((ctx) => {
            if (!step.context && !ctx.skip) {
                step.context = cloneDeep(ctx);
            }
            const context = cloneDeep(step.seed ?? ctx);
            return step?.skip || ctx.skip
                ? of(context)
                : toObservable(this.unwrapStepAction(context, step.action)).pipe(tap(result => (step.state = isValidReplaceDeviceStepState(result)
                    ? result
                    : REPLACE_DEVICE_STEP_STATE.SUCCESSFUL)), catchError(err => {
                    step.state = REPLACE_DEVICE_STEP_STATE.FAILED;
                    step.error = this.toError(err);
                    context.skip = step.overrideContext;
                    return of(context);
                }), tap(() => {
                    if (typeof step.info?.getMessage === 'function') {
                        step.info.msg = step.info.getMessage(context, step);
                    }
                }), map(result => (step.overrideContext ? result : context)));
        }));
    }
    unwrapStepAction(context, action) {
        try {
            return action(context);
        }
        catch (err) {
            // bubble up any runtime errors
            return of({}).pipe(tap(() => {
                throw err;
            }));
        }
    }
    appendBreadcrumbs() {
        this.breadcrumbService.state.forEach(bc => (bc.items = [...bc.items, { label: gettext('Replace device'), path: undefined }]));
        this.breadcrumbService.refresh();
    }
    removeBreadcrumbs() {
        this.breadcrumbService.state.forEach(bc => bc.items?.pop());
        this.breadcrumbService.refresh();
    }
    areExtIdsEqual(idA, idB) {
        return idA?.type === idB?.type && idA?.externalId === idB?.externalId;
    }
    extIdsToString(extnernalIds) {
        return extnernalIds?.map(id => `${id.externalId} [${id.type}]`).join(', ');
    }
    toError(err) {
        const { data, res, message } = err;
        let text = data?.message || message;
        let detailedData;
        if (data) {
            if (typeof data === 'object') {
                detailedData = data.exceptionMessage;
            }
            else if (typeof data === 'string') {
                detailedData = data;
            }
        }
        const hasRelevantMessage = !!(text || detailedData);
        if (!text) {
            text = gettext('A server error occurred.');
        }
        if (res && !hasRelevantMessage) {
            detailedData = pick(res, ['status', 'statusText']);
        }
        return { text, detailedData };
    }
}
ReplaceDeviceService.NON_REENTRANT_STATES = [
    'Executing',
    'Successful'
];
ReplaceDeviceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReplaceDeviceService, deps: [{ token: i1.InventoryService }, { token: i1.IdentityService }, { token: i1.AuditService }, { token: i1.EventService }, { token: i1.UserService }, { token: i2.AppStateService }, { token: i2.BreadcrumbService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
ReplaceDeviceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReplaceDeviceService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReplaceDeviceService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i1.IdentityService }, { type: i1.AuditService }, { type: i1.EventService }, { type: i1.UserService }, { type: i2.AppStateService }, { type: i2.BreadcrumbService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { NgModule } from '@angular/core';
import { gettext, hookPatternMessages, ProviderConfigurationModule } from '@c8y/ngx-components';
import { MESSAGES } from './pattern-messages.data';
import { SmsGatewayGuard } from './sms-gateway.guard';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
export class SmsGatewayModule {
}
SmsGatewayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmsGatewayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SmsGatewayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: SmsGatewayModule, imports: [i1.ProviderConfigurationModule] });
SmsGatewayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmsGatewayModule, providers: [SmsGatewayGuard, hookPatternMessages(MESSAGES)], imports: [ProviderConfigurationModule.config([
            {
                navigation: {
                    label: gettext('SMS provider'),
                    path: 'smsgateway',
                    icon: 'envelope-o',
                    parent: gettext('Settings'),
                    priority: 1000,
                    canActivate: [SmsGatewayGuard]
                },
                layout: {
                    pageTitle: gettext('SMS provider'),
                    cardTitle: gettext('Credentials'),
                    description: gettext('Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (for example, two-factor authentication and user notifications).'),
                    providerName: gettext('SMS provider'),
                    providerNamePlaceholder: gettext('Select or type to filter providers'),
                    providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                    deleteRoles: ['ROLE_SMS_ADMIN'],
                    deleteBtnLabel: gettext('Delete'),
                    saveRoles: ['ROLE_SMS_ADMIN'],
                    saveBtnLabel: gettext('Save'),
                    configurationUpdatedSuccessMsg: gettext('Credentials updated.'),
                    deleteConfigurationModalTitle: gettext('Delete credentials'),
                    deleteConfigurationModalBody: gettext(`You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?`),
                    deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                    configurationDeletedSuccessMsg: gettext('Credentials deleted.')
                },
                endpoint: {
                    definitionsEndpoint: {
                        baseUrl: 'service/messaging/providers',
                        listUrl: 'definitions'
                    },
                    configurationEndpoint: {
                        baseUrl: 'service/messaging/providers',
                        listUrl: 'configuration'
                    }
                }
            }
        ])] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SmsGatewayModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        ProviderConfigurationModule.config([
                            {
                                navigation: {
                                    label: gettext('SMS provider'),
                                    path: 'smsgateway',
                                    icon: 'envelope-o',
                                    parent: gettext('Settings'),
                                    priority: 1000,
                                    canActivate: [SmsGatewayGuard]
                                },
                                layout: {
                                    pageTitle: gettext('SMS provider'),
                                    cardTitle: gettext('Credentials'),
                                    description: gettext('Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (for example, two-factor authentication and user notifications).'),
                                    providerName: gettext('SMS provider'),
                                    providerNamePlaceholder: gettext('Select or type to filter providers'),
                                    providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                                    deleteRoles: ['ROLE_SMS_ADMIN'],
                                    deleteBtnLabel: gettext('Delete'),
                                    saveRoles: ['ROLE_SMS_ADMIN'],
                                    saveBtnLabel: gettext('Save'),
                                    configurationUpdatedSuccessMsg: gettext('Credentials updated.'),
                                    deleteConfigurationModalTitle: gettext('Delete credentials'),
                                    deleteConfigurationModalBody: gettext(`You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?`),
                                    deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                                    configurationDeletedSuccessMsg: gettext('Credentials deleted.')
                                },
                                endpoint: {
                                    definitionsEndpoint: {
                                        baseUrl: 'service/messaging/providers',
                                        listUrl: 'definitions'
                                    },
                                    configurationEndpoint: {
                                        baseUrl: 'service/messaging/providers',
                                        listUrl: 'configuration'
                                    }
                                }
                            }
                        ])
                    ],
                    providers: [SmsGatewayGuard, hookPatternMessages(MESSAGES)]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21zLWdhdGV3YXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc21zLWdhdGV3YXkvc21zLWdhdGV3YXkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQWtEdEQsTUFBTSxPQUFPLGdCQUFnQjs7NkdBQWhCLGdCQUFnQjs4R0FBaEIsZ0JBQWdCOzhHQUFoQixnQkFBZ0IsYUFGaEIsQ0FBQyxlQUFlLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsWUE1Q3pELDJCQUEyQixDQUFDLE1BQU0sQ0FBQztZQUNqQztnQkFDRSxVQUFVLEVBQUU7b0JBQ1YsS0FBSyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7b0JBQzlCLElBQUksRUFBRSxZQUFZO29CQUNsQixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7b0JBQzNCLFFBQVEsRUFBRSxJQUFJO29CQUNkLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztpQkFDL0I7Z0JBQ0QsTUFBTSxFQUFFO29CQUNOLFNBQVMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO29CQUNsQyxTQUFTLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQztvQkFDakMsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsMEtBQTBLLENBQzNLO29CQUNELFlBQVksRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO29CQUNyQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7b0JBQ3RFLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztvQkFDM0UsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQy9CLGNBQWMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO29CQUNqQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDN0IsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7b0JBQzdCLDhCQUE4QixFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztvQkFDL0QsNkJBQTZCLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO29CQUM1RCw0QkFBNEIsRUFBRSxPQUFPLENBQ25DLG9PQUFvTyxDQUNyTztvQkFDRCxrQ0FBa0MsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO29CQUNyRCw4QkFBOEIsRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7aUJBQ2hFO2dCQUNELFFBQVEsRUFBRTtvQkFDUixtQkFBbUIsRUFBRTt3QkFDbkIsT0FBTyxFQUFFLDZCQUE2Qjt3QkFDdEMsT0FBTyxFQUFFLGFBQWE7cUJBQ3ZCO29CQUNELHFCQUFxQixFQUFFO3dCQUNyQixPQUFPLEVBQUUsNkJBQTZCO3dCQUN0QyxPQUFPLEVBQUUsZUFBZTtxQkFDekI7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7MkZBSU8sZ0JBQWdCO2tCQWhENUIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsMkJBQTJCLENBQUMsTUFBTSxDQUFDOzRCQUNqQztnQ0FDRSxVQUFVLEVBQUU7b0NBQ1YsS0FBSyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7b0NBQzlCLElBQUksRUFBRSxZQUFZO29DQUNsQixJQUFJLEVBQUUsWUFBWTtvQ0FDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7b0NBQzNCLFFBQVEsRUFBRSxJQUFJO29DQUNkLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQztpQ0FDL0I7Z0NBQ0QsTUFBTSxFQUFFO29DQUNOLFNBQVMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO29DQUNsQyxTQUFTLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQztvQ0FDakMsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsMEtBQTBLLENBQzNLO29DQUNELFlBQVksRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO29DQUNyQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7b0NBQ3RFLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztvQ0FDM0UsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0NBQy9CLGNBQWMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO29DQUNqQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQ0FDN0IsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7b0NBQzdCLDhCQUE4QixFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztvQ0FDL0QsNkJBQTZCLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO29DQUM1RCw0QkFBNEIsRUFBRSxPQUFPLENBQ25DLG9PQUFvTyxDQUNyTztvQ0FDRCxrQ0FBa0MsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO29DQUNyRCw4QkFBOEIsRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7aUNBQ2hFO2dDQUNELFFBQVEsRUFBRTtvQ0FDUixtQkFBbUIsRUFBRTt3Q0FDbkIsT0FBTyxFQUFFLDZCQUE2Qjt3Q0FDdEMsT0FBTyxFQUFFLGFBQWE7cUNBQ3ZCO29DQUNELHFCQUFxQixFQUFFO3dDQUNyQixPQUFPLEVBQUUsNkJBQTZCO3dDQUN0QyxPQUFPLEVBQUUsZUFBZTtxQ0FDekI7aUNBQ0Y7NkJBQ0Y7eUJBQ0YsQ0FBQztxQkFDSDtvQkFDRCxTQUFTLEVBQUUsQ0FBQyxlQUFlLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIGhvb2tQYXR0ZXJuTWVzc2FnZXMsIFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTUVTU0FHRVMgfSBmcm9tICcuL3BhdHRlcm4tbWVzc2FnZXMuZGF0YSc7XG5pbXBvcnQgeyBTbXNHYXRld2F5R3VhcmQgfSBmcm9tICcuL3Ntcy1nYXRld2F5Lmd1YXJkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZS5jb25maWcoW1xuICAgICAge1xuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NNUyBwcm92aWRlcicpLFxuICAgICAgICAgIHBhdGg6ICdzbXNnYXRld2F5JyxcbiAgICAgICAgICBpY29uOiAnZW52ZWxvcGUtbycsXG4gICAgICAgICAgcGFyZW50OiBnZXR0ZXh0KCdTZXR0aW5ncycpLFxuICAgICAgICAgIHByaW9yaXR5OiAxMDAwLFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbU21zR2F0ZXdheUd1YXJkXVxuICAgICAgICB9LFxuICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICBwYWdlVGl0bGU6IGdldHRleHQoJ1NNUyBwcm92aWRlcicpLFxuICAgICAgICAgIGNhcmRUaXRsZTogZ2V0dGV4dCgnQ3JlZGVudGlhbHMnKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dChcbiAgICAgICAgICAgICdFbnRlciB5b3VyIGNyZWRlbnRpYWxzIGZyb20geW91ciBTTVMgcHJvdmlkZXIuIFRoaXMgZW5hYmxlcyBwbGF0Zm9ybSBmZWF0dXJlcyB0aGF0IHV0aWxpemUgU01TIHNlcnZpY2VzIChmb3IgZXhhbXBsZSwgdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvbiBhbmQgdXNlciBub3RpZmljYXRpb25zKS4nXG4gICAgICAgICAgKSxcbiAgICAgICAgICBwcm92aWRlck5hbWU6IGdldHRleHQoJ1NNUyBwcm92aWRlcicpLFxuICAgICAgICAgIHByb3ZpZGVyTmFtZVBsYWNlaG9sZGVyOiBnZXR0ZXh0KCdTZWxlY3Qgb3IgdHlwZSB0byBmaWx0ZXIgcHJvdmlkZXJzJyksXG4gICAgICAgICAgcHJvdmlkZXJOYW1lTm9NYXRjaGVzSGludDogZ2V0dGV4dCgnU2VsZWN0IG9uZSBvZiB0aGUgZXhpc3RpbmcgcHJvdmlkZXJzLicpLFxuICAgICAgICAgIGRlbGV0ZVJvbGVzOiBbJ1JPTEVfU01TX0FETUlOJ10sXG4gICAgICAgICAgZGVsZXRlQnRuTGFiZWw6IGdldHRleHQoJ0RlbGV0ZScpLFxuICAgICAgICAgIHNhdmVSb2xlczogWydST0xFX1NNU19BRE1JTiddLFxuICAgICAgICAgIHNhdmVCdG5MYWJlbDogZ2V0dGV4dCgnU2F2ZScpLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb25VcGRhdGVkU3VjY2Vzc01zZzogZ2V0dGV4dCgnQ3JlZGVudGlhbHMgdXBkYXRlZC4nKSxcbiAgICAgICAgICBkZWxldGVDb25maWd1cmF0aW9uTW9kYWxUaXRsZTogZ2V0dGV4dCgnRGVsZXRlIGNyZWRlbnRpYWxzJyksXG4gICAgICAgICAgZGVsZXRlQ29uZmlndXJhdGlvbk1vZGFsQm9keTogZ2V0dGV4dChcbiAgICAgICAgICAgIGBZb3UgYXJlIGFib3V0IHRvIGRlbGV0ZSBTTVMgcHJvdmlkZXIgY3JlZGVudGlhbHMuIERlbGV0aW5nIGNyZWRlbnRpYWxzIHdpbGwgbG9jayBvdXQgYW55IHVzZXJzIHdpdGggU01TLWJhc2VkIHR3by1mYWN0b3IgYXV0aGVudGljYXRpb24gYW5kIGRlYWN0aXZhdGUgdGhlIFNNUy1iYXNlZCBzbWFydCBydWxlcyBhbmQgZGV2aWNlIGNvbW11bmljYXRpb24uIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/YFxuICAgICAgICAgICksXG4gICAgICAgICAgZGVsZXRlQ29uZmlndXJhdGlvbk1vZGFsT2tCdG5MYWJlbDogZ2V0dGV4dCgnRGVsZXRlJyksXG4gICAgICAgICAgY29uZmlndXJhdGlvbkRlbGV0ZWRTdWNjZXNzTXNnOiBnZXR0ZXh0KCdDcmVkZW50aWFscyBkZWxldGVkLicpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZHBvaW50OiB7XG4gICAgICAgICAgZGVmaW5pdGlvbnNFbmRwb2ludDoge1xuICAgICAgICAgICAgYmFzZVVybDogJ3NlcnZpY2UvbWVzc2FnaW5nL3Byb3ZpZGVycycsXG4gICAgICAgICAgICBsaXN0VXJsOiAnZGVmaW5pdGlvbnMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uRW5kcG9pbnQ6IHtcbiAgICAgICAgICAgIGJhc2VVcmw6ICdzZXJ2aWNlL21lc3NhZ2luZy9wcm92aWRlcnMnLFxuICAgICAgICAgICAgbGlzdFVybDogJ2NvbmZpZ3VyYXRpb24nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbU21zR2F0ZXdheUd1YXJkLCBob29rUGF0dGVybk1lc3NhZ2VzKE1FU1NBR0VTKV1cbn0pXG5leHBvcnQgY2xhc3MgU21zR2F0ZXdheU1vZHVsZSB7fVxuIl19
import { gettext } from '@c8y/ngx-components';
import { getStatus } from './map.model';
export class ClusterMap {
    set clusterMarker(item) {
        this.removeClusterToBigMarker();
        this._clusterMarker = item;
    }
    get clusterMarker() {
        return this._clusterMarker;
    }
    set rect(item) {
        if (this._rect) {
            this._rect.remove();
        }
        this._rect = item;
    }
    get rect() {
        return this._rect;
    }
    constructor(iterable, addAssetCallback, translateService) {
        this.iterable = iterable;
        this.addAssetCallback = addAssetCallback;
        this.translateService = translateService;
        this.markers = [];
        this.positions = [];
        this.iterableDiffer = this.iterable.find(this.positions).create(this.trackBy);
    }
    render(map) {
        if (this._rect) {
            this._rect.addTo(map);
        }
        this.updateChanges(map);
        if (this._clusterMarker) {
            this._clusterMarker.addTo(map);
        }
    }
    clear(map) {
        this.removeClusterToBigMarker();
        this._rect.remove();
        this.positions = [];
        this.updateChanges(map);
    }
    removeClusterToBigMarker() {
        if (this._clusterMarker) {
            this._clusterMarker.remove();
            this._clusterMarker = null;
        }
    }
    addMarkerToMap(device, map) {
        const marker = this.addAssetCallback(device);
        this.markers.push(marker);
        marker.addTo(map);
    }
    setClusterToBigMarker(map, count, leaflet) {
        const bound = this.rect.getBounds();
        const text = this.translateService.instant(gettext('Zoom in'));
        const divMarker = leaflet.divIcon({
            html: `<div class="c8y-map-marker-count" data-count="${count}" title="${text}"></div>`
        });
        const labelIcon = leaflet.marker(bound.getCenter(), {
            icon: divMarker
        });
        labelIcon.addTo(map);
        labelIcon.on('click', () => {
            map.fitBounds(bound);
        });
        this.clusterMarker = labelIcon;
    }
    updateChanges(map) {
        const changes = this.iterableDiffer.diff(this.positions);
        if (changes) {
            changes.forEachRemovedItem((record) => {
                this.removeMarkerFromMap(record.item);
            });
            changes.forEachAddedItem((record) => {
                this.addMarkerToMap(record.item, map);
            });
        }
    }
    trackBy(index, item) {
        const trackItems = [item.id, item.c8y_Position.lat, item.c8y_Position.lng, getStatus(item)];
        return trackItems.join('');
    }
    removeMarkerFromMap(device) {
        const markers = this.markers.filter((marker) => marker.asset?.id === device.id);
        markers.forEach(marker => marker.remove());
    }
}
//# sourceMappingURL=data:application/json;base64,
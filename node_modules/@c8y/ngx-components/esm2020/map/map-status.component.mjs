import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ClusterMapComponent } from './cluster-map.component';
import { map, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@c8y/ngx-components";
export class MapStatusComponent {
    constructor() {
        this.configChange = new EventEmitter();
        this.onUnfollow = new EventEmitter();
        this.showCenter = false;
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.initConfig = cloneDeep(this.config);
    }
    ngOnChanges(changes) {
        if (changes.clusterMap?.previousValue !== changes.clusterMap?.currentValue) {
            this.checkIfMapIsAlreadyCentered();
            this.secondsUntilRefresh$ = this.clusterMap.msUntilRefresh$.pipe(map(milliseconds => `${Math.floor(milliseconds / 1000)}`), takeUntil(this.destroy$));
        }
    }
    center() {
        this.clusterMap.center();
    }
    reload() {
        this.clusterMap.reload();
    }
    cancelReload() {
        this.clusterMap.cancelReload();
    }
    toggleRealtime() {
        this.config = {
            ...this.config,
            realtime: !this.config.realtime
        };
        this.configChange.emit(this.config);
    }
    unfollow() {
        this.config = {
            ...this.clusterMap.config,
            follow: false
        };
        this.configChange.emit(this.config);
        this.onUnfollow.emit(this.config);
    }
    follow() {
        this.config = {
            ...this.config,
            follow: true
        };
        this.configChange.emit(this.config);
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    checkIfMapIsAlreadyCentered() {
        this.clusterMap.mapChange.pipe(takeUntil(this.destroy$)).subscribe((event) => {
            if (this.config?.center && event.sourceTarget?.getBounds) {
                const bounds = event.sourceTarget.getBounds();
                this.showCenter = !bounds.getCenter().equals(this.config.center, 3);
            }
        });
    }
}
MapStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapStatusComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MapStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MapStatusComponent, selector: "c8y-map-status", inputs: { config: "config", clusterMap: "clusterMap" }, outputs: { configChange: "configChange", onUnfollow: "onUnfollow" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"c8y-map-status\">\n  <div class=\"leaflet-touch\">\n    <div class=\"leaflet-bar\" role=\"group\">\n      <button\n        type=\"button\"\n        title=\"{{ 'Realtime' | translate }}\"\n        class=\"c8y-realtime\"\n        *ngIf=\"initConfig.realtime || clusterMap.config.follow\"\n        (click)=\"toggleRealtime()\"\n      >\n        <span class=\"c8y-pulse\" [ngClass]=\"{ active: clusterMap?.config.realtime }\"></span>\n      </button>\n      <button\n        type=\"button\"\n        class=\"time-ellapsed\"\n        *ngIf=\"\n          clusterMap?.config.refreshInterval &&\n          (secondsUntilRefresh$ | async) &&\n          !clusterMap?.config.follow\n        \"\n        disabled=\"disabled\"\n        title=\"{{ secondsUntilRefresh$ | async }}s / {{\n          clusterMap?.config.refreshInterval / 1000\n        }}s\"\n        [style.--timescope]=\"clusterMap?.config.refreshInterval + 1000 + 'ms'\"\n      >\n        <svg\n          [ngClass]=\"{ 'time-on': !(clusterMap?.isLoading$ | async) }\"\n          viewBox=\"0 0 40 40\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <circle cx=\"20\" cy=\"20\" r=\"15.8\" stroke=\"var(--c8y-brand-primary)\" stroke-width=\"6\" />\n        </svg>\n\n        <span>{{ secondsUntilRefresh$ | async }}</span>\n      </button>\n      <button\n        type=\"button\"\n        *ngIf=\"clusterMap?.isLoading$ | async\"\n        title=\"{{ 'Cancel reload' | translate }}\"\n        (click)=\"cancelReload()\"\n      >\n        <i c8yIcon=\"refresh\" class=\"icon-spin\"></i>\n      </button>\n      <button\n        type=\"button\"\n        *ngIf=\"\n          !clusterMap?.config.realtime && !clusterMap?.assets && !(clusterMap?.isLoading$ | async)\n        \"\n        (click)=\"reload()\"\n        [title]=\"'Reload' | translate\"\n      >\n        <i c8yIcon=\"refresh\"></i>\n      </button>\n      <button\n        type=\"button\"\n        (click)=\"center()\"\n        title=\"{{ 'Center map' | translate }}\"\n        [disabled]=\"!showCenter || clusterMap?.config.follow\"\n      >\n        <i c8yIcon=\"target1\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Unfollow' | translate }}\"\n        *ngIf=\"clusterMap?.config.follow\"\n        (click)=\"unfollow()\"\n      >\n        <i c8yIcon=\"marker-off\"></i>\n      </button>\n\n      <button\n        type=\"button\"\n        title=\"{{ 'Follow' | translate }}\"\n        *ngIf=\"initConfig.follow && !clusterMap?.config.follow\"\n        (click)=\"follow()\"\n      >\n        <i c8yIcon=\"marker\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapStatusComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map-status', template: "<div class=\"c8y-map-status\">\n  <div class=\"leaflet-touch\">\n    <div class=\"leaflet-bar\" role=\"group\">\n      <button\n        type=\"button\"\n        title=\"{{ 'Realtime' | translate }}\"\n        class=\"c8y-realtime\"\n        *ngIf=\"initConfig.realtime || clusterMap.config.follow\"\n        (click)=\"toggleRealtime()\"\n      >\n        <span class=\"c8y-pulse\" [ngClass]=\"{ active: clusterMap?.config.realtime }\"></span>\n      </button>\n      <button\n        type=\"button\"\n        class=\"time-ellapsed\"\n        *ngIf=\"\n          clusterMap?.config.refreshInterval &&\n          (secondsUntilRefresh$ | async) &&\n          !clusterMap?.config.follow\n        \"\n        disabled=\"disabled\"\n        title=\"{{ secondsUntilRefresh$ | async }}s / {{\n          clusterMap?.config.refreshInterval / 1000\n        }}s\"\n        [style.--timescope]=\"clusterMap?.config.refreshInterval + 1000 + 'ms'\"\n      >\n        <svg\n          [ngClass]=\"{ 'time-on': !(clusterMap?.isLoading$ | async) }\"\n          viewBox=\"0 0 40 40\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <circle cx=\"20\" cy=\"20\" r=\"15.8\" stroke=\"var(--c8y-brand-primary)\" stroke-width=\"6\" />\n        </svg>\n\n        <span>{{ secondsUntilRefresh$ | async }}</span>\n      </button>\n      <button\n        type=\"button\"\n        *ngIf=\"clusterMap?.isLoading$ | async\"\n        title=\"{{ 'Cancel reload' | translate }}\"\n        (click)=\"cancelReload()\"\n      >\n        <i c8yIcon=\"refresh\" class=\"icon-spin\"></i>\n      </button>\n      <button\n        type=\"button\"\n        *ngIf=\"\n          !clusterMap?.config.realtime && !clusterMap?.assets && !(clusterMap?.isLoading$ | async)\n        \"\n        (click)=\"reload()\"\n        [title]=\"'Reload' | translate\"\n      >\n        <i c8yIcon=\"refresh\"></i>\n      </button>\n      <button\n        type=\"button\"\n        (click)=\"center()\"\n        title=\"{{ 'Center map' | translate }}\"\n        [disabled]=\"!showCenter || clusterMap?.config.follow\"\n      >\n        <i c8yIcon=\"target1\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Unfollow' | translate }}\"\n        *ngIf=\"clusterMap?.config.follow\"\n        (click)=\"unfollow()\"\n      >\n        <i c8yIcon=\"marker-off\"></i>\n      </button>\n\n      <button\n        type=\"button\"\n        title=\"{{ 'Follow' | translate }}\"\n        *ngIf=\"initConfig.follow && !clusterMap?.config.follow\"\n        (click)=\"follow()\"\n      >\n        <i c8yIcon=\"marker\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n" }]
        }], propDecorators: { config: [{
                type: Input
            }], configChange: [{
                type: Output
            }], onUnfollow: [{
                type: Output
            }], clusterMap: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXN0YXR1cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9tYXAvbWFwLXN0YXR1cy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi9tYXAvbWFwLXN0YXR1cy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7OztBQUt0QyxNQUFNLE9BQU8sa0JBQWtCO0lBSi9CO1FBU0UsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUdwRCxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFLbEQsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUdYLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0tBa0VsQztJQWhFQyxRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFLGFBQWEsS0FBSyxPQUFPLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRTtZQUMxRSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztZQUVuQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUM5RCxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFDekQsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDekIsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osR0FBRyxJQUFJLENBQUMsTUFBTTtZQUNkLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtTQUNoQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNaLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1lBQ3pCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osR0FBRyxJQUFJLENBQUMsTUFBTTtZQUNkLE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVPLDJCQUEyQjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtZQUMzRixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFO2dCQUN4RCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUM5QyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNyRTtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7K0dBakZVLGtCQUFrQjttR0FBbEIsa0JBQWtCLHdNQ1YvQixrbkZBbUZBOzJGRHpFYSxrQkFBa0I7a0JBSjlCLFNBQVM7K0JBQ0UsZ0JBQWdCOzhCQUsxQixNQUFNO3NCQURMLEtBQUs7Z0JBSU4sWUFBWTtzQkFEWCxNQUFNO2dCQUlQLFVBQVU7c0JBRFQsTUFBTTtnQkFJUCxVQUFVO3NCQURULEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2x1c3Rlck1hcENvbXBvbmVudCB9IGZyb20gJy4vY2x1c3Rlci1tYXAuY29tcG9uZW50JztcbmltcG9ydCB7IENsdXN0ZXJNYXBDb25maWcgfSBmcm9tICcuL21hcC5tb2RlbCc7XG5pbXBvcnQgeyBtYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbWFwLXN0YXR1cycsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXAtc3RhdHVzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBNYXBTdGF0dXNDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBjb25maWc6IENsdXN0ZXJNYXBDb25maWc7XG5cbiAgQE91dHB1dCgpXG4gIGNvbmZpZ0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2x1c3Rlck1hcENvbmZpZz4oKTtcblxuICBAT3V0cHV0KClcbiAgb25VbmZvbGxvdyA9IG5ldyBFdmVudEVtaXR0ZXI8Q2x1c3Rlck1hcENvbmZpZz4oKTtcblxuICBASW5wdXQoKVxuICBjbHVzdGVyTWFwOiBDbHVzdGVyTWFwQ29tcG9uZW50O1xuXG4gIHNob3dDZW50ZXIgPSBmYWxzZTtcbiAgc2Vjb25kc1VudGlsUmVmcmVzaCQ6IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgaW5pdENvbmZpZzogQ2x1c3Rlck1hcENvbmZpZztcbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0Q29uZmlnID0gY2xvbmVEZWVwKHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5jbHVzdGVyTWFwPy5wcmV2aW91c1ZhbHVlICE9PSBjaGFuZ2VzLmNsdXN0ZXJNYXA/LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5jaGVja0lmTWFwSXNBbHJlYWR5Q2VudGVyZWQoKTtcblxuICAgICAgdGhpcy5zZWNvbmRzVW50aWxSZWZyZXNoJCA9IHRoaXMuY2x1c3Rlck1hcC5tc1VudGlsUmVmcmVzaCQucGlwZShcbiAgICAgICAgbWFwKG1pbGxpc2Vjb25kcyA9PiBgJHtNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApfWApLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY2VudGVyKCkge1xuICAgIHRoaXMuY2x1c3Rlck1hcC5jZW50ZXIoKTtcbiAgfVxuXG4gIHJlbG9hZCgpIHtcbiAgICB0aGlzLmNsdXN0ZXJNYXAucmVsb2FkKCk7XG4gIH1cblxuICBjYW5jZWxSZWxvYWQoKSB7XG4gICAgdGhpcy5jbHVzdGVyTWFwLmNhbmNlbFJlbG9hZCgpO1xuICB9XG5cbiAgdG9nZ2xlUmVhbHRpbWUoKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIHJlYWx0aW1lOiAhdGhpcy5jb25maWcucmVhbHRpbWVcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnQ2hhbmdlLmVtaXQodGhpcy5jb25maWcpO1xuICB9XG5cbiAgdW5mb2xsb3coKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNsdXN0ZXJNYXAuY29uZmlnLFxuICAgICAgZm9sbG93OiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5jb25maWdDaGFuZ2UuZW1pdCh0aGlzLmNvbmZpZyk7XG4gICAgdGhpcy5vblVuZm9sbG93LmVtaXQodGhpcy5jb25maWcpO1xuICB9XG5cbiAgZm9sbG93KCkge1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBmb2xsb3c6IHRydWVcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnQ2hhbmdlLmVtaXQodGhpcy5jb25maWcpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrSWZNYXBJc0FscmVhZHlDZW50ZXJlZCgpIHtcbiAgICB0aGlzLmNsdXN0ZXJNYXAubWFwQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKGV2ZW50OiBMLkxlYWZsZXRFdmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29uZmlnPy5jZW50ZXIgJiYgZXZlbnQuc291cmNlVGFyZ2V0Py5nZXRCb3VuZHMpIHtcbiAgICAgICAgY29uc3QgYm91bmRzID0gZXZlbnQuc291cmNlVGFyZ2V0LmdldEJvdW5kcygpO1xuICAgICAgICB0aGlzLnNob3dDZW50ZXIgPSAhYm91bmRzLmdldENlbnRlcigpLmVxdWFscyh0aGlzLmNvbmZpZy5jZW50ZXIsIDMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYzh5LW1hcC1zdGF0dXNcIj5cbiAgPGRpdiBjbGFzcz1cImxlYWZsZXQtdG91Y2hcIj5cbiAgICA8ZGl2IGNsYXNzPVwibGVhZmxldC1iYXJcIiByb2xlPVwiZ3JvdXBcIj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIHRpdGxlPVwie3sgJ1JlYWx0aW1lJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGNsYXNzPVwiYzh5LXJlYWx0aW1lXCJcbiAgICAgICAgKm5nSWY9XCJpbml0Q29uZmlnLnJlYWx0aW1lIHx8IGNsdXN0ZXJNYXAuY29uZmlnLmZvbGxvd1wiXG4gICAgICAgIChjbGljayk9XCJ0b2dnbGVSZWFsdGltZSgpXCJcbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJjOHktcHVsc2VcIiBbbmdDbGFzc109XCJ7IGFjdGl2ZTogY2x1c3Rlck1hcD8uY29uZmlnLnJlYWx0aW1lIH1cIj48L3NwYW4+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGNsYXNzPVwidGltZS1lbGxhcHNlZFwiXG4gICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgY2x1c3Rlck1hcD8uY29uZmlnLnJlZnJlc2hJbnRlcnZhbCAmJlxuICAgICAgICAgIChzZWNvbmRzVW50aWxSZWZyZXNoJCB8IGFzeW5jKSAmJlxuICAgICAgICAgICFjbHVzdGVyTWFwPy5jb25maWcuZm9sbG93XG4gICAgICAgIFwiXG4gICAgICAgIGRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICAgICAgICB0aXRsZT1cInt7IHNlY29uZHNVbnRpbFJlZnJlc2gkIHwgYXN5bmMgfX1zIC8ge3tcbiAgICAgICAgICBjbHVzdGVyTWFwPy5jb25maWcucmVmcmVzaEludGVydmFsIC8gMTAwMFxuICAgICAgICB9fXNcIlxuICAgICAgICBbc3R5bGUuLS10aW1lc2NvcGVdPVwiY2x1c3Rlck1hcD8uY29uZmlnLnJlZnJlc2hJbnRlcnZhbCArIDEwMDAgKyAnbXMnXCJcbiAgICAgID5cbiAgICAgICAgPHN2Z1xuICAgICAgICAgIFtuZ0NsYXNzXT1cInsgJ3RpbWUtb24nOiAhKGNsdXN0ZXJNYXA/LmlzTG9hZGluZyQgfCBhc3luYykgfVwiXG4gICAgICAgICAgdmlld0JveD1cIjAgMCA0MCA0MFwiXG4gICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICA+XG4gICAgICAgICAgPGNpcmNsZSBjeD1cIjIwXCIgY3k9XCIyMFwiIHI9XCIxNS44XCIgc3Ryb2tlPVwidmFyKC0tYzh5LWJyYW5kLXByaW1hcnkpXCIgc3Ryb2tlLXdpZHRoPVwiNlwiIC8+XG4gICAgICAgIDwvc3ZnPlxuXG4gICAgICAgIDxzcGFuPnt7IHNlY29uZHNVbnRpbFJlZnJlc2gkIHwgYXN5bmMgfX08L3NwYW4+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICpuZ0lmPVwiY2x1c3Rlck1hcD8uaXNMb2FkaW5nJCB8IGFzeW5jXCJcbiAgICAgICAgdGl0bGU9XCJ7eyAnQ2FuY2VsIHJlbG9hZCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICAoY2xpY2spPVwiY2FuY2VsUmVsb2FkKClcIlxuICAgICAgPlxuICAgICAgICA8aSBjOHlJY29uPVwicmVmcmVzaFwiIGNsYXNzPVwiaWNvbi1zcGluXCI+PC9pPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICFjbHVzdGVyTWFwPy5jb25maWcucmVhbHRpbWUgJiYgIWNsdXN0ZXJNYXA/LmFzc2V0cyAmJiAhKGNsdXN0ZXJNYXA/LmlzTG9hZGluZyQgfCBhc3luYylcbiAgICAgICAgXCJcbiAgICAgICAgKGNsaWNrKT1cInJlbG9hZCgpXCJcbiAgICAgICAgW3RpdGxlXT1cIidSZWxvYWQnIHwgdHJhbnNsYXRlXCJcbiAgICAgID5cbiAgICAgICAgPGkgYzh5SWNvbj1cInJlZnJlc2hcIj48L2k+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIChjbGljayk9XCJjZW50ZXIoKVwiXG4gICAgICAgIHRpdGxlPVwie3sgJ0NlbnRlciBtYXAnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgW2Rpc2FibGVkXT1cIiFzaG93Q2VudGVyIHx8IGNsdXN0ZXJNYXA/LmNvbmZpZy5mb2xsb3dcIlxuICAgICAgPlxuICAgICAgICA8aSBjOHlJY29uPVwidGFyZ2V0MVwiPjwvaT5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgdGl0bGU9XCJ7eyAnVW5mb2xsb3cnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgKm5nSWY9XCJjbHVzdGVyTWFwPy5jb25maWcuZm9sbG93XCJcbiAgICAgICAgKGNsaWNrKT1cInVuZm9sbG93KClcIlxuICAgICAgPlxuICAgICAgICA8aSBjOHlJY29uPVwibWFya2VyLW9mZlwiPjwvaT5cbiAgICAgIDwvYnV0dG9uPlxuXG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICB0aXRsZT1cInt7ICdGb2xsb3cnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgKm5nSWY9XCJpbml0Q29uZmlnLmZvbGxvdyAmJiAhY2x1c3Rlck1hcD8uY29uZmlnLmZvbGxvd1wiXG4gICAgICAgIChjbGljayk9XCJmb2xsb3coKVwiXG4gICAgICA+XG4gICAgICAgIDxpIGM4eUljb249XCJtYXJrZXJcIj48L2k+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==
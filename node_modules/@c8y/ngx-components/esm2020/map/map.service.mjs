import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { ClusterSize } from './map.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
export class MapService {
    constructor(inventory) {
        this.inventory = inventory;
        /**
         * The devices that are maximal displayed in one cluster.
         */
        this.MAX_DEVICE_PER_CLUSTER = 200;
        /**
         * The count until the cluster is sized. There are a maximum of
         * three clusters: 1, 4 or 16.
         */
        this.CLUSTER_LEVEL_THRESHOLD = 500;
    }
    /**
     * Returns the leaflet instance used by the cumulocity core.
     */
    async getLeaflet() {
        const c8yLeafletInstance = (await import('leaflet')).default;
        return c8yLeafletInstance;
    }
    /**
     * Verifies if a given managed object is a device with a position fragment.
     * @param mo The given managed object.
     */
    isPositionedDevice(mo) {
        return !!(mo?.c8y_IsDevice && this.hasPosition(mo));
    }
    /**
     * Verifies if a given managed object has a position fragment.
     * @param mo The given managed object.
     */
    hasPosition(mo) {
        return mo?.c8y_Position;
    }
    async getPositionMOs(bound, byGroupIdMO) {
        return this.getPositionMOsFromBound(bound, byGroupIdMO, false);
    }
    async getPositionMOsFromBoundCount(bound, byGroupIdMO) {
        return this.getPositionMOsFromBound(bound, byGroupIdMO, true);
    }
    async getPositionDevices(pageSize = this.MAX_DEVICE_PER_CLUSTER, count) {
        const { paging, data } = await this.inventory.list({
            pageSize: count ? 1 : pageSize,
            withTotalPages: count,
            query: '$filter=has(c8y_Position) and has(c8y_IsDevice)'
        });
        if (count) {
            return paging.totalPages;
        }
        return data;
    }
    async getPositionMOsFromBound(bound, byGroupIdMO, count = false) {
        const { lat: latMin, lng: lngMin } = bound.getSouthWest();
        const { lat: latMax, lng: lngMax } = bound.getNorthEast();
        const byGroupIdFilter = byGroupIdMO
            ? `(bygroupid(${byGroupIdMO.id}) or id eq '${byGroupIdMO.id}') and `
            : '';
        const boundFilter = `$filter=${byGroupIdFilter}has(c8y_Position) and c8y_Position.lng gt ${lngMin}d and c8y_Position.lat gt ${latMin}d and c8y_Position.lng lt ${lngMax}d and c8y_Position.lat lt ${latMax}d`;
        const { paging, data } = await this.inventory.list({
            pageSize: count ? 1 : this.MAX_DEVICE_PER_CLUSTER,
            withTotalPages: count,
            query: boundFilter
        });
        if (count) {
            return paging.totalPages;
        }
        return data;
    }
    async getAllPositionsMOs(byGroupIdMO, pageSize = 500) {
        const filter = {
            pageSize,
            withTotalPages: true,
            query: 'has(c8y_Position)'
        };
        if (byGroupIdMO) {
            filter.query = `$filter=(bygroupid(${byGroupIdMO.id}) or id eq '${byGroupIdMO.id}') and has(c8y_Position)`;
        }
        const { paging, data, res } = await this.inventory.list(filter);
        return {
            res,
            paging: paging,
            data: data
        };
    }
    async getClusterSize(bound) {
        const count = await this.getPositionMOsFromBoundCount(bound);
        let clusterSize = ClusterSize.NONE;
        if (count > this.CLUSTER_LEVEL_THRESHOLD) {
            clusterSize = ClusterSize.SIXTEEN;
        }
        else if (count > this.MAX_DEVICE_PER_CLUSTER) {
            clusterSize = ClusterSize.FOUR;
        }
        return clusterSize;
    }
}
MapService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapService, deps: [{ token: i1.InventoryService }], target: i0.ɵɵFactoryTarget.Injectable });
MapService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { DeviceRegistrationService, DeviceRegistrationStatus } from '@c8y/client';
import { get, pick } from 'lodash-es';
import { BehaviorSubject, forkJoin, from, Subject } from 'rxjs';
import { AlertService, gettext } from '@c8y/ngx-components';
import { finalize, map, mergeMap, takeLast, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/client";
import * as i3 from "@c8y/ngx-components";
export class RegisterDeviceService {
    constructor(router, deviceRegService, alertService) {
        this.router = router;
        this.deviceRegService = deviceRegService;
        this.alertService = alertService;
        this._loading = new Subject();
        this._limit = new BehaviorSubject({
            isReached: false
        });
        this._deviceRegistrationRequests = new BehaviorSubject({ data: [] });
        this.deviceRegistrationRequests$ = this._deviceRegistrationRequests.asObservable();
        this.loading$ = this._loading.asObservable();
        this.limit$ = this._limit.asObservable();
        this.deviceRegUrl = '/deviceregistration';
        this.endSubscriptions = new Subject();
    }
    isDeviceRegistration() {
        return get(this.router, 'url') === this.deviceRegUrl;
    }
    internalListUpdate(deviceRequests, pagingObject) {
        let { paging, data } = this._deviceRegistrationRequests.getValue();
        if (pagingObject) {
            paging = pagingObject;
        }
        data = [...data, ...deviceRequests];
        this._deviceRegistrationRequests.next({ data, paging });
    }
    onDeviceBootstrap(bsData) {
        const { id, status } = bsData;
        this._deviceRegistrationRequests.next({
            data: this.updateStatusById(id, status)
        });
    }
    list(pageSize = 100) {
        this._loading.next(true);
        this._deviceRegistrationRequests.next({ data: [], paging: undefined });
        from(this.deviceRegService.list({ pageSize, withTotalPages: true }))
            .pipe(takeUntil(this.endSubscriptions), finalize(() => this.limit()))
            .subscribe(res => {
            const { data, paging } = res;
            this.internalListUpdate(data, paging);
            this._loading.next(false);
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    createMultiple(newDeviceRequests) {
        if (newDeviceRequests && newDeviceRequests.length > 0) {
            this._loading.next(true);
            const newRequests$ = newDeviceRequests.map(element => {
                return from(this.deviceRegService.create(element).catch((err) => ({
                    res: err.res,
                    data: { ...err.data, id: element.id }
                })));
            });
            const groupedRequests = {
                success: [],
                failed: []
            };
            return forkJoin(newRequests$).pipe(mergeMap(resp => resp.map(el => {
                el.res.ok
                    ? groupedRequests.success.push(el.data)
                    : groupedRequests.failed.push(el.data);
                return groupedRequests;
            })), takeLast(1), finalize(() => {
                this.internalListUpdate(groupedRequests.success);
                this._loading.next(false);
            }));
        }
    }
    remove(id) {
        this._loading.next(true);
        from(this.deviceRegService.delete(id))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(() => {
            this._deviceRegistrationRequests.next({
                data: this.removeDeviceRegistrationRequestById(id)
            });
            this._loading.next(false);
            this.alertService.success(gettext('Device registration cancelled.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    accept(request) {
        this._loading.next(true);
        const payload = pick(request, ['id', 'securityToken']);
        from(this.deviceRegService.accept(payload))
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(() => {
            this._deviceRegistrationRequests.next({
                data: this.updateStatusById(payload.id, DeviceRegistrationStatus.ACCEPTED)
            });
            this.limit();
            this._loading.next(false);
            this.alertService.success(gettext('Device registration accepted.'));
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    acceptAll() {
        const acceptedDeviceRequests = [];
        const failedDeviceRequests = [];
        this._loading.next(true);
        from(this.deviceRegService.acceptAll())
            .pipe(takeUntil(this.endSubscriptions), map(({ data }) => {
            data.map(deviceRegistrationRequest => {
                if (deviceRegistrationRequest.successful) {
                    acceptedDeviceRequests.push(deviceRegistrationRequest);
                    this.updateStatusById(deviceRegistrationRequest.id, DeviceRegistrationStatus.ACCEPTED);
                }
                else {
                    failedDeviceRequests.push(deviceRegistrationRequest);
                }
            });
            return data;
        }), finalize(() => {
            // update rendered list with successful accepted device registrations
            // see: this.updateStatusById(...)
            this.internalListUpdate([]);
            this.limit();
            this._loading.next(false);
            if (failedDeviceRequests.length > 0) {
                this.alertService.warning(gettext('Could not accept all pending registration requests.'), JSON.stringify({
                    failedDeviceRequests,
                    acceptedDeviceRequests
                }, undefined, 2));
            }
            else {
                this.alertService.success(gettext('Accepted all pending registration requests.'));
            }
        }))
            .subscribe(() => {
            // empty by design
        }, err => {
            this._loading.next(false);
            this.alertService.addServerFailure(err);
        });
    }
    limit() {
        from(this.deviceRegService.limit())
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(res => this._limit.next(res.data), err => this.alertService.addServerFailure(err));
    }
    getRequestByStatus(status) {
        return this._deviceRegistrationRequests.getValue().data.filter(req => req.status === status);
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    updateStatusById(id, status) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items[matchingElementIndex].status = status;
        }
        return items;
    }
    removeDeviceRegistrationRequestById(id) {
        const items = this._deviceRegistrationRequests.getValue().data;
        const matchingElementIndex = items.findIndex(element => element.id === id);
        if (matchingElementIndex >= 0) {
            items.splice(matchingElementIndex, 1);
        }
        this._loading.next(false);
        return items;
    }
}
RegisterDeviceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceService, deps: [{ token: i1.Router }, { token: i2.DeviceRegistrationService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
RegisterDeviceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.DeviceRegistrationService }, { type: i3.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ExtensionPointWithoutStateForPlugins, fromTriggerOnce, hookGeneric, PluginsResolveService } from '@c8y/ngx-components';
import { flatten } from 'lodash';
import { shareReplay, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@c8y/ngx-components";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookDeviceRegistration` function instead.
 */
export const HOOK_DEVICE_REGISTRATION = new InjectionToken('HOOK_DEVICE_REGISTRATION');
/**
 * You can either provide a single `RegisterDeviceExtension` as parameter:
 * ```typescript
 *  hookDeviceRegistration(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDeviceRegistration([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<RegisterDeviceExtension>`
 * ```typescript
 *  export class MyDeviceRegistrationFactory implements ExtensionFactory<RegisterDeviceExtension> {...}
 *  ...
 *  hookDeviceRegistration(MyDeviceRegistrationFactory)
 * ```
 * A typed alternative to `HOOK_DEVICE_REGISTRATION`.
 * @param registration The `RegisterDeviceExtension`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDeviceRegistration(registration, options) {
    return hookGeneric(registration, HOOK_DEVICE_REGISTRATION, options);
}
/**
 * A service which defines device registration options.
 */
export class RegisterDeviceExtensionService extends ExtensionPointWithoutStateForPlugins {
    constructor(rootInjector, router, plugins) {
        super(rootInjector, plugins);
        this.router = router;
        this.items$ = this.setupItemsObservable();
    }
    setupItemsObservable() {
        return fromTriggerOnce(this.router, this.refresh$, [
            () => flatten(this.injectors.map(injector => injector.get(HOOK_DEVICE_REGISTRATION, [], { self: true }))),
            () => this.factories
        ]).pipe(startWith([]), shareReplay(1));
    }
}
RegisterDeviceExtensionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceExtensionService, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.PluginsResolveService }], target: i0.ɵɵFactoryTarget.Injectable });
RegisterDeviceExtensionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceExtensionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RegisterDeviceExtensionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.PluginsResolveService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcmVnaXN0ZXItZGV2aWNlL2Ryb3Bkb3duL3JlZ2lzdGVyLWRldmljZS1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFFTCxvQ0FBb0MsRUFDcEMsZUFBZSxFQUVmLFdBQVcsRUFDWCxxQkFBcUIsRUFFdEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUF5QnhEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLElBQUksY0FBYyxDQUN4RCwwQkFBMEIsQ0FDM0IsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsWUFBc0QsRUFDdEQsT0FBOEI7SUFFOUIsT0FBTyxXQUFXLENBQTBCLFlBQVksRUFBRSx3QkFBd0IsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBRUQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sOEJBQStCLFNBQVEsb0NBQXdEO0lBQzFHLFlBQVksWUFBc0IsRUFBVSxNQUFjLEVBQUUsT0FBOEI7UUFDeEYsS0FBSyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztRQURhLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sZUFBZSxDQUFxQixJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckUsR0FBRyxFQUFFLENBQ0gsT0FBTyxDQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUMzRjtZQUNILEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTO1NBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OzJIQWRVLDhCQUE4QjsrSEFBOUIsOEJBQThCLGNBRjdCLE1BQU07MkZBRVAsOEJBQThCO2tCQUgxQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvbkZhY3RvcnksXG4gIEV4dGVuc2lvblBvaW50V2l0aG91dFN0YXRlRm9yUGx1Z2lucyxcbiAgZnJvbVRyaWdnZXJPbmNlLFxuICBHZW5lcmljSG9va1R5cGUsXG4gIGhvb2tHZW5lcmljLFxuICBQbHVnaW5zUmVzb2x2ZVNlcnZpY2UsXG4gIEhvb2tPcHRpb25zXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZVJlcGxheSwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVnaXN0ZXJEZXZpY2VJdGVtIH0gZnJvbSAnLi9SZWdpc3RlckRldmljZUl0ZW0nO1xuXG4vKipcbiAqIEFuIGV4dGVuc2lvbiBIT09LIGNhbiB1c2UgZWl0aGVyIGEgcHVyZSB2YWx1ZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlVmFsdWU6IHsgLi4uaG9va1ZhbHVlIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICpcbiAqIE9yIGFuIGFycmF5IHRvIGRpcmVjdGx5IHJlZ2lzdGVyIG11bHRpcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VWYWx1ZTogW3sgLi4uaG9va1ZhbHVlcyB9XSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKlxuICogT3IgYW4gRXh0ZW5zaW9uRmFjdG9yeSB3aGljaCBhbGxvd3MgdG8gZGVmaW5lIGEgZ2V0KCkgZnVuY3Rpb24uIFRoaXMgZnVuY3Rpb25cbiAqIGdldHMgY2FsbGVkIG9uIGVhY2ggbmF2aWdhdGlvbiB3aXRoIHRoZSBjdXJyZW50IHJvdXRlIGFuZCBjYW4gcmV0dXJuIHZhbHVlc1xuICogYXN5bmMgKG9ic2VydmFibGUgb3IgcHJvbWlzZSkuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZUZhY3Rvcnk6IHsgZ2V0OiAocm91dGUpID0+IGRvU29tZXRoaW5nQXN5bmMocm91dGUpIH0sIG11bHRpOiB0cnVlIH1cbiAqIGBgYFxuICovXG5leHBvcnQgdHlwZSBSZWdpc3RlckRldmljZUV4dGVuc2lvbiA9XG4gIHwgUmVnaXN0ZXJEZXZpY2VJdGVtXG4gIHwgUmVnaXN0ZXJEZXZpY2VJdGVtW11cbiAgfCBFeHRlbnNpb25GYWN0b3J5PFJlZ2lzdGVyRGV2aWNlSXRlbT47XG4vKipcbiAqIEEgaG9vayB0byB1c2UgZm9yIE11bHRpIFByb3ZpZGVyIGV4dGVuc2lvbi5cbiAqIEBkZXByZWNhdGVkIENvbnNpZGVyIHVzaW5nIHRoZSBgaG9va0RldmljZVJlZ2lzdHJhdGlvbmAgZnVuY3Rpb24gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEhPT0tfREVWSUNFX1JFR0lTVFJBVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSZWdpc3RlckRldmljZUV4dGVuc2lvbj4oXG4gICdIT09LX0RFVklDRV9SRUdJU1RSQVRJT04nXG4pO1xuXG4vKipcbiAqIFlvdSBjYW4gZWl0aGVyIHByb3ZpZGUgYSBzaW5nbGUgYFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uYCBhcyBwYXJhbWV0ZXI6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va0RldmljZVJlZ2lzdHJhdGlvbiguLi4pXG4gKiBgYGBcbiAqXG4gKiBPciBhbiBhcnJheSB0byBkaXJlY3RseSByZWdpc3RlciBtdWx0aXBsZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBob29rRGV2aWNlUmVnaXN0cmF0aW9uKFsuLi5dKVxuICogYGBgXG4gKlxuICogT3IgeW91IHByb3ZpZGUgYW4gU2VydmljZSB0aGF0IGltcGxlbWVudHMgYEV4dGVuc2lvbkZhY3Rvcnk8UmVnaXN0ZXJEZXZpY2VFeHRlbnNpb24+YFxuICogYGBgdHlwZXNjcmlwdFxuICogIGV4cG9ydCBjbGFzcyBNeURldmljZVJlZ2lzdHJhdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBFeHRlbnNpb25GYWN0b3J5PFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uPiB7Li4ufVxuICogIC4uLlxuICogIGhvb2tEZXZpY2VSZWdpc3RyYXRpb24oTXlEZXZpY2VSZWdpc3RyYXRpb25GYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX0RFVklDRV9SRUdJU1RSQVRJT05gLlxuICogQHBhcmFtIHJlZ2lzdHJhdGlvbiBUaGUgYFJlZ2lzdGVyRGV2aWNlRXh0ZW5zaW9uYCdzIG9yIGBFeHRlbnNpb25GYWN0b3J5YCB0byBiZSBwcm92aWRlZC5cbiAqIEByZXR1cm5zIEFuIGBQcm92aWRlcmAgdG8gYmUgcHJvdmlkZWQgaW4geW91ciBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob29rRGV2aWNlUmVnaXN0cmF0aW9uKFxuICByZWdpc3RyYXRpb246IEdlbmVyaWNIb29rVHlwZTxSZWdpc3RlckRldmljZUV4dGVuc2lvbj4sXG4gIG9wdGlvbnM/OiBQYXJ0aWFsPEhvb2tPcHRpb25zPlxuKSB7XG4gIHJldHVybiBob29rR2VuZXJpYzxSZWdpc3RlckRldmljZUV4dGVuc2lvbj4ocmVnaXN0cmF0aW9uLCBIT09LX0RFVklDRV9SRUdJU1RSQVRJT04sIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBkZWZpbmVzIGRldmljZSByZWdpc3RyYXRpb24gb3B0aW9ucy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUmVnaXN0ZXJEZXZpY2VFeHRlbnNpb25TZXJ2aWNlIGV4dGVuZHMgRXh0ZW5zaW9uUG9pbnRXaXRob3V0U3RhdGVGb3JQbHVnaW5zPFJlZ2lzdGVyRGV2aWNlSXRlbT4ge1xuICBjb25zdHJ1Y3Rvcihyb290SW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwbHVnaW5zOiBQbHVnaW5zUmVzb2x2ZVNlcnZpY2UpIHtcbiAgICBzdXBlcihyb290SW5qZWN0b3IsIHBsdWdpbnMpO1xuICAgIHRoaXMuaXRlbXMkID0gdGhpcy5zZXR1cEl0ZW1zT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldHVwSXRlbXNPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8UmVnaXN0ZXJEZXZpY2VJdGVtW10+IHtcbiAgICByZXR1cm4gZnJvbVRyaWdnZXJPbmNlPFJlZ2lzdGVyRGV2aWNlSXRlbT4odGhpcy5yb3V0ZXIsIHRoaXMucmVmcmVzaCQsIFtcbiAgICAgICgpID0+XG4gICAgICAgIGZsYXR0ZW4oXG4gICAgICAgICAgdGhpcy5pbmplY3RvcnMubWFwKGluamVjdG9yID0+IGluamVjdG9yLmdldChIT09LX0RFVklDRV9SRUdJU1RSQVRJT04sIFtdLCB7IHNlbGY6IHRydWUgfSkpXG4gICAgICAgICksXG4gICAgICAoKSA9PiB0aGlzLmZhY3Rvcmllc1xuICAgIF0pLnBpcGUoc3RhcnRXaXRoKFtdKSwgc2hhcmVSZXBsYXkoMSkpO1xuICB9XG59XG4iXX0=
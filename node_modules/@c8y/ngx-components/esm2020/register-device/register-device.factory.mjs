import { Injectable } from '@angular/core';
import { GeneralDeviceRegistrationButtonComponent } from './general/general-device-registration-button.component';
import { ExtensibleDeviceRegistrationButtonComponent } from './extensible/single/extensible-device-registration-button.component';
import { ExtensibleBulkDeviceRegistrationButtonComponent } from './extensible/bulk/extensible-bulk-device-registration-button.component';
import { BulkDeviceRegistrationButtonComponent } from './bulk/bulk-device-registration-button.component';
import * as i0 from "@angular/core";
export class DeviceRegistrationFactory {
    get() {
        return [
            {
                template: GeneralDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'single'
            },
            {
                template: ExtensibleDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'single'
            },
            {
                template: ExtensibleBulkDeviceRegistrationButtonComponent,
                priority: 50,
                category: 'bulk'
            },
            {
                template: BulkDeviceRegistrationButtonComponent,
                priority: 100,
                category: 'bulk'
            }
        ];
    }
}
DeviceRegistrationFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceRegistrationFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DeviceRegistrationFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceRegistrationFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceRegistrationFactory, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGV2aWNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9yZWdpc3Rlci1kZXZpY2UvcmVnaXN0ZXItZGV2aWNlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNsSCxPQUFPLEVBQUUsMkNBQTJDLEVBQUUsTUFBTSxxRUFBcUUsQ0FBQztBQUNsSSxPQUFPLEVBQUUsK0NBQStDLEVBQUUsTUFBTSx3RUFBd0UsQ0FBQztBQUN6SSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQzs7QUFJekcsTUFBTSxPQUFPLHlCQUF5QjtJQUNwQyxHQUFHO1FBQ0QsT0FBTztZQUNMO2dCQUNFLFFBQVEsRUFBRSx3Q0FBd0M7Z0JBQ2xELFFBQVEsRUFBRSxHQUFHO2dCQUNiLFFBQVEsRUFBRSxRQUFRO2FBQ0c7WUFDdkI7Z0JBQ0UsUUFBUSxFQUFFLDJDQUEyQztnQkFDckQsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osUUFBUSxFQUFFLFFBQVE7YUFDRztZQUN2QjtnQkFDRSxRQUFRLEVBQUUsK0NBQStDO2dCQUN6RCxRQUFRLEVBQUUsRUFBRTtnQkFDWixRQUFRLEVBQUUsTUFBTTthQUNLO1lBQ3ZCO2dCQUNFLFFBQVEsRUFBRSxxQ0FBcUM7Z0JBQy9DLFFBQVEsRUFBRSxHQUFHO2dCQUNiLFFBQVEsRUFBRSxNQUFNO2FBQ0s7U0FDeEIsQ0FBQztJQUNKLENBQUM7O3NIQXhCVSx5QkFBeUI7MEhBQXpCLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQURyQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2VuZXJhbERldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vZ2VuZXJhbC9nZW5lcmFsLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9leHRlbnNpYmxlL3NpbmdsZS9leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFeHRlbnNpYmxlQnVsa0RldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vZXh0ZW5zaWJsZS9idWxrL2V4dGVuc2libGUtYnVsay1kZXZpY2UtcmVnaXN0cmF0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnVsa0RldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vYnVsay9idWxrLWRldmljZS1yZWdpc3RyYXRpb24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSZWdpc3RlckRldmljZUl0ZW0sIFJlZ2lzdGVyRGV2aWNlRmFjdG9yeSB9IGZyb20gJy4vZHJvcGRvd24vUmVnaXN0ZXJEZXZpY2VJdGVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZVJlZ2lzdHJhdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBSZWdpc3RlckRldmljZUZhY3Rvcnkge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgdGVtcGxhdGU6IEdlbmVyYWxEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQsXG4gICAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICAgIGNhdGVnb3J5OiAnc2luZ2xlJ1xuICAgICAgfSBhcyBSZWdpc3RlckRldmljZUl0ZW0sXG4gICAgICB7XG4gICAgICAgIHRlbXBsYXRlOiBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBwcmlvcml0eTogNTAsXG4gICAgICAgIGNhdGVnb3J5OiAnc2luZ2xlJ1xuICAgICAgfSBhcyBSZWdpc3RlckRldmljZUl0ZW0sXG4gICAgICB7XG4gICAgICAgIHRlbXBsYXRlOiBFeHRlbnNpYmxlQnVsa0RldmljZVJlZ2lzdHJhdGlvbkJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgcHJpb3JpdHk6IDUwLFxuICAgICAgICBjYXRlZ29yeTogJ2J1bGsnXG4gICAgICB9IGFzIFJlZ2lzdGVyRGV2aWNlSXRlbSxcbiAgICAgIHtcbiAgICAgICAgdGVtcGxhdGU6IEJ1bGtEZXZpY2VSZWdpc3RyYXRpb25CdXR0b25Db21wb25lbnQsXG4gICAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICAgIGNhdGVnb3J5OiAnYnVsaydcbiAgICAgIH0gYXMgUmVnaXN0ZXJEZXZpY2VJdGVtXG4gICAgXTtcbiAgfVxufVxuIl19
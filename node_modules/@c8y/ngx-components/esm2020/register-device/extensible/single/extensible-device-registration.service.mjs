import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class ExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    async getSchema(contextPath) {
        const response = await this.client.fetch(this.getMetadataUrl(contextPath), {
            params: { lang: this.stateService.state.lang }
        });
        const data = await response.json();
        if (!data || !data.c8y_DeviceRegistration) {
            throw new Error(gettext('The response of the microservice is incomplete. The device registration information is missing.'));
        }
        return data.c8y_DeviceRegistration;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(false);
    }
    async registerDevice(contextPath, model) {
        const method = 'POST';
        const body = JSON.stringify(model);
        const headers = { 'content-type': 'application/json', accept: 'application/json' };
        const res = await this.client.fetch(this.getServiceBaseUrl(contextPath), {
            method,
            body,
            headers
        });
        const data = await res.json();
        return { res, data };
    }
}
ExtensibleDeviceRegistrationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ExtensibleDeviceRegistrationService, deps: [{ token: i1.ApplicationService }, { token: i2.AppStateService }, { token: i1.FetchClient }], target: i0.ɵɵFactoryTarget.Injectable });
ExtensibleDeviceRegistrationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ExtensibleDeviceRegistrationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ExtensibleDeviceRegistrationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }, { type: i2.AppStateService }, { type: i1.FetchClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9yZWdpc3Rlci1kZXZpY2UvZXh0ZW5zaWJsZS9zaW5nbGUvZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFXLE1BQU0sYUFBYSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFLekcsTUFBTSxPQUFPLG1DQUFvQyxTQUFRLHVDQUF1QztJQUM5RixZQUNZLGtCQUFzQyxFQUN0QyxZQUE2QixFQUMvQixNQUFtQjtRQUUzQixLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFKOUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDL0IsV0FBTSxHQUFOLE1BQU0sQ0FBYTtJQUc3QixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFtQjtRQUNqQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDekUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtTQUMvQyxDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQ2IsT0FBTyxDQUNMLGlHQUFpRyxDQUNsRyxDQUNGLENBQUM7U0FDSDtRQUVELE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3JDLENBQUM7SUFFRCw4QkFBOEI7UUFDNUIsT0FBTyxLQUFLLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsV0FBbUIsRUFBRSxLQUFVO1FBQ2xELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sT0FBTyxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxDQUFDO1FBQ25GLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZFLE1BQU07WUFDTixJQUFJO1lBQ0osT0FBTztTQUNSLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Z0lBekNVLG1DQUFtQztvSUFBbkMsbUNBQW1DOzJGQUFuQyxtQ0FBbUM7a0JBRC9DLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UsIEZldGNoQ2xpZW50LCBJUmVzdWx0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLWV4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TY2hlbWEgfSBmcm9tICcuL2V4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXIgfSBmcm9tICcuLi9iYXNlLWRldmljZS1yZWdpc3RyYXRpb24ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgZXh0ZW5kcyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHN0YXRlU2VydmljZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudFxuICApIHtcbiAgICBzdXBlcihhcHBsaWNhdGlvblNlcnZpY2UsIHN0YXRlU2VydmljZSk7XG4gIH1cblxuICBhc3luYyBnZXRTY2hlbWEoY29udGV4dFBhdGg6IHN0cmluZyk6IFByb21pc2U8RXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNjaGVtYT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2godGhpcy5nZXRNZXRhZGF0YVVybChjb250ZXh0UGF0aCksIHtcbiAgICAgIHBhcmFtczogeyBsYW5nOiB0aGlzLnN0YXRlU2VydmljZS5zdGF0ZS5sYW5nIH1cbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmM4eV9EZXZpY2VSZWdpc3RyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgZ2V0dGV4dChcbiAgICAgICAgICAnVGhlIHJlc3BvbnNlIG9mIHRoZSBtaWNyb3NlcnZpY2UgaXMgaW5jb21wbGV0ZS4gVGhlIGRldmljZSByZWdpc3RyYXRpb24gaW5mb3JtYXRpb24gaXMgbWlzc2luZy4nXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEuYzh5X0RldmljZVJlZ2lzdHJhdGlvbjtcbiAgfVxuXG4gIGdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycygpOiBQcm9taXNlPEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdPiB7XG4gICAgcmV0dXJuIHN1cGVyLmdldERldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVycyhmYWxzZSk7XG4gIH1cblxuICBhc3luYyByZWdpc3RlckRldmljZShjb250ZXh0UGF0aDogc3RyaW5nLCBtb2RlbDogYW55KTogUHJvbWlzZTxJUmVzdWx0PGFueT4+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KG1vZGVsKTtcbiAgICBjb25zdCBoZWFkZXJzID0geyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmZldGNoKHRoaXMuZ2V0U2VydmljZUJhc2VVcmwoY29udGV4dFBhdGgpLCB7XG4gICAgICBtZXRob2QsXG4gICAgICBib2R5LFxuICAgICAgaGVhZGVyc1xuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiB7IHJlcywgZGF0YSB9O1xuICB9XG59XG4iXX0=
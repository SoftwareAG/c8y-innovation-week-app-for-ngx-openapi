import { ApplicationType } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
import { flatMap } from 'lodash-es';
export class BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService) {
        this.applicationService = applicationService;
        this.stateService = stateService;
    }
    getMetadataUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/metadata`;
    }
    getServiceBaseUrl(contextPath) {
        if (!contextPath || contextPath.length === 0) {
            throw new Error(gettext('The URL of the microservice is misconfigured. A context path is missing.'));
        }
        return `/service/${contextPath}/deviceRegistration`;
    }
    async getDeviceRegistrationProviders(bulk) {
        let providers = [];
        const microservices = await this.listMicroservicesByUser();
        if (microservices && microservices.length > 0) {
            providers = this.getProvidersFromManifestExtensions(microservices, bulk).concat(this.getProvidersFromExtensions(microservices, bulk));
        }
        return providers;
    }
    async listMicroservicesByUser() {
        const { data } = await this.applicationService.listByUser(this.stateService?.currentUser?.value?.userName, {
            dropOverwrittenApps: true,
            noPaging: true,
            pageSize: 100,
            withTotalPages: true
        });
        return data?.filter(({ type }) => type === ApplicationType.MICROSERVICE);
    }
    getProvidersFromManifestExtensions(applications, bulk) {
        return flatMap(applications, application => {
            return application?.manifest?.extensions?.map(extension => {
                return { ...extension, contextPath: application.contextPath };
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    getProvidersFromExtensions(applications, bulk) {
        return flatMap(applications, application => {
            return application.extensions?.map(extension => {
                return {
                    ...extension,
                    contextPath: application.contextPath
                };
            });
        }).filter(provider => this.appSupportingExtensibleDeviceRegistrationForm(provider, bulk));
    }
    appSupportingExtensibleDeviceRegistrationForm(extension, bulk) {
        if (bulk) {
            return extension?.type === 'extensibleBulkDeviceRegistration';
        }
        else {
            return extension?.type === 'extensibleDeviceRegistration';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1leHRlbnNpYmxlLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL2Jhc2UtZXh0ZW5zaWJsZS1kZXZpY2UtcmVnaXN0cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFzQixlQUFlLEVBQWdCLE1BQU0sYUFBYSxDQUFDO0FBQ2hGLE9BQU8sRUFBbUIsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1wQyxNQUFNLE9BQU8sdUNBQXVDO0lBQ2xELFlBQ1ksa0JBQXNDLEVBQ3RDLFlBQTZCO1FBRDdCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQWlCO0lBQ3RDLENBQUM7SUFFTSxjQUFjLENBQUMsV0FBbUI7UUFDMUMsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQzNELENBQUM7SUFFUyxpQkFBaUIsQ0FBQyxXQUFtQjtRQUM3QyxJQUFJLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQ2IsT0FBTyxDQUFDLDBFQUEwRSxDQUFDLENBQ3BGLENBQUM7U0FDSDtRQUNELE9BQU8sWUFBWSxXQUFXLHFCQUFxQixDQUFDO0lBQ3RELENBQUM7SUFFUyxLQUFLLENBQUMsOEJBQThCLENBQzVDLElBQWE7UUFFYixJQUFJLFNBQVMsR0FBMkMsRUFBRSxDQUFDO1FBQzNELE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDM0QsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0MsU0FBUyxHQUFHLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUM3RSxJQUFJLENBQUMsMEJBQTBCLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUNyRCxDQUFDO1NBQ0g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sS0FBSyxDQUFDLHVCQUF1QjtRQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUN2RCxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUMvQztZQUNFLG1CQUFtQixFQUFFLElBQUk7WUFDekIsUUFBUSxFQUFFLElBQUk7WUFDZCxRQUFRLEVBQUUsR0FBRztZQUNiLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVPLGtDQUFrQyxDQUN4QyxZQUE0QixFQUM1QixJQUFhO1FBRWIsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLEVBQUUsR0FBRyxTQUFTLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQTBCLENBQUM7WUFDeEYsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVPLDBCQUEwQixDQUNoQyxZQUE0QixFQUM1QixJQUFhO1FBRWIsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sV0FBVyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQzdDLE9BQU87b0JBQ0wsR0FBRyxTQUFTO29CQUNaLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVztpQkFDRyxDQUFDO1lBQzVDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTyw2Q0FBNkMsQ0FDbkQsU0FBK0MsRUFDL0MsSUFBYTtRQUViLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxTQUFTLEVBQUUsSUFBSSxLQUFLLGtDQUFrQyxDQUFDO1NBQy9EO2FBQU07WUFDTCxPQUFPLFNBQVMsRUFBRSxJQUFJLEtBQUssOEJBQThCLENBQUM7U0FDM0Q7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UsIEFwcGxpY2F0aW9uVHlwZSwgSUFwcGxpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBmbGF0TWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7XG4gIEFwcGxpY2F0aW9uRXh0ZW5zaW9uLFxuICBFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJcbn0gZnJvbSAnLi9iYXNlLWRldmljZS1yZWdpc3RyYXRpb24ubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgQmFzZUV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBzdGF0ZVNlcnZpY2U6IEFwcFN0YXRlU2VydmljZVxuICApIHt9XG5cbiAgcHJvdGVjdGVkIGdldE1ldGFkYXRhVXJsKGNvbnRleHRQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmdldFNlcnZpY2VCYXNlVXJsKGNvbnRleHRQYXRoKX0vbWV0YWRhdGFgO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNlcnZpY2VCYXNlVXJsKGNvbnRleHRQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICghY29udGV4dFBhdGggfHwgY29udGV4dFBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGdldHRleHQoJ1RoZSBVUkwgb2YgdGhlIG1pY3Jvc2VydmljZSBpcyBtaXNjb25maWd1cmVkLiBBIGNvbnRleHQgcGF0aCBpcyBtaXNzaW5nLicpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYC9zZXJ2aWNlLyR7Y29udGV4dFBhdGh9L2RldmljZVJlZ2lzdHJhdGlvbmA7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0RGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJzKFxuICAgIGJ1bGs6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXT4ge1xuICAgIGxldCBwcm92aWRlcnM6IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdID0gW107XG4gICAgY29uc3QgbWljcm9zZXJ2aWNlcyA9IGF3YWl0IHRoaXMubGlzdE1pY3Jvc2VydmljZXNCeVVzZXIoKTtcbiAgICBpZiAobWljcm9zZXJ2aWNlcyAmJiBtaWNyb3NlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3ZpZGVycyA9IHRoaXMuZ2V0UHJvdmlkZXJzRnJvbU1hbmlmZXN0RXh0ZW5zaW9ucyhtaWNyb3NlcnZpY2VzLCBidWxrKS5jb25jYXQoXG4gICAgICAgIHRoaXMuZ2V0UHJvdmlkZXJzRnJvbUV4dGVuc2lvbnMobWljcm9zZXJ2aWNlcywgYnVsaylcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBwcm92aWRlcnM7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGxpc3RNaWNyb3NlcnZpY2VzQnlVc2VyKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hcHBsaWNhdGlvblNlcnZpY2UubGlzdEJ5VXNlcihcbiAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlPy5jdXJyZW50VXNlcj8udmFsdWU/LnVzZXJOYW1lLFxuICAgICAge1xuICAgICAgICBkcm9wT3ZlcndyaXR0ZW5BcHBzOiB0cnVlLFxuICAgICAgICBub1BhZ2luZzogdHJ1ZSxcbiAgICAgICAgcGFnZVNpemU6IDEwMCxcbiAgICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWVcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBkYXRhPy5maWx0ZXIoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBBcHBsaWNhdGlvblR5cGUuTUlDUk9TRVJWSUNFKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvdmlkZXJzRnJvbU1hbmlmZXN0RXh0ZW5zaW9ucyhcbiAgICBhcHBsaWNhdGlvbnM6IElBcHBsaWNhdGlvbltdLFxuICAgIGJ1bGs6IGJvb2xlYW5cbiAgKTogRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyW10ge1xuICAgIHJldHVybiBmbGF0TWFwKGFwcGxpY2F0aW9ucywgYXBwbGljYXRpb24gPT4ge1xuICAgICAgcmV0dXJuIGFwcGxpY2F0aW9uPy5tYW5pZmVzdD8uZXh0ZW5zaW9ucz8ubWFwKGV4dGVuc2lvbiA9PiB7XG4gICAgICAgIHJldHVybiB7IC4uLmV4dGVuc2lvbiwgY29udGV4dFBhdGg6IGFwcGxpY2F0aW9uLmNvbnRleHRQYXRoIH0gYXMgQXBwbGljYXRpb25FeHRlbnNpb247XG4gICAgICB9KTtcbiAgICB9KS5maWx0ZXIocHJvdmlkZXIgPT4gdGhpcy5hcHBTdXBwb3J0aW5nRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvbkZvcm0ocHJvdmlkZXIsIGJ1bGspKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvdmlkZXJzRnJvbUV4dGVuc2lvbnMoXG4gICAgYXBwbGljYXRpb25zOiBJQXBwbGljYXRpb25bXSxcbiAgICBidWxrOiBib29sZWFuXG4gICk6IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcltdIHtcbiAgICByZXR1cm4gZmxhdE1hcChhcHBsaWNhdGlvbnMsIGFwcGxpY2F0aW9uID0+IHtcbiAgICAgIHJldHVybiBhcHBsaWNhdGlvbi5leHRlbnNpb25zPy5tYXAoZXh0ZW5zaW9uID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5leHRlbnNpb24sXG4gICAgICAgICAgY29udGV4dFBhdGg6IGFwcGxpY2F0aW9uLmNvbnRleHRQYXRoXG4gICAgICAgIH0gYXMgRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblByb3ZpZGVyO1xuICAgICAgfSk7XG4gICAgfSkuZmlsdGVyKHByb3ZpZGVyID0+IHRoaXMuYXBwU3VwcG9ydGluZ0V4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Gb3JtKHByb3ZpZGVyLCBidWxrKSk7XG4gIH1cblxuICBwcml2YXRlIGFwcFN1cHBvcnRpbmdFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uRm9ybShcbiAgICBleHRlbnNpb246IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcixcbiAgICBidWxrOiBib29sZWFuXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmIChidWxrKSB7XG4gICAgICByZXR1cm4gZXh0ZW5zaW9uPy50eXBlID09PSAnZXh0ZW5zaWJsZUJ1bGtEZXZpY2VSZWdpc3RyYXRpb24nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXh0ZW5zaW9uPy50eXBlID09PSAnZXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvbic7XG4gICAgfVxuICB9XG59XG4iXX0=
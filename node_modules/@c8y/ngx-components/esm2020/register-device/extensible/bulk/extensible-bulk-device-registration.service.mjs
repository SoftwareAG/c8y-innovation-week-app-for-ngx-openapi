import { Injectable } from '@angular/core';
import { ApplicationService, FetchClient } from '@c8y/client';
import { AppStateService, gettext } from '@c8y/ngx-components';
import { BaseExtensibleDeviceRegistrationService } from '../base-extensible-device-registration.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class BulkExtensibleDeviceRegistrationService extends BaseExtensibleDeviceRegistrationService {
    constructor(applicationService, stateService, client) {
        super(applicationService, stateService);
        this.applicationService = applicationService;
        this.stateService = stateService;
        this.client = client;
    }
    getDeviceRegistrationProviders() {
        return super.getDeviceRegistrationProviders(true);
    }
    async getBulkDescription(contextPath) {
        const res = await this.client.fetch(this.getMetadataUrl(contextPath), {
            params: { lang: this.stateService.state.lang }
        });
        const { c8y_DeviceRegistration } = await res.json();
        if (!c8y_DeviceRegistration || !c8y_DeviceRegistration.bulk) {
            throw new Error(gettext('The response of the microservice is incomplete. The bulk registration information is missing.'));
        }
        return c8y_DeviceRegistration.bulk;
    }
    async upload(csv, contextPath) {
        const method = 'POST';
        const body = this.createBinaryRequestBody(csv);
        const res = await this.client.fetch(this.getBulkUrl(contextPath), { method, body });
        const data = await res.json();
        return { res, data };
    }
    getBulkUrl(contextPath) {
        return `${this.getServiceBaseUrl(contextPath)}/bulk`;
    }
    createBinaryRequestBody(file) {
        const body = new FormData();
        body.append('file', file, file.name);
        return body;
    }
}
BulkExtensibleDeviceRegistrationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkExtensibleDeviceRegistrationService, deps: [{ token: i1.ApplicationService }, { token: i2.AppStateService }, { token: i1.FetchClient }], target: i0.ɵɵFactoryTarget.Injectable });
BulkExtensibleDeviceRegistrationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkExtensibleDeviceRegistrationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkExtensibleDeviceRegistrationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ApplicationService }, { type: i2.AppStateService }, { type: i1.FetchClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3JlZ2lzdGVyLWRldmljZS9leHRlbnNpYmxlL2J1bGsvZXh0ZW5zaWJsZS1idWxrLWRldmljZS1yZWdpc3RyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQVcsTUFBTSxhQUFhLENBQUM7QUFDdkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRCxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7OztBQUl6RyxNQUFNLE9BQU8sdUNBQXdDLFNBQVEsdUNBQXVDO0lBQ2xHLFlBQ1ksa0JBQXNDLEVBQ3RDLFlBQTZCLEVBQy9CLE1BQW1CO1FBRTNCLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUo5Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLGlCQUFZLEdBQVosWUFBWSxDQUFpQjtRQUMvQixXQUFNLEdBQU4sTUFBTSxDQUFhO0lBRzdCLENBQUM7SUFFRCw4QkFBOEI7UUFDNUIsT0FBTyxLQUFLLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxXQUFtQjtRQUMxQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtTQUMvQyxDQUFDLENBQUM7UUFDSCxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVwRCxJQUFJLENBQUMsc0JBQXNCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUU7WUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FDYixPQUFPLENBQ0wsK0ZBQStGLENBQ2hHLENBQ0YsQ0FBQztTQUNIO1FBRUQsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7SUFDckMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBUyxFQUFFLFdBQVc7UUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwRixNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxVQUFVLENBQUMsV0FBbUI7UUFDNUIsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQ3ZELENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxJQUFTO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O29JQTlDVSx1Q0FBdUM7d0lBQXZDLHVDQUF1QzsyRkFBdkMsdUNBQXVDO2tCQURuRCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlLCBGZXRjaENsaWVudCwgSVJlc3VsdCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnVsa0Rlc2NyaXB0aW9uLCBCdWxrUmVzdWx0IH0gZnJvbSAnLi9leHRlbnNpYmxlLWJ1bGstZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLWV4dGVuc2libGUtZGV2aWNlLXJlZ2lzdHJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEV4dGVuc2libGVEZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlciB9IGZyb20gJy4uL2Jhc2UtZGV2aWNlLXJlZ2lzdHJhdGlvbi5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCdWxrRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2UgZXh0ZW5kcyBCYXNlRXh0ZW5zaWJsZURldmljZVJlZ2lzdHJhdGlvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHN0YXRlU2VydmljZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudFxuICApIHtcbiAgICBzdXBlcihhcHBsaWNhdGlvblNlcnZpY2UsIHN0YXRlU2VydmljZSk7XG4gIH1cblxuICBnZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnMoKTogUHJvbWlzZTxFeHRlbnNpYmxlRGV2aWNlUmVnaXN0cmF0aW9uUHJvdmlkZXJbXT4ge1xuICAgIHJldHVybiBzdXBlci5nZXREZXZpY2VSZWdpc3RyYXRpb25Qcm92aWRlcnModHJ1ZSk7XG4gIH1cblxuICBhc3luYyBnZXRCdWxrRGVzY3JpcHRpb24oY29udGV4dFBhdGg6IHN0cmluZyk6IFByb21pc2U8QnVsa0Rlc2NyaXB0aW9uPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2godGhpcy5nZXRNZXRhZGF0YVVybChjb250ZXh0UGF0aCksIHtcbiAgICAgIHBhcmFtczogeyBsYW5nOiB0aGlzLnN0YXRlU2VydmljZS5zdGF0ZS5sYW5nIH1cbiAgICB9KTtcbiAgICBjb25zdCB7IGM4eV9EZXZpY2VSZWdpc3RyYXRpb24gfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICBpZiAoIWM4eV9EZXZpY2VSZWdpc3RyYXRpb24gfHwgIWM4eV9EZXZpY2VSZWdpc3RyYXRpb24uYnVsaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBnZXR0ZXh0KFxuICAgICAgICAgICdUaGUgcmVzcG9uc2Ugb2YgdGhlIG1pY3Jvc2VydmljZSBpcyBpbmNvbXBsZXRlLiBUaGUgYnVsayByZWdpc3RyYXRpb24gaW5mb3JtYXRpb24gaXMgbWlzc2luZy4nXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGM4eV9EZXZpY2VSZWdpc3RyYXRpb24uYnVsaztcbiAgfVxuXG4gIGFzeW5jIHVwbG9hZChjc3Y6IEZpbGUsIGNvbnRleHRQYXRoKTogUHJvbWlzZTxJUmVzdWx0PEJ1bGtSZXN1bHQ+PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgIGNvbnN0IGJvZHkgPSB0aGlzLmNyZWF0ZUJpbmFyeVJlcXVlc3RCb2R5KGNzdik7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZmV0Y2godGhpcy5nZXRCdWxrVXJsKGNvbnRleHRQYXRoKSwgeyBtZXRob2QsIGJvZHkgfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHsgcmVzLCBkYXRhIH07XG4gIH1cblxuICBnZXRCdWxrVXJsKGNvbnRleHRQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmdldFNlcnZpY2VCYXNlVXJsKGNvbnRleHRQYXRoKX0vYnVsa2A7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUJpbmFyeVJlcXVlc3RCb2R5KGZpbGU6IGFueSk6IEZvcm1EYXRhIHtcbiAgICBjb25zdCBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBmaWxlLm5hbWUpO1xuICAgIHJldHVybiBib2R5O1xuICB9XG59XG4iXX0=
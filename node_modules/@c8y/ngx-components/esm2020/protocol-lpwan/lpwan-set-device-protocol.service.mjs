import { Injectable } from '@angular/core';
import { InventoryService, FetchClient, IdentityService } from '@c8y/client';
import { get, orderBy } from 'lodash-es';
import { MultipleLnsConnectorService } from './multiple-lns-connectors';
import { ConnectionType } from './multiple-lns-connectors/multiple-lns-connector.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "./multiple-lns-connectors";
export class LpwanSetDeviceProtocolService {
    constructor(inventoryService, client, identityService, lnsService) {
        this.inventoryService = inventoryService;
        this.client = client;
        this.identityService = identityService;
        this.lnsService = lnsService;
        this.supportedDevicesCfgs = [
            {
                name: 'actility',
                match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora' &&
                    get(device, 'c8y_LpwanDevice.serviceProvider') === 'Actility',
                protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],
                connectionType: ConnectionType.ACTILITY
            },
            {
                name: 'loriot',
                match: device => get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora' &&
                    get(device, 'c8y_LpwanDevice.serviceProvider') === 'Loriot',
                protocolTypes: ['c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],
                connectionType: ConnectionType.LORIOT
            },
            {
                name: 'sigfox',
                match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',
                protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],
                externalIdTypes: ['com.sigfox.deviceId'],
                connectionType: ConnectionType.SIGFOX
            }
        ];
        this.header = { 'Content-Type': 'application/json' };
    }
    async refreshCache(device) {
        const externalId = await this.getExternalId(device);
        if (externalId) {
            const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;
            const options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify({})
            };
            return this.client.fetch(url, options);
        }
    }
    getMicroserviceUrl(device) {
        const { serviceProvider } = device.c8y_LpwanDevice;
        let serviceName = serviceProvider.toLowerCase();
        if (serviceProvider === 'Sigfox') {
            serviceName = 'sigfox-agent';
        }
        return `/service/${serviceName}`;
    }
    isSupportedDevice(device) {
        return this.supportedDevicesCfgs.some(({ match }) => match(device));
    }
    async getCurrentProtocol(device) {
        const lpwanDevice = device.c8y_LpwanDevice;
        let protocolId;
        if (lpwanDevice.typeExternalId) {
            const externalId = (await this.identityService.detail(lpwanDevice.typeExternalId)).data;
            protocolId = externalId.managedObject.id;
        }
        if (!protocolId && lpwanDevice.type) {
            protocolId = lpwanDevice.type.split('/')[2];
        }
        if (!protocolId) {
            return null;
        }
        return (await this.inventoryService.detail(protocolId)).data;
    }
    async applyProtocol(device, selectedProtocol) {
        const [protocolExternalId] = (await this.identityService.list(selectedProtocol.id)).data;
        const { externalId, type } = protocolExternalId;
        device.c8y_LpwanDevice.typeExternalId = { externalId, type };
        device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
        device.type = selectedProtocol.name;
        return this.inventoryService.update(device);
    }
    async getAvailableProtocols(device) {
        const query = {
            __filter: {
                type: { __in: this.getProtocolTypesMatchingDevice(device) }
            },
            __orderby: [{ name: 1 }]
        };
        return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });
    }
    async getAvailableConnections(device) {
        let list;
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        const response = await this.lnsService.list(matchingCfg.connectionType);
        if (response && response.status === 200) {
            list = await response.json();
            list = orderBy(list, ['name'], ['asc']);
            return { res: response, data: list };
        }
    }
    getProtocolTypesMatchingDevice(device) {
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        return matchingCfg ? matchingCfg.protocolTypes : [];
    }
    async getExternalId(device) {
        const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));
        const externalIds = (await this.identityService.list(device.id)).data;
        const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));
        return externalId ? externalId.externalId : null;
    }
}
LpwanSetDeviceProtocolService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LpwanSetDeviceProtocolService, deps: [{ token: i1.InventoryService }, { token: i1.FetchClient }, { token: i1.IdentityService }, { token: i2.MultipleLnsConnectorService }], target: i0.ɵɵFactoryTarget.Injectable });
LpwanSetDeviceProtocolService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LpwanSetDeviceProtocolService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LpwanSetDeviceProtocolService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i1.FetchClient }, { type: i1.IdentityService }, { type: i2.MultipleLnsConnectorService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvdG9jb2wtbHB3YW4vbHB3YW4tc2V0LWRldmljZS1wcm90b2NvbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUVMLGdCQUFnQixFQUVoQixXQUFXLEVBRVgsZUFBZSxFQUNoQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN6QyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RSxPQUFPLEVBRUwsY0FBYyxFQUVmLE1BQU0sd0RBQXdELENBQUM7Ozs7QUFHaEUsTUFBTSxPQUFPLDZCQUE2QjtJQStCeEMsWUFDVSxnQkFBa0MsRUFDbEMsTUFBbUIsRUFDbkIsZUFBZ0MsRUFDaEMsVUFBdUM7UUFIdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxXQUFNLEdBQU4sTUFBTSxDQUFhO1FBQ25CLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxlQUFVLEdBQVYsVUFBVSxDQUE2QjtRQWxDakQseUJBQW9CLEdBQUc7WUFDckI7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUNkLEdBQUcsQ0FBQyxNQUFNLEVBQUUsaUNBQWlDLENBQUMsS0FBSyxNQUFNO29CQUN6RCxHQUFHLENBQUMsTUFBTSxFQUFFLGlDQUFpQyxDQUFDLEtBQUssVUFBVTtnQkFDL0QsYUFBYSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLENBQUM7Z0JBQ3RGLGVBQWUsRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUM7Z0JBQ2hELGNBQWMsRUFB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QyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN0RSxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RixPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ25ELENBQUM7OzBIQWhJVSw2QkFBNkI7OEhBQTdCLDZCQUE2QjsyRkFBN0IsNkJBQTZCO2tCQUR6QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSU1hbmFnZWRPYmplY3QsXG4gIEludmVudG9yeVNlcnZpY2UsXG4gIElSZXN1bHRMaXN0LFxuICBGZXRjaENsaWVudCxcbiAgSUZldGNoT3B0aW9ucyxcbiAgSWRlbnRpdHlTZXJ2aWNlXG59IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldCwgb3JkZXJCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBNdWx0aXBsZUxuc0Nvbm5lY3RvclNlcnZpY2UgfSBmcm9tICcuL211bHRpcGxlLWxucy1jb25uZWN0b3JzJztcbmltcG9ydCB7XG4gIEFjdGlsaXR5Q29ubmVjdGlvbixcbiAgQ29ubmVjdGlvblR5cGUsXG4gIFNpZ2ZveENvbm5lY3Rpb25cbn0gZnJvbSAnLi9tdWx0aXBsZS1sbnMtY29ubmVjdG9ycy9tdWx0aXBsZS1sbnMtY29ubmVjdG9yLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExwd2FuU2V0RGV2aWNlUHJvdG9jb2xTZXJ2aWNlIHtcbiAgc3VwcG9ydGVkRGV2aWNlc0NmZ3MgPSBbXG4gICAge1xuICAgICAgbmFtZTogJ2FjdGlsaXR5JyxcbiAgICAgIG1hdGNoOiBkZXZpY2UgPT5cbiAgICAgICAgZ2V0KGRldmljZSwgJ2M4eV9McHdhbkRldmljZS5scHdhbkRldmljZVR5cGUnKSA9PT0gJ0xvcmEnICYmXG4gICAgICAgIGdldChkZXZpY2UsICdjOHlfTHB3YW5EZXZpY2Uuc2VydmljZVByb3ZpZGVyJykgPT09ICdBY3RpbGl0eScsXG4gICAgICBwcm90b2NvbFR5cGVzOiBbJ2M4eV9BY3RpbGl0eURldmljZVR5cGUnLCAnYzh5X0xvcmFEZXZpY2VUeXBlJywgJ2M4eV9McHdhbkRldmljZVR5cGUnXSxcbiAgICAgIGV4dGVybmFsSWRUeXBlczogWydjOHlfTG9yaW90RVVJJywgJ2M4eV9TZXJpYWwnXSxcbiAgICAgIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5BQ1RJTElUWVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2xvcmlvdCcsXG4gICAgICBtYXRjaDogZGV2aWNlID0+XG4gICAgICAgIGdldChkZXZpY2UsICdjOHlfTHB3YW5EZXZpY2UubHB3YW5EZXZpY2VUeXBlJykgPT09ICdMb3JhJyAmJlxuICAgICAgICBnZXQoZGV2aWNlLCAnYzh5X0xwd2FuRGV2aWNlLnNlcnZpY2VQcm92aWRlcicpID09PSAnTG9yaW90JyxcbiAgICAgIHByb3RvY29sVHlwZXM6IFsnYzh5X0xvcmFEZXZpY2VUeXBlJywgJ2M4eV9McHdhbkRldmljZVR5cGUnXSxcbiAgICAgIGV4dGVybmFsSWRUeXBlczogWydjOHlfTG9yaW90RVVJJywgJ2M4eV9TZXJpYWwnXSxcbiAgICAgIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5MT1JJT1RcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdzaWdmb3gnLFxuICAgICAgbWF0Y2g6IGRldmljZSA9PiBnZXQoZGV2aWNlLCAnYzh5X0xwd2FuRGV2aWNlLnNlcnZpY2VQcm92aWRlcicpID09PSAnU2lnZm94JyxcbiAgICAgIHByb3RvY29sVHlwZXM6IFsnYzh5X1NpZ2ZveERldmljZVR5cGUnLCAnYzh5X0xwd2FuRGV2aWNlVHlwZSddLFxuICAgICAgZXh0ZXJuYWxJZFR5cGVzOiBbJ2NvbS5zaWdmb3guZGV2aWNlSWQnXSxcbiAgICAgIGNvbm5lY3Rpb25UeXBlOiBDb25uZWN0aW9uVHlwZS5TSUdGT1hcbiAgICB9XG4gIF07XG5cbiAgcHJpdmF0ZSByZWFkb25seSBoZWFkZXI6IGFueSA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBpZGVudGl0eVNlcnZpY2U6IElkZW50aXR5U2VydmljZSxcbiAgICBwcml2YXRlIGxuc1NlcnZpY2U6IE11bHRpcGxlTG5zQ29ubmVjdG9yU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgcmVmcmVzaENhY2hlKGRldmljZSkge1xuICAgIGNvbnN0IGV4dGVybmFsSWQgPSBhd2FpdCB0aGlzLmdldEV4dGVybmFsSWQoZGV2aWNlKTtcbiAgICBpZiAoZXh0ZXJuYWxJZCkge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5nZXRNaWNyb3NlcnZpY2VVcmwoZGV2aWNlKX0vcmVmcmVzaENhY2hlLyR7ZXh0ZXJuYWxJZH1gO1xuICAgICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSlcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBnZXRNaWNyb3NlcnZpY2VVcmwoZGV2aWNlKSB7XG4gICAgY29uc3QgeyBzZXJ2aWNlUHJvdmlkZXIgfSA9IGRldmljZS5jOHlfTHB3YW5EZXZpY2U7XG5cbiAgICBsZXQgc2VydmljZU5hbWUgPSBzZXJ2aWNlUHJvdmlkZXIudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoc2VydmljZVByb3ZpZGVyID09PSAnU2lnZm94Jykge1xuICAgICAgc2VydmljZU5hbWUgPSAnc2lnZm94LWFnZW50JztcbiAgICB9XG5cbiAgICByZXR1cm4gYC9zZXJ2aWNlLyR7c2VydmljZU5hbWV9YDtcbiAgfVxuXG4gIGlzU3VwcG9ydGVkRGV2aWNlKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWREZXZpY2VzQ2Zncy5zb21lKCh7IG1hdGNoIH0pID0+IG1hdGNoKGRldmljZSkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q3VycmVudFByb3RvY29sKGRldmljZTogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCBscHdhbkRldmljZSA9IGRldmljZS5jOHlfTHB3YW5EZXZpY2U7XG4gICAgbGV0IHByb3RvY29sSWQ7XG5cbiAgICBpZiAobHB3YW5EZXZpY2UudHlwZUV4dGVybmFsSWQpIHtcbiAgICAgIGNvbnN0IGV4dGVybmFsSWQgPSAoYXdhaXQgdGhpcy5pZGVudGl0eVNlcnZpY2UuZGV0YWlsKGxwd2FuRGV2aWNlLnR5cGVFeHRlcm5hbElkKSkuZGF0YTtcbiAgICAgIHByb3RvY29sSWQgPSBleHRlcm5hbElkLm1hbmFnZWRPYmplY3QuaWQ7XG4gICAgfVxuXG4gICAgaWYgKCFwcm90b2NvbElkICYmIGxwd2FuRGV2aWNlLnR5cGUpIHtcbiAgICAgIHByb3RvY29sSWQgPSBscHdhbkRldmljZS50eXBlLnNwbGl0KCcvJylbMl07XG4gICAgfVxuXG4gICAgaWYgKCFwcm90b2NvbElkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwocHJvdG9jb2xJZCkpLmRhdGE7XG4gIH1cblxuICBhc3luYyBhcHBseVByb3RvY29sKGRldmljZTogSU1hbmFnZWRPYmplY3QsIHNlbGVjdGVkUHJvdG9jb2w6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgY29uc3QgW3Byb3RvY29sRXh0ZXJuYWxJZF0gPSAoYXdhaXQgdGhpcy5pZGVudGl0eVNlcnZpY2UubGlzdChzZWxlY3RlZFByb3RvY29sLmlkKSkuZGF0YTtcbiAgICBjb25zdCB7IGV4dGVybmFsSWQsIHR5cGUgfSA9IHByb3RvY29sRXh0ZXJuYWxJZDtcbiAgICBkZXZpY2UuYzh5X0xwd2FuRGV2aWNlLnR5cGVFeHRlcm5hbElkID0geyBleHRlcm5hbElkLCB0eXBlIH07XG4gICAgZGV2aWNlLmM4eV9McHdhbkRldmljZS50eXBlID0gJ2ludmVudG9yeS9tYW5hZ2VkT2JqZWN0cy8nICsgc2VsZWN0ZWRQcm90b2NvbC5pZDtcbiAgICBkZXZpY2UudHlwZSA9IHNlbGVjdGVkUHJvdG9jb2wubmFtZTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLnVwZGF0ZShkZXZpY2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXZhaWxhYmxlUHJvdG9jb2xzKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBQcm9taXNlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0ge1xuICAgICAgX19maWx0ZXI6IHtcbiAgICAgICAgdHlwZTogeyBfX2luOiB0aGlzLmdldFByb3RvY29sVHlwZXNNYXRjaGluZ0RldmljZShkZXZpY2UpIH1cbiAgICAgIH0sXG4gICAgICBfX29yZGVyYnk6IFt7IG5hbWU6IDEgfV1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdFF1ZXJ5KHF1ZXJ5LCB7IHdpdGhUb3RhbFBhZ2VzOiB0cnVlLCBwYWdlU2l6ZTogNSB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEF2YWlsYWJsZUNvbm5lY3Rpb25zKFxuICAgIGRldmljZTogSU1hbmFnZWRPYmplY3RcbiAgKTogUHJvbWlzZTxJUmVzdWx0TGlzdDxBY3RpbGl0eUNvbm5lY3Rpb24gfCBTaWdmb3hDb25uZWN0aW9uPj4ge1xuICAgIGxldCBsaXN0O1xuICAgIGNvbnN0IG1hdGNoaW5nQ2ZnID0gdGhpcy5zdXBwb3J0ZWREZXZpY2VzQ2Zncy5maW5kKCh7IG1hdGNoIH0pID0+IG1hdGNoKGRldmljZSkpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5sbnNTZXJ2aWNlLmxpc3QobWF0Y2hpbmdDZmcuY29ubmVjdGlvblR5cGUpO1xuICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgbGlzdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGxpc3QgPSBvcmRlckJ5KGxpc3QsIFsnbmFtZSddLCBbJ2FzYyddKTtcbiAgICAgIHJldHVybiB7IHJlczogcmVzcG9uc2UsIGRhdGE6IGxpc3QgfTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFByb3RvY29sVHlwZXNNYXRjaGluZ0RldmljZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nW10ge1xuICAgIGNvbnN0IG1hdGNoaW5nQ2ZnID0gdGhpcy5zdXBwb3J0ZWREZXZpY2VzQ2Zncy5maW5kKCh7IG1hdGNoIH0pID0+IG1hdGNoKGRldmljZSkpO1xuICAgIHJldHVybiBtYXRjaGluZ0NmZyA/IG1hdGNoaW5nQ2ZnLnByb3RvY29sVHlwZXMgOiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RXh0ZXJuYWxJZChkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBtYXRjaGluZ0NmZyA9IHRoaXMuc3VwcG9ydGVkRGV2aWNlc0NmZ3MuZmluZCgoeyBtYXRjaCB9KSA9PiBtYXRjaChkZXZpY2UpKTtcbiAgICBjb25zdCBleHRlcm5hbElkcyA9IChhd2FpdCB0aGlzLmlkZW50aXR5U2VydmljZS5saXN0KGRldmljZS5pZCkpLmRhdGE7XG4gICAgY29uc3QgZXh0ZXJuYWxJZCA9IGV4dGVybmFsSWRzLmZpbmQoKHsgdHlwZSB9KSA9PiBtYXRjaGluZ0NmZy5leHRlcm5hbElkVHlwZXMuaW5jbHVkZXModHlwZSkpO1xuICAgIHJldHVybiBleHRlcm5hbElkID8gZXh0ZXJuYWxJZC5leHRlcm5hbElkIDogbnVsbDtcbiAgfVxufVxuIl19
import { Component, ViewChild } from '@angular/core';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { head, orderBy, findIndex, escapeRegExp, cloneDeep } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { NgForm } from '@angular/forms';
import { MultipleLnsConnectorService } from '../multiple-lns-connector.service';
import { ConnectionType } from '../multiple-lns-connector.model';
import { ConnectionInfoWithDownloadCsvComponent } from '../connection-info-with-download-csv.component';
import * as i0 from "@angular/core";
import * as i1 from "../multiple-lns-connector.service";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@ngx-translate/core";
import * as i4 from "ngx-bootstrap/modal";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "../no-connections-found.component";
export class LoriotMultipleLnsConnectorComponent {
    constructor(connectorService, alertService, translateService, modalService, modal) {
        this.connectorService = connectorService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.modal = modal;
        this.state = 'loadingConnection';
        this.connections = Array();
        this.showPassword = false;
        this.cardHeader = gettext('LORIOT connections');
        this.allowedSpecialCharacters = '~!@$^(){}[]|:,<+=,.`_ -';
        this.namePattern = `^[a-zA-Z0-9 ${escapeRegExp(this.allowedSpecialCharacters)}]*$`;
        this.namePatternError = this.translateService.instant(gettext('Connection name can only contain letters, numbers, spaces, and the following symbols: {{ symbols }}'), {
            symbols: this.allowedSpecialCharacters
        });
    }
    async ngOnInit() {
        await this.loadConnections();
    }
    async loadConnections() {
        const res = await this.connectorService.list(ConnectionType.LORIOT);
        if (res && res.status !== 200) {
            const data = res.json ? await res.json() : undefined;
            this.alertService.addServerFailure({ data, res });
            this.state = 'loadingError';
        }
        else {
            const list = await res.json();
            this.connections = orderBy(list, ['name'], ['asc']);
            await this.setModel();
        }
    }
    async setModel(connectionObj = null) {
        await this.resetEditedUnsavedConnection();
        this.connection = connectionObj
            ? connectionObj
            : this.state === 'savedSuccessfully'
                ? this.connection
                : head(this.connections);
        this.state = 'updateConnection';
        this.showPassword = false;
        this.originalConnection = this.connection ? cloneDeep(this.connection) : undefined;
        this.connection.providerType = 'loriotType';
    }
    async resetEditedUnsavedConnection() {
        if (this.state !== 'updateConnection' || !this.originalConnection) {
            return;
        }
        const { name } = this.originalConnection;
        const index = findIndex(this.connections, { name });
        if (index !== -1) {
            const originalData = (await this.connectorService.detail(ConnectionType.LORIOT, name));
            this.connections[index] = originalData;
        }
    }
    async addConnection() {
        await this.resetEditedUnsavedConnection();
        this.connection = {};
        this.originalConnection = {};
        this.state = 'addConnections';
        this.showPassword = true;
        this.connection.providerType = 'loriotType';
    }
    async save() {
        const checkForConnectionName = this.originalConnection && this.originalConnection.name && this.originalConnection.name !== ''
            ? this.originalConnection.name
            : this.connection.name;
        const isConnectionExist = await this.connectorService.exists(ConnectionType.LORIOT, checkForConnectionName);
        if (this.state === 'addConnections' && isConnectionExist) {
            const msg = this.translateService.instant(gettext(`Connection with name "{{ name }}" already exists.`), { name: this.connection.name });
            this.alertService.danger(msg);
        }
        else {
            this.saveConnection();
        }
    }
    async deleteConnection(originalConnection) {
        const { name } = originalConnection;
        const msg = this.translateService.instant(gettext(`You are about to delete the connection "{{ name }}". Do you want to proceed?`), { name });
        try {
            await this.modal.confirm(gettext('Delete connection'), msg, Status.DANGER, {
                ok: gettext('Delete'),
                cancel: gettext('Cancel')
            });
            await this.delete(originalConnection);
        }
        catch (error) {
            // empty catch block
        }
    }
    changePassword() {
        this.showPassword = !this.showPassword;
        if (this.connectorsForm.controls.password) {
            this.connectorsForm.controls.password.setValue(null);
        }
    }
    async saveConnection() {
        const res = await this.connectorService.save(this.connection, this.originalConnection?.name);
        if (res && (res.status === 201 || res.status === 200)) {
            this.state = 'savedSuccessfully';
            this.alertService.success(gettext('Connection saved.'));
            await this.loadConnections();
        }
        else if (res && res.status === 500) {
            const data = res.json ? await res.json() : undefined;
            const app = this.connectorService.getApplication('loriot-agent');
            const initialState = {
                messageData: data,
                appData: app,
                modalTitle: gettext('Failed to update the connection'),
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                connectionName: this.connection.name
            };
            this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
        }
        else {
            const data = res.json ? await res.json() : undefined;
            this.alertService.addServerFailure({ data, res });
        }
    }
    async delete(originalConnection) {
        if (!originalConnection.providerType)
            originalConnection.providerType = 'loriotType';
        try {
            const response = await this.connectorService.delete(originalConnection);
            if (response.ok && response.status === 204) {
                this.alertService.success(gettext('Connection deleted.'));
                await this.loadConnections();
            }
            else if (response && response.status === 500) {
                const data = response.json ? await response.json() : undefined;
                const app = this.connectorService.getApplication('loriot-agent');
                const initialState = {
                    messageData: data,
                    appData: app,
                    ariaDescribedby: 'modal-body',
                    ariaLabelledBy: 'modal-title',
                    modalTitle: gettext('Failed to delete the connection'),
                    connectionName: originalConnection.name
                };
                this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });
            }
            else {
                const data = response.json ? await response.json() : undefined;
                this.alertService.addServerFailure({ data, response });
            }
        }
        catch (error) {
            // empty catch block
        }
    }
}
LoriotMultipleLnsConnectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoriotMultipleLnsConnectorComponent, deps: [{ token: i1.MultipleLnsConnectorService }, { token: i2.AlertService }, { token: i3.TranslateService }, { token: i4.BsModalService }, { token: i2.ModalService }], target: i0.ɵɵFactoryTarget.Component });
LoriotMultipleLnsConnectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: LoriotMultipleLnsConnectorComponent, selector: "loriot-multiple-lns-connector", viewQueries: [{ propertyName: "connectorsForm", first: true, predicate: ["connectorsForm"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n\n<c8y-title>{{ 'Connectivity' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [label]=\"'Settings' | translate\"\n    [icon]=\"'cog'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Connectivity' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'LORIOT' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <div class=\"card-title\">{{ cardHeader | translate }}</div>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connectionBeingEdited\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        [class]=\"{ 'split-view__detail--selected': connection }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            (click)=\"resetEditedUnsavedConnection()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. LORIOT connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required                  \n                  [pattern]=\"namePattern\"\n                />\n                <c8y-messages >\n                  <c8y-message name=\"pattern\" [text]=\"namePatternError\"></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to\u2026' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://ap3.loriot.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  required\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(originalConnection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "component", type: i2.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i2.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.LoadingComponent, selector: "c8y-loading" }, { kind: "component", type: i2.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i2.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i2.MessageDirective, selector: "c8y-message", inputs: ["name", "text"] }, { kind: "component", type: i2.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }, { kind: "directive", type: i2.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "component", type: i2.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i2.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i2.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i7.NoConnectionsFoundComponent, selector: "no-connections-found", inputs: ["header"], outputs: ["onAction"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LoriotMultipleLnsConnectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'loriot-multiple-lns-connector', template: "<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n\n<c8y-title>{{ 'Connectivity' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [label]=\"'Settings' | translate\"\n    [icon]=\"'cog'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Connectivity' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'LORIOT' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <div class=\"card-title\">{{ cardHeader | translate }}</div>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connectionBeingEdited\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        [class]=\"{ 'split-view__detail--selected': connection }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            (click)=\"resetEditedUnsavedConnection()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. LORIOT connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required                  \n                  [pattern]=\"namePattern\"\n                />\n                <c8y-messages >\n                  <c8y-message name=\"pattern\" [text]=\"namePatternError\"></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to\u2026' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://ap3.loriot.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  required\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(originalConnection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MultipleLnsConnectorService }, { type: i2.AlertService }, { type: i3.TranslateService }, { type: i4.BsModalService }, { type: i2.ModalService }]; }, propDecorators: { connectorsForm: [{
                type: ViewChild,
                args: ['connectorsForm', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9yaW90LW11bHRpcGxlLWxucy1jb25uZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvdG9jb2wtbHB3YW4vbXVsdGlwbGUtbG5zLWNvbm5lY3RvcnMvbG9yaW90L2xvcmlvdC1tdWx0aXBsZS1sbnMtY29ubmVjdG9yLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb3RvY29sLWxwd2FuL211bHRpcGxlLWxucy1jb25uZWN0b3JzL2xvcmlvdC9sb3Jpb3QtbXVsdGlwbGUtbG5zLWNvbm5lY3Rvci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsY0FBYyxFQUEyQixNQUFNLGlDQUFpQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7Ozs7Ozs7QUFNeEcsTUFBTSxPQUFPLG1DQUFtQztJQWtCOUMsWUFDVSxnQkFBNkMsRUFDN0MsWUFBMEIsRUFDMUIsZ0JBQWtDLEVBQ2xDLFlBQTRCLEVBQzVCLEtBQW1CO1FB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QUUsYUFBYTtvQkFDN0IsVUFBVSxFQUFFLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDdEQsY0FBYyxFQUFFLGtCQUFrQixDQUFDLElBQUk7aUJBQ3hDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO2FBQ2xGO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQy9ELElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUN4RDtTQUNGO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxvQkFBb0I7U0FDckI7SUFDSCxDQUFDOztnSUFsTFUsbUNBQW1DO29IQUFuQyxtQ0FBbUMsdUxDZGhELGsrUEFnT0E7MkZEbE5hLG1DQUFtQztrQkFKL0MsU0FBUzsrQkFDRSwrQkFBK0I7b09BUU8sY0FBYztzQkFBN0QsU0FBUzt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQsIE1vZGFsU2VydmljZSwgU3RhdHVzIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBoZWFkLCBvcmRlckJ5LCBmaW5kSW5kZXgsIGVzY2FwZVJlZ0V4cCwgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNdWx0aXBsZUxuc0Nvbm5lY3RvclNlcnZpY2UgfSBmcm9tICcuLi9tdWx0aXBsZS1sbnMtY29ubmVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29ubmVjdGlvblR5cGUsIExvcmlvdENvbm5lY3Rpb24sIFN0YXRlIH0gZnJvbSAnLi4vbXVsdGlwbGUtbG5zLWNvbm5lY3Rvci5tb2RlbCc7XG5pbXBvcnQgeyBDb25uZWN0aW9uSW5mb1dpdGhEb3dubG9hZENzdkNvbXBvbmVudCB9IGZyb20gJy4uL2Nvbm5lY3Rpb24taW5mby13aXRoLWRvd25sb2FkLWNzdi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsb3Jpb3QtbXVsdGlwbGUtbG5zLWNvbm5lY3RvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb3Jpb3QtbXVsdGlwbGUtbG5zLWNvbm5lY3Rvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTG9yaW90TXVsdGlwbGVMbnNDb25uZWN0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBzdGF0ZTogU3RhdGUgPSAnbG9hZGluZ0Nvbm5lY3Rpb24nO1xuICBjb25uZWN0aW9uOiBMb3Jpb3RDb25uZWN0aW9uO1xuICBjb25uZWN0aW9ucyA9IEFycmF5PExvcmlvdENvbm5lY3Rpb24+KCk7XG4gIHNob3dQYXNzd29yZCA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCdjb25uZWN0b3JzRm9ybScsIHsgc3RhdGljOiBmYWxzZSB9KSBjb25uZWN0b3JzRm9ybTogTmdGb3JtO1xuICBjYXJkSGVhZGVyID0gZ2V0dGV4dCgnTE9SSU9UIGNvbm5lY3Rpb25zJyk7XG4gIGFsbG93ZWRTcGVjaWFsQ2hhcmFjdGVycyA9ICd+IUAkXigpe31bXXw6LDwrPSwuYF8gLSc7XG4gIG5hbWVQYXR0ZXJuID0gYF5bYS16QS1aMC05ICR7ZXNjYXBlUmVnRXhwKHRoaXMuYWxsb3dlZFNwZWNpYWxDaGFyYWN0ZXJzKX1dKiRgO1xuICBuYW1lUGF0dGVybkVycm9yID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgZ2V0dGV4dChcbiAgICAgICdDb25uZWN0aW9uIG5hbWUgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCBzcGFjZXMsIGFuZCB0aGUgZm9sbG93aW5nIHN5bWJvbHM6IHt7IHN5bWJvbHMgfX0nXG4gICAgKSxcbiAgICB7XG4gICAgICBzeW1ib2xzOiB0aGlzLmFsbG93ZWRTcGVjaWFsQ2hhcmFjdGVyc1xuICAgIH1cbiAgKTtcbiAgb3JpZ2luYWxDb25uZWN0aW9uOiBMb3Jpb3RDb25uZWN0aW9uO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbm5lY3RvclNlcnZpY2U6IE11bHRpcGxlTG5zQ29ubmVjdG9yU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbDogTW9kYWxTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRDb25uZWN0aW9ucygpO1xuICB9XG5cbiAgYXN5bmMgbG9hZENvbm5lY3Rpb25zKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY29ubmVjdG9yU2VydmljZS5saXN0KENvbm5lY3Rpb25UeXBlLkxPUklPVCk7XG4gICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgIGNvbnN0IGRhdGEgPSByZXMuanNvbiA/IGF3YWl0IHJlcy5qc29uKCkgOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKHsgZGF0YSwgcmVzIH0pO1xuICAgICAgdGhpcy5zdGF0ZSA9ICdsb2FkaW5nRXJyb3InO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsaXN0ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIHRoaXMuY29ubmVjdGlvbnMgPSBvcmRlckJ5KGxpc3QsIFsnbmFtZSddLCBbJ2FzYyddKTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0TW9kZWwoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRNb2RlbChjb25uZWN0aW9uT2JqID0gbnVsbCkge1xuICAgIGF3YWl0IHRoaXMucmVzZXRFZGl0ZWRVbnNhdmVkQ29ubmVjdGlvbigpO1xuICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25PYmpcbiAgICAgID8gY29ubmVjdGlvbk9ialxuICAgICAgOiB0aGlzLnN0YXRlID09PSAnc2F2ZWRTdWNjZXNzZnVsbHknXG4gICAgICA/IHRoaXMuY29ubmVjdGlvblxuICAgICAgOiBoZWFkKHRoaXMuY29ubmVjdGlvbnMpO1xuICAgIHRoaXMuc3RhdGUgPSAndXBkYXRlQ29ubmVjdGlvbic7XG4gICAgdGhpcy5zaG93UGFzc3dvcmQgPSBmYWxzZTtcbiAgICB0aGlzLm9yaWdpbmFsQ29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbiA/IGNsb25lRGVlcCh0aGlzLmNvbm5lY3Rpb24pIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuY29ubmVjdGlvbi5wcm92aWRlclR5cGUgPSAnbG9yaW90VHlwZSc7XG4gIH1cblxuICBhc3luYyByZXNldEVkaXRlZFVuc2F2ZWRDb25uZWN0aW9uKCkge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSAndXBkYXRlQ29ubmVjdGlvbicgfHwgIXRoaXMub3JpZ2luYWxDb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBuYW1lIH0gPSB0aGlzLm9yaWdpbmFsQ29ubmVjdGlvbjtcbiAgICBjb25zdCBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmNvbm5lY3Rpb25zLCB7IG5hbWUgfSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY29uc3Qgb3JpZ2luYWxEYXRhID0gKGF3YWl0IHRoaXMuY29ubmVjdG9yU2VydmljZS5kZXRhaWwoXG4gICAgICAgIENvbm5lY3Rpb25UeXBlLkxPUklPVCxcbiAgICAgICAgbmFtZVxuICAgICAgKSkgYXMgTG9yaW90Q29ubmVjdGlvbjtcbiAgICAgIHRoaXMuY29ubmVjdGlvbnNbaW5kZXhdID0gb3JpZ2luYWxEYXRhO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFkZENvbm5lY3Rpb24oKSB7XG4gICAgYXdhaXQgdGhpcy5yZXNldEVkaXRlZFVuc2F2ZWRDb25uZWN0aW9uKCk7XG4gICAgdGhpcy5jb25uZWN0aW9uID0ge30gYXMgTG9yaW90Q29ubmVjdGlvbjtcbiAgICB0aGlzLm9yaWdpbmFsQ29ubmVjdGlvbiA9IHt9IGFzIExvcmlvdENvbm5lY3Rpb247XG4gICAgdGhpcy5zdGF0ZSA9ICdhZGRDb25uZWN0aW9ucyc7XG4gICAgdGhpcy5zaG93UGFzc3dvcmQgPSB0cnVlO1xuICAgIHRoaXMuY29ubmVjdGlvbi5wcm92aWRlclR5cGUgPSAnbG9yaW90VHlwZSc7XG4gIH1cblxuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IGNoZWNrRm9yQ29ubmVjdGlvbk5hbWUgPVxuICAgICAgdGhpcy5vcmlnaW5hbENvbm5lY3Rpb24gJiYgdGhpcy5vcmlnaW5hbENvbm5lY3Rpb24ubmFtZSAmJiB0aGlzLm9yaWdpbmFsQ29ubmVjdGlvbi5uYW1lICE9PSAnJ1xuICAgICAgICA/IHRoaXMub3JpZ2luYWxDb25uZWN0aW9uLm5hbWVcbiAgICAgICAgOiB0aGlzLmNvbm5lY3Rpb24ubmFtZTtcbiAgICBjb25zdCBpc0Nvbm5lY3Rpb25FeGlzdCA9IGF3YWl0IHRoaXMuY29ubmVjdG9yU2VydmljZS5leGlzdHMoXG4gICAgICBDb25uZWN0aW9uVHlwZS5MT1JJT1QsXG4gICAgICBjaGVja0ZvckNvbm5lY3Rpb25OYW1lXG4gICAgKTtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ2FkZENvbm5lY3Rpb25zJyAmJiBpc0Nvbm5lY3Rpb25FeGlzdCkge1xuICAgICAgY29uc3QgbXNnID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgIGdldHRleHQoYENvbm5lY3Rpb24gd2l0aCBuYW1lIFwie3sgbmFtZSB9fVwiIGFscmVhZHkgZXhpc3RzLmApLFxuICAgICAgICB7IG5hbWU6IHRoaXMuY29ubmVjdGlvbi5uYW1lIH1cbiAgICAgICk7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5kYW5nZXIobXNnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zYXZlQ29ubmVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZUNvbm5lY3Rpb24ob3JpZ2luYWxDb25uZWN0aW9uKSB7XG4gICAgY29uc3QgeyBuYW1lIH0gPSBvcmlnaW5hbENvbm5lY3Rpb247XG4gICAgY29uc3QgbXNnID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICBnZXR0ZXh0KGBZb3UgYXJlIGFib3V0IHRvIGRlbGV0ZSB0aGUgY29ubmVjdGlvbiBcInt7IG5hbWUgfX1cIi4gRG8geW91IHdhbnQgdG8gcHJvY2VlZD9gKSxcbiAgICAgIHsgbmFtZSB9XG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1vZGFsLmNvbmZpcm0oZ2V0dGV4dCgnRGVsZXRlIGNvbm5lY3Rpb24nKSwgbXNnLCBTdGF0dXMuREFOR0VSLCB7XG4gICAgICAgIG9rOiBnZXR0ZXh0KCdEZWxldGUnKSxcbiAgICAgICAgY2FuY2VsOiBnZXR0ZXh0KCdDYW5jZWwnKVxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKG9yaWdpbmFsQ29ubmVjdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIGVtcHR5IGNhdGNoIGJsb2NrXG4gICAgfVxuICB9XG5cbiAgY2hhbmdlUGFzc3dvcmQoKSB7XG4gICAgdGhpcy5zaG93UGFzc3dvcmQgPSAhdGhpcy5zaG93UGFzc3dvcmQ7XG4gICAgaWYgKHRoaXMuY29ubmVjdG9yc0Zvcm0uY29udHJvbHMucGFzc3dvcmQpIHtcbiAgICAgIHRoaXMuY29ubmVjdG9yc0Zvcm0uY29udHJvbHMucGFzc3dvcmQuc2V0VmFsdWUobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzYXZlQ29ubmVjdGlvbigpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNvbm5lY3RvclNlcnZpY2Uuc2F2ZSh0aGlzLmNvbm5lY3Rpb24sIHRoaXMub3JpZ2luYWxDb25uZWN0aW9uPy5uYW1lKTtcbiAgICBpZiAocmVzICYmIChyZXMuc3RhdHVzID09PSAyMDEgfHwgcmVzLnN0YXR1cyA9PT0gMjAwKSkge1xuICAgICAgdGhpcy5zdGF0ZSA9ICdzYXZlZFN1Y2Nlc3NmdWxseSc7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0Nvbm5lY3Rpb24gc2F2ZWQuJykpO1xuICAgICAgYXdhaXQgdGhpcy5sb2FkQ29ubmVjdGlvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMuc3RhdHVzID09PSA1MDApIHtcbiAgICAgIGNvbnN0IGRhdGEgPSByZXMuanNvbiA/IGF3YWl0IHJlcy5qc29uKCkgOiB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbm5lY3RvclNlcnZpY2UuZ2V0QXBwbGljYXRpb24oJ2xvcmlvdC1hZ2VudCcpO1xuICAgICAgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICBtZXNzYWdlRGF0YTogZGF0YSxcbiAgICAgICAgYXBwRGF0YTogYXBwLFxuICAgICAgICBtb2RhbFRpdGxlOiBnZXR0ZXh0KCdGYWlsZWQgdG8gdXBkYXRlIHRoZSBjb25uZWN0aW9uJyksXG4gICAgICAgIGFyaWFEZXNjcmliZWRieTogJ21vZGFsLWJvZHknLFxuICAgICAgICBhcmlhTGFiZWxsZWRCeTogJ21vZGFsLXRpdGxlJyxcbiAgICAgICAgY29ubmVjdGlvbk5hbWU6IHRoaXMuY29ubmVjdGlvbi5uYW1lXG4gICAgICB9O1xuICAgICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhDb25uZWN0aW9uSW5mb1dpdGhEb3dubG9hZENzdkNvbXBvbmVudCwgeyBpbml0aWFsU3RhdGUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRhdGEgPSByZXMuanNvbiA/IGF3YWl0IHJlcy5qc29uKCkgOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKHsgZGF0YSwgcmVzIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZGVsZXRlKG9yaWdpbmFsQ29ubmVjdGlvbikge1xuICAgIGlmICghb3JpZ2luYWxDb25uZWN0aW9uLnByb3ZpZGVyVHlwZSkgb3JpZ2luYWxDb25uZWN0aW9uLnByb3ZpZGVyVHlwZSA9ICdsb3Jpb3RUeXBlJztcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNvbm5lY3RvclNlcnZpY2UuZGVsZXRlKG9yaWdpbmFsQ29ubmVjdGlvbik7XG5cbiAgICAgIGlmIChyZXNwb25zZS5vayAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0Nvbm5lY3Rpb24gZGVsZXRlZC4nKSk7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZENvbm5lY3Rpb25zKCk7XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5qc29uID8gYXdhaXQgcmVzcG9uc2UuanNvbigpIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbm5lY3RvclNlcnZpY2UuZ2V0QXBwbGljYXRpb24oJ2xvcmlvdC1hZ2VudCcpO1xuICAgICAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICAgICAgbWVzc2FnZURhdGE6IGRhdGEsXG4gICAgICAgICAgYXBwRGF0YTogYXBwLFxuICAgICAgICAgIGFyaWFEZXNjcmliZWRieTogJ21vZGFsLWJvZHknLFxuICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5OiAnbW9kYWwtdGl0bGUnLFxuICAgICAgICAgIG1vZGFsVGl0bGU6IGdldHRleHQoJ0ZhaWxlZCB0byBkZWxldGUgdGhlIGNvbm5lY3Rpb24nKSxcbiAgICAgICAgICBjb25uZWN0aW9uTmFtZTogb3JpZ2luYWxDb25uZWN0aW9uLm5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhDb25uZWN0aW9uSW5mb1dpdGhEb3dubG9hZENzdkNvbXBvbmVudCwgeyBpbml0aWFsU3RhdGUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbiA/IGF3YWl0IHJlc3BvbnNlLmpzb24oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlc3BvbnNlIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBlbXB0eSBjYXRjaCBibG9ja1xuICAgIH1cbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInN0YXRlID09PSAnbG9hZGluZ0Nvbm5lY3Rpb24nOyBlbHNlIHJlbmRlckxpc3RBbmRGb3JtXCI+XG4gIDxjOHktbG9hZGluZz48L2M4eS1sb2FkaW5nPlxuPC9uZy1jb250YWluZXI+XG5cbjxjOHktdGl0bGU+e3sgJ0Nvbm5lY3Rpdml0eScgfCB0cmFuc2xhdGUgfX08L2M4eS10aXRsZT5cblxuPGM4eS1icmVhZGNydW1iPlxuICA8Yzh5LWJyZWFkY3J1bWItaXRlbVxuICAgIFtsYWJlbF09XCInU2V0dGluZ3MnIHwgdHJhbnNsYXRlXCJcbiAgICBbaWNvbl09XCInY29nJ1wiXG4gID48L2M4eS1icmVhZGNydW1iLWl0ZW0+XG4gIDxjOHktYnJlYWRjcnVtYi1pdGVtXG4gICAgW2ljb25dPVwiJ2NvZydcIlxuICAgIFtsYWJlbF09XCInQ29ubmVjdGl2aXR5JyB8IHRyYW5zbGF0ZVwiXG4gID48L2M4eS1icmVhZGNydW1iLWl0ZW0+XG4gIDxjOHktYnJlYWRjcnVtYi1pdGVtXG4gICAgW2ljb25dPVwiJ2NvZydcIlxuICAgIFtsYWJlbF09XCInTE9SSU9UJyB8IHRyYW5zbGF0ZVwiXG4gID48L2M4eS1icmVhZGNydW1iLWl0ZW0+XG48L2M4eS1icmVhZGNydW1iPlxuXG48bmctdGVtcGxhdGUgI3JlbmRlckxpc3RBbmRGb3JtPlxuICA8bm8tY29ubmVjdGlvbnMtZm91bmRcbiAgICAob25BY3Rpb24pPVwiYWRkQ29ubmVjdGlvbigpXCJcbiAgICAqbmdJZj1cImNvbm5lY3Rpb25zLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZSAhPT0gJ2FkZENvbm5lY3Rpb25zJ1wiXG4gICAgW2hlYWRlcl09XCJjYXJkSGVhZGVyIHwgdHJhbnNsYXRlXCJcbiAgPlxuICA8L25vLWNvbm5lY3Rpb25zLWZvdW5kPlxuICA8ZGl2PlxuICAgIDxkaXZcbiAgICAgIGNsYXNzPVwiY2FyZCBjb250ZW50LWZ1bGxwYWdlIHNwbGl0LXZpZXctLTUtN1wiXG4gICAgICAqbmdJZj1cImNvbm5lY3Rpb25zLmxlbmd0aCAhPT0gMCB8fCBzdGF0ZSA9PT0gJ2FkZENvbm5lY3Rpb25zJ1wiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyIHNlcGFyYXRvciBncmlkX19jb2wtLWZ1bGxzcGFuXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLXRpdGxlXCI+e3sgY2FyZEhlYWRlciB8IHRyYW5zbGF0ZSB9fTwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW5uZXItc2Nyb2xsIHNwbGl0LXZpZXdfX2xpc3RcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJnLWdyYXktd2hpdGUgZmxleC1ncm93XCI+XG4gICAgICAgICAgPGM4eS1saXN0LWdyb3VwIGNsYXNzPVwibmF2IGM4eS1uYXYtc3RhY2tlZFwiPlxuICAgICAgICAgICAgPGM4eS1saVxuICAgICAgICAgICAgICBjbGFzcz1cImM4eS1zdGFja2VkLWl0ZW0gcC0wXCJcbiAgICAgICAgICAgICAgW2NsYXNzLmFjdGl2ZV09XCJjb25uZWN0aW9uLm5hbWUgPT09IGNvbm5lY3Rpb25CZWluZ0VkaXRlZFwiXG4gICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBjb25uZWN0aW9uIG9mIGNvbm5lY3Rpb25zOyBsZXQgaW5kZXggPSBpbmRleFwiXG4gICAgICAgICAgICAgIChjbGljayk9XCJzZXRNb2RlbChjb25uZWN0aW9uKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxjOHktbGktaWNvbiBbaWNvbl09XCIncGx1ZydcIj48L2M4eS1saS1pY29uPlxuICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cInt7IGNvbm5lY3Rpb24ubmFtZSB9fVwiPlxuICAgICAgICAgICAgICAgIHt7IGNvbm5lY3Rpb24ubmFtZSB9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2M4eS1saT5cblxuICAgICAgICAgICAgPGM4eS1saVxuICAgICAgICAgICAgICAqbmdJZj1cInN0YXRlID09PSAnYWRkQ29ubmVjdGlvbnMnXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJjOHktbmF2LXN0YWNrZWQgYWN0aXZlXCJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cImFkZENvbm5lY3Rpb24oKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxjOHktbGktaWNvbiBbaWNvbl09XCIncGx1ZydcIj48L2M4eS1saS1pY29uPlxuICAgICAgICAgICAgICB7eyAnTmV3IGNvbm5lY3Rpb24nIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgICA8L2M4eS1saT5cbiAgICAgICAgICA8L2M4eS1saXN0LWdyb3VwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyIHNlcGFyYXRvci10b3BcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwic3RhdGUgPT09ICdhZGRDb25uZWN0aW9ucydcIlxuICAgICAgICAgICAgdGl0bGU9XCJ7eyAnQWRkIGNvbm5lY3Rpb24nIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCJcbiAgICAgICAgICAgIChjbGljayk9XCJhZGRDb25uZWN0aW9uKClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIFtjOHlJY29uXT1cIidwbHVzLWNpcmNsZSdcIj48L2k+XG4gICAgICAgICAgICB7eyAnQWRkIGNvbm5lY3Rpb24nIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDwhLS0gJ3NwbGl0LXZpZXdfX2RldGFpbC0tc2VsZWN0ZWQnIGNvbmRpdGlvbiBuZWVkcyB0byBiZSBmaXhlZC4gdGhpcyBpcyBuZWVkZWQgc28gdGhhdCBib3RoIGNvbHVtbnMgYXJlIHZpc2libGUgaW4gdGFibGV0IGZvcm1hdCAtLT5cblxuICAgICAgPGRpdlxuICAgICAgICBjbGFzcz1cImlubmVyLXNjcm9sbCBzcGxpdC12aWV3X19kZXRhaWxcIlxuICAgICAgICBbY2xhc3NdPVwieyAnc3BsaXQtdmlld19fZGV0YWlsLS1zZWxlY3RlZCc6IGNvbm5lY3Rpb24gfVwiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBzZXBhcmF0b3IgdmlzaWJsZS1zbSB2aXNpYmxlLXhzIGZpdC13IHN0aWNreS10b3BcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cInt7ICdCYWNrJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tY2xlYW4gdGV4dC1wcmltYXJ5XCJcbiAgICAgICAgICAgIChjbGljayk9XCJyZXNldEVkaXRlZFVuc2F2ZWRDb25uZWN0aW9uKClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIFtjOHlJY29uXT1cIidjaGV2cm9uLWxlZnQnXCI+PC9pPlxuICAgICAgICAgICAgPHNwYW4+e3sgJ0JhY2snIHwgdHJhbnNsYXRlIH19PC9zcGFuPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGZvcm0gI2Nvbm5lY3RvcnNGb3JtPVwibmdGb3JtXCIgY2xhc3M9XCJkLWNvbnRlbnRzXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZ3Jvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYmxvY2sgbGFyZ2UtcGFkZGluZ1wiPlxuICAgICAgICAgICAgICA8Yzh5LWZvcm0tZ3JvdXA+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIm5hbWVcIj5cbiAgICAgICAgICAgICAgICAgIHt7ICdOYW1lJyB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiJ2UuZy4gTE9SSU9UIGNvbm5lY3Rpb24nIHwgdHJhbnNsYXRlXCJcbiAgICAgICAgICAgICAgICAgIGlkPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cImNvbm5lY3Rpb24ubmFtZVwiXG4gICAgICAgICAgICAgICAgICByZXF1aXJlZCAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgW3BhdHRlcm5dPVwibmFtZVBhdHRlcm5cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGM4eS1tZXNzYWdlcyA+XG4gICAgICAgICAgICAgICAgICA8Yzh5LW1lc3NhZ2UgbmFtZT1cInBhdHRlcm5cIiBbdGV4dF09XCJuYW1lUGF0dGVybkVycm9yXCI+PC9jOHktbWVzc2FnZT5cbiAgICAgICAgICAgICAgICA8L2M4eS1tZXNzYWdlcz5cbiAgICAgICAgICAgICAgPC9jOHktZm9ybS1ncm91cD5cblxuICAgICAgICAgICAgICA8Yzh5LWZvcm0tZ3JvdXA+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICB7eyAnRGVzY3JpcHRpb24nIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCInZS5nLiBUaGlzIGNvbm5lY3Rpb24gaGFzIGEgYnVpbHQtaW4gZnVuY3Rpb25hbGl0eSB0b+KApicgfCB0cmFuc2xhdGVcIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJjb25uZWN0aW9uLmRlc2NyaXB0aW9uXCIgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2M4eS1mb3JtLWdyb3VwPlxuXG4gICAgICAgICAgICAgIDxjOHktZm9ybS1ncm91cD5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmFzZVVybFwiPlxuICAgICAgICAgICAgICAgICAge3sgJ1VSTCcgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cIlxuICAgICAgICAgICAgICAgICAgICAnZS5nLiB7eyBleGFtcGxlIH19JyB8IHRyYW5zbGF0ZTogeyBleGFtcGxlOiAnaHR0cHM6Ly9hcDMubG9yaW90LmlvJyB9XG4gICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJiYXNlVXJsXCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJiYXNlVXJsXCJcbiAgICAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwiY29ubmVjdGlvbi5iYXNlVXJsXCJcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9jOHktZm9ybS1ncm91cD5cbiAgICAgICAgICAgICAgPGM4eS1mb3JtLWdyb3VwPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJ1c2VybmFtZVwiPlxuICAgICAgICAgICAgICAgICAge3sgJ1VzZXJuYW1lJyB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7ICdlLmcuIGpvZWBMT0NBTElaRWAnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgICAgICAgICAgIGlkPVwidXNlcm5hbWVcIlxuICAgICAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwiY29ubmVjdGlvbi51c2VybmFtZVwiXG4gICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvYzh5LWZvcm0tZ3JvdXA+XG4gICAgICAgICAgICAgIDxjOHktZm9ybS1ncm91cCAqbmdJZj1cInNob3dQYXNzd29yZFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwYXNzd29yZFwiPlxuICAgICAgICAgICAgICAgICAge3sgJ1Bhc3N3b3JkJyB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnZS5nLiBteV9wYXNzd29yZCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJjb25uZWN0aW9uLnBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9jOHktZm9ybS1ncm91cD5cblxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJzdGF0ZSA9PT0gJ3VwZGF0ZUNvbm5lY3Rpb24nXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImNoYW5nZVBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiY2hhbmdlUGFzc3dvcmQoKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cInt7ICdDaGFuZ2UgcGFzc3dvcmQnIHwgdHJhbnNsYXRlIH19XCIgKm5nSWY9XCIhc2hvd1Bhc3N3b3JkXCI+e3tcbiAgICAgICAgICAgICAgICAgICdDaGFuZ2UgcGFzc3dvcmQnIHwgdHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCJ7eyAnQ2FuY2VsIHBhc3N3b3JkIGNoYW5nZScgfCB0cmFuc2xhdGUgfX1cIiAqbmdJZj1cInNob3dQYXNzd29yZFwiPnt7XG4gICAgICAgICAgICAgICAgICAnQ2FuY2VsIHBhc3N3b3JkIGNoYW5nZScgfCB0cmFuc2xhdGVcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlciBzZXBhcmF0b3ItdG9wXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHRpdGxlPVwie3sgJ0NhbmNlbCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgICAgIChjbGljayk9XCJzZXRNb2RlbCgpXCJcbiAgICAgICAgICAgICAgdHJhbnNsYXRlXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgKm5nSWY9XCJzdGF0ZSA9PT0gJ3VwZGF0ZUNvbm5lY3Rpb24nXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJ7eyAnRGVsZXRlJyB8IHRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwiZGVsZXRlQ29ubmVjdGlvbihvcmlnaW5hbENvbm5lY3Rpb24pXCJcbiAgICAgICAgICAgICAgdHJhbnNsYXRlXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cIiF0aGlzLmNvbm5lY3RvcnNGb3JtLmZvcm0udmFsaWQgfHwgdGhpcy5jb25uZWN0b3JzRm9ybS5mb3JtLnByaXN0aW5lXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJ7eyAnU2F2ZScgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgICAgIChjbGljayk9XCJzYXZlKClcIlxuICAgICAgICAgICAgICB0cmFuc2xhdGVcbiAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFNhdmVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPlxuIl19
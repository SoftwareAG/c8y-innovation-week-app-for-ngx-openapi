import { Injectable } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { AlertService, AppStateService } from '@c8y/ngx-components';
import { isActilityConnection, isSigfoxConnection, ConnectionType, isLoriotConnection } from './multiple-lns-connector.model';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class MultipleLnsConnectorService {
    constructor(client, appStateService, alertService) {
        this.client = client;
        this.appStateService = appStateService;
        this.alertService = alertService;
        this.headers = { 'Content-Type': 'application/json' };
    }
    async list(connectionType) {
        const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;
        const options = {
            method: 'GET',
            headers: this.headers
        };
        return this.client.fetch(url, options);
    }
    /**
     * Saves the connection.
     * @param connection The connection to be saved.
     * @param originalName The original name of the connection, required to perform an update.
     */
    async save(connection, originalName = null) {
        if (originalName) {
            return this.update(connection, originalName);
        }
        return this.create(connection);
    }
    async detail(connectionType, connectionName) {
        const name = connectionName.toLocaleLowerCase();
        const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(String(name))}`;
        const options = {
            method: 'GET',
            headers: this.headers
        };
        const res = await this.client.fetch(url, options);
        if (res.status === 200) {
            return await res.json();
        }
        return null;
    }
    async exists(connectionType, connectionName) {
        const connection = await this.detail(connectionType, connectionName);
        return connection !== null;
    }
    async create(connection) {
        connection.name = connection.name.toLocaleLowerCase();
        const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
        const options = {
            method: 'POST',
            headers: this.headers,
            body: JSON.stringify(connection)
        };
        return this.client.fetch(url, options);
    }
    async update(connection, originalName) {
        connection.name = connection.name.toLocaleLowerCase();
        const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(String(originalName))}`;
        const options = {
            method: 'PUT',
            headers: this.headers,
            body: JSON.stringify(connection)
        };
        return this.client.fetch(url, options);
    }
    getBaseUrlByConnection(connection) {
        return isSigfoxConnection(connection)
            ? 'service/sigfox-agent'
            : isActilityConnection(connection)
                ? 'service/actility'
                : isLoriotConnection(connection)
                    ? 'service/loriot'
                    : '';
    }
    getBaseUrlByType(connectionType) {
        return connectionType === ConnectionType.SIGFOX
            ? 'service/sigfox-agent'
            : connectionType === ConnectionType.ACTILITY
                ? 'service/actility'
                : connectionType === ConnectionType.LORIOT
                    ? 'service/loriot'
                    : '';
    }
    async delete(connection) {
        const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;
        const options = {
            method: 'DELETE'
        };
        return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);
    }
    getApplication(name) {
        const { references } = this.appStateService.currentTenant.value.applications;
        return references.find(({ application }) => application.name === name).application;
    }
    async download(url) {
        try {
            const options = {
                method: 'GET'
            };
            return this.client.fetch(url, options);
        }
        catch (e) {
            this.alertService.addServerFailure(e);
        }
    }
}
MultipleLnsConnectorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MultipleLnsConnectorService, deps: [{ token: i1.FetchClient }, { token: i2.AppStateService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
MultipleLnsConnectorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MultipleLnsConnectorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MultipleLnsConnectorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.FetchClient }, { type: i2.AppStateService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,
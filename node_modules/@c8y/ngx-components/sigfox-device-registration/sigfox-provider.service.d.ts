import { FetchClient, IManagedObject, InventoryService, IResult, IResultList, TenantOptionsService } from '@c8y/client';
import { SigfoxDevice } from './sigfox-device-registration.model';
import { TranslateService } from '@ngx-translate/core';
import { AppStateService } from '@c8y/ngx-components';
import * as i0 from "@angular/core";
export declare enum ErrorName {
    NoDeviceProtocolsError = "NoDeviceProtocolsError",
    NoConnectivitySettingsError = "NoConnectivitySettingsError",
    ConnectivitySettingsError = "ConnectivitySettingsError",
    ContractError = "ContractError",
    NoContractsError = "NoContractsError",
    RegistrationError = "RegistrationError",
    DeviceProtocolsFetchError = "DeviceProtocolsFetchError"
}
export declare class SigfoxProviderService {
    private client;
    private inventoryService;
    private tenantOptions;
    private translateService;
    private appState;
    private readonly baseUrl;
    private readonly registrationUrl;
    private readonly contractsUrl;
    private readonly header;
    constructor(client: FetchClient, inventoryService: InventoryService, tenantOptions: TenantOptionsService, translateService: TranslateService, appState: AppStateService);
    getConnections(): Promise<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    /**
     * Gets contracts from Sigfox platform.
     * @param connectionName The name of connection for which contracts will be retrieved
     * @returns The result list with contract, or throws an error with exception.
     */
    getContracts(connectionName: string): Promise<IResultList<any>>;
    createDevice(device: SigfoxDevice): Promise<IResult<SigfoxDevice>>;
    getAvailableProtocols(filter?: object): Promise<IResultList<IManagedObject>>;
    hasConnectivitySettings(): Promise<boolean>;
    private throwNoConnectivitySettingsError;
    private throwConnectivitySettingsError;
    private throwRegistrationError;
    private throwDeviceProtocolsFetchError;
    private throwNoDeviceProtocolsError;
    private throwContractError;
    private throwNoContractsError;
    static ɵfac: i0.ɵɵFactoryDeclaration<SigfoxProviderService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SigfoxProviderService>;
}

{"version":3,"file":"client.umd.min.js","sources":["../../src/realtime/MetaChannel.ts","../../../../node_modules/cometd/cometd.js","../../../../node_modules/isomorphic-cometd/browser.js","../../src/realtime/Realtime.ts","../../src/core/Paging.ts","../../src/core/Service.ts","../../../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/core/FetchClient.ts","../../../../node_modules/b2a/es/common.js","../../../../node_modules/b2a/es/btoa.js","../../src/core/BasicAuth.ts","../../../../node_modules/b2a/es/atob.js","../../src/core/Severity.ts","../../src/core/QueriesUtil.ts","../../src/event/EventService.ts","../../../../node_modules/form-data/lib/browser.js","../../src/event/EventBinaryService.ts","../../src/inventory/InventoryBinaryService.ts","../../src/inventory/InventoryService.ts","../../src/measurement/MeasurementService.ts","../../src/measurement/ISeriesFilter.ts","../../src/alarm/AlarmService.ts","../../src/alarm/AlarmStatus.ts","../../src/operation/OperationService.ts","../../src/operation/OperationBulkService.ts","../../src/operation/OperationBulkStatus.ts","../../src/operation/OperationBulkGeneralStatus.ts","../../src/operation/OperationStatus.ts","../../src/tenant/TenantService.ts","../../src/tenant/TenantStatus.ts","../../src/tenant/TfaStrategy.ts","../../src/user/UserInventoryRoleService.ts","../../src/user/UserService.ts","../../src/user/PasswordStrength.ts","../../src/application/ApplicationBinaryService.ts","../../src/application/ApplicationType.ts","../../src/application/ApplicationService.ts","../../src/application/IApplicationInstanceDetails.ts","../../src/application/BillingMode.ts","../../src/application/Isolation.ts","../../src/application/ApplicationAvailability.ts","../../src/system-options/SystemOptionsService.ts","../../src/tenant-options/TenantOptionsService.ts","../../src/tenant-security-options/TenantSecurityOptionsService.ts","../../src/tenant-login-options/TenantLoginOptionsService.ts","../../src/tenant-login-options/ITenantLoginOptions.ts","../../src/audit/AuditService.ts","../../src/audit/AuditRecordType.ts","../../src/audit/ChangeType.ts","../../src/inventory-role/InventoryRoleService.ts","../../src/device-registration/DeviceRegistrationStatus.ts","../../src/device-registration/DeviceRegistrationService.ts","../../src/device-registration/DeviceRegistrationBulkService.ts","../../src/device-registration/DeviceRegistrationSecurityMode.ts","../../src/user-role/UserRoleService.ts","../../src/user-group/UserGroupService.ts","../../src/identity/IdentityService.ts","../../src/trusted-certificates/TrustedCertificateService.ts","../../src/smart-groups/SmartGroupsService.ts","../../src/smart-rules/SmartRulesService.ts","../../src/Client.ts","../../src/core/CookieAuth.ts","../../src/core/MicroserviceClientRequestAuth.ts"],"sourcesContent":["export enum MetaChannel {\n  HANDSHAKE = '/meta/handshake',\n  CONNECT = '/meta/connect',\n  SUBSCRIBE = '/meta/subscribe',\n  UNSUBSCRIBE = '/meta/unsubscribe'\n}\n","/*\n * Copyright (c) 2008-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* CometD Version 4.0.8 */\n\n(function(root, factory) {\n    if (typeof exports === 'object') {\n        // CommonJS.\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD.\n        define([], factory);\n    } else {\n        // Globals.\n        root.org = root.org || {};\n        root.org.cometd = factory();\n    }\n}(this, function() {\n    /**\n     * Browsers may throttle the Window scheduler,\n     * so we may replace it with a Worker scheduler.\n     */\n    var Scheduler = function() {\n        var _ids = 0;\n        var _tasks = {};\n        this.register = function(funktion) {\n            var id = ++_ids;\n            _tasks[id] = funktion;\n            return id;\n        };\n        this.unregister = function(id) {\n            var funktion = _tasks[id];\n            delete _tasks[id];\n            return funktion;\n        };\n        this.setTimeout = function(funktion, delay) {\n            return window.setTimeout(funktion, delay);\n        };\n        this.clearTimeout = function(id) {\n            window.clearTimeout(id);\n        };\n    };\n\n    /**\n     * The scheduler code that will run in the Worker.\n     * Workers have a built-in `self` variable similar to `window`.\n     */\n    function WorkerScheduler() {\n        var _tasks = {};\n        self.onmessage = function(e) {\n            var cmd = e.data;\n            var id = _tasks[cmd.id];\n            switch (cmd.type) {\n                case 'setTimeout':\n                    _tasks[cmd.id] = self.setTimeout(function() {\n                        delete _tasks[cmd.id];\n                        self.postMessage({\n                            id: cmd.id\n                        });\n                    }, cmd.delay);\n                    break;\n                case 'clearTimeout':\n                    delete _tasks[cmd.id];\n                    if (id) {\n                        self.clearTimeout(id);\n                    }\n                    break;\n                default:\n                    throw 'Unknown command ' + cmd.type;\n            }\n        };\n    }\n\n\n    /**\n     * Utility functions.\n     */\n    var Utils = {\n        isString: function(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return typeof value === 'string' || value instanceof String;\n        },\n        isArray: function(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return value instanceof Array;\n        },\n        /**\n         * Returns whether the given element is contained into the given array.\n         * @param element the element to check presence for\n         * @param array the array to check for the element presence\n         * @return the index of the element, if present, or a negative index if the element is not present\n         */\n        inArray: function(element, array) {\n            for (var i = 0; i < array.length; ++i) {\n                if (element === array[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    };\n\n\n    /**\n     * A registry for transports used by the CometD object.\n     */\n    var TransportRegistry = function() {\n        var _types = [];\n        var _transports = {};\n\n        this.getTransportTypes = function() {\n            return _types.slice(0);\n        };\n\n        this.findTransportTypes = function(version, crossDomain, url) {\n            var result = [];\n            for (var i = 0; i < _types.length; ++i) {\n                var type = _types[i];\n                if (_transports[type].accept(version, crossDomain, url) === true) {\n                    result.push(type);\n                }\n            }\n            return result;\n        };\n\n        this.negotiateTransport = function(types, version, crossDomain, url) {\n            for (var i = 0; i < _types.length; ++i) {\n                var type = _types[i];\n                for (var j = 0; j < types.length; ++j) {\n                    if (type === types[j]) {\n                        var transport = _transports[type];\n                        if (transport.accept(version, crossDomain, url) === true) {\n                            return transport;\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n\n        this.add = function(type, transport, index) {\n            var existing = false;\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    existing = true;\n                    break;\n                }\n            }\n\n            if (!existing) {\n                if (typeof index !== 'number') {\n                    _types.push(type);\n                } else {\n                    _types.splice(index, 0, type);\n                }\n                _transports[type] = transport;\n            }\n\n            return !existing;\n        };\n\n        this.find = function(type) {\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    return _transports[type];\n                }\n            }\n            return null;\n        };\n\n        this.remove = function(type) {\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    _types.splice(i, 1);\n                    var transport = _transports[type];\n                    delete _transports[type];\n                    return transport;\n                }\n            }\n            return null;\n        };\n\n        this.clear = function() {\n            _types = [];\n            _transports = {};\n        };\n\n        this.reset = function(init) {\n            for (var i = 0; i < _types.length; ++i) {\n                _transports[_types[i]].reset(init);\n            }\n        };\n    };\n\n\n    /**\n     * Base object with the common functionality for transports.\n     */\n    var Transport = function() {\n        var _type;\n        var _cometd;\n        var _url;\n\n        /**\n         * Function invoked just after a transport has been successfully registered.\n         * @param type the type of transport (for example 'long-polling')\n         * @param cometd the cometd object this transport has been registered to\n         * @see #unregistered()\n         */\n        this.registered = function(type, cometd) {\n            _type = type;\n            _cometd = cometd;\n        };\n\n        /**\n         * Function invoked just after a transport has been successfully unregistered.\n         * @see #registered(type, cometd)\n         */\n        this.unregistered = function() {\n            _type = null;\n            _cometd = null;\n        };\n\n        this._debug = function() {\n            _cometd._debug.apply(_cometd, arguments);\n        };\n\n        this._mixin = function() {\n            return _cometd._mixin.apply(_cometd, arguments);\n        };\n\n        this.getConfiguration = function() {\n            return _cometd.getConfiguration();\n        };\n\n        this.getAdvice = function() {\n            return _cometd.getAdvice();\n        };\n\n        this.setTimeout = function(funktion, delay) {\n            return _cometd.setTimeout(funktion, delay);\n        };\n\n        this.clearTimeout = function(id) {\n            _cometd.clearTimeout(id);\n        };\n\n        /**\n         * Converts the given response into an array of bayeux messages\n         * @param response the response to convert\n         * @return an array of bayeux messages obtained by converting the response\n         */\n        this.convertToMessages = function(response) {\n            if (Utils.isString(response)) {\n                try {\n                    return JSON.parse(response);\n                } catch (x) {\n                    this._debug('Could not convert to JSON the following string', '\"' + response + '\"');\n                    throw x;\n                }\n            }\n            if (Utils.isArray(response)) {\n                return response;\n            }\n            if (response === undefined || response === null) {\n                return [];\n            }\n            if (response instanceof Object) {\n                return [response];\n            }\n            throw 'Conversion Error ' + response + ', typeof ' + (typeof response);\n        };\n\n        /**\n         * Returns whether this transport can work for the given version and cross domain communication case.\n         * @param version a string indicating the transport version\n         * @param crossDomain a boolean indicating whether the communication is cross domain\n         * @param url the URL to connect to\n         * @return true if this transport can work for the given version and cross domain communication case,\n         * false otherwise\n         */\n        this.accept = function(version, crossDomain, url) {\n            throw 'Abstract';\n        };\n\n        /**\n         * Returns the type of this transport.\n         * @see #registered(type, cometd)\n         */\n        this.getType = function() {\n            return _type;\n        };\n\n        this.getURL = function() {\n            return _url;\n        };\n\n        this.setURL = function(url) {\n            _url = url;\n        };\n\n        this.send = function(envelope, metaConnect) {\n            throw 'Abstract';\n        };\n\n        this.reset = function(init) {\n            this._debug('Transport', _type, 'reset', init ? 'initial' : 'retry');\n        };\n\n        this.abort = function() {\n            this._debug('Transport', _type, 'aborted');\n        };\n\n        this.toString = function() {\n            return this.getType();\n        };\n    };\n\n    Transport.derive = function(baseObject) {\n        function F() {\n        }\n\n        F.prototype = baseObject;\n        return new F();\n    };\n\n\n    /**\n     * Base object with the common functionality for transports based on requests.\n     * The key responsibility is to allow at most 2 outstanding requests to the server,\n     * to avoid that requests are sent behind a long poll.\n     * To achieve this, we have one reserved request for the long poll, and all other\n     * requests are serialized one after the other.\n     */\n    var RequestTransport = function() {\n        var _super = new Transport();\n        var _self = Transport.derive(_super);\n        var _requestIds = 0;\n        var _metaConnectRequest = null;\n        var _requests = [];\n        var _envelopes = [];\n\n        function _coalesceEnvelopes(envelope) {\n            while (_envelopes.length > 0) {\n                var envelopeAndRequest = _envelopes[0];\n                var newEnvelope = envelopeAndRequest[0];\n                var newRequest = envelopeAndRequest[1];\n                if (newEnvelope.url === envelope.url &&\n                    newEnvelope.sync === envelope.sync) {\n                    _envelopes.shift();\n                    envelope.messages = envelope.messages.concat(newEnvelope.messages);\n                    this._debug('Coalesced', newEnvelope.messages.length, 'messages from request', newRequest.id);\n                    continue;\n                }\n                break;\n            }\n        }\n\n        function _transportSend(envelope, request) {\n            this.transportSend(envelope, request);\n            request.expired = false;\n\n            if (!envelope.sync) {\n                var maxDelay = this.getConfiguration().maxNetworkDelay;\n                var delay = maxDelay;\n                if (request.metaConnect === true) {\n                    delay += this.getAdvice().timeout;\n                }\n\n                this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for the response, maxNetworkDelay', maxDelay);\n\n                var self = this;\n                request.timeout = this.setTimeout(function() {\n                    request.expired = true;\n                    var errorMessage = 'Request ' + request.id + ' of transport ' + self.getType() + ' exceeded ' + delay + ' ms max network delay';\n                    var failure = {\n                        reason: errorMessage\n                    };\n                    var xhr = request.xhr;\n                    failure.httpCode = self.xhrStatus(xhr);\n                    self.abortXHR(xhr);\n                    self._debug(errorMessage);\n                    self.complete(request, false, request.metaConnect);\n                    envelope.onFailure(xhr, envelope.messages, failure);\n                }, delay);\n            }\n        }\n\n        function _queueSend(envelope) {\n            var requestId = ++_requestIds;\n            var request = {\n                id: requestId,\n                metaConnect: false,\n                envelope: envelope\n            };\n\n            // Consider the /meta/connect requests which should always be present.\n            if (_requests.length < this.getConfiguration().maxConnections - 1) {\n                _requests.push(request);\n                _transportSend.call(this, envelope, request);\n            } else {\n                this._debug('Transport', this.getType(), 'queueing request', requestId, 'envelope', envelope);\n                _envelopes.push([envelope, request]);\n            }\n        }\n\n        function _metaConnectComplete(request) {\n            var requestId = request.id;\n            this._debug('Transport', this.getType(), '/meta/connect complete, request', requestId);\n            if (_metaConnectRequest !== null && _metaConnectRequest.id !== requestId) {\n                throw '/meta/connect request mismatch, completing request ' + requestId;\n            }\n            _metaConnectRequest = null;\n        }\n\n        function _complete(request, success) {\n            var index = Utils.inArray(request, _requests);\n            // The index can be negative if the request has been aborted\n            if (index >= 0) {\n                _requests.splice(index, 1);\n            }\n\n            if (_envelopes.length > 0) {\n                var envelopeAndRequest = _envelopes.shift();\n                var nextEnvelope = envelopeAndRequest[0];\n                var nextRequest = envelopeAndRequest[1];\n                this._debug('Transport dequeued request', nextRequest.id);\n                if (success) {\n                    if (this.getConfiguration().autoBatch) {\n                        _coalesceEnvelopes.call(this, nextEnvelope);\n                    }\n                    _queueSend.call(this, nextEnvelope);\n                    this._debug('Transport completed request', request.id, nextEnvelope);\n                } else {\n                    // Keep the semantic of calling response callbacks asynchronously after the request\n                    var self = this;\n                    this.setTimeout(function() {\n                        self.complete(nextRequest, false, nextRequest.metaConnect);\n                        var failure = {\n                            reason: 'Previous request failed'\n                        };\n                        var xhr = nextRequest.xhr;\n                        failure.httpCode = self.xhrStatus(xhr);\n                        nextEnvelope.onFailure(xhr, nextEnvelope.messages, failure);\n                    }, 0);\n                }\n            }\n        }\n\n        _self.complete = function(request, success, metaConnect) {\n            if (metaConnect) {\n                _metaConnectComplete.call(this, request);\n            } else {\n                _complete.call(this, request, success);\n            }\n        };\n\n        /**\n         * Performs the actual send depending on the transport type details.\n         * @param envelope the envelope to send\n         * @param request the request information\n         */\n        _self.transportSend = function(envelope, request) {\n            throw 'Abstract';\n        };\n\n        _self.transportSuccess = function(envelope, request, responses) {\n            if (!request.expired) {\n                this.clearTimeout(request.timeout);\n                this.complete(request, true, request.metaConnect);\n                if (responses && responses.length > 0) {\n                    envelope.onSuccess(responses);\n                } else {\n                    envelope.onFailure(request.xhr, envelope.messages, {\n                        httpCode: 204\n                    });\n                }\n            }\n        };\n\n        _self.transportFailure = function(envelope, request, failure) {\n            if (!request.expired) {\n                this.clearTimeout(request.timeout);\n                this.complete(request, false, request.metaConnect);\n                envelope.onFailure(request.xhr, envelope.messages, failure);\n            }\n        };\n\n        function _metaConnectSend(envelope) {\n            if (_metaConnectRequest !== null) {\n                throw 'Concurrent /meta/connect requests not allowed, request id=' + _metaConnectRequest.id + ' not yet completed';\n            }\n\n            var requestId = ++_requestIds;\n            this._debug('Transport', this.getType(), '/meta/connect send, request', requestId, 'envelope', envelope);\n            var request = {\n                id: requestId,\n                metaConnect: true,\n                envelope: envelope\n            };\n            _transportSend.call(this, envelope, request);\n            _metaConnectRequest = request;\n        }\n\n        _self.send = function(envelope, metaConnect) {\n            if (metaConnect) {\n                _metaConnectSend.call(this, envelope);\n            } else {\n                _queueSend.call(this, envelope);\n            }\n        };\n\n        _self.abort = function() {\n            _super.abort();\n            for (var i = 0; i < _requests.length; ++i) {\n                var request = _requests[i];\n                if (request) {\n                    this._debug('Aborting request', request);\n                    if (!this.abortXHR(request.xhr)) {\n                        this.transportFailure(request.envelope, request, {reason: 'abort'});\n                    }\n                }\n            }\n            var metaConnectRequest = _metaConnectRequest;\n            if (metaConnectRequest) {\n                this._debug('Aborting /meta/connect request', metaConnectRequest);\n                if (!this.abortXHR(metaConnectRequest.xhr)) {\n                    this.transportFailure(metaConnectRequest.envelope, metaConnectRequest, {reason: 'abort'});\n                }\n            }\n            this.reset(true);\n        };\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _metaConnectRequest = null;\n            _requests = [];\n            _envelopes = [];\n        };\n\n        _self.abortXHR = function(xhr) {\n            if (xhr) {\n                try {\n                    var state = xhr.readyState;\n                    xhr.abort();\n                    return state !== window.XMLHttpRequest.UNSENT;\n                } catch (x) {\n                    this._debug(x);\n                }\n            }\n            return false;\n        };\n\n        _self.xhrStatus = function(xhr) {\n            if (xhr) {\n                try {\n                    return xhr.status;\n                } catch (x) {\n                    this._debug(x);\n                }\n            }\n            return -1;\n        };\n\n        return _self;\n    };\n\n\n    var LongPollingTransport = function() {\n        var _super = new RequestTransport();\n        var _self = Transport.derive(_super);\n        // By default, support cross domain\n        var _supportsCrossDomain = true;\n\n        _self.accept = function(version, crossDomain, url) {\n            return _supportsCrossDomain || !crossDomain;\n        };\n\n        _self.newXMLHttpRequest = function() {\n            return new window.XMLHttpRequest();\n        };\n\n        function _copyContext(xhr) {\n            try {\n                // Copy external context, to be used in other environments.\n                xhr.context = _self.context;\n            } catch (e) {\n                // May happen if XHR is wrapped by Object.seal(),\n                // Object.freeze(), or Object.preventExtensions().\n                this._debug('Could not copy transport context into XHR', e);\n            }\n        }\n\n        _self.xhrSend = function(packet) {\n            var xhr = _self.newXMLHttpRequest();\n            _copyContext(xhr);\n            xhr.withCredentials = true;\n            xhr.open('POST', packet.url, packet.sync !== true);\n            var headers = packet.headers;\n            if (headers) {\n                for (var headerName in headers) {\n                    if (headers.hasOwnProperty(headerName)) {\n                        xhr.setRequestHeader(headerName, headers[headerName]);\n                    }\n                }\n            }\n            xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n            xhr.onload = function() {\n                if (xhr.status === 200) {\n                    packet.onSuccess(xhr.responseText);\n                } else {\n                    packet.onError(xhr.statusText);\n                }\n            };\n            xhr.onabort = xhr.onerror = function() {\n                packet.onError(xhr.statusText);\n            };\n            xhr.send(packet.body);\n            return xhr;\n        };\n\n        _self.transportSend = function(envelope, request) {\n            this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelope);\n\n            var self = this;\n            try {\n                var sameStack = true;\n                request.xhr = this.xhrSend({\n                    transport: this,\n                    url: envelope.url,\n                    sync: envelope.sync,\n                    headers: this.getConfiguration().requestHeaders,\n                    body: JSON.stringify(envelope.messages),\n                    onSuccess: function(response) {\n                        self._debug('Transport', self.getType(), 'received response', response);\n                        var success = false;\n                        try {\n                            var received = self.convertToMessages(response);\n                            if (received.length === 0) {\n                                _supportsCrossDomain = false;\n                                self.transportFailure(envelope, request, {\n                                    httpCode: 204\n                                });\n                            } else {\n                                success = true;\n                                self.transportSuccess(envelope, request, received);\n                            }\n                        } catch (x) {\n                            self._debug(x);\n                            if (!success) {\n                                _supportsCrossDomain = false;\n                                var failure = {\n                                    exception: x\n                                };\n                                failure.httpCode = self.xhrStatus(request.xhr);\n                                self.transportFailure(envelope, request, failure);\n                            }\n                        }\n                    },\n                    onError: function(reason, exception) {\n                        self._debug('Transport', self.getType(), 'received error', reason, exception);\n                        _supportsCrossDomain = false;\n                        var failure = {\n                            reason: reason,\n                            exception: exception\n                        };\n                        failure.httpCode = self.xhrStatus(request.xhr);\n                        if (sameStack) {\n                            // Keep the semantic of calling response callbacks asynchronously after the request\n                            self.setTimeout(function() {\n                                self.transportFailure(envelope, request, failure);\n                            }, 0);\n                        } else {\n                            self.transportFailure(envelope, request, failure);\n                        }\n                    }\n                });\n                sameStack = false;\n            } catch (x) {\n                _supportsCrossDomain = false;\n                // Keep the semantic of calling response callbacks asynchronously after the request\n                this.setTimeout(function() {\n                    self.transportFailure(envelope, request, {\n                        exception: x\n                    });\n                }, 0);\n            }\n        };\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _supportsCrossDomain = true;\n        };\n\n        return _self;\n    };\n\n\n    var CallbackPollingTransport = function() {\n        var _super = new RequestTransport();\n        var _self = Transport.derive(_super);\n        var jsonp = 0;\n\n        _self.accept = function(version, crossDomain, url) {\n            return true;\n        };\n\n        _self.jsonpSend = function(packet) {\n            var head = document.getElementsByTagName('head')[0];\n            var script = document.createElement('script');\n\n            var callbackName = '_cometd_jsonp_' + jsonp++;\n            window[callbackName] = function(responseText) {\n                head.removeChild(script);\n                delete window[callbackName];\n                packet.onSuccess(responseText);\n            };\n\n            var url = packet.url;\n            url += url.indexOf('?') < 0 ? '?' : '&';\n            url += 'jsonp=' + callbackName;\n            url += '&message=' + encodeURIComponent(packet.body);\n            script.src = url;\n            script.async = packet.sync !== true;\n            script.type = 'application/javascript';\n            script.onerror = function(e) {\n                packet.onError('jsonp ' + e.type);\n            };\n            head.appendChild(script);\n        };\n\n        function _failTransportFn(envelope, request, x) {\n            var self = this;\n            return function() {\n                self.transportFailure(envelope, request, 'error', x);\n            };\n        }\n\n        _self.transportSend = function(envelope, request) {\n            var self = this;\n\n            // Microsoft Internet Explorer has a 2083 URL max length\n            // We must ensure that we stay within that length\n            var start = 0;\n            var length = envelope.messages.length;\n            var lengths = [];\n            while (length > 0) {\n                // Encode the messages because all brackets, quotes, commas, colons, etc\n                // present in the JSON will be URL encoded, taking many more characters\n                var json = JSON.stringify(envelope.messages.slice(start, start + length));\n                var urlLength = envelope.url.length + encodeURI(json).length;\n\n                var maxLength = this.getConfiguration().maxURILength;\n                if (urlLength > maxLength) {\n                    if (length === 1) {\n                        var x = 'Bayeux message too big (' + urlLength + ' bytes, max is ' + maxLength + ') ' +\n                            'for transport ' + this.getType();\n                        // Keep the semantic of calling response callbacks asynchronously after the request\n                        this.setTimeout(_failTransportFn.call(this, envelope, request, x), 0);\n                        return;\n                    }\n\n                    --length;\n                    continue;\n                }\n\n                lengths.push(length);\n                start += length;\n                length = envelope.messages.length - start;\n            }\n\n            // Here we are sure that the messages can be sent within the URL limit\n\n            var envelopeToSend = envelope;\n            if (lengths.length > 1) {\n                var begin = 0;\n                var end = lengths[0];\n                this._debug('Transport', this.getType(), 'split', envelope.messages.length, 'messages into', lengths.join(' + '));\n                envelopeToSend = this._mixin(false, {}, envelope);\n                envelopeToSend.messages = envelope.messages.slice(begin, end);\n                envelopeToSend.onSuccess = envelope.onSuccess;\n                envelopeToSend.onFailure = envelope.onFailure;\n\n                for (var i = 1; i < lengths.length; ++i) {\n                    var nextEnvelope = this._mixin(false, {}, envelope);\n                    begin = end;\n                    end += lengths[i];\n                    nextEnvelope.messages = envelope.messages.slice(begin, end);\n                    nextEnvelope.onSuccess = envelope.onSuccess;\n                    nextEnvelope.onFailure = envelope.onFailure;\n                    this.send(nextEnvelope, request.metaConnect);\n                }\n            }\n\n            this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelopeToSend);\n\n            try {\n                var sameStack = true;\n                this.jsonpSend({\n                    transport: this,\n                    url: envelopeToSend.url,\n                    sync: envelopeToSend.sync,\n                    headers: this.getConfiguration().requestHeaders,\n                    body: JSON.stringify(envelopeToSend.messages),\n                    onSuccess: function(responses) {\n                        var success = false;\n                        try {\n                            var received = self.convertToMessages(responses);\n                            if (received.length === 0) {\n                                self.transportFailure(envelopeToSend, request, {\n                                    httpCode: 204\n                                });\n                            } else {\n                                success = true;\n                                self.transportSuccess(envelopeToSend, request, received);\n                            }\n                        } catch (x) {\n                            self._debug(x);\n                            if (!success) {\n                                self.transportFailure(envelopeToSend, request, {\n                                    exception: x\n                                });\n                            }\n                        }\n                    },\n                    onError: function(reason, exception) {\n                        var failure = {\n                            reason: reason,\n                            exception: exception\n                        };\n                        if (sameStack) {\n                            // Keep the semantic of calling response callbacks asynchronously after the request\n                            self.setTimeout(function() {\n                                self.transportFailure(envelopeToSend, request, failure);\n                            }, 0);\n                        } else {\n                            self.transportFailure(envelopeToSend, request, failure);\n                        }\n                    }\n                });\n                sameStack = false;\n            } catch (xx) {\n                // Keep the semantic of calling response callbacks asynchronously after the request\n                this.setTimeout(function() {\n                    self.transportFailure(envelopeToSend, request, {\n                        exception: xx\n                    });\n                }, 0);\n            }\n        };\n\n        return _self;\n    };\n\n\n    var WebSocketTransport = function() {\n        var _super = new Transport();\n        var _self = Transport.derive(_super);\n        var _cometd;\n        // By default WebSocket is supported\n        var _webSocketSupported = true;\n        // Whether we were able to establish a WebSocket connection\n        var _webSocketConnected = false;\n        var _stickyReconnect = true;\n        // The context contains the envelopes that have been sent\n        // and the timeouts for the messages that have been sent.\n        var _context = null;\n        var _connecting = null;\n        var _connected = false;\n        var _successCallback = null;\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _webSocketSupported = true;\n            if (init) {\n                _webSocketConnected = false;\n            }\n            _stickyReconnect = true;\n            _context = null;\n            _connecting = null;\n            _connected = false;\n        };\n\n        function _forceClose(context, event) {\n            if (context) {\n                this.webSocketClose(context, event.code, event.reason);\n                // Force immediate failure of pending messages to trigger reconnect.\n                // This is needed because the server may not reply to our close()\n                // and therefore the onclose function is never called.\n                this.onClose(context, event);\n            }\n        }\n\n        function _sameContext(context) {\n            return context === _connecting || context === _context;\n        }\n\n        function _storeEnvelope(context, envelope, metaConnect) {\n            var messageIds = [];\n            for (var i = 0; i < envelope.messages.length; ++i) {\n                var message = envelope.messages[i];\n                if (message.id) {\n                    messageIds.push(message.id);\n                }\n            }\n            context.envelopes[messageIds.join(',')] = [envelope, metaConnect];\n            this._debug('Transport', this.getType(), 'stored envelope, envelopes', context.envelopes);\n        }\n\n        function _websocketConnect(context) {\n            // We may have multiple attempts to open a WebSocket\n            // connection, for example a /meta/connect request that\n            // may take time, along with a user-triggered publish.\n            // Early return if we are already connecting.\n            if (_connecting) {\n                return;\n            }\n\n            // Mangle the URL, changing the scheme from 'http' to 'ws'.\n            var url = _cometd.getURL().replace(/^http/, 'ws');\n            this._debug('Transport', this.getType(), 'connecting to URL', url);\n\n            try {\n                var protocol = _cometd.getConfiguration().protocol;\n                context.webSocket = protocol ? new window.WebSocket(url, protocol) : new window.WebSocket(url);\n                _connecting = context;\n            } catch (x) {\n                _webSocketSupported = false;\n                this._debug('Exception while creating WebSocket object', x);\n                throw x;\n            }\n\n            // By default use sticky reconnects.\n            _stickyReconnect = _cometd.getConfiguration().stickyReconnect !== false;\n\n            var self = this;\n            var connectTimeout = _cometd.getConfiguration().connectTimeout;\n            if (connectTimeout > 0) {\n                context.connectTimer = this.setTimeout(function() {\n                    _cometd._debug('Transport', self.getType(), 'timed out while connecting to URL', url, ':', connectTimeout, 'ms');\n                    // The connection was not opened, close anyway.\n                    _forceClose.call(self, context, {code: 1000, reason: 'Connect Timeout'});\n                }, connectTimeout);\n            }\n\n            var onopen = function() {\n                _cometd._debug('WebSocket onopen', context);\n                if (context.connectTimer) {\n                    self.clearTimeout(context.connectTimer);\n                }\n\n                if (_sameContext(context)) {\n                    _connecting = null;\n                    _context = context;\n                    _webSocketConnected = true;\n                    self.onOpen(context);\n                } else {\n                    // We have a valid connection already, close this one.\n                    _cometd._warn('Closing extra WebSocket connection', this, 'active connection', _context);\n                    _forceClose.call(self, context, {code: 1000, reason: 'Extra Connection'});\n                }\n            };\n\n            // This callback is invoked when the server sends the close frame.\n            // The close frame for a connection may arrive *after* another\n            // connection has been opened, so we must make sure that actions\n            // are performed only if it's the same connection.\n            var onclose = function(event) {\n                event = event || {code: 1000};\n                _cometd._debug('WebSocket onclose', context, event, 'connecting', _connecting, 'current', _context);\n\n                if (context.connectTimer) {\n                    self.clearTimeout(context.connectTimer);\n                }\n\n                self.onClose(context, event);\n            };\n\n            var onmessage = function(wsMessage) {\n                _cometd._debug('WebSocket onmessage', wsMessage, context);\n                self.onMessage(context, wsMessage);\n            };\n\n            context.webSocket.onopen = onopen;\n            context.webSocket.onclose = onclose;\n            context.webSocket.onerror = function() {\n                // Clients should call onclose(), but if they do not we do it here for safety.\n                onclose({code: 1000, reason: 'Error'});\n            };\n            context.webSocket.onmessage = onmessage;\n\n            this._debug('Transport', this.getType(), 'configured callbacks on', context);\n        }\n\n        function _webSocketSend(context, envelope, metaConnect) {\n            var json = JSON.stringify(envelope.messages);\n            context.webSocket.send(json);\n            this._debug('Transport', this.getType(), 'sent', envelope, '/meta/connect =', metaConnect);\n\n            // Manage the timeout waiting for the response.\n            var maxDelay = this.getConfiguration().maxNetworkDelay;\n            var delay = maxDelay;\n            if (metaConnect) {\n                delay += this.getAdvice().timeout;\n                _connected = true;\n            }\n\n            var self = this;\n            var messageIds = [];\n            for (var i = 0; i < envelope.messages.length; ++i) {\n                (function() {\n                    var message = envelope.messages[i];\n                    if (message.id) {\n                        messageIds.push(message.id);\n                        context.timeouts[message.id] = self.setTimeout(function() {\n                            _cometd._debug('Transport', self.getType(), 'timing out message', message.id, 'after', delay, 'on', context);\n                            _forceClose.call(self, context, {code: 1000, reason: 'Message Timeout'});\n                        }, delay);\n                    }\n                })();\n            }\n\n            this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for messages', messageIds, 'maxNetworkDelay', maxDelay, ', timeouts:', context.timeouts);\n        }\n\n        _self._notifySuccess = function(fn, messages) {\n            fn.call(this, messages);\n        };\n\n        _self._notifyFailure = function(fn, context, messages, failure) {\n            fn.call(this, context, messages, failure);\n        };\n\n        function _send(context, envelope, metaConnect) {\n            try {\n                if (context === null) {\n                    context = _connecting || {\n                        envelopes: {},\n                        timeouts: {}\n                    };\n                    _storeEnvelope.call(this, context, envelope, metaConnect);\n                    _websocketConnect.call(this, context);\n                } else {\n                    _storeEnvelope.call(this, context, envelope, metaConnect);\n                    _webSocketSend.call(this, context, envelope, metaConnect);\n                }\n            } catch (x) {\n                // Keep the semantic of calling response callbacks asynchronously after the request.\n                var self = this;\n                this.setTimeout(function() {\n                    _forceClose.call(self, context, {\n                        code: 1000,\n                        reason: 'Exception',\n                        exception: x\n                    });\n                }, 0);\n            }\n        }\n\n        _self.onOpen = function(context) {\n            var envelopes = context.envelopes;\n            this._debug('Transport', this.getType(), 'opened', context, 'pending messages', envelopes);\n            for (var key in envelopes) {\n                if (envelopes.hasOwnProperty(key)) {\n                    var element = envelopes[key];\n                    var envelope = element[0];\n                    var metaConnect = element[1];\n                    // Store the success callback, which is independent from the envelope,\n                    // so that it can be used to notify arrival of messages.\n                    _successCallback = envelope.onSuccess;\n                    _webSocketSend.call(this, context, envelope, metaConnect);\n                }\n            }\n        };\n\n        _self.onMessage = function(context, wsMessage) {\n            this._debug('Transport', this.getType(), 'received websocket message', wsMessage, context);\n\n            var close = false;\n            var messages = this.convertToMessages(wsMessage.data);\n            var messageIds = [];\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n\n                // Detect if the message is a response to a request we made.\n                // If it's a meta message, for sure it's a response; otherwise it's\n                // a publish message and publish responses don't have the data field.\n                if (/^\\/meta\\//.test(message.channel) || message.data === undefined) {\n                    if (message.id) {\n                        messageIds.push(message.id);\n\n                        var timeout = context.timeouts[message.id];\n                        if (timeout) {\n                            this.clearTimeout(timeout);\n                            delete context.timeouts[message.id];\n                            this._debug('Transport', this.getType(), 'removed timeout for message', message.id, ', timeouts', context.timeouts);\n                        }\n                    }\n                }\n\n                if ('/meta/connect' === message.channel) {\n                    _connected = false;\n                }\n                if ('/meta/disconnect' === message.channel && !_connected) {\n                    close = true;\n                }\n            }\n\n            // Remove the envelope corresponding to the messages.\n            var removed = false;\n            var envelopes = context.envelopes;\n            for (var j = 0; j < messageIds.length; ++j) {\n                var id = messageIds[j];\n                for (var key in envelopes) {\n                    if (envelopes.hasOwnProperty(key)) {\n                        var ids = key.split(',');\n                        var index = Utils.inArray(id, ids);\n                        if (index >= 0) {\n                            removed = true;\n                            ids.splice(index, 1);\n                            var envelope = envelopes[key][0];\n                            var metaConnect = envelopes[key][1];\n                            delete envelopes[key];\n                            if (ids.length > 0) {\n                                envelopes[ids.join(',')] = [envelope, metaConnect];\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (removed) {\n                this._debug('Transport', this.getType(), 'removed envelope, envelopes', envelopes);\n            }\n\n            this._notifySuccess(_successCallback, messages);\n\n            if (close) {\n                this.webSocketClose(context, 1000, 'Disconnect');\n            }\n        };\n\n        _self.onClose = function(context, event) {\n            this._debug('Transport', this.getType(), 'closed', context, event);\n\n            if (_sameContext(context)) {\n                // Remember if we were able to connect.\n                // This close event could be due to server shutdown,\n                // and if it restarts we want to try websocket again.\n                _webSocketSupported = _stickyReconnect && _webSocketConnected;\n                _connecting = null;\n                _context = null;\n            }\n\n            var timeouts = context.timeouts;\n            context.timeouts = {};\n            for (var id in timeouts) {\n                if (timeouts.hasOwnProperty(id)) {\n                    this.clearTimeout(timeouts[id]);\n                }\n            }\n\n            var envelopes = context.envelopes;\n            context.envelopes = {};\n            for (var key in envelopes) {\n                if (envelopes.hasOwnProperty(key)) {\n                    var envelope = envelopes[key][0];\n                    var metaConnect = envelopes[key][1];\n                    if (metaConnect) {\n                        _connected = false;\n                    }\n                    var failure = {\n                        websocketCode: event.code,\n                        reason: event.reason\n                    };\n                    if (event.exception) {\n                        failure.exception = event.exception;\n                    }\n                    this._notifyFailure(envelope.onFailure, context, envelope.messages, failure);\n                }\n            }\n        };\n\n        _self.registered = function(type, cometd) {\n            _super.registered(type, cometd);\n            _cometd = cometd;\n        };\n\n        _self.accept = function(version, crossDomain, url) {\n            this._debug('Transport', this.getType(), 'accept, supported:', _webSocketSupported);\n            // Using !! to return a boolean (and not the WebSocket object).\n            return _webSocketSupported && !!window.WebSocket && _cometd.websocketEnabled !== false;\n        };\n\n        _self.send = function(envelope, metaConnect) {\n            this._debug('Transport', this.getType(), 'sending', envelope, '/meta/connect =', metaConnect);\n            _send.call(this, _context, envelope, metaConnect);\n        };\n\n        _self.webSocketClose = function(context, code, reason) {\n            try {\n                if (context.webSocket) {\n                    context.webSocket.close(code, reason);\n                }\n            } catch (x) {\n                this._debug(x);\n            }\n        };\n\n        _self.abort = function() {\n            _super.abort();\n            _forceClose.call(this, _context, {code: 1000, reason: 'Abort'});\n            this.reset(true);\n        };\n\n        return _self;\n    };\n\n\n    /**\n     * The constructor for a CometD object, identified by an optional name.\n     * The default name is the string 'default'.\n     * @param name the optional name of this cometd object\n     */\n    var CometD = function(name) {\n        var _scheduler = new Scheduler();\n        var _cometd = this;\n        var _name = name || 'default';\n        var _crossDomain = false;\n        var _transports = new TransportRegistry();\n        var _transport;\n        var _status = 'disconnected';\n        var _messageId = 0;\n        var _clientId = null;\n        var _batch = 0;\n        var _messageQueue = [];\n        var _internalBatch = false;\n        var _listenerId = 0;\n        var _listeners = {};\n        var _backoff = 0;\n        var _scheduledSend = null;\n        var _extensions = [];\n        var _advice = {};\n        var _handshakeProps;\n        var _handshakeCallback;\n        var _callbacks = {};\n        var _remoteCalls = {};\n        var _reestablish = false;\n        var _connected = false;\n        var _unconnectTime = 0;\n        var _handshakeMessages = 0;\n        var _metaConnect = null;\n        var _config = {\n            useWorkerScheduler: true,\n            protocol: null,\n            stickyReconnect: true,\n            connectTimeout: 0,\n            maxConnections: 2,\n            backoffIncrement: 1000,\n            maxBackoff: 60000,\n            logLevel: 'info',\n            maxNetworkDelay: 10000,\n            requestHeaders: {},\n            appendMessageTypeToURL: true,\n            autoBatch: false,\n            urls: {},\n            maxURILength: 2000,\n            advice: {\n                timeout: 60000,\n                interval: 0,\n                reconnect: undefined,\n                maxInterval: 0\n            }\n        };\n\n        function _fieldValue(object, name) {\n            try {\n                return object[name];\n            } catch (x) {\n                return undefined;\n            }\n        }\n\n        /**\n         * Mixes in the given objects into the target object by copying the properties.\n         * @param deep if the copy must be deep\n         * @param target the target object\n         * @param objects the objects whose properties are copied into the target\n         */\n        this._mixin = function(deep, target, objects) {\n            var result = target || {};\n\n            // Skip first 2 parameters (deep and target), and loop over the others\n            for (var i = 2; i < arguments.length; ++i) {\n                var object = arguments[i];\n\n                if (object === undefined || object === null) {\n                    continue;\n                }\n\n                for (var propName in object) {\n                    if (object.hasOwnProperty(propName)) {\n                        var prop = _fieldValue(object, propName);\n                        var targ = _fieldValue(result, propName);\n\n                        // Avoid infinite loops\n                        if (prop === target) {\n                            continue;\n                        }\n                        // Do not mixin undefined values\n                        if (prop === undefined) {\n                            continue;\n                        }\n\n                        if (deep && typeof prop === 'object' && prop !== null) {\n                            if (prop instanceof Array) {\n                                result[propName] = this._mixin(deep, targ instanceof Array ? targ : [], prop);\n                            } else {\n                                var source = typeof targ === 'object' && !(targ instanceof Array) ? targ : {};\n                                result[propName] = this._mixin(deep, source, prop);\n                            }\n                        } else {\n                            result[propName] = prop;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        };\n\n        function _isString(value) {\n            return Utils.isString(value);\n        }\n\n        function _isFunction(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return typeof value === 'function';\n        }\n\n        function _zeroPad(value, length) {\n            var result = '';\n            while (--length > 0) {\n                if (value >= Math.pow(10, length)) {\n                    break;\n                }\n                result += '0';\n            }\n            result += value;\n            return result;\n        }\n\n        function _log(level, args) {\n            if (window.console) {\n                var logger = window.console[level];\n                if (_isFunction(logger)) {\n                    var now = new Date();\n                    [].splice.call(args, 0, 0, _zeroPad(now.getHours(), 2) + ':' + _zeroPad(now.getMinutes(), 2) + ':' +\n                        _zeroPad(now.getSeconds(), 2) + '.' + _zeroPad(now.getMilliseconds(), 3));\n                    logger.apply(window.console, args);\n                }\n            }\n        }\n\n        this._warn = function() {\n            _log('warn', arguments);\n        };\n\n        this._info = function() {\n            if (_config.logLevel !== 'warn') {\n                _log('info', arguments);\n            }\n        };\n\n        this._debug = function() {\n            if (_config.logLevel === 'debug') {\n                _log('debug', arguments);\n            }\n        };\n\n        function _splitURL(url) {\n            // [1] = protocol://,\n            // [2] = host:port,\n            // [3] = host,\n            // [4] = IPv6_host,\n            // [5] = IPv4_host,\n            // [6] = :port,\n            // [7] = port,\n            // [8] = uri,\n            // [9] = rest (query / fragment)\n            return new RegExp('(^https?://)?(((\\\\[[^\\\\]]+])|([^:/?#]+))(:(\\\\d+))?)?([^?#]*)(.*)?').exec(url);\n        }\n\n        /**\n         * Returns whether the given hostAndPort is cross domain.\n         * The default implementation checks against window.location.host\n         * but this function can be overridden to make it work in non-browser\n         * environments.\n         *\n         * @param hostAndPort the host and port in format host:port\n         * @return whether the given hostAndPort is cross domain\n         */\n        this._isCrossDomain = function(hostAndPort) {\n            if (window.location && window.location.host) {\n                if (hostAndPort) {\n                    return hostAndPort !== window.location.host;\n                }\n            }\n            return false;\n        };\n\n        function _configure(configuration) {\n            _cometd._debug('Configuring cometd object with', configuration);\n            // Support old style param, where only the Bayeux server URL was passed.\n            if (_isString(configuration)) {\n                configuration = {\n                    url: configuration\n                };\n            }\n            if (!configuration) {\n                configuration = {};\n            }\n\n            _config = _cometd._mixin(false, _config, configuration);\n\n            var url = _cometd.getURL();\n            if (!url) {\n                throw 'Missing required configuration parameter \\'url\\' specifying the Bayeux server URL';\n            }\n\n            // Check if we're cross domain.\n            var urlParts = _splitURL(url);\n            var hostAndPort = urlParts[2];\n            var uri = urlParts[8];\n            var afterURI = urlParts[9];\n            _crossDomain = _cometd._isCrossDomain(hostAndPort);\n\n            // Check if appending extra path is supported.\n            if (_config.appendMessageTypeToURL) {\n                if (afterURI !== undefined && afterURI.length > 0) {\n                    _cometd._info('Appending message type to URI ' + uri + afterURI + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                    _config.appendMessageTypeToURL = false;\n                } else {\n                    var uriSegments = uri.split('/');\n                    var lastSegmentIndex = uriSegments.length - 1;\n                    if (uri.match(/\\/$/)) {\n                        lastSegmentIndex -= 1;\n                    }\n                    if (uriSegments[lastSegmentIndex].indexOf('.') >= 0) {\n                        // Very likely the CometD servlet's URL pattern is mapped to an extension, such as *.cometd\n                        // It will be difficult to add the extra path in this case\n                        _cometd._info('Appending message type to URI ' + uri + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                        _config.appendMessageTypeToURL = false;\n                    }\n                }\n            }\n\n            if (window.Worker && window.Blob && window.URL && _config.useWorkerScheduler) {\n                var code = WorkerScheduler.toString();\n                // Remove the function declaration, the opening brace and the closing brace.\n                code = code.substring(code.indexOf('{') + 1, code.lastIndexOf('}'));\n                var blob = new window.Blob([code], {\n                    type: 'application/json'\n                });\n                var blobURL = window.URL.createObjectURL(blob);\n                var worker = new window.Worker(blobURL);\n                _scheduler.setTimeout = function(funktion, delay) {\n                    var id = _scheduler.register(funktion);\n                    worker.postMessage({\n                        id: id,\n                        type: 'setTimeout',\n                        delay: delay\n                    });\n                    return id;\n                };\n                _scheduler.clearTimeout = function(id) {\n                    _scheduler.unregister(id);\n                    worker.postMessage({\n                        id: id,\n                        type: 'clearTimeout'\n                    });\n                };\n                worker.onmessage = function(e) {\n                    var id = e.data.id;\n                    var funktion = _scheduler.unregister(id);\n                    if (funktion) {\n                        funktion();\n                    }\n                };\n            }\n        }\n\n        function _removeListener(subscription) {\n            if (subscription) {\n                var subscriptions = _listeners[subscription.channel];\n                if (subscriptions && subscriptions[subscription.id]) {\n                    delete subscriptions[subscription.id];\n                    _cometd._debug('Removed', subscription.listener ? 'listener' : 'subscription', subscription);\n                }\n            }\n        }\n\n        function _removeSubscription(subscription) {\n            if (subscription && !subscription.listener) {\n                _removeListener(subscription);\n            }\n        }\n\n        function _clearSubscriptions() {\n            for (var channel in _listeners) {\n                if (_listeners.hasOwnProperty(channel)) {\n                    var subscriptions = _listeners[channel];\n                    if (subscriptions) {\n                        for (var id in subscriptions) {\n                            if (subscriptions.hasOwnProperty(id)) {\n                                _removeSubscription(subscriptions[id]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function _setStatus(newStatus) {\n            if (_status !== newStatus) {\n                _cometd._debug('Status', _status, '->', newStatus);\n                _status = newStatus;\n            }\n        }\n\n        function _isDisconnected() {\n            return _status === 'disconnecting' || _status === 'disconnected';\n        }\n\n        function _nextMessageId() {\n            var result = ++_messageId;\n            return '' + result;\n        }\n\n        function _applyExtension(scope, callback, name, message, outgoing) {\n            try {\n                return callback.call(scope, message);\n            } catch (x) {\n                var handler = _cometd.onExtensionException;\n                if (_isFunction(handler)) {\n                    _cometd._debug('Invoking extension exception handler', name, x);\n                    try {\n                        handler.call(_cometd, x, name, outgoing, message);\n                    } catch (xx) {\n                        _cometd._info('Exception during execution of extension exception handler', name, xx);\n                    }\n                } else {\n                    _cometd._info('Exception during execution of extension', name, x);\n                }\n                return message;\n            }\n        }\n\n        function _applyIncomingExtensions(message) {\n            for (var i = 0; i < _extensions.length; ++i) {\n                if (message === undefined || message === null) {\n                    break;\n                }\n\n                var extension = _extensions[i];\n                var callback = extension.extension.incoming;\n                if (_isFunction(callback)) {\n                    var result = _applyExtension(extension.extension, callback, extension.name, message, false);\n                    message = result === undefined ? message : result;\n                }\n            }\n            return message;\n        }\n\n        function _applyOutgoingExtensions(message) {\n            for (var i = _extensions.length - 1; i >= 0; --i) {\n                if (message === undefined || message === null) {\n                    break;\n                }\n\n                var extension = _extensions[i];\n                var callback = extension.extension.outgoing;\n                if (_isFunction(callback)) {\n                    var result = _applyExtension(extension.extension, callback, extension.name, message, true);\n                    message = result === undefined ? message : result;\n                }\n            }\n            return message;\n        }\n\n        function _notify(channel, message) {\n            var subscriptions = _listeners[channel];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        var subscription = subscriptions[id];\n                        // Subscriptions may come and go, so the array may have 'holes'\n                        if (subscription) {\n                            try {\n                                subscription.callback.call(subscription.scope, message);\n                            } catch (x) {\n                                var handler = _cometd.onListenerException;\n                                if (_isFunction(handler)) {\n                                    _cometd._debug('Invoking listener exception handler', subscription, x);\n                                    try {\n                                        handler.call(_cometd, x, subscription, subscription.listener, message);\n                                    } catch (xx) {\n                                        _cometd._info('Exception during execution of listener exception handler', subscription, xx);\n                                    }\n                                } else {\n                                    _cometd._info('Exception during execution of listener', subscription, message, x);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function _notifyListeners(channel, message) {\n            // Notify direct listeners\n            _notify(channel, message);\n\n            // Notify the globbing listeners\n            var channelParts = channel.split('/');\n            var last = channelParts.length - 1;\n            for (var i = last; i > 0; --i) {\n                var channelPart = channelParts.slice(0, i).join('/') + '/*';\n                // We don't want to notify /foo/* if the channel is /foo/bar/baz,\n                // so we stop at the first non recursive globbing\n                if (i === last) {\n                    _notify(channelPart, message);\n                }\n                // Add the recursive globber and notify\n                channelPart += '*';\n                _notify(channelPart, message);\n            }\n        }\n\n        function _cancelDelayedSend() {\n            if (_scheduledSend !== null) {\n                _cometd.clearTimeout(_scheduledSend);\n            }\n            _scheduledSend = null;\n        }\n\n        function _delayedSend(operation, delay) {\n            _cancelDelayedSend();\n            var time = _advice.interval + delay;\n            _cometd._debug('Function scheduled in', time, 'ms, interval =', _advice.interval, 'backoff =', _backoff, operation);\n            _scheduledSend = _cometd.setTimeout(operation, time);\n        }\n\n        // Needed to break cyclic dependencies between function definitions\n        var _handleMessages;\n        var _handleFailure;\n\n        /**\n         * Delivers the messages to the CometD server\n         * @param messages the array of messages to send\n         * @param metaConnect true if this send is on /meta/connect\n         * @param extraPath an extra path to append to the Bayeux server URL\n         */\n        function _send(messages, metaConnect, extraPath) {\n            // We must be sure that the messages have a clientId.\n            // This is not guaranteed since the handshake may take time to return\n            // (and hence the clientId is not known yet) and the application\n            // may create other messages.\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n                var messageId = message.id;\n\n                if (_clientId) {\n                    message.clientId = _clientId;\n                }\n\n                message = _applyOutgoingExtensions(message);\n                if (message !== undefined && message !== null) {\n                    // Extensions may have modified the message id, but we need to own it.\n                    message.id = messageId;\n                    messages[i] = message;\n                } else {\n                    delete _callbacks[messageId];\n                    messages.splice(i--, 1);\n                }\n            }\n\n            if (messages.length === 0) {\n                return;\n            }\n\n            if (metaConnect) {\n                _metaConnect = messages[0];\n            }\n\n            var url = _cometd.getURL();\n            if (_config.appendMessageTypeToURL) {\n                // If url does not end with '/', then append it\n                if (!url.match(/\\/$/)) {\n                    url = url + '/';\n                }\n                if (extraPath) {\n                    url = url + extraPath;\n                }\n            }\n\n            var envelope = {\n                url: url,\n                sync: false,\n                messages: messages,\n                onSuccess: function(rcvdMessages) {\n                    try {\n                        _handleMessages.call(_cometd, rcvdMessages);\n                    } catch (x) {\n                        _cometd._info('Exception during handling of messages', x);\n                    }\n                },\n                onFailure: function(conduit, messages, failure) {\n                    try {\n                        var transport = _cometd.getTransport();\n                        failure.connectionType = transport ? transport.getType() : \"unknown\";\n                        _handleFailure.call(_cometd, conduit, messages, failure);\n                    } catch (x) {\n                        _cometd._info('Exception during handling of failure', x);\n                    }\n                }\n            };\n            _cometd._debug('Send', envelope);\n            _transport.send(envelope, metaConnect);\n        }\n\n        function _queueSend(message) {\n            if (_batch > 0 || _internalBatch === true) {\n                _messageQueue.push(message);\n            } else {\n                _send([message], false);\n            }\n        }\n\n        /**\n         * Sends a complete bayeux message.\n         * This method is exposed as a public so that extensions may use it\n         * to send bayeux message directly, for example in case of re-sending\n         * messages that have already been sent but that for some reason must\n         * be resent.\n         */\n        this.send = _queueSend;\n\n        function _resetBackoff() {\n            _backoff = 0;\n        }\n\n        function _increaseBackoff() {\n            if (_backoff < _config.maxBackoff) {\n                _backoff += _config.backoffIncrement;\n            }\n            return _backoff;\n        }\n\n        /**\n         * Starts a the batch of messages to be sent in a single request.\n         * @see #_endBatch(sendMessages)\n         */\n        function _startBatch() {\n            ++_batch;\n            _cometd._debug('Starting batch, depth', _batch);\n        }\n\n        function _flushBatch() {\n            var messages = _messageQueue;\n            _messageQueue = [];\n            if (messages.length > 0) {\n                _send(messages, false);\n            }\n        }\n\n        /**\n         * Ends the batch of messages to be sent in a single request,\n         * optionally sending messages present in the message queue depending\n         * on the given argument.\n         * @see #_startBatch()\n         */\n        function _endBatch() {\n            --_batch;\n            _cometd._debug('Ending batch, depth', _batch);\n            if (_batch < 0) {\n                throw 'Calls to startBatch() and endBatch() are not paired';\n            }\n\n            if (_batch === 0 && !_isDisconnected() && !_internalBatch) {\n                _flushBatch();\n            }\n        }\n\n        /**\n         * Sends the connect message\n         */\n        function _connect() {\n            if (!_isDisconnected()) {\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/connect',\n                    connectionType: _transport.getType()\n                };\n\n                // In case of reload or temporary loss of connection\n                // we want the next successful connect to return immediately\n                // instead of being held by the server, so that connect listeners\n                // can be notified that the connection has been re-established\n                if (!_connected) {\n                    bayeuxMessage.advice = {\n                        timeout: 0\n                    };\n                }\n\n                _setStatus('connecting');\n                _cometd._debug('Connect sent', bayeuxMessage);\n                _send([bayeuxMessage], true, 'connect');\n                _setStatus('connected');\n            }\n        }\n\n        function _delayedConnect(delay) {\n            _setStatus('connecting');\n            _delayedSend(function() {\n                _connect();\n            }, delay);\n        }\n\n        function _updateAdvice(newAdvice) {\n            if (newAdvice) {\n                _advice = _cometd._mixin(false, {}, _config.advice, newAdvice);\n                _cometd._debug('New advice', _advice);\n            }\n        }\n\n        function _disconnect(abort) {\n            _cancelDelayedSend();\n            if (abort && _transport) {\n                _transport.abort();\n            }\n            _crossDomain = false;\n            _transport = null;\n            _setStatus('disconnected');\n            _clientId = null;\n            _batch = 0;\n            _resetBackoff();\n            _reestablish = false;\n            _connected = false;\n            _unconnectTime = 0;\n            _metaConnect = null;\n\n            // Fail any existing queued message\n            if (_messageQueue.length > 0) {\n                var messages = _messageQueue;\n                _messageQueue = [];\n                _handleFailure.call(_cometd, undefined, messages, {\n                    reason: 'Disconnected'\n                });\n            }\n        }\n\n        function _notifyTransportException(oldTransport, newTransport, failure) {\n            var handler = _cometd.onTransportException;\n            if (_isFunction(handler)) {\n                _cometd._debug('Invoking transport exception handler', oldTransport, newTransport, failure);\n                try {\n                    handler.call(_cometd, failure, oldTransport, newTransport);\n                } catch (x) {\n                    _cometd._info('Exception during execution of transport exception handler', x);\n                }\n            }\n        }\n\n        /**\n         * Sends the initial handshake message\n         */\n        function _handshake(handshakeProps, handshakeCallback) {\n            if (_isFunction(handshakeProps)) {\n                handshakeCallback = handshakeProps;\n                handshakeProps = undefined;\n            }\n\n            _clientId = null;\n\n            _clearSubscriptions();\n\n            // Reset the transports if we're not retrying the handshake\n            if (_isDisconnected()) {\n                _transports.reset(true);\n            }\n\n            // Reset the advice.\n            _updateAdvice({});\n\n            _batch = 0;\n\n            // Mark the start of an internal batch.\n            // This is needed because handshake and connect are async.\n            // It may happen that the application calls init() then subscribe()\n            // and the subscribe message is sent before the connect message, if\n            // the subscribe message is not held until the connect message is sent.\n            // So here we start a batch to hold temporarily any message until\n            // the connection is fully established.\n            _internalBatch = true;\n\n            // Save the properties provided by the user, so that\n            // we can reuse them during automatic re-handshake\n            _handshakeProps = handshakeProps;\n            _handshakeCallback = handshakeCallback;\n\n            var version = '1.0';\n\n            // Figure out the transports to send to the server\n            var url = _cometd.getURL();\n            var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                version: version,\n                minimumVersion: version,\n                channel: '/meta/handshake',\n                supportedConnectionTypes: transportTypes,\n                advice: {\n                    timeout: _advice.timeout,\n                    interval: _advice.interval\n                }\n            };\n            // Do not allow the user to override important fields.\n            var message = _cometd._mixin(false, {}, _handshakeProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, handshakeCallback);\n\n            // Pick up the first available transport as initial transport\n            // since we don't know if the server supports it\n            if (!_transport) {\n                _transport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n                if (!_transport) {\n                    var failure = 'Could not find initial transport among: ' + _transports.getTransportTypes();\n                    _cometd._warn(failure);\n                    throw failure;\n                }\n            }\n\n            _cometd._debug('Initial transport is', _transport.getType());\n\n            // We started a batch to hold the application messages,\n            // so here we must bypass it and send immediately.\n            _setStatus('handshaking');\n            _cometd._debug('Handshake sent', message);\n            _send([message], false, 'handshake');\n        }\n\n        function _delayedHandshake(delay) {\n            _setStatus('handshaking');\n\n            // We will call _handshake() which will reset _clientId, but we want to avoid\n            // that between the end of this method and the call to _handshake() someone may\n            // call publish() (or other methods that call _queueSend()).\n            _internalBatch = true;\n\n            _delayedSend(function() {\n                _handshake(_handshakeProps, _handshakeCallback);\n            }, delay);\n        }\n\n        function _notifyCallback(callback, message) {\n            try {\n                callback.call(_cometd, message);\n            } catch (x) {\n                var handler = _cometd.onCallbackException;\n                if (_isFunction(handler)) {\n                    _cometd._debug('Invoking callback exception handler', x);\n                    try {\n                        handler.call(_cometd, x, message);\n                    } catch (xx) {\n                        _cometd._info('Exception during execution of callback exception handler', xx);\n                    }\n                } else {\n                    _cometd._info('Exception during execution of message callback', x);\n                }\n            }\n        }\n\n        this._getCallback = function(messageId) {\n            return _callbacks[messageId];\n        };\n\n        this._putCallback = function(messageId, callback) {\n            var result = this._getCallback(messageId);\n            if (_isFunction(callback)) {\n                _callbacks[messageId] = callback;\n            }\n            return result;\n        };\n\n        function _handleCallback(message) {\n            var callback = _cometd._getCallback([message.id]);\n            if (_isFunction(callback)) {\n                delete _callbacks[message.id];\n                _notifyCallback(callback, message);\n            }\n        }\n\n        function _handleRemoteCall(message) {\n            var context = _remoteCalls[message.id];\n            delete _remoteCalls[message.id];\n            if (context) {\n                _cometd._debug('Handling remote call response for', message, 'with context', context);\n\n                // Clear the timeout, if present.\n                var timeout = context.timeout;\n                if (timeout) {\n                    _cometd.clearTimeout(timeout);\n                }\n\n                var callback = context.callback;\n                if (_isFunction(callback)) {\n                    _notifyCallback(callback, message);\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        this.onTransportFailure = function(message, failureInfo, failureHandler) {\n            this._debug('Transport failure', failureInfo, 'for', message);\n\n            var transports = this.getTransportRegistry();\n            var url = this.getURL();\n            var crossDomain = this._isCrossDomain(_splitURL(url)[2]);\n            var version = '1.0';\n            var transportTypes = transports.findTransportTypes(version, crossDomain, url);\n\n            if (failureInfo.action === 'none') {\n                if (message.channel === '/meta/handshake') {\n                    if (!failureInfo.transport) {\n                        var failure = 'Could not negotiate transport, client=[' + transportTypes + '], server=[' + message.supportedConnectionTypes + ']';\n                        this._warn(failure);\n                        _notifyTransportException(_transport.getType(), null, {\n                            reason: failure,\n                            connectionType: _transport.getType(),\n                            transport: _transport\n                        });\n                    }\n                }\n            } else {\n                failureInfo.delay = this.getBackoffPeriod();\n                // Different logic depending on whether we are handshaking or connecting.\n                if (message.channel === '/meta/handshake') {\n                    if (!failureInfo.transport) {\n                        // The transport is invalid, try to negotiate again.\n                        var oldTransportType = _transport ? _transport.getType() : null;\n                        var newTransport = transports.negotiateTransport(transportTypes, version, crossDomain, url);\n                        if (!newTransport) {\n                            this._warn('Could not negotiate transport, client=[' + transportTypes + ']');\n                            _notifyTransportException(oldTransportType, null, message.failure);\n                            failureInfo.action = 'none';\n                        } else {\n                            var newTransportType = newTransport.getType();\n                            this._debug('Transport', oldTransportType, '->', newTransportType);\n                            _notifyTransportException(oldTransportType, newTransportType, message.failure);\n                            failureInfo.action = 'handshake';\n                            failureInfo.transport = newTransport;\n                        }\n                    }\n\n                    if (failureInfo.action !== 'none') {\n                        this.increaseBackoffPeriod();\n                    }\n                } else {\n                    var now = new Date().getTime();\n\n                    if (_unconnectTime === 0) {\n                        _unconnectTime = now;\n                    }\n\n                    if (failureInfo.action === 'retry') {\n                        failureInfo.delay = this.increaseBackoffPeriod();\n                        // Check whether we may switch to handshaking.\n                        var maxInterval = _advice.maxInterval;\n                        if (maxInterval > 0) {\n                            var expiration = _advice.timeout + _advice.interval + maxInterval;\n                            var unconnected = now - _unconnectTime;\n                            if (unconnected + _backoff > expiration) {\n                                failureInfo.action = 'handshake';\n                            }\n                        }\n                    }\n\n                    if (failureInfo.action === 'handshake') {\n                        failureInfo.delay = 0;\n                        transports.reset(false);\n                        this.resetBackoffPeriod();\n                    }\n                }\n            }\n\n            failureHandler.call(_cometd, failureInfo);\n        };\n\n        function _handleTransportFailure(failureInfo) {\n            _cometd._debug('Transport failure handling', failureInfo);\n\n            if (failureInfo.transport) {\n                _transport = failureInfo.transport;\n            }\n\n            if (failureInfo.url) {\n                _transport.setURL(failureInfo.url);\n            }\n\n            var action = failureInfo.action;\n            var delay = failureInfo.delay || 0;\n            switch (action) {\n                case 'handshake':\n                    _delayedHandshake(delay);\n                    break;\n                case 'retry':\n                    _delayedConnect(delay);\n                    break;\n                case 'none':\n                    _disconnect(true);\n                    break;\n                default:\n                    throw 'Unknown action ' + action;\n            }\n        }\n\n        function _failHandshake(message, failureInfo) {\n            _handleCallback(message);\n            _notifyListeners('/meta/handshake', message);\n            _notifyListeners('/meta/unsuccessful', message);\n\n            // The listeners may have disconnected.\n            if (_isDisconnected()) {\n                failureInfo.action = 'none';\n            }\n\n            _cometd.onTransportFailure.call(_cometd, message, failureInfo, _handleTransportFailure);\n        }\n\n        function _handshakeResponse(message) {\n            var url = _cometd.getURL();\n            if (message.successful) {\n                var crossDomain = _cometd._isCrossDomain(_splitURL(url)[2]);\n                var newTransport = _transports.negotiateTransport(message.supportedConnectionTypes, message.version, crossDomain, url);\n                if (newTransport === null) {\n                    message.successful = false;\n                    _failHandshake(message, {\n                        cause: 'negotiation',\n                        action: 'none',\n                        transport: null\n                    });\n                    return;\n                } else if (_transport !== newTransport) {\n                    _cometd._debug('Transport', _transport.getType(), '->', newTransport.getType());\n                    _transport = newTransport;\n                }\n\n                _clientId = message.clientId;\n\n                // End the internal batch and allow held messages from the application\n                // to go to the server (see _handshake() where we start the internal batch).\n                _internalBatch = false;\n                _flushBatch();\n\n                // Here the new transport is in place, as well as the clientId, so\n                // the listeners can perform a publish() if they want.\n                // Notify the listeners before the connect below.\n                message.reestablish = _reestablish;\n                _reestablish = true;\n\n                _handleCallback(message);\n                _notifyListeners('/meta/handshake', message);\n\n                _handshakeMessages = message['x-messages'] || 0;\n\n                var action = _isDisconnected() ? 'none' : _advice.reconnect || 'retry';\n                switch (action) {\n                    case 'retry':\n                        _resetBackoff();\n                        if (_handshakeMessages === 0) {\n                            _delayedConnect(0);\n                        } else {\n                            _cometd._debug('Processing', _handshakeMessages, 'handshake-delivered messages');\n                        }\n                        break;\n                    case 'none':\n                        _disconnect(true);\n                        break;\n                    default:\n                        throw 'Unrecognized advice action ' + action;\n                }\n            } else {\n                _failHandshake(message, {\n                    cause: 'unsuccessful',\n                    action: _advice.reconnect || 'handshake',\n                    transport: _transport\n                });\n            }\n        }\n\n        function _handshakeFailure(message) {\n            _failHandshake(message, {\n                cause: 'failure',\n                action: 'handshake',\n                transport: null\n            });\n        }\n\n        function _matchMetaConnect(connect) {\n            if (_status === 'disconnected') {\n                return true;\n            }\n            if (_metaConnect && _metaConnect.id === connect.id) {\n                _metaConnect = null;\n                return true;\n            }\n            return false;\n        }\n\n        function _failConnect(message, failureInfo) {\n            // Notify the listeners after the status change but before the next action.\n            _notifyListeners('/meta/connect', message);\n            _notifyListeners('/meta/unsuccessful', message);\n\n            // The listeners may have disconnected.\n            if (_isDisconnected()) {\n                failureInfo.action = 'none';\n            }\n\n            _cometd.onTransportFailure.call(_cometd, message, failureInfo, _handleTransportFailure);\n        }\n\n        function _connectResponse(message) {\n            if (_matchMetaConnect(message)) {\n                _connected = message.successful;\n                if (_connected) {\n                    _notifyListeners('/meta/connect', message);\n\n                    // Normally, the advice will say \"reconnect: 'retry', interval: 0\"\n                    // and the server will hold the request, so when a response returns\n                    // we immediately call the server again (long polling).\n                    // Listeners can call disconnect(), so check the state after they run.\n                    var action = _isDisconnected() ? 'none' : _advice.reconnect || 'retry';\n                    switch (action) {\n                        case 'retry':\n                            _resetBackoff();\n                            _delayedConnect(_backoff);\n                            break;\n                        case 'none':\n                            _disconnect(false);\n                            break;\n                        default:\n                            throw 'Unrecognized advice action ' + action;\n                    }\n                } else {\n                    _failConnect(message, {\n                        cause: 'unsuccessful',\n                        action: _advice.reconnect || 'retry',\n                        transport: _transport\n                    });\n                }\n            } else {\n                _cometd._debug('Mismatched /meta/connect reply', message);\n            }\n        }\n\n        function _connectFailure(message) {\n            if (_matchMetaConnect(message)) {\n                _connected = false;\n                _failConnect(message, {\n                    cause: 'failure',\n                    action: 'retry',\n                    transport: null\n                });\n            } else {\n                _cometd._debug('Mismatched /meta/connect failure', message);\n            }\n        }\n\n        function _failDisconnect(message) {\n            _disconnect(true);\n            _handleCallback(message);\n            _notifyListeners('/meta/disconnect', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _disconnectResponse(message) {\n            if (message.successful) {\n                // Wait for the /meta/connect to arrive.\n                _disconnect(false);\n                _handleCallback(message);\n                _notifyListeners('/meta/disconnect', message);\n            } else {\n                _failDisconnect(message);\n            }\n        }\n\n        function _disconnectFailure(message) {\n            _failDisconnect(message);\n        }\n\n        function _failSubscribe(message) {\n            var subscriptions = _listeners[message.subscription];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        var subscription = subscriptions[id];\n                        if (subscription && !subscription.listener) {\n                            delete subscriptions[id];\n                            _cometd._debug('Removed failed subscription', subscription);\n                        }\n                    }\n                }\n            }\n            _handleCallback(message);\n            _notifyListeners('/meta/subscribe', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _subscribeResponse(message) {\n            if (message.successful) {\n                _handleCallback(message);\n                _notifyListeners('/meta/subscribe', message);\n            } else {\n                _failSubscribe(message);\n            }\n        }\n\n        function _subscribeFailure(message) {\n            _failSubscribe(message);\n        }\n\n        function _failUnsubscribe(message) {\n            _handleCallback(message);\n            _notifyListeners('/meta/unsubscribe', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _unsubscribeResponse(message) {\n            if (message.successful) {\n                _handleCallback(message);\n                _notifyListeners('/meta/unsubscribe', message);\n            } else {\n                _failUnsubscribe(message);\n            }\n        }\n\n        function _unsubscribeFailure(message) {\n            _failUnsubscribe(message);\n        }\n\n        function _failMessage(message) {\n            if (!_handleRemoteCall(message)) {\n                _handleCallback(message);\n                _notifyListeners('/meta/publish', message);\n                _notifyListeners('/meta/unsuccessful', message);\n            }\n        }\n\n        function _messageResponse(message) {\n            if (message.data !== undefined) {\n                if (!_handleRemoteCall(message)) {\n                    _notifyListeners(message.channel, message);\n                    if (_handshakeMessages > 0) {\n                        --_handshakeMessages;\n                        if (_handshakeMessages === 0) {\n                            _cometd._debug('Processed last handshake-delivered message');\n                            _delayedConnect(0);\n                        }\n                    }\n                }\n            } else {\n                if (message.successful === undefined) {\n                    _cometd._warn('Unknown Bayeux Message', message);\n                } else {\n                    if (message.successful) {\n                        _handleCallback(message);\n                        _notifyListeners('/meta/publish', message);\n                    } else {\n                        _failMessage(message);\n                    }\n                }\n            }\n        }\n\n        function _messageFailure(failure) {\n            _failMessage(failure);\n        }\n\n        function _receive(message) {\n            _unconnectTime = 0;\n\n            message = _applyIncomingExtensions(message);\n            if (message === undefined || message === null) {\n                return;\n            }\n\n            _updateAdvice(message.advice);\n\n            var channel = message.channel;\n            switch (channel) {\n                case '/meta/handshake':\n                    _handshakeResponse(message);\n                    break;\n                case '/meta/connect':\n                    _connectResponse(message);\n                    break;\n                case '/meta/disconnect':\n                    _disconnectResponse(message);\n                    break;\n                case '/meta/subscribe':\n                    _subscribeResponse(message);\n                    break;\n                case '/meta/unsubscribe':\n                    _unsubscribeResponse(message);\n                    break;\n                default:\n                    _messageResponse(message);\n                    break;\n            }\n        }\n\n        /**\n         * Receives a message.\n         * This method is exposed as a public so that extensions may inject\n         * messages simulating that they had been received.\n         */\n        this.receive = _receive;\n\n        _handleMessages = function(rcvdMessages) {\n            _cometd._debug('Received', rcvdMessages);\n\n            for (var i = 0; i < rcvdMessages.length; ++i) {\n                var message = rcvdMessages[i];\n                _receive(message);\n            }\n        };\n\n        _handleFailure = function(conduit, messages, failure) {\n            _cometd._debug('handleFailure', conduit, messages, failure);\n\n            failure.transport = conduit;\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n                var failureMessage = {\n                    id: message.id,\n                    successful: false,\n                    channel: message.channel,\n                    failure: failure\n                };\n                failure.message = message;\n                switch (message.channel) {\n                    case '/meta/handshake':\n                        _handshakeFailure(failureMessage);\n                        break;\n                    case '/meta/connect':\n                        _connectFailure(failureMessage);\n                        break;\n                    case '/meta/disconnect':\n                        _disconnectFailure(failureMessage);\n                        break;\n                    case '/meta/subscribe':\n                        failureMessage.subscription = message.subscription;\n                        _subscribeFailure(failureMessage);\n                        break;\n                    case '/meta/unsubscribe':\n                        failureMessage.subscription = message.subscription;\n                        _unsubscribeFailure(failureMessage);\n                        break;\n                    default:\n                        _messageFailure(failureMessage);\n                        break;\n                }\n            }\n        };\n\n        function _hasSubscriptions(channel) {\n            var subscriptions = _listeners[channel];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        if (subscriptions[id]) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        function _resolveScopedCallback(scope, callback) {\n            var delegate = {\n                scope: scope,\n                method: callback\n            };\n            if (_isFunction(scope)) {\n                delegate.scope = undefined;\n                delegate.method = scope;\n            } else {\n                if (_isString(callback)) {\n                    if (!scope) {\n                        throw 'Invalid scope ' + scope;\n                    }\n                    delegate.method = scope[callback];\n                    if (!_isFunction(delegate.method)) {\n                        throw 'Invalid callback ' + callback + ' for scope ' + scope;\n                    }\n                } else if (!_isFunction(callback)) {\n                    throw 'Invalid callback ' + callback;\n                }\n            }\n            return delegate;\n        }\n\n        function _addListener(channel, scope, callback, isListener) {\n            // The data structure is a map<channel, subscription[]>, where each subscription\n            // holds the callback to be called and its scope.\n\n            var delegate = _resolveScopedCallback(scope, callback);\n            _cometd._debug('Adding', isListener ? 'listener' : 'subscription', 'on', channel, 'with scope', delegate.scope, 'and callback', delegate.method);\n\n            var id = ++_listenerId;\n            var subscription = {\n                id: id,\n                channel: channel,\n                scope: delegate.scope,\n                callback: delegate.method,\n                listener: isListener\n            };\n\n            var subscriptions = _listeners[channel];\n            if (!subscriptions) {\n                subscriptions = {};\n                _listeners[channel] = subscriptions;\n            }\n\n            subscriptions[id] = subscription;\n\n            _cometd._debug('Added', isListener ? 'listener' : 'subscription', subscription);\n\n            return subscription;\n        }\n\n        //\n        // PUBLIC API\n        //\n\n        /**\n         * Registers the given transport under the given transport type.\n         * The optional index parameter specifies the \"priority\" at which the\n         * transport is registered (where 0 is the max priority).\n         * If a transport with the same type is already registered, this function\n         * does nothing and returns false.\n         * @param type the transport type\n         * @param transport the transport object\n         * @param index the index at which this transport is to be registered\n         * @return true if the transport has been registered, false otherwise\n         * @see #unregisterTransport(type)\n         */\n        this.registerTransport = function(type, transport, index) {\n            var result = _transports.add(type, transport, index);\n            if (result) {\n                this._debug('Registered transport', type);\n\n                if (_isFunction(transport.registered)) {\n                    transport.registered(type, this);\n                }\n            }\n            return result;\n        };\n\n        /**\n         * Unregisters the transport with the given transport type.\n         * @param type the transport type to unregister\n         * @return the transport that has been unregistered,\n         * or null if no transport was previously registered under the given transport type\n         */\n        this.unregisterTransport = function(type) {\n            var transport = _transports.remove(type);\n            if (transport !== null) {\n                this._debug('Unregistered transport', type);\n\n                if (_isFunction(transport.unregistered)) {\n                    transport.unregistered();\n                }\n            }\n            return transport;\n        };\n\n        this.unregisterTransports = function() {\n            _transports.clear();\n        };\n\n        /**\n         * @return an array of all registered transport types\n         */\n        this.getTransportTypes = function() {\n            return _transports.getTransportTypes();\n        };\n\n        this.findTransport = function(name) {\n            return _transports.find(name);\n        };\n\n        /**\n         * @returns the TransportRegistry object\n         */\n        this.getTransportRegistry = function() {\n            return _transports;\n        };\n\n        /**\n         * Configures the initial Bayeux communication with the Bayeux server.\n         * Configuration is passed via an object that must contain a mandatory field <code>url</code>\n         * of type string containing the URL of the Bayeux server.\n         * @param configuration the configuration object\n         */\n        this.configure = function(configuration) {\n            _configure.call(this, configuration);\n        };\n\n        /**\n         * Configures and establishes the Bayeux communication with the Bayeux server\n         * via a handshake and a subsequent connect.\n         * @param configuration the configuration object\n         * @param handshakeProps an object to be merged with the handshake message\n         * @see #configure(configuration)\n         * @see #handshake(handshakeProps)\n         */\n        this.init = function(configuration, handshakeProps) {\n            this.configure(configuration);\n            this.handshake(handshakeProps);\n        };\n\n        /**\n         * Establishes the Bayeux communication with the Bayeux server\n         * via a handshake and a subsequent connect.\n         * @param handshakeProps an object to be merged with the handshake message\n         * @param handshakeCallback a function to be invoked when the handshake is acknowledged\n         */\n        this.handshake = function(handshakeProps, handshakeCallback) {\n            if (_status !== 'disconnected') {\n                throw 'Illegal state: handshaken';\n            }\n            _handshake(handshakeProps, handshakeCallback);\n        };\n\n        /**\n         * Disconnects from the Bayeux server.\n         * @param disconnectProps an object to be merged with the disconnect message\n         * @param disconnectCallback a function to be invoked when the disconnect is acknowledged\n         */\n        this.disconnect = function(disconnectProps, disconnectCallback) {\n            if (_isDisconnected()) {\n                return;\n            }\n\n            if (_isFunction(disconnectProps)) {\n                disconnectCallback = disconnectProps;\n                disconnectProps = undefined;\n            }\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: '/meta/disconnect'\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, disconnectProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, disconnectCallback);\n\n            _setStatus('disconnecting');\n            _send([message], false, 'disconnect');\n        };\n\n        /**\n         * Marks the start of a batch of application messages to be sent to the server\n         * in a single request, obtaining a single response containing (possibly) many\n         * application reply messages.\n         * Messages are held in a queue and not sent until {@link #endBatch()} is called.\n         * If startBatch() is called multiple times, then an equal number of endBatch()\n         * calls must be made to close and send the batch of messages.\n         * @see #endBatch()\n         */\n        this.startBatch = function() {\n            _startBatch();\n        };\n\n        /**\n         * Marks the end of a batch of application messages to be sent to the server\n         * in a single request.\n         * @see #startBatch()\n         */\n        this.endBatch = function() {\n            _endBatch();\n        };\n\n        /**\n         * Executes the given callback in the given scope, surrounded by a {@link #startBatch()}\n         * and {@link #endBatch()} calls.\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to be executed within {@link #startBatch()} and {@link #endBatch()} calls\n         */\n        this.batch = function(scope, callback) {\n            var delegate = _resolveScopedCallback(scope, callback);\n            this.startBatch();\n            try {\n                delegate.method.call(delegate.scope);\n                this.endBatch();\n            } catch (x) {\n                this._info('Exception during execution of batch', x);\n                this.endBatch();\n                throw x;\n            }\n        };\n\n        /**\n         * Adds a listener for bayeux messages, performing the given callback in the given scope\n         * when a message for the given channel arrives.\n         * @param channel the channel the listener is interested to\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to call when a message is sent to the channel\n         * @returns the subscription handle to be passed to {@link #removeListener(object)}\n         * @see #removeListener(subscription)\n         */\n        this.addListener = function(channel, scope, callback) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n\n            return _addListener(channel, scope, callback, true);\n        };\n\n        /**\n         * Removes the subscription obtained with a call to {@link #addListener(string, object, function)}.\n         * @param subscription the subscription to unsubscribe.\n         * @see #addListener(channel, scope, callback)\n         */\n        this.removeListener = function(subscription) {\n            // Beware of subscription.id == 0, which is falsy => cannot use !subscription.id\n            if (!subscription || !subscription.channel || !(\"id\" in subscription)) {\n                throw 'Invalid argument: expected subscription, not ' + subscription;\n            }\n\n            _removeListener(subscription);\n        };\n\n        /**\n         * Removes all listeners registered with {@link #addListener(channel, scope, callback)} or\n         * {@link #subscribe(channel, scope, callback)}.\n         */\n        this.clearListeners = function() {\n            _listeners = {};\n        };\n\n        /**\n         * Subscribes to the given channel, performing the given callback in the given scope\n         * when a message for the channel arrives.\n         * @param channel the channel to subscribe to\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to call when a message is sent to the channel\n         * @param subscribeProps an object to be merged with the subscribe message\n         * @param subscribeCallback a function to be invoked when the subscription is acknowledged\n         * @return the subscription handle to be passed to {@link #unsubscribe(object)}\n         */\n        this.subscribe = function(channel, scope, callback, subscribeProps, subscribeCallback) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            // Normalize arguments\n            if (_isFunction(scope)) {\n                subscribeCallback = subscribeProps;\n                subscribeProps = callback;\n                callback = scope;\n                scope = undefined;\n            }\n            if (_isFunction(subscribeProps)) {\n                subscribeCallback = subscribeProps;\n                subscribeProps = undefined;\n            }\n\n            // Only send the message to the server if this client has not yet subscribed to the channel\n            var send = !_hasSubscriptions(channel);\n\n            var subscription = _addListener(channel, scope, callback, false);\n\n            if (send) {\n                // Send the subscription message after the subscription registration to avoid\n                // races where the server would send a message to the subscribers, but here\n                // on the client the subscription has not been added yet to the data structures\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/subscribe',\n                    subscription: channel\n                };\n                // Do not allow the user to override important fields.\n                var message = this._mixin(false, {}, subscribeProps, bayeuxMessage);\n\n                // Save the callback.\n                _cometd._putCallback(message.id, subscribeCallback);\n\n                _queueSend(message);\n            }\n\n            return subscription;\n        };\n\n        /**\n         * Unsubscribes the subscription obtained with a call to {@link #subscribe(string, object, function)}.\n         * @param subscription the subscription to unsubscribe.\n         * @param unsubscribeProps an object to be merged with the unsubscribe message\n         * @param unsubscribeCallback a function to be invoked when the unsubscription is acknowledged\n         */\n        this.unsubscribe = function(subscription, unsubscribeProps, unsubscribeCallback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(unsubscribeProps)) {\n                unsubscribeCallback = unsubscribeProps;\n                unsubscribeProps = undefined;\n            }\n\n            // Remove the local listener before sending the message\n            // This ensures that if the server fails, this client does not get notifications\n            this.removeListener(subscription);\n\n            var channel = subscription.channel;\n            // Only send the message to the server if this client unsubscribes the last subscription\n            if (!_hasSubscriptions(channel)) {\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/unsubscribe',\n                    subscription: channel\n                };\n                // Do not allow the user to override important fields.\n                var message = this._mixin(false, {}, unsubscribeProps, bayeuxMessage);\n\n                // Save the callback.\n                _cometd._putCallback(message.id, unsubscribeCallback);\n\n                _queueSend(message);\n            }\n        };\n\n        this.resubscribe = function(subscription, subscribeProps) {\n            _removeSubscription(subscription);\n            if (subscription) {\n                return this.subscribe(subscription.channel, subscription.scope, subscription.callback, subscribeProps);\n            }\n            return undefined;\n        };\n\n        /**\n         * Removes all subscriptions added via {@link #subscribe(channel, scope, callback, subscribeProps)},\n         * but does not remove the listeners added via {@link addListener(channel, scope, callback)}.\n         */\n        this.clearSubscriptions = function() {\n            _clearSubscriptions();\n        };\n\n        /**\n         * Publishes a message on the given channel, containing the given content.\n         * @param channel the channel to publish the message to\n         * @param content the content of the message\n         * @param publishProps an object to be merged with the publish message\n         * @param publishCallback a function to be invoked when the publish is acknowledged by the server\n         */\n        this.publish = function(channel, content, publishProps, publishCallback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n            if (/^\\/meta\\//.test(channel)) {\n                throw 'Illegal argument: cannot publish to meta channels';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(content)) {\n                publishCallback = content;\n                content = {};\n                publishProps = undefined;\n            } else if (_isFunction(publishProps)) {\n                publishCallback = publishProps;\n                publishProps = undefined;\n            }\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: channel,\n                data: content\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, publishProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, publishCallback);\n\n            _queueSend(message);\n        };\n\n        /**\n         * Publishes a message with binary data on the given channel.\n         * The binary data chunk may be an ArrayBuffer, a DataView, a TypedArray\n         * (such as Uint8Array) or a plain integer array.\n         * The meta data object may contain additional application data such as\n         * a file name, a mime type, etc.\n         * @param channel the channel to publish the message to\n         * @param data the binary data to publish\n         * @param last whether the binary data chunk is the last\n         * @param meta an object containing meta data associated to the binary chunk\n         * @param callback a function to be invoked when the publish is acknowledged by the server\n         */\n        this.publishBinary = function(channel, data, last, meta, callback) {\n            if (_isFunction(data)) {\n                callback = data;\n                data = new ArrayBuffer(0);\n                last = true;\n                meta = undefined;\n            } else if (_isFunction(last)) {\n                callback = last;\n                last = true;\n                meta = undefined;\n            } else if (_isFunction(meta)) {\n                callback = meta;\n                meta = undefined;\n            }\n            var content = {\n                meta: meta,\n                data: data,\n                last: last\n            };\n            var ext = {\n                ext: {\n                    binary: {}\n                }\n            };\n            this.publish(channel, content, ext, callback);\n        };\n\n        this.remoteCall = function(target, content, timeout, callProps, callback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (!_isString(target)) {\n                throw 'Illegal argument type: target must be a string';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(content)) {\n                callback = content;\n                content = {};\n                timeout = _config.maxNetworkDelay;\n                callProps = undefined;\n            } else if (_isFunction(timeout)) {\n                callback = timeout;\n                timeout = _config.maxNetworkDelay;\n                callProps = undefined;\n            } else if (_isFunction(callProps)) {\n                callback = callProps;\n                callProps = undefined;\n            }\n\n            if (typeof timeout !== 'number') {\n                throw 'Illegal argument type: timeout must be a number';\n            }\n\n            if (!target.match(/^\\//)) {\n                target = '/' + target;\n            }\n            var channel = '/service' + target;\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: channel,\n                data: content\n            };\n            var message = this._mixin(false, {}, callProps, bayeuxMessage);\n\n            var context = {\n                callback: callback\n            };\n            if (timeout > 0) {\n                context.timeout = _cometd.setTimeout(function() {\n                    _cometd._debug('Timing out remote call', message, 'after', timeout, 'ms');\n                    _failMessage({\n                        id: message.id,\n                        error: '406::timeout',\n                        successful: false,\n                        failure: {\n                            message: message,\n                            reason: 'Remote Call Timeout'\n                        }\n                    });\n                }, timeout);\n                _cometd._debug('Scheduled remote call timeout', message, 'in', timeout, 'ms');\n            }\n            _remoteCalls[message.id] = context;\n\n            _queueSend(message);\n        };\n\n        this.remoteCallBinary = function(target, data, last, meta, timeout, callback) {\n            if (_isFunction(data)) {\n                callback = data;\n                data = new ArrayBuffer(0);\n                last = true;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(last)) {\n                callback = last;\n                last = true;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(meta)) {\n                callback = meta;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(timeout)) {\n                callback = timeout;\n                timeout = _config.maxNetworkDelay;\n            }\n\n            var content = {\n                meta: meta,\n                data: data,\n                last: last\n            };\n            var ext = {\n                ext: {\n                    binary: {}\n                }\n            };\n\n            this.remoteCall(target, content, timeout, ext, callback);\n        };\n\n        /**\n         * Returns a string representing the status of the bayeux communication with the Bayeux server.\n         */\n        this.getStatus = function() {\n            return _status;\n        };\n\n        /**\n         * Returns whether this instance has been disconnected.\n         */\n        this.isDisconnected = _isDisconnected;\n\n        /**\n         * Sets the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n         * Default value is 1 second, which means if there is a persistent failure the retries will happen\n         * after 1 second, then after 2 seconds, then after 3 seconds, etc. So for example with 15 seconds of\n         * elapsed time, there will be 5 retries (at 1, 3, 6, 10 and 15 seconds elapsed).\n         * @param period the backoff period to set\n         * @see #getBackoffIncrement()\n         */\n        this.setBackoffIncrement = function(period) {\n            _config.backoffIncrement = period;\n        };\n\n        /**\n         * Returns the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n         * @see #setBackoffIncrement(period)\n         */\n        this.getBackoffIncrement = function() {\n            return _config.backoffIncrement;\n        };\n\n        /**\n         * Returns the backoff period to wait before retrying an unsuccessful or failed message.\n         */\n        this.getBackoffPeriod = function() {\n            return _backoff;\n        };\n\n        /**\n         * Increases the backoff period up to the maximum value configured.\n         * @returns the backoff period after increment\n         * @see getBackoffIncrement\n         */\n        this.increaseBackoffPeriod = function() {\n            return _increaseBackoff();\n        };\n\n        /**\n         * Resets the backoff period to zero.\n         */\n        this.resetBackoffPeriod = function() {\n            _resetBackoff();\n        };\n\n        /**\n         * Sets the log level for console logging.\n         * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n         * less verbose to more verbose.\n         * @param level the log level string\n         */\n        this.setLogLevel = function(level) {\n            _config.logLevel = level;\n        };\n\n        /**\n         * Registers an extension whose callbacks are called for every incoming message\n         * (that comes from the server to this client implementation) and for every\n         * outgoing message (that originates from this client implementation for the\n         * server).\n         * The format of the extension object is the following:\n         * <pre>\n         * {\n         *     incoming: function(message) { ... },\n         *     outgoing: function(message) { ... }\n         * }\n         * </pre>\n         * Both properties are optional, but if they are present they will be called\n         * respectively for each incoming message and for each outgoing message.\n         * @param name the name of the extension\n         * @param extension the extension to register\n         * @return true if the extension was registered, false otherwise\n         * @see #unregisterExtension(name)\n         */\n        this.registerExtension = function(name, extension) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(name)) {\n                throw 'Illegal argument type: extension name must be a string';\n            }\n\n            var existing = false;\n            for (var i = 0; i < _extensions.length; ++i) {\n                var existingExtension = _extensions[i];\n                if (existingExtension.name === name) {\n                    existing = true;\n                    break;\n                }\n            }\n            if (!existing) {\n                _extensions.push({\n                    name: name,\n                    extension: extension\n                });\n                this._debug('Registered extension', name);\n\n                // Callback for extensions\n                if (_isFunction(extension.registered)) {\n                    extension.registered(name, this);\n                }\n\n                return true;\n            } else {\n                this._info('Could not register extension with name', name, 'since another extension with the same name already exists');\n                return false;\n            }\n        };\n\n        /**\n         * Unregister an extension previously registered with\n         * {@link #registerExtension(name, extension)}.\n         * @param name the name of the extension to unregister.\n         * @return true if the extension was unregistered, false otherwise\n         */\n        this.unregisterExtension = function(name) {\n            if (!_isString(name)) {\n                throw 'Illegal argument type: extension name must be a string';\n            }\n\n            var unregistered = false;\n            for (var i = 0; i < _extensions.length; ++i) {\n                var extension = _extensions[i];\n                if (extension.name === name) {\n                    _extensions.splice(i, 1);\n                    unregistered = true;\n                    this._debug('Unregistered extension', name);\n\n                    // Callback for extensions\n                    var ext = extension.extension;\n                    if (_isFunction(ext.unregistered)) {\n                        ext.unregistered();\n                    }\n\n                    break;\n                }\n            }\n            return unregistered;\n        };\n\n        /**\n         * Find the extension registered with the given name.\n         * @param name the name of the extension to find\n         * @return the extension found or null if no extension with the given name has been registered\n         */\n        this.getExtension = function(name) {\n            for (var i = 0; i < _extensions.length; ++i) {\n                var extension = _extensions[i];\n                if (extension.name === name) {\n                    return extension.extension;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Returns the name assigned to this CometD object, or the string 'default'\n         * if no name has been explicitly passed as parameter to the constructor.\n         */\n        this.getName = function() {\n            return _name;\n        };\n\n        /**\n         * Returns the clientId assigned by the Bayeux server during handshake.\n         */\n        this.getClientId = function() {\n            return _clientId;\n        };\n\n        /**\n         * Returns the URL of the Bayeux server.\n         */\n        this.getURL = function() {\n            if (_transport) {\n                var url = _transport.getURL();\n                if (url) {\n                    return url;\n                }\n                url = _config.urls[_transport.getType()];\n                if (url) {\n                    return url;\n                }\n            }\n            return _config.url;\n        };\n\n        this.getTransport = function() {\n            return _transport;\n        };\n\n        this.getConfiguration = function() {\n            return this._mixin(true, {}, _config);\n        };\n\n        this.getAdvice = function() {\n            return this._mixin(true, {}, _advice);\n        };\n\n        this.setTimeout = function(funktion, delay) {\n            return _scheduler.setTimeout(function() {\n                try {\n                    _cometd._debug('Invoking timed function', funktion);\n                    funktion();\n                } catch (x) {\n                    _cometd._debug('Exception invoking timed function', funktion, x);\n                }\n            }, delay);\n        };\n\n        this.clearTimeout = function(id) {\n            _scheduler.clearTimeout(id);\n        };\n\n        // Initialize transports.\n        if (window.WebSocket) {\n            this.registerTransport('websocket', new WebSocketTransport());\n        }\n        this.registerTransport('long-polling', new LongPollingTransport());\n        this.registerTransport('callback-polling', new CallbackPollingTransport());\n    };\n\n    var _z85EncodeTable = [\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n        'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\n        'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '.', '-', ':', '+', '=', '^', '!', '/',\n        '*', '?', '&', '<', '>', '(', ')', '[', ']', '{',\n        '}', '@', '%', '$', '#'\n    ];\n    var _z85DecodeTable = [\n        0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00,\n        0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45,\n        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n        0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47,\n        0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,\n        0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,\n        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,\n        0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00,\n        0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,\n        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n        0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,\n        0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00\n    ];\n    var Z85 = {\n        encode: function(bytes) {\n            var buffer = null;\n            if (bytes instanceof ArrayBuffer) {\n                buffer = bytes;\n            } else if (bytes.buffer instanceof ArrayBuffer) {\n                buffer = bytes.buffer;\n            } else if (Array.isArray(bytes)) {\n                buffer = new Uint8Array(bytes).buffer;\n            }\n            if (buffer == null) {\n                throw 'Cannot Z85 encode ' + bytes;\n            }\n\n            var length = buffer.byteLength;\n            var remainder = length % 4;\n            var padding = 4 - (remainder === 0 ? 4 : remainder);\n            var view = new DataView(buffer);\n            var result = '';\n            var value = 0;\n            for (var i = 0; i < length + padding; ++i) {\n                var isPadding = i >= length;\n                value = value * 256 + (isPadding ? 0 : view.getUint8(i));\n                if ((i + 1) % 4 === 0) {\n                    var divisor = 85 * 85 * 85 * 85;\n                    for (var j = 5; j > 0; --j) {\n                        if (!isPadding || j > padding) {\n                            var code = Math.floor(value / divisor) % 85;\n                            result += _z85EncodeTable[code];\n                        }\n                        divisor /= 85;\n                    }\n                    value = 0;\n                }\n            }\n\n            return result;\n        },\n        decode: function(string) {\n            var remainder = string.length % 5;\n            var padding = 5 - (remainder === 0 ? 5 : remainder);\n            for (var p = 0; p < padding; ++p) {\n                string += _z85EncodeTable[_z85EncodeTable.length - 1];\n            }\n            var length = string.length;\n\n            var buffer = new ArrayBuffer((length * 4 / 5) - padding);\n            var view = new DataView(buffer);\n            var value = 0;\n            var charIdx = 0;\n            var byteIdx = 0;\n            for (var i = 0; i < length; ++i) {\n                var code = string.charCodeAt(charIdx++) - 32;\n                value = value * 85 + _z85DecodeTable[code];\n                if (charIdx % 5 === 0) {\n                    var divisor = 256 * 256 * 256;\n                    while (divisor >= 1) {\n                        if (byteIdx < view.byteLength) {\n                            view.setUint8(byteIdx++, Math.floor(value / divisor) % 256);\n                        }\n                        divisor /= 256;\n                    }\n                    value = 0;\n                }\n            }\n\n            return buffer;\n        }\n    };\n\n    return {\n        CometD: CometD,\n        Transport: Transport,\n        RequestTransport: RequestTransport,\n        LongPollingTransport: LongPollingTransport,\n        CallbackPollingTransport: CallbackPollingTransport,\n        WebSocketTransport: WebSocketTransport,\n        Utils: Utils,\n        Z85: Z85\n    };\n}));\n","const lib = require('cometd');\nmodule.exports = {\n  CometD: lib.CometD,\n  default: lib\n};\n","import { CometD } from 'isomorphic-cometd';\nimport { IFetchClient } from '../core';\nimport { MetaChannel } from './MetaChannel';\n\nexport interface ICometdConfig {\n  url: string;\n  logLevel?: string;\n  requestHeaders?: any;\n  appendMessageTypeToURL?: boolean;\n  stickyReconnect?: boolean;\n}\n\nexport class Realtime {\n  private cometd: CometD = new CometD();\n\n  /**\n   * Allows to set up a realtime (websocket or long-polling) connection to the platform.\n   * @param client The fetch client instance to use\n   * @param url The URL to connect to\n   * @param handshakeCallback A function which is called on succeeded or failed handshake\n   */\n  constructor(\n    private client: IFetchClient,\n    private url: string = '/notification/realtime',\n    handshakeCallback?\n  ) {\n    this.cometd.websocketEnabled = true;\n    this.cometd.addListener(MetaChannel.HANDSHAKE, handshakeCallback || this.metaHandshake);\n  }\n\n  /**\n   * Subscribes to a realtime channel to listen for data.\n   * @param channel The channel to connect to\n   * @param callback A function to call when data is received\n   */\n  subscribe(channel: string, callback: (data: any) => void): object {\n    this.checkConnection();\n    return this.cometd.subscribe(channel, callback);\n  }\n\n  /**\n   * Cancels the listening to a channel.\n   * @param subscription The subscription object returned by subscribe()\n   */\n  unsubscribe(subscription: object): object {\n    return this.cometd.unsubscribe(subscription);\n  }\n\n  /**\n   * Disconnects the current connection.\n   */\n  disconnect(): void {\n    this.cometd.disconnect();\n  }\n\n  private checkConnection() {\n    const { cometd, client, url } = this;\n    if (cometd.isDisconnected()) {\n      const { headers } = client.getFetchOptions();\n      const config = {\n        url: client.getUrl(url),\n        requestHeaders: headers\n      };\n      cometd.configure(config);\n      this.handshake(client.getCometdHandshake());\n    }\n  }\n\n  private handshake(config: object) {\n    this.cometd.handshake(config);\n  }\n\n  private metaHandshake = msg => {\n    if (!msg.successful) {\n      throw new Error('Handshake failed');\n    }\n  };\n}\n","import { Service } from './Service';\nimport { IResultList } from './IResultList';\n\n/**\n * Paging allows you to query the next and previous data chunks\n * in a convenient way. You can also go to a specific page or just read\n * page information about the current data chunk.\n * Note that page numbers are generated by backend\n * and may be used as offset rather than a continuous range of positive numbers\n * (e.g. in case of users with restricted permissions).\n */\nexport class Paging<TData> {\n  /**\n   * Holds the number of the current page, so in fact\n   * the data chunk you are looking at.\n   */\n  currentPage: number;\n  /**\n   * Holds the number of the next page.\n   */\n  nextPage: number;\n  /**\n   * Holds the number of the previous page.\n   */\n  prevPage: number;\n  /**\n   * Holds the number of the maximum data that you will\n   * get with the response.\n   */\n  pageSize: number;\n  /**\n   * Holds the number of total pages regarding to the\n   * given page size.\n   */\n  totalPages: number;\n\n  private service: Service<TData>;\n  private filter: object;\n\n  constructor(service: Service<TData>, statistics: any, filter: object) {\n    this.filter = filter;\n    this.service = service;\n    this.currentPage = statistics.currentPage;\n    this.nextPage = statistics.nextPage;\n    this.prevPage = statistics.prevPage;\n    this.pageSize = statistics.pageSize;\n    this.totalPages = statistics.totalPages;\n  }\n\n  /**\n   * Gets the next page of available data from the server.\n   * @param filter\n   */\n  async next(filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, this.nextPage));\n  }\n\n  /**\n   * Gets the previous page of available data from server.\n   * @param filter\n   */\n  async prev(filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, this.prevPage));\n  }\n\n  /**\n   * Method used by next(), prev() and goto() to call the service.list method.\n   * It is public so it can be overriden in special cases (like children objects\n   * in inventory).\n   * @param filter\n   */\n  async list(filter: object = {}): Promise<IResultList<TData>> {\n    return this.service.list(filter);\n  }\n\n  /**\n   * Goes to the page that you define as page parameter.\n   * @param page\n   * @param filter\n   */\n  async goto(page: number, filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, page));\n  }\n\n  private getFilter(filter: object, page: number) {\n    return Object.assign(filter, this.filter, { currentPage: page });\n  }\n}\n","import { IFetchClient } from './IFetchClient';\nimport { IFetchOptions } from './IFetchOptions';\nimport { IFetchResponse } from './IFetchResponse';\nimport { IIdentified } from './IIdentified';\nimport { IResult } from './IResult';\nimport { IResultList } from './IResultList';\nimport { Paging } from './Paging';\n\nimport { Realtime } from '../realtime/index';\n\nexport abstract class Service<TData extends IIdentified> {\n  protected propertyName: string;\n  protected abstract baseUrl: string;\n  protected abstract listUrl: string;\n  protected channel: string;\n  private cache = new Map();\n\n  constructor(protected client: IFetchClient, protected realtime?: Realtime) {\n    const methodsToHide = ['list', 'create', 'update', 'detail', 'delete'];\n    const prototype = Object.getPrototypeOf(this);\n    methodsToHide.forEach(method => {\n      if (!prototype.hasOwnProperty(method)) {\n        Object.defineProperty(this, method, {\n          get() {\n            return undefined;\n          }\n        });\n      }\n    });\n  }\n\n  async list(filter: object = {}): Promise<IResultList<TData>> {\n    const headers = { accept: 'application/json' };\n    const url = this.listUrl;\n    const res = await this.fetch(url, this.changeFetchOptions({ headers, params: filter }, url));\n    const json = await res.json();\n    const data = this.propertyName ? json[this.propertyName] : json;\n    const paging = this.getPaging(json, filter);\n    return { res, data, paging };\n  }\n\n  protected async detail(\n    entityOrId: string | number | IIdentified,\n    filter: object = {}\n  ): Promise<IResult<TData>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getDetailUrl(entityOrId);\n    const res = await this.fetch(\n      url,\n      this.changeFetchOptions({ headers, params: { ...filter } }, url)\n    );\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async create(entity: Partial<TData>): Promise<IResult<TData>> {\n    const url = this.listUrl;\n    const method = 'POST';\n    const body = JSON.stringify(this.onBeforeCreate(entity));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async update(entity: Partial<TData>): Promise<IResult<TData>> {\n    const url = this.getDetailUrl(entity);\n    const method = 'PUT';\n    const body = JSON.stringify(this.onBeforeUpdate(entity));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async delete(\n    entityOrId: string | number | IIdentified,\n    params?: any\n  ): Promise<IResult<null>> {\n    const method = 'DELETE';\n    const url = this.getDetailUrl(entityOrId);\n    const res = await this.fetch(url, this.changeFetchOptions({ method, params }, url));\n    return { res, data: null };\n  }\n\n  protected onBeforeCreate(obj: Partial<TData>): Partial<TData> {\n    delete obj.id;\n    return obj;\n  }\n\n  protected onBeforeUpdate(objWithId: Partial<TData>): Partial<TData> {\n    return objWithId;\n  }\n\n  protected changeFetchOptions(options: any, _url = '') {\n    return options;\n  }\n\n  protected getUrl(url = ''): string {\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '');\n    const partialUrl = url.replace(/^\\/+/, '');\n    return `${baseUrl}/${partialUrl}`;\n  }\n\n  protected getEntityId(entityOrId: string | number | IIdentified): string {\n    if (entityOrId === undefined || entityOrId === null) {\n      return '';\n    }\n\n    if (typeof entityOrId === 'object') {\n      return this.getEntityId(entityOrId.id);\n    }\n\n    return `${entityOrId}`;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IIdentified): string {\n    const id = this.getEntityId(entityOrId);\n    return `${this.listUrl}/${id}`;\n  }\n\n  protected async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    const fullUrl = this.getUrl(url);\n    const res: IFetchResponse = await this.client.fetch(fullUrl, init);\n    return await this.handleErrorStatusCodes(res);\n  }\n\n  /**\n   * Checks the response for errors and throws exceptions, otherwise returns the response as is.\n   *\n   * @param response The response from server.\n   *\n   * @returns If no errors are detected, it returns the same response.\n   *\n   * @throws If an error is detected, it throws `{ res, data }`, where `data` contains error details from server.\n   */\n  protected async handleErrorStatusCodes(response: IFetchResponse): Promise<IFetchResponse> {\n    if (response.status >= 400) {\n      let data = null;\n      try {\n        data = await response.json();\n      } catch (ex) {\n        try {\n          data = await response.text();\n        } catch (ex) {\n          // do nothing\n        }\n      }\n      throw { res: response, data };\n    }\n    return response;\n  }\n\n  protected mimeType(type: string): string {\n    return `application/vnd.com.nsn.cumulocity.${type}+json`;\n  }\n\n  protected getIdString(reference: number | string | IIdentified): string {\n    let id;\n    if (typeof reference === 'object') {\n      id = reference.id;\n    } else {\n      id = reference;\n    }\n    return String(id);\n  }\n\n  protected getPaging(json: any, filter: object): Paging<TData> {\n    if (json.statistics) {\n      const statistics = {\n        ...json.statistics,\n        nextPage: this.getCurrentPageFromLink(json.next),\n        prevPage: this.getCurrentPageFromLink(json.prev)\n      };\n      return new Paging<TData>(this, statistics, filter);\n    }\n    return null;\n  }\n\n  protected getCurrentPageFromLink(link = '') {\n    const matches = link.match(/currentPage=(-{0,1}\\d+)/);\n    return matches && parseInt(matches[1], 10);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","import fetch from 'cross-fetch';\n\nimport { IFetchClient } from './IFetchClient';\nimport { IFetchOptions } from './IFetchOptions';\nimport { IFetchResponse } from './IFetchResponse';\nimport { IAuthentication } from './IAuthentication';\n\n// eslint-disable-next-line prefer-const\nlet auths = new WeakMap();\n\nexport class FetchClient implements IFetchClient {\n  tenant = '';\n  defaultHeaders = {};\n  constructor(authOrBaseUrl?: IAuthentication | string, public baseUrl?: string) {\n    if (typeof authOrBaseUrl === 'string') {\n      baseUrl = authOrBaseUrl;\n    } else {\n      this.setAuth(authOrBaseUrl);\n    }\n    this.baseUrl = this.resolveServerUrl(baseUrl);\n  }\n\n  setAuth(auth: IAuthentication) {\n    auths.set(this, auth);\n  }\n\n  async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    let fetchFn = fetch;\n    try {\n      fetchFn = window.fetch || fetchFn;\n    } catch (e) {\n      /* do nothing */\n    }\n    const fullUrl: string = this.getUrl(url, init);\n    const options: IFetchOptions = this.getFetchOptions(init);\n    const optionsWithAdjustedBody = this.adjustOptionsForFormData(options);\n    return fetchFn(fullUrl, optionsWithAdjustedBody);\n  }\n\n  getUrl(url = '', options?: IFetchOptions): string {\n    const params = options && options.params;\n    let paramPart = '';\n    if (params && Object.keys(params).length) {\n      paramPart = Object.keys(params)\n        .map(k => {\n          let vals = params[k];\n          const encodedKey = encodeURIComponent(k);\n          if (!Array.isArray(vals)) {\n            vals = [vals];\n          }\n          return vals.map(v => `${encodedKey}=${encodeURIComponent(v)}`).join('&');\n        })\n        .join('&');\n      paramPart = `?${paramPart}`;\n    }\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '').replace(/^\\/+/, '');\n    const partialUrl = url.replace(/\\/+$/, '').replace(/^\\/+/, '');\n    return `${baseUrl}/${partialUrl}${paramPart}`;\n  }\n\n  getFetchOptions(options: IFetchOptions = {}): IFetchOptions {\n    let clonedOptions = { ...options };\n    const auth = auths.get(this);\n    clonedOptions.headers = Object.assign({}, this.defaultHeaders, clonedOptions.headers, {\n      UseXBasic: true\n    });\n    delete clonedOptions.params;\n    clonedOptions = auth ? auth.getFetchOptions(clonedOptions) : clonedOptions;\n    return clonedOptions;\n  }\n\n  getCometdHandshake(config: any = {}) {\n    const auth = auths.get(this);\n    return auth ? auth.getCometdHandshake(config) : config;\n  }\n\n  private resolveServerUrl(baseUrl = ''): any {\n    if (baseUrl && baseUrl.startsWith('http')) {\n      return baseUrl.replace(/\\/+$/, '');\n    }\n    try {\n      const location = window.location;\n      return `${location.protocol}//${location.host}/${baseUrl.replace(/\\/+$/, '')}`;\n    } catch (ex) {\n      throw Error('Your environment does not support relative URLs. Please provide a base URL.');\n    }\n  }\n\n  private adjustOptionsForFormData(options: IFetchOptions): RequestInit {\n    const newOptions = Object.assign(options, { body: options.body as RequestInit['body'] });\n    return newOptions;\n  }\n}\n","export var error = function (message) {\n  function E() {\n    this.message = message;\n  }\n\n  E.prototype = new Error();\n  E.prototype.name = 'InvalidCharacterError';\n  E.prototype.code = 5;\n  return E;\n};\nexport var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';","import { chars, error } from './common'; // btoa polyfill for IE<10 courtesy https://gist.github.com/nignag/999166\n\nvar E = error('The string to be encoded contains characters out of range');\nexport var _btoa = typeof btoa !== 'undefined'\n/* istanbul ignore next */\n? function (input) {\n  return btoa(input);\n} : function (input) {\n  var str = String(input);\n  var output = '';\n\n  for ( // initialize result and counter\n  var block, charCode, idx = 0, map = chars; // if the next str index does not exist:\n  //   change the mapping table to \"=\"\n  //   check if d has no fractional digits\n  str.charAt(idx | 0) || (map = '=', idx % 1); // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n\n    block = block << 8 | charCode;\n  }\n\n  return output;\n};\n\nvar utf8 = function (input) {\n  return encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  });\n};\n\nexport default (function (input) {\n  return _btoa(utf8(input));\n});","import { IAuthentication, ICredentials } from './IAuthentication';\nimport { btoa } from 'b2a';\n\n// this is var and not const to please typedoc https://github.com/TypeStrong/typedoc/issues/691\n// eslint-disable-next-line no-var\nvar secrets = new WeakMap();\n\n/**\n * Allows to use Basic-Auth for Authorization to the\n * Cumulocity API.\n */\nexport class BasicAuth implements IAuthentication {\n  user: string;\n  /**\n   * Authenticates the given user against the given tenant.\n   * @param name\n   * @param password\n   * @param tenant\n   */\n  constructor(credentials?: ICredentials) {\n    this.updateCredentials(credentials);\n  }\n\n  updateCredentials({ tenant, user, password, token, tfa }: ICredentials = {}) {\n    const secret = secrets.get(this) || {};\n    if (user && tenant) {\n      user = `${tenant}/${user}`;\n    }\n    user = user || this.user;\n    password = password || secret.password;\n    if (!token && user && password) {\n      token = btoa(`${user}:${password}`);\n    }\n    if (user) {\n      this.user = user;\n    }\n    token = token || secret.token;\n    tfa = tfa || secret.tfa;\n    secrets.set(this, { tfa, token, password });\n    return token;\n  }\n\n  getFetchOptions(options) {\n    const secret = secrets.get(this);\n    const { token, tfa } = secret;\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const headers: any = {\n      Authorization: `Basic ${token || ''}`,\n      ...(xsrfToken ? { 'X-XSRF-TOKEN': xsrfToken } : undefined)\n    };\n\n    if (tfa) {\n      headers.tfatoken = tfa;\n    }\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: object } = {}) {\n    const secret = secrets.get(this);\n    const { token, tfa } = secret;\n    const KEY = 'com.cumulocity.authn';\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { token, tfa });\n    return config;\n  }\n\n  logout() {\n    delete this.user;\n    secrets.set(this, {});\n  }\n\n  private getCookieValue(name) {\n    try {\n      const value = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n      return value ? value.pop() : undefined;\n    } catch (ex) {\n      return undefined;\n    }\n  }\n}\n","import { chars, error } from './common';\nvar E = error('The string to be decoded is not correctly encoded');\nexport var _atob = typeof atob !== 'undefined'\n/* istanbul ignore next */\n? function (input) {\n  return atob(input);\n} : function (input) {\n  var str = String(input).replace(/[=]+$/, '');\n\n  if (str.length % 4 == 1) {\n    throw new E();\n  }\n\n  var output = '';\n\n  for ( // initialize result and counters\n  var bc = 0, bs, buffer, idx = 0; // get next character\n  buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;\n  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n  // convert the first 8 bits to one ascii character\n  bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n\n  return output;\n};\n\nvar utf16 = function (input) {\n  return decodeURIComponent(input.split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n};\n\nexport default (function (input) {\n  return utf16(_atob(input));\n});","import { gettext } from '../gettext';\n\n/**\n * Severity can be one of the following states.\n * It is used in [[AlarmService]] for example.\n */\nexport enum Severity {\n  CRITICAL = gettext('CRITICAL'),\n  MAJOR = gettext('MAJOR'),\n  MINOR = gettext('MINOR'),\n  WARNING = gettext('WARNING')\n}\n","export class QueriesUtil {\n  protected operatorFns = {\n    __not: operand => {\n      return `not(${this.buildQueryFilter(operand, null)})`;\n    },\n    __and: operand => {\n      return this.buildQueryFilter(operand, null, 'and');\n    },\n    __or: operand => {\n      return this.buildQueryFilter(operand, null, 'or');\n    },\n    __eq: (operand, contextKey) => {\n      if (typeof operand === 'object' && operand !== null) {\n        return this.buildQueryFilter(operand, contextKey);\n      }\n      return `${contextKey} eq ${this.quoteString(operand)}`;\n    },\n    __gt: (operand, contextKey) => {\n      return `${contextKey} gt ${this.quoteString(operand)}`;\n    },\n    __ge: (operand, contextKey) => {\n      return `${contextKey} ge ${this.quoteString(operand)}`;\n    },\n    __lt: (operand, contextKey) => {\n      return `${contextKey} lt ${this.quoteString(operand)}`;\n    },\n    __le: (operand, contextKey) => {\n      return `${contextKey} le ${this.quoteString(operand)}`;\n    },\n    __in: (operand, contextKey) => {\n      const stmts = operand\n        .filter(op => !!op)\n        .map(op => {\n          return `${contextKey} eq ${this.quoteString(op)}`;\n        });\n      return this.glue(stmts, 'or');\n    },\n    __bygroupid: operand => {\n      return `bygroupid(${operand})`;\n    },\n    __has: operand => {\n      return `has(${operand})`;\n    },\n    __useFilterQueryString: (queryString: string) => {\n      // match everything inside the most exterior parentheses, including them\n      const query = queryString.match(/\\(.*\\)/)?.[0];\n      // get rid of the most exterior parentheses\n      return query?.substring(1, query.length - 1);\n    }\n  };\n\n  /**\n   * Builds query string from provided query object.\n   *\n   * @param query Object containing filters and sort order for querying managed objects. Supported filters are:\n   * - **__and** - Specifies conditions, e.g. `{__and: [{__has: 'c8y_IsDevice'}, {'count': {__gt: 0}}]}`.\n   * - **__or** - Specifies alternative conditions, e.g. `{__or: [{__bygroupid: 10300}, {__bygroupid: 10400}]}`.\n   * - **__eq** - Specified fragment must be equal to given value, e.g. `{'status': 'AVAILABLE'}` (no nested object required).\n   * - **__lt** - Specified fragment must be less then given value, e.g. `{'count': {__lt: 10}}`.\n   * - **__gt** - Specified fragment must be greater then given value, e.g. `{'count': {__gt: 0}}`.\n   * - **__in** - Specified fragment must be equal to one of values in the list, e.g. `{'status': {__in: ['AVAILABLE', 'UNAVAILABLE']}}`.\n   * - **__not** - Negates condition, e.g. `{__not: {'status': 'AVAILABLE'}}`.\n   * - **__bygroupid** - True if filtered managed object is assigned to given group, e.g. `{__bygroupid: 10300}`.\n   * - **__has** - Specified fragment must have a value defined, e.g. `{__has: 'c8y_IsDevice'}`.\n   * - **__useFilterQueryString** - Gets rid of the `$filter=()… $orderby=…` parts of a query and keeps only what's between the most\n   *                                exterior parentheses of the $filter.\n   *                                EXAMPLE: takes a query of the form\n   *                                `$filter=(name eq 'RaspPi*') $orderby=name asc`\n   *                                and turns it into\n   *                                `name eq 'RaspPi*'`\n   *                                This is necessary for searching for smart groups, which are identified by their own query\n   *                                that needs to be passed through.\n   *\n   * Note: if you want to specify the order, you need to wrap your filters within `__filter` property and then add `__orderby` with the array of field paths and sort directions (1 for ascending, -1 for descending), for example:\n   * - `{ __filter: { ... }, __orderby: [{ 'creationTime': -1 }, { 'name': 1 }] }`\n   *\n   * @returns {string} Returns a query string ready to be sent in request params to backend.\n   *\n   * **Example**\n   * ```typescript\n   *   const query = {\n   *     __filter: {\n   *       'name': 'My Device*',\n   *       'c8y_Availability.status': {\n   *         __in: ['AVAILABLE', 'UNAVAILABLE']\n   *       },\n   *       'creationTime': {\n   *         __lt: '2015-11-30T13:28:123Z'\n   *       },\n   *       'c8y_ActiveAlarmsStatus.critical': {\n   *         __gt: 0\n   *       },\n   *       __or: [\n   *         {__not: {__has: 'c8y_ActiveAlarmsStatus.major'}},\n   *         {\n   *           __or: [\n   *             {__bygroupid: 10300},\n   *             {__bygroupid: 10400}\n   *           ]\n   *         }\n   *       ]\n   *     },\n   *     __orderby: [\n   *       {'name': 1},\n   *       {'creationTime': -1},\n   *       {'c8y_ActiveAlarmsStatus.critical': -1}\n   *     ]\n   *   };\n   *\n   *   const params = {\n   *     query: queriesUtil.buildQuery(query)\n   *   };\n   * ```\n   */\n  buildQuery(query): string {\n    const q = [];\n    const filter = this.buildQueryFilter(query.__filter || query);\n    const orderBy = this.buildQueryOrderby(query.__orderby);\n    if (filter) {\n      q.push(`$filter=(${filter})`);\n    }\n    if (orderBy) {\n      q.push(`$orderby=${orderBy}`);\n    }\n    return q.join(' ');\n  }\n\n  buildQueryFilter(queryFilter, _queryKey?, _glueType?): string {\n    const queryKey = _queryKey || null;\n    const glueType = _glueType || 'and';\n\n    const q = [];\n\n    if (Array.isArray(queryFilter)) {\n      queryFilter.forEach(qFilter => {\n        const _q = this.buildQueryFilter(qFilter, null, glueType);\n        if (_q) {\n          q.push(_q);\n        }\n      });\n    } else {\n      let _q;\n      Object.keys(queryFilter).forEach(k => {\n        if (this.operatorFns[k] !== undefined) {\n          _q = this.operatorFns[k](queryFilter[k], queryKey);\n          if (_q) {\n            q.push(_q);\n          }\n        } else {\n          _q = this.operatorFns.__eq(queryFilter[k], k);\n          if (_q) {\n            q.push(_q);\n          }\n        }\n      });\n    }\n\n    return this.glue(q, glueType);\n  }\n\n  buildQueryOrderby(queryOrderbys): string {\n    const o = [];\n    if (queryOrderbys) {\n      queryOrderbys.forEach(q => {\n        Object.keys(q).forEach(k => {\n          if (q[k] !== 0) {\n            o.push(`${k} ${q[k] > 0 ? 'asc' : 'desc'}`);\n          }\n        });\n      });\n    }\n    return o.join(',');\n  }\n\n  addAndFilter(query, filter) {\n    return this.addFilter(query, filter, 'and');\n  }\n\n  addOrFilter(query, filter) {\n    return this.addFilter(query, filter, 'or');\n  }\n\n  addFilter(query, filter, operator: 'and' | 'or') {\n    const oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;\n    const newFilter = { [`__${operator}`]: this.skipEmptyObjects([oldFilter, filter]) };\n    if (!query.__filter && !query.__orderby) {\n      return newFilter;\n    }\n    query.__filter = newFilter;\n    return query;\n  }\n\n  prependOrderbys(query, orderbys) {\n    return this.addOrderbys(query, orderbys, 'prepend');\n  }\n\n  appendOrderbys(query, orderbys) {\n    return this.addOrderbys(query, orderbys, 'append');\n  }\n\n  addOrderbys(query, orderbys, how: 'prepend' | 'append') {\n    const oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;\n    const oldOrderbys = query.__orderby || [];\n    const newOrderbys =\n      how === 'prepend' ? [...orderbys, ...oldOrderbys] : [...oldOrderbys, ...orderbys];\n    const newQuery: any = {\n      __orderby: this.skipEmptyObjects(newOrderbys)\n    };\n    if (!this.isEmptyObject(oldFilter)) {\n      newQuery.__filter = oldFilter;\n    }\n    return newQuery;\n  }\n\n  extractAndMergeOrderBys(queries: string[]): string {\n    if (queries?.length > 0) {\n      const orderByQuery = queries\n        .map(query => query.match(/\\$orderby=(.*)$/)?.[1])\n        .filter(orderBy => !!orderBy)\n        .join(',');\n      return orderByQuery ? `$orderby=${orderByQuery}` : '';\n    }\n  }\n\n  protected glue(stmts: any[], type: string) {\n    return stmts.length > 1 ? `(${stmts.join(`) ${type} (`)})` : stmts[0];\n  }\n\n  protected quoteString(s: any) {\n    return typeof s === 'string' ? `'${this.escapeSingleQuote(s)}'` : s;\n  }\n\n  protected skipEmptyObjects(objs: any[]) {\n    return objs.filter(obj => !this.isEmptyObject(obj));\n  }\n\n  protected isEmptyObject(obj: object) {\n    return Object.keys(obj).length === 0;\n  }\n\n  // OData does not support single quotes in the query. We need to replace all single quotes with double quotes.\n  // http://docs.oasis-open.org/odata/odata/v4.01/cs01/part2-url-conventions/odata-v4.01-cs01-part2-url-conventions.html#sec_URLComponents\n  private escapeSingleQuote(s: string): string {\n    if (typeof s !== 'string') {\n      return s;\n    }\n    return s.replace(/\\'/g, \"''\");\n  }\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IEvent } from './IEvent';\n\n/**\n * This class allows managing for events.\n */\nexport class EventService extends Service<IEvent> {\n  protected baseUrl = 'event';\n  protected listUrl = 'events';\n  protected propertyName = 'events';\n  protected channel = '/events/*';\n\n  /**\n   * Gets the details of a specific event.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const eventId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventService.detail(eventId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IEvent>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new event.\n   *\n   * @param {IEvent} entity Event object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IEvent = {\n   *    source: device,\n   *    text: 'I am an Event!',\n   *    time: '2018-05-02T10:08:00Z',\n   *    type: 'device-type-here',\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await eventService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IEvent): Promise<IResult<IEvent>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates event data.\n   *\n   * @param {Partial<IEvent>} entity Event is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IEvent> = {\n   *    source: device,\n   *    text: 'Changed Event!'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await eventService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IEvent>): Promise<IResult<IEvent>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of events filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying events.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await eventService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IEvent>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an event with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const eventId: number = 1;\n   *\n   *   (async () => {\n   *     const {data, res} = await eventService.delete(eventId);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { Service, IResult, IFetchResponse } from '../core';\nimport { IEvent } from './IEvent';\nimport { IEventBinary } from './IEventBinary';\n\nexport class EventBinaryService extends Service<IEventBinary> {\n  protected baseUrl = 'event';\n  protected listUrl = 'events';\n\n  /**\n   * Uploads an event binary.\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Stream | Buffer | File | Blob} file file to upload.\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const file = Buffer.from('aaa');\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventBinaryService.upload(file, eventId);\n   *   })();\n   * ```\n   */\n  async upload(\n    file: Stream | Buffer | File | Blob,\n    entityOrId: string | number | IEvent\n  ): Promise<IResult<IEventBinary>> {\n    const method = 'POST';\n    const url = this.getDetailUrl(entityOrId);\n    const body = new FormData();\n\n    body.append('file', file);\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Downloads the binary for a given event.\n   * @returns Response wrapped in [[IFetchResponse]]\n   *\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const res = await eventBinaryService.download(eventId);\n   *   })();\n   */\n  async download(entityOrId: string | number | IEvent): Promise<IFetchResponse> {\n    const url = this.getDetailUrl(entityOrId);\n    return await this.fetch(url);\n  }\n\n  /**\n   * Removes the binary for a given event.\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventBinaryService.delete(eventId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IEvent) {\n    return super.delete(entityOrId);\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IEvent): string {\n    let id: string | number;\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else {\n      id = entityOrId as string;\n    }\n    return `${this.listUrl}/${id}/binaries`;\n  }\n}\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { Service, IResult, IFetchResponse, IFetchOptions } from '../core';\nimport { IdReference } from './InventoryService';\nimport { IManagedObject, IManagedObjectBinary } from './IManagedObject';\n\nexport class InventoryBinaryService extends Service<IManagedObjectBinary> {\n  protected baseUrl = 'inventory';\n  protected listUrl = 'binaries';\n  protected propertyName = 'managedObjects';\n\n  /**\n   * Uploads a file and creates a managed object with its metadata.\n   * @param file A file to be uploaded.\n   * @param managedObject An object containing metadata about the file.\n   * Note that you can specify `fileType` and `fileName` in case `file` does not define them\n   * but these two properties will be removed from `managedObject` before saving.\n   */\n  async create(\n    file: Stream | Buffer | File | Blob,\n    managedObject: Partial<IManagedObject> = {}\n  ): Promise<IResult<IManagedObjectBinary>> {\n    const method = 'POST';\n    const url = this.listUrl;\n    const body = new FormData();\n    let fileName;\n    let fileType;\n    if (managedObject.fileName) {\n      fileName = managedObject.fileName;\n      delete managedObject.fileName;\n    }\n    if (managedObject.fileType) {\n      fileType = managedObject.fileType;\n      delete managedObject.fileType;\n    }\n    if (!fileName) {\n      fileName = 'bin';\n    }\n    if (typeof File !== 'undefined' && file instanceof File) {\n      fileName = file.name;\n      fileType = file.type;\n    }\n    if (!managedObject.name) {\n      managedObject.name = fileName;\n    }\n    if (!managedObject.type) {\n      managedObject.type = fileType || 'c8y_upload';\n    }\n    body.append('file', file, fileName);\n    body.append('object', JSON.stringify(managedObject));\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  async delete(managedObjectOrId: IdReference) {\n    return super.delete(managedObjectOrId);\n  }\n\n  async download(managedObjectOrId: IdReference, init?: IFetchOptions): Promise<IFetchResponse> {\n    const url = this.getDetailUrl(managedObjectOrId);\n    return await this.fetch(url, init);\n  }\n\n  /**\n   * Uploads a file and creates a managed object with its metadata. What's more, it invokes an upload progress callback.\n   * @param file A file to be uploaded.\n   * @param managedObject An object containing metadata about the file.\n   * @param onProgress Event handler for progress update, invoked while the browser is uploading the file.\n   */\n  createWithProgress(\n    file: Stream | Buffer | File | Blob,\n    onProgress: EventListener,\n    managedObject: Partial<IManagedObject> = {}\n  ): XMLHttpRequest {\n    const url = `/${this.baseUrl}/${this.listUrl}`;\n    const method = 'POST';\n    const body = new FormData();\n    let fileName;\n    let fileType;\n    if (managedObject.fileName) {\n      fileName = managedObject.fileName;\n      delete managedObject.fileName;\n    }\n    if (managedObject.fileType) {\n      fileType = managedObject.fileType;\n      delete managedObject.fileType;\n    }\n    if (!fileName) {\n      fileName = 'bin';\n    }\n    if (typeof File !== 'undefined' && file instanceof File) {\n      fileName = file.name;\n      fileType = file.type;\n    }\n    if (!managedObject.name) {\n      managedObject.name = fileName;\n    }\n    if (!managedObject.type) {\n      managedObject.type = fileType || 'c8y_upload';\n    }\n    body.append('file', file, fileName);\n    body.append('object', JSON.stringify(managedObject));\n    let bodyHeaders;\n\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = this.client.getFetchOptions().headers;\n    Object.assign(\n      headers,\n      {\n        accept: 'application/json'\n      },\n      bodyHeaders\n    );\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n    xhr.upload.addEventListener('progress', onProgress);\n\n    let xhrBody: XMLHttpRequestBodyInit;\n    if (typeof body.getBuffer === 'function') {\n      xhrBody = body.getBuffer();\n    } else {\n      xhrBody = body as any;\n    }\n    xhr.send(xhrBody);\n\n    return xhr;\n  }\n\n  getXMLHttpResponse(xhr): Promise<IResult<IManagedObjectBinary>> {\n    return new Promise((res, rej) => {\n      xhr.addEventListener('loadend', () => {\n        xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 201)\n          ? res(JSON.parse(xhr.responseText))\n          : rej(\n              xhr.responseText ? { data: JSON.parse(xhr.responseText) } : 'Could not upload file.'\n            );\n      });\n    });\n  }\n\n  /**\n   * Gets binary managed object's id from its download or self URL.\n   *\n   * @param {string} url URL string.\n   *\n   * @returns {number} Binary managed object's id.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = InventoryBinaryService.getIdFromUrl('http://mytenant.cumulocity.com/inventory/binaries/12345');\n   * ```\n   */\n  getIdFromUrl(url: string): string {\n    if (!!url) {\n      const regexp = new RegExp(\n        '\\\\/inventory\\\\/binaries\\\\/(\\\\d+)|\\\\/inventory\\\\/managedObjects\\\\/(\\\\d+)'\n      );\n      const matches = url.match(regexp);\n      return matches && (matches[1] || matches[2]);\n    }\n  }\n}\n","import { IIdentified, Service, IResult, IResultList, IFetchClient, QueriesUtil } from '../core';\nimport { IManagedObject } from './IManagedObject';\nimport { InventoryBinaryService } from './InventoryBinaryService';\n\nimport { Realtime } from '../realtime';\n\n/**\n * Possible types of a child.\n */\nexport enum ChildType {\n  ASSETS = 'childAssets',\n  DEVICES = 'childDevices',\n  ADDITIONS = 'childAdditions'\n}\n\n/**\n * IdReference is only a combined type of string | number | IIdentified\n */\nexport type IdReference = string | number | IIdentified;\n\n/**\n * This class allows for managing managed objects and different child types, see [[ChildType]].\n */\nexport class InventoryService extends Service<IManagedObject> {\n  binary: InventoryBinaryService;\n  queriesUtil: QueriesUtil;\n  protected baseUrl = 'inventory';\n  protected listUrl = 'managedObjects';\n  protected propertyName = 'managedObjects';\n  protected channel = '/managedobjects/*';\n  protected inventoriesQueryParamName = 'query';\n  protected devicesQueryParamName = 'q';\n\n  constructor(client: IFetchClient, realtime?: Realtime) {\n    super(client, realtime);\n    this.queriesUtil = new QueriesUtil();\n    this.binary = new InventoryBinaryService(client);\n  }\n\n  /**\n   * Gets the details of managed object\n   *\n   * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const managedObjId: number = 1;\n   *    const filter = { withChildren: false };\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.detail(managedObjId, filter);\n   *   })();\n   * ```\n   */\n  async detail(managedObjectOrId: IdReference, filter: object = {}) {\n    return super.detail(managedObjectOrId, filter);\n  }\n\n  /**\n   * Creates a new managed object.\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialManagedObj: Partial<IManagedObject> = {\n   *    customFragment: 'yourData'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryService.create(partialManagedObj);\n   *  })();\n   * ```\n   */\n  async create(managedObject: Partial<IManagedObject>) {\n    return super.create(managedObject);\n  }\n\n  /**\n   * Updates managed object data.\n   *\n   * @param {Partial<IManagedObject>} managedObject Managed object is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IManagedObject> = {\n   *    customFragment: 'Changed data',\n   *    name: 'Name'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(managedObject: Partial<IManagedObject>) {\n    return super.update(managedObject);\n  }\n\n  /**\n   * Gets the list of managed objects filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying managed objects.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all managed objects filtered and sorted by given query.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying managed objects.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *  const query = {\n   *      name: 'MY-NAM*'\n   *  }\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.listQuery(query, filter);\n   *   })();\n   * ```\n   */\n  async listQuery(query, filter: object = {}) {\n    filter[this.inventoriesQueryParamName] = this.queriesUtil.buildQuery(query);\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all devices filtered and sorted by given query.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying devices.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *  const query = {\n   *      name: 'MY-NAM*'\n   *  }\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.listQueryDevices(query, filter);\n   *   })();\n   * ```\n   */\n  async listQueryDevices(query, filter: object = {}) {\n    filter[this.devicesQueryParamName] = this.queriesUtil.buildQuery(query);\n    return super.list(filter);\n  }\n\n  /**\n   * Removes managed object with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.\n   * @param {object} params Additional query params.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const managedObjectId: number = 1;\n   *   const params: any = {\n   *     cascade: true\n   *   }\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.delete(managedObjectId, params);\n   *   })();\n   * ```\n   */\n  async delete(managedObjectOrId: IdReference, params: any = {}) {\n    return super.delete(managedObjectOrId, params);\n  }\n\n  /**\n   * Gets a list of child additions from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childAdditionsList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childAdditionsList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.ADDITIONS, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child addition to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildAddition: Partial<IManagedObject> = {\n   *      name: 'Child addition MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildAddition, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.ADDITIONS, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child addition to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.ADDITIONS, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child addition from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.ADDITIONS, childReference, parentReference);\n  }\n\n  /**\n   * Gets a list of child assets from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childAssetsList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childAssetsList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.ASSETS, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child asset to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildAsset: Partial<IManagedObject> = {\n   *      name: 'Child asset MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildAsset, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.ASSETS, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child asset to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsAdd(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.ASSETS, childReference, parentReference);\n  }\n  /**\n   * Adds bulk of existing managed objects as child assets to another managed object (parent).\n   *\n   * @returns Response wrapped in array of [[IResult]]\n   *\n   * @param {IdReference[]} childReference List of existing managed objects IDs that should be added to another managed object (parent).\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childAssetsRefIds: string[] = ['2', '3'];\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsBulkAdd(childAssetsRefIds, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsBulkAdd(childReference: IdReference[], parentReference: IdReference) {\n    return this.addChildBulk(ChildType.ASSETS, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child asset from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.ASSETS, childReference, parentReference);\n  }\n\n  /**\n   * Gets a list of child devices from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childDevicesList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childDevicesList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.DEVICES, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child device to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildDevice: Partial<IManagedObject> = {\n   *      name: 'Child device MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildDevice, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesCreate(mOAsChildDevice, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.DEVICES, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child device to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesAdd(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.DEVICES, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child device from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.DEVICES, childReference, parentReference);\n  }\n\n  /**\n   * Gets an array of measurement fragments supported by the specified managedObject.\n   * e.g. [\"c8y_Temperature\", \"c8y_Humidity\"]\n   *\n   * @returns array of supported measurement fragments\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getSupportedMeasurements(managedObjectOrId: IdReference): Promise<string[]> {\n    return this.getSupportedMeasurementDetails(managedObjectOrId, 'supportedMeasurements');\n  }\n\n  /**\n   * Gets an array of measurement series supported by the specified managedObject.\n   * e.g. [\"c8y_Temperature.T\", \"c8y_Humidity.H\"]\n   *\n   * @returns array of supported measurement series\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getSupportedSeries(managedObjectOrId: IdReference): Promise<string[]> {\n    return this.getSupportedMeasurementDetails(managedObjectOrId, 'supportedSeries');\n  }\n\n  /**\n   * Gets an array of measurement series and fragments supported by the specified managedObject.\n   *\n   * @returns array of supported measurement series and fragments\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getMeasurementsAndSeries(managedObjectOrId: IdReference): Promise<\n    Array<{\n      fragment: string;\n      series: string;\n    }>\n  > {\n    const [supportedMeasurements, supportedSeries] = await Promise.all([\n      this.getSupportedMeasurements(managedObjectOrId),\n      this.getSupportedSeries(managedObjectOrId)\n    ]);\n\n    // sort by longest measurement fragment first\n    const sortedSupportedMeasurements = supportedMeasurements.sort((a, b) => b.length - a.length);\n\n    return supportedSeries\n      .map(s => {\n        const fragment = sortedSupportedMeasurements.find(m => s.indexOf(`${m}.`) === 0);\n        const series = s.replace(`${fragment}.`, '');\n        return {\n          fragment,\n          series\n        };\n      })\n      .filter(obj => !!obj.fragment);\n  }\n\n  /**\n   * Gets a list of KPIs (data point library entries) matching a given managed object\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   */\n  async assetKPIsList(parentReference: IdReference, filter: object = {}) {\n    return this.listKPIs(parentReference, filter);\n  }\n\n  protected async listKPIs(\n    parentReference: IdReference,\n    filter: object = {}\n  ): Promise<IResultList<IManagedObject>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getChildrenUrl('kpis', parentReference);\n    const res = await this.fetch(url, this.changeFetchOptions({ headers, params: filter }, url));\n    const json = await res.json();\n    const data = json[this.propertyName];\n    const paging = this.getPaging(json, filter);\n    return { res, data, paging };\n  }\n\n  protected onBeforeUpdate(objWithId: Partial<IManagedObject>): Partial<IManagedObject> {\n    delete objWithId.lastUpdated;\n    return objWithId;\n  }\n\n  protected onBeforeCreate(managedObject: Partial<IManagedObject>): Partial<IManagedObject> {\n    delete managedObject.id;\n    delete managedObject.lastUpdated;\n    return managedObject;\n  }\n\n  private getChildrenUrl(type: ChildType | string, parentReference: IdReference): string {\n    return `${this.getDetailUrl(parentReference)}/${type}`;\n  }\n\n  private getChildUrl(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): string {\n    const childId = this.getIdString(childReference);\n    return `${this.getChildrenUrl(type, parentReference)}/${childId}`;\n  }\n\n  private async listChildren(\n    type: ChildType,\n    parentReference: IdReference,\n    filter: object = {}\n  ): Promise<IResultList<IManagedObject>> {\n    const headers = { 'content-type': 'application/json' };\n    const url = this.getChildrenUrl(type, parentReference);\n    const res = await this.fetch(url, { headers, params: filter });\n    const json = await res.json();\n    const data = json.references.map(ref => ref.managedObject);\n    const paging = this.getPaging(json, filter);\n    paging.list = pagingFilter => this.listChildren(type, parentReference, pagingFilter);\n    return { res, data, paging };\n  }\n\n  private async createChild(\n    type: ChildType,\n    managedObject: Partial<IManagedObject>,\n    parentReference: IdReference\n  ): Promise<IResult<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const body = JSON.stringify(this.onBeforeCreate(managedObject));\n    const headers = { 'content-type': this.mimeType('managedObject'), accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  private async addChild(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): Promise<IResult<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const childId = this.getIdString(childReference);\n    const body = JSON.stringify({ managedObject: { id: String(childId) } });\n    const headers = {\n      accept: 'application/json',\n      'content-type': this.mimeType('managedObjectReference')\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    let data = await res.json();\n    data = data.managedObject;\n    return { res, data };\n  }\n\n  private async addChildBulk(\n    type: ChildType,\n    childReferenceArray: IdReference[],\n    parentReference: IdReference\n  ): Promise<IResultList<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const references = childReferenceArray.map(childId => ({\n      managedObject: {\n        id: this.getIdString(childId)\n      }\n    }));\n    const body = JSON.stringify({\n      references\n    });\n    const headers = {\n      accept: 'application/json',\n      'content-type': this.mimeType('managedObjectReferenceCollection')\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = (await res.json()).references;\n    return { res, data: data.map(obj => obj.managedObject) };\n  }\n\n  private async removeChild(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): Promise<IResult<null>> {\n    const childId = this.getIdString(childReference);\n    const url = `${this.getChildrenUrl(type, parentReference)}/${childId}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { method, headers });\n    const data = null;\n    return { res, data };\n  }\n\n  private async getSupportedMeasurementDetails(\n    managedObjectOrId: IdReference,\n    type: 'supportedMeasurements' | 'supportedSeries' = 'supportedSeries'\n  ): Promise<string[]> {\n    const url = `${this.getDetailUrl(managedObjectOrId)}/${type}`;\n    this.getIdString(managedObjectOrId);\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return data.c8y_SupportedMeasurements || data.c8y_SupportedSeries;\n  }\n}\n","import { IIdentified, Service, IResult } from '../core';\nimport { IMeasurement, IMeasurementCreate } from './IMeasurement';\nimport { ISeriesFilter } from './ISeriesFilter';\nimport { ISeries } from './ISeries';\n\n/**\n * This class allows for managing measurements.\n */\nexport class MeasurementService extends Service<IMeasurement> {\n  protected baseUrl = 'measurement';\n  protected listUrl = 'measurements';\n  protected propertyName = 'measurements';\n  protected channel = '/measurements/*';\n\n  /**\n   * Gets the details of selected measurement.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @deprecated As of version 10.16.0.0 and the usage of the time series database,\n   * reading a single measurement via id is not supported any more.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const measurementId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await measurementService.detail(measurementId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new measurement.\n   *\n   * @param {Partial<IMeasurementCreate>} entity At least sourceId is mandantory.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: Partial<IMeasurementCreate> = {\n   *    sourceId: device.id,\n   *    fragment: { series: { unit: '%', value: 51 } },\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await measurementService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<IMeasurementCreate>) {\n    return super.create(this.onBeforeCreate(entity));\n  }\n\n  /**\n   * Gets the list of measurements filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying measurements.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await measurementService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes a measurement with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId\n   *\n   * @deprecated As of version 10.16.0.0 and the usage of the time series database,\n   * deleting a single measurement via id is not supported any more.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await measurementService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Gets the list of series in a measurement filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {object} filter Object containing filters for querying measurements.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *    dateFrom: '2018-02-06T10:43:55.077Z',\n   *    dateTo: '2018-02-06T10:50:55.077Z',\n   *    source: device.id\n   *  };\n   *\n   *   (async () => {\n   *     const {data, res} = await measurementService.listSeries(filter);\n   *   })();\n   * ```\n   */\n  async listSeries(params: ISeriesFilter): Promise<IResult<ISeries>> {\n    const url = `${this.baseUrl}/${this.listUrl}/series`;\n    const res = await this.client.fetch(url, { params });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected onBeforeCreate(entity: Partial<IMeasurementCreate>) {\n    if (!entity.time) {\n      entity.time = new Date();\n    }\n    if (!entity.type) {\n      entity.type = 'c8y_Measurement';\n    }\n    if (entity.sourceId) {\n      const { sourceId } = entity;\n      delete entity.sourceId;\n      if (!entity.source) {\n        entity.source = {\n          id: String(sourceId)\n        };\n      }\n    }\n    return entity;\n  }\n}\n","export enum aggregationType {\n  MINUTELY = 'MINUTELY',\n  HOURLY = 'HOURLY',\n  DAILY = 'DAILY'\n}\n\n/**\n * This interface specifies all fragments which can be used\n * to filter for specific series.\n */\nexport interface ISeriesFilter {\n  /**\n   * The ManagedObject which is the source of these series\n   */\n  source: number | string;\n  /**\n   * From which date the series should be gathered\n   */\n  dateFrom: string | Date;\n  /**\n   * To which date the series should be gathered\n   */\n  dateTo: string | Date;\n  /**\n   * For which aggregation it should filter, see [[aggregationType]]\n   */\n  aggregationType?: aggregationType;\n  /**\n   * The series type and name\n   *\n   * **Example**\n   * ```typescript\n   *\n   * const series: string[] = ['c8y_AccelerationMeasurement.acceleration', '...'];\n   * ```\n   */\n  series?: string | string[];\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IAlarm } from './IAlarm';\n\n/**\n * This class allows for managing alarms.\n */\nexport class AlarmService extends Service<IAlarm> {\n  protected baseUrl = 'alarm';\n  protected listUrl = 'alarms';\n  protected propertyName = 'alarms';\n  protected channel = '/alarms/*';\n\n  /**\n   * Gets the details of selected alarms.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const alarmId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await alarmService.detail(alarmId);\n   *    })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IAlarm>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new alarm.\n   *\n   * @param {IAlarm} entity Alarm object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IAlarm = {\n   *    severity: Severity.CRITICAL,\n   *    source: device,\n   *    text: 'I am an Alarm!',\n   *    time: '2018-05-02T10:08:00Z',\n   *    type: 'device-type-here',\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await alarmService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IAlarm): Promise<IResult<IAlarm>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates alarm data.\n   *\n   * @param {Partial<IAlarm>} entity Alarm is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IAlarm> = {\n   *    severity: Severity.MINOR,\n   *    source: device,\n   *    text: 'Changed Alarm!'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await alarmService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IAlarm>): Promise<IResult<IAlarm>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of alarms filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await alarmService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IAlarm>> {\n    return super.list(filter);\n  }\n}\n","import { gettext } from '../gettext';\n\n/**\n * A specific alarm can have one of the following states\n */\nexport enum AlarmStatus {\n  ACKNOWLEDGED = gettext('ACKNOWLEDGED'),\n  CLEARED = gettext('CLEARED'),\n  ACTIVE = gettext('ACTIVE')\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IOperation } from './IOperation';\n\n/**\n * This class allows for managing operations on a device.\n */\nexport class OperationService extends Service<IOperation> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'operations';\n  protected propertyName = 'operations';\n\n  /**\n   * Gets the details of selected operation.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entitytabs.service.ts.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const operationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationService.detail(operationId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IOperation>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new operation.\n   *\n   * @param {IOperation} entity Operation object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IOperation = {\n   *    com_cumulocity_model_WebCamDevice: {\n   *      name: 'take picture',\n   *      parameters: {\n   *         duration: '5s',\n   *         quality: 'HD'\n   *      }\n   *    },\n   *    deviceId: device.id,\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IOperation): Promise<IResult<IOperation>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates operation data.\n   *\n   * @param {Partial<IOperation>} entity Operation is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IOperation> = {\n   *    com_cumulocity_model_WebCamDevice: {\n   *      name: 'take picture',\n   *      parameters: {\n   *         duration: '2s',\n   *         quality: 'HD',\n   *         ratio: '16:9'\n   *      }\n   *    },\n   *    deviceId: device.id,\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IOperation>): Promise<IResult<IOperation>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of operations filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying operations.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await operationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IOperation>> {\n    return super.list(filter);\n  }\n}\n","import { IIdentified, Service, IResult } from '../core';\nimport { IOperationBulk } from './IOperationBulk';\n\n/**\n * This class allows for managing bulk operations.\n */\nexport class OperationBulkService extends Service<IOperationBulk> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'bulkoperations';\n  protected propertyName = 'bulkOperations';\n\n  /**\n   * Gets the details of selected bulk operation.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const bulkOperationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationBulkService.detail(bulkOperationId);\n   *   })();\n   * ```\n   */\n  async detail(operationOrId: string | number | IIdentified) {\n    return super.detail(operationOrId);\n  }\n\n  /**\n   * Creates a new operation.\n   *\n   * @param {Partial<IOperationBulk>} operation Operation object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: Partial<IOperationBulk> = {\n   *    creationRamp: 15,\n   *    groupId: '149044',\n   *    operationPrototype: {\n   *      c8y_Restart: {},\n   *      description: 'Restart device',\n   *      deviceId: device.id,\n   *      status: 'PENDING'\n   *    },\n   *     startDate: '2018-02-15T16:01:00.000Z'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationBulkService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(operation: Partial<IOperationBulk>) {\n    return super.create(operation);\n  }\n\n  /**\n   * Updates a new operation.\n   *\n   * @param {Partial<IOperationBulk>} operation Operation object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateObject: Partial<IOperationBulk> = {\n   *    creationRamp: 15,\n   *    groupId: '149044',\n   *    operationPrototype: {\n   *      c8y_Restart: {},\n   *      description: 'Restart device',\n   *      deviceId: device.id,\n   *      status: 'PENDING'\n   *    },\n   *     startDate: '2018-02-15T16:01:00.000Z'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationBulkService.update(updateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IOperationBulk>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of bulk operations filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await operationBulkService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an bulk operation with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified):} operationOrId Operation object or id.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationBulkService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(operationOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(operationOrId);\n  }\n}\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * A bulk operation can have one of the following states.\r\n */\r\nexport enum OperationBulkStatus {\r\n  ACTIVE = gettext('ACTIVE'),\r\n  IN_PROGRESS = gettext('IN_PROGRESS'),\r\n  COMPLETED = gettext('COMPLETED'),\r\n  DELETED = gettext('DELETED')\r\n}\r\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * A bulk operation can have one of the following general statuses.\r\n */\r\nexport enum OperationBulkGeneralStatus {\r\n  SCHEDULED = gettext('SCHEDULED'),\r\n  EXECUTING = gettext('EXECUTING'),\r\n  EXECUTING_WITH_ERROR = gettext('EXECUTING_WITH_ERROR'),\r\n  CANCELED = gettext('CANCELED'),\r\n  FAILED = gettext('FAILED'),\r\n  SUCCESSFUL = gettext('SUCCESSFUL'),\r\n  DELETED = gettext('DELETED'),\r\n  INCORRECT = gettext('INCORRECT')\r\n}\r\n","import { gettext } from '../gettext';\n\n/**\n * An Operation can have one of the following states.\n */\nexport enum OperationStatus {\n  PENDING = gettext('PENDING'),\n  EXECUTING = gettext('EXECUTING'),\n  SUCCESSFUL = gettext('SUCCESSFUL'),\n  FAILED = gettext('FAILED')\n}\n","import { Service, IResult, IResultList } from '../core';\nimport { ITenant } from './ITenant';\nimport { ICurrentTenant } from './ICurrentTenant';\nimport { ITfaSettings } from './ITfaSettings';\nimport { IApplication } from '../application';\n\n/**\n * @description\n * This service allows for managing tenants.\n */\nexport class TenantService extends Service<ITenant> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'tenants';\n  protected currentTenantUrl = 'currentTenant';\n  protected propertyName = 'tenants';\n  protected fetchOptions = {\n    method: 'PUT',\n    body: '{}',\n    headers: { 'content-type': 'application/json', accept: 'application/json' }\n  };\n\n  /**\n   * Get a representation of a tenant.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's id or tenant object.\n   *\n   * @returns Returns promise object that is resolved with the IIdentified wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantService.detail(tenantId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ<br><br>\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | ITenant): Promise<IResult<ITenant>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new tenant.\n   *\n   * @param {IIdentified} entity Tenant object.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with the details of newly created tenant.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantObject = {\n   *    id: \"sample_tenant\",\n   *    company: \"sample_company\",\n   *    domain: \"sample_domain.com\",\n   *    contactName: \"Mr. Doe\",\n   *    ...\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.create(tenantObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN or ROLE_TENANT_MANAGEMENT_CREATE<br><br>\n   * Note that creating a tenant with adminName, adminPass and adminEmail, creates an admin user with these settings.\n   * For the tenant id SQL keywords (e.g., select, cross, where) are not allowed.\n   */\n  async create(entity: ITenant): Promise<IResult<ITenant>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant data.\n   *\n   * @param {IIdentified} entity Tenant is partially updatable.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with the saved tenant object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: IIdentified = {\n   *     adminName : \"newAdmin\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.update(partialUpdateObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN or ROLE_TENANT_MANAGEMENT_UPDATE<br><br>\n   * Note that updating adminPass and adminEmail updates these settings in the admin user of the tenant.\n   * Updating adminName has no effect.\n   */\n  async update(entity: ITenant): Promise<IResult<ITenant>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of tenants filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying tenants.\n   *\n   * @returns Returns promise object that is resolved with the IIdentified wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantService.list(filter);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenant>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Delete a representation of a tenant.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's id or tenant object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantId: string = \"uniqueTenantId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantService.delete(tenantId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN\n   */\n  async delete(entityOrId: string | number | ITenant): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  async current(): Promise<IResult<ICurrentTenant>> {\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.currentTenantUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * enable support user for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *    (async () => {\n   *      const {res} = await tenantService.enableSupportUser();\n   *   })();\n   * ```\n   */\n  async enableSupportUser(): Promise<IResult<null>> {\n    const url = 'support-user/enable';\n    const res = await this.fetch(url, this.fetchOptions);\n    return { res, data: null };\n  }\n\n  /**\n   * disable support user for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *    (async () => {\n   *      const {res} = await tenantService.disableSupportUser();\n   *   })();\n   * ```\n   */\n  async disableSupportUser(): Promise<IResult<null>> {\n    const url = 'support-user/disable';\n    const res = await this.fetch(url, this.fetchOptions);\n    return { res, data: null };\n  }\n\n  async currentTenantType() {\n    const tenantData = await this.current();\n    if (\n      tenantData.data.customProperties &&\n      tenantData.data.customProperties.tenantType === 'TRIAL'\n    ) {\n      return 'TRIAL';\n    }\n    return 'REGULAR';\n  }\n\n  /**\n   * Returns two factor-authentication settings for given tenant.\n   *\n   * @param tenant The tenant object.\n   *\n   * @returns Promise which resolves with the object with TFA settings.\n   *\n   * **Example**\n   * ```typescript\n   *   (async () => {\n   *     const currentTenant = (await tenantService.current()).data;\n   *     const currentTenantTfaSettings = await tenantService.getTfaSettings(currentTenant);\n   *\n   *     const subtenant = (await tenantService.detail('t12345')).data;\n   *     const subtenantTfaSettings = await tenantService.getTfaSettings(subtenant);\n   *   })();\n   * ```\n   */\n  async getTfaSettings(tenant: ICurrentTenant | ITenant): Promise<ITfaSettings> {\n    const entityOrId: string = this.getIdString(tenant);\n    const url = `tenants/${entityOrId}/tfa`;\n    const res = await this.fetch(url);\n    const tfaSettings = await res.json();\n\n    return tfaSettings;\n  }\n\n  /**\n   * Subscribes a given application to a given tenant.\n   *\n   * @param tenant The tenant object.\n   * @param application The application object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *     const newApp = {\n   *        name: 'New application',\n   *        type: 'HOSTED',\n   *        key: 'new-app'\n   *     };\n   *\n   *     const application = (await applicationService.create(newApp)).data;\n   *     const currentTenant = (await tenantService.current()).data;\n   *\n   *     const {data, res} = await tenantService.subscribeApplication(currentTenant, application);\n   *   })();\n   * ```\n   */\n  async subscribeApplication(\n    tenant: ICurrentTenant | ITenant,\n    application: IApplication\n  ): Promise<IResult<null>> {\n    const entityOrId: string = this.getIdString(tenant);\n    const applicationId = application.id;\n    const url = `tenants/${entityOrId}/applications`;\n    const method = 'POST';\n    const body = JSON.stringify({\n      application: {\n        id: applicationId,\n        self: application.self\n      }\n    });\n    const headers = { 'content-type': this.mimeType('applicationReference') };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    return { res, data: null };\n  }\n\n  /**\n   * Unsubscribes a given application from a given tenant.\n   *\n   * @param tenant The tenant object.\n   * @param application The application object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *     const newApp = {\n   *        name: 'New application',\n   *        type: 'HOSTED',\n   *        key: 'new-app'\n   *     };\n   *\n   *     const application = (await applicationService.create(newApp)).data;\n   *     const currentTenant = (await tenantService.current()).data;\n   *     await tenantService.addApplication(currentTenant, application);\n   *\n   *     await tenantService.unsubscribeApplication(currentTenant, application);\n   *   })();\n   * ```\n   */\n  async unsubscribeApplication(\n    tenant: ICurrentTenant | ITenant,\n    application: IApplication\n  ): Promise<IResult<null>> {\n    const entityOrId: string = this.getIdString(tenant);\n    const url = `tenants/${entityOrId}/applications/${application.id}`;\n    const method = 'DELETE';\n    const res = await this.fetch(url, this.changeFetchOptions({ method }, url));\n    return { res, data: null };\n  }\n\n  protected getIdString(tenant: ITenant | ICurrentTenant): string {\n    return (tenant as ITenant).id || (tenant as ICurrentTenant).name;\n  }\n\n  protected onBeforeCreate(obj: ITenant): any {\n    return obj;\n  }\n}\n","import { gettext } from '../gettext';\r\n\r\nexport enum TenantStatus {\r\n  ACTIVE = gettext('ACTIVE'),\r\n  SUSPENDED = gettext('SUSPENDED')\r\n}\r\n","/**\n * Represents a strategy used for two-factor authentication.\n */\nexport enum TfaStrategy {\n  /** Two-factor authentication with Time-Based One Time Passwords. */\n  TOTP = 'TOTP',\n  /** Two-factor authentication with codes sent via SMSes. */\n  SMS = 'SMS'\n}\n","import { IFetchClient, IIdentified, Service } from '../core';\nimport { IUserInventoryRole } from './IUserInventoryRole';\n\n/**\n * @description\n * This service allows for managing current user's inventory roles.\n */\nexport class UserInventoryRoleService extends Service<IUserInventoryRole> {\n  protected baseUrl;\n  protected listUrl = `inventory`;\n  protected currenUserUrl = `currentUser`;\n  protected propertyName = 'inventoryAssignments';\n\n  constructor(userUrl: string, client: IFetchClient) {\n    super(client);\n    this.baseUrl = `user/${userUrl}/roles`;\n  }\n\n  /**\n   * Get a representation of a concrete current user's inventory role.\n   *\n   * @param {string|number|IUserInventoryRole} entityOrId inventory role id or inventory role object.\n   *\n   * @returns Returns promise object that is resolved with the IUserInventoryRole wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.detail(inventoryRoleId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ<br><br>\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | IUserInventoryRole) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Assign inventory role to current user.\n   *\n   * @param {IUserInventoryRole} entity Inventory Role object.\n   *\n   * @returns Returns promise object that is resolved with the details of newly assigned inventory role.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const inventoryRoleObject: IUserInventoryRole = {\n   *    ...\n   *  };\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.create(inventoryRoleObject);\n   *   })();\n   * ```\n   */\n  async create(entity: IUserInventoryRole) {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates an inventory role.\n   *\n   * @param {Partial<IUserInventoryRole>} entity Inventory Role object.\n   */\n  async update(entity: Partial<IUserInventoryRole>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list the inventory roles applied to a current user.\n   *\n   * @param {object} filter Object containing filters for querying inventory roles.\n   *\n   * @returns Returns promise object that is resolved with the IUserInventoryRole wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userInventoryRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Unassign inventory role from current user\n   *\n   * @param {string|number|IIdentified} entityOrId Inventory Role id or Inventory Role object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.delete(inventoryRoleId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n}\n","import { IIdentified, Service, IResult, IFetchOptions } from '../core';\nimport { IUser } from './IUser';\nimport { ICurrentUser } from './ICurrentUser';\nimport { UserInventoryRoleService } from './UserInventoryRoleService';\nimport { IResetPassword } from './IResetPassword';\nimport { ITotp } from './ITotp';\nimport { ITotpStatus } from './ITotpStatus';\n\n/**\n * @description\n * This service allows for managing users.\n */\nexport class UserService extends Service<IUser> {\n  protected get listUrl() {\n    return `${this.client.tenant}/users`;\n  }\n  protected baseUrl = 'user';\n  protected currentUserUrl = 'currentUser';\n  protected passwordResetUrl = 'passwordReset';\n  protected currentUserPhoneUrl = 'currentUserPhone';\n  protected verifyTFACodeUrl = 'pin';\n  protected totpCurrentUserURL = `${this.currentUserUrl}/totpSecret`;\n  protected verifyTOTPCodeUrl = `${this.totpCurrentUserURL}/verify`;\n  protected activateTOTPCodeUrl = `${this.totpCurrentUserURL}/activity`;\n  protected revokeTOTPSecretUrl = 'totpSecret/revoke';\n  protected get newsletterEmailsUrl() {\n    return `${this.client.tenant}/users/newsletterEmails`;\n  }\n  protected get currentUserPasswordUrl() {\n    return `${this.currentUserUrl}/password`;\n  }\n  protected get revokeAllTokensUrl() {\n    return `/logout/${this.client.tenant}/allUsers`;\n  }\n  protected propertyName = 'users';\n\n  /**\n   * Gets the details of given user.\n   *\n   * @param {string | number | IUser} entityOrId User's id or user object.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.detail(userId);\n   *   })();\n   * ```\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | IUser) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * @param {IUser} entity User object.\n   *\n   * @returns {IResult<IUser>} Returns promise object that is resolved with the details of newly created user.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const userObject: IUser = {\n   *    userName: \"newUser\",\n   *    password: \"userPassword12!@\"\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await userService.create(userObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IUser) {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates user data.\n   *\n   * @param {Partial<IUser>} entity User is partially updatable.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IUser> = {\n   *     \"id\" : \"myuser\",\n   *     \"userName\" : \"newUserName\",\n   *     \"email\": \"newUserEmail@example.com\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await userService.update(partialUpdateObject);\n   *  })();\n   * ```\n   * When user is updated with changed permissions or groups, suitable audit record is created with type\n   * 'User' and activity 'User updated'.\n   */\n  async update(entity: Partial<IUser>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of users filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying users.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes user.\n   *\n   * @param {number|IIdentified} entityOrId User's id or user object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: string = \"uniqueUserId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.delete(userGroupId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Create instance of User Inventory Role Service related with given User.\n   *\n   * @param {string|number|IUser} entityOrId User's id or user object.\n   *\n   * @returns Returns UserInventoryRoleService object that is related with given User.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: string = \"uniqueUserId\";\n   *\n   *    const userInventoryRoleService = userService.inventoryAssignment(userGroupId);\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.create(...);\n   *   })();\n   * ```\n   */\n  inventoryAssignment(entityOrId: string | number | IUser) {\n    return new UserInventoryRoleService(this.getDetailUrl(entityOrId), this.client);\n  }\n\n  /**\n   * Gets user that is currently logged in.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.current();\n   *   })();\n   * ```\n   */\n  async current(): Promise<IResult<IUser>> {\n    const headers = {\n      'content-type': 'application/json',\n      Accept: 'application/vnd.com.nsn.cumulocity.user+json;'\n    };\n    const res = await this.fetch(this.currentUserUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets user that is currently logged in with the list of all roles assigned.\n   *\n   * @returns Returns promise object that is resolved with the ICurrenUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.currentWithEffectiveRoles();\n   *   })();\n   * ```\n   */\n  async currentWithEffectiveRoles(): Promise<IResult<ICurrentUser>> {\n    const headers = {\n      'content-type': 'application/json',\n      Accept: 'application/vnd.com.nsn.cumulocity.currentUser+json;'\n    };\n    const res = await this.fetch(this.currentUserUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Updates the current user\n   *\n   * @param {IUser} user The user object with the properties to be updated\n   *\n   * @return Returns promise object resolved with the IUser wrapped by IResult\n   */\n  async updateCurrent(user: IUser): Promise<IResult<IUser>> {\n    const mimeType = 'application/vnd.com.nsn.cumulocity.user+json';\n    const headers = { 'content-type': mimeType, Accept: mimeType };\n    const body = JSON.stringify(this.onBeforeUpdate(user));\n    const res = await this.fetch(this.currentUserUrl, { headers, body, method: 'PUT' });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Sends an email message with a link allowing user to reset their password.\n   *\n   * @param {string} email The email address to send the message to.\n   * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).\n   *\n   * @returns Returns a request result object.\n   *\n   * **Example**\n   * ```typescript\n   *   const email = 'user@example.com';\n   *   const tenantId = 't123456';\n   *\n   *   (async () => {\n   *     const { res, data } = await userService.sendPasswordResetMail(email, tenantId);\n   *   })();\n   * ```\n   */\n  async sendPasswordResetMail(email: string, tenantId?: string): Promise<IResult<null>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'POST';\n    const url = this.passwordResetUrl;\n    const params = tenantId ? { tenantId } : {};\n    const body = JSON.stringify({ email });\n    const res = await this.fetch(url, { headers, method, params, body });\n    return { res, data: null };\n  }\n\n  /**\n   * Resets user's password to a new one.\n   *\n   * @param {IResetPassword} newPassword Object with token, user's email, new password and its strength indicator.\n   * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).\n   *\n   * @returns Returns a request result object.\n   *\n   * **Example**\n   * ```typescript\n   *   const newPassword: IResetPassword = {\n   *     token: '123123ASDAWERER@#!WEDS$@#!WADA#A#EA#EA#EA',\n   *     email: 'user@example.com',\n   *     newPassword: 'myNewPassword',\n   *     passwordStrength: PasswordStrength.GREEN\n   *   };\n   *   const tenantId = 't123456';\n   *\n   *   (async () => {\n   *     const { res, data } = await userService.resetPassword(newPassword, tenantId);\n   *   })();\n   * ```\n   */\n  async resetPassword(newPassword: IResetPassword, tenantId?: string): Promise<IResult<null>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'PUT';\n    const url = this.passwordResetUrl;\n    const params = tenantId ? { tenantId } : {};\n    const body = JSON.stringify(newPassword);\n    const res = await this.fetch(url, { headers, method, params, body });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is sent via SMS. If invoked with string '0', new TFA code will be sent.\n   *\n   * @param {string} pin The code to verify.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.verifyTFACode('123123');\n   *   })();\n   * ```\n   */\n  async verifyTFACode(pin: string): Promise<IResult<null>> {\n    const method = 'POST';\n    const body = JSON.stringify({ pin });\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(this.verifyTFACodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is generated by a TOTP app.\n   *\n   * @param {string} code The code to verify.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.verifyTotpCode('123123');\n   *   })();\n   * ```\n   */\n  async verifyTotpCode(code): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ code });\n    const res = await this.fetch(this.verifyTOTPCodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is generated by a TOTP app.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.activateTotp();\n   *   })();\n   * ```\n   */\n  async activateTotp(): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ isActive: true });\n    const res = await this.fetch(this.activateTOTPCodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Checks if TOTP is activated and enforced.\n   *\n   * @returns Returns an object of ITotpStatus if it is active.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.getActivityTotp();\n   *      console.log(data.isActive);\n   *   })();\n   * ```\n   */\n  async getActivityTotp(): Promise<IResult<ITotpStatus>> {\n    const method = 'GET';\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.activateTOTPCodeUrl, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Generates a secret which can be used to setup two-factor authentication with TOTP.\n   *\n   * @returns Returns the secret and an URL to a QR Code.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.generateTotpSecret();\n   *      console.log(secret);\n   *   })();\n   * ```\n   */\n  async generateTotpSecret(): Promise<IResult<ITotp>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(this.totpCurrentUserURL, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Revokes a specific user's TOTP secret.\n   *\n   * @param {IUser} user User whose TOTP secret to revoke.\n   *\n   * @returns Status object\n   */\n  async totpRevokeSecret(user: IUser): Promise<IResult<null>> {\n    const url = `${this.getDetailUrl(user)}/${this.revokeTOTPSecretUrl}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { headers, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Saves phone number for the current user.\n   * @param phoneNumber Phone number to save.\n   * @returns Server response and data with updated current user object.\n   */\n  async savePhoneNumber(phoneNumber: string): Promise<IResult<ICurrentUser>> {\n    const url = this.currentUserPhoneUrl;\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: { 'content-type': 'application/json', accept: 'application/json' },\n      body: JSON.stringify({\n        phone: phoneNumber\n      })\n    };\n    const res = await this.fetch(url, options);\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the list of emails of users subscribed for newsletter\n   * on the current tenant and its subtenants.\n   * @returns Server response and data with email addresses as plain text.\n   */\n  async getNewsletterEmails(): Promise<IResult<string>> {\n    const url = this.newsletterEmailsUrl;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: { accept: 'text/plain' }\n    };\n    const res = await this.fetch(url, options);\n    const data = await res.text();\n    return { res, data };\n  }\n\n  /**\n   * Changes password for user.\n   *\n   * @param {string | number | IUser} entityOrId User's id or user object.\n   * @param {string} newPassword New user password.\n   * @param {string} currentUserPassword The password of the currently logged user.\n   *\n   * @returns Returns a result object.\n   */\n  async changeUserPassword(\n    entityOrId: string | number | IUser,\n    newPassword: string,\n    currentUserPassword: string\n  ): Promise<IResult<null>> {\n    const method = 'PUT';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ newPassword, currentUserPassword });\n    const res = await this.fetch(this.changeUserPasswordUrl(entityOrId), { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Changes password for current user.\n   *\n   * @param {string} newPassword New password for current user.\n   * @param {string} currentUserPassword The password of the currently logged user.\n   *\n   * @returns Returns a result object. During this action if preferred login mode is OAI_SECURE new jwt cookie will be set.\n   */\n  async changeCurrentUserPassword(\n    newPassword: string,\n    currentUserPassword: string\n  ): Promise<IResult<null>> {\n    const method = 'PUT';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ newPassword, currentUserPassword });\n    const res = await this.fetch(this.currentUserPasswordUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Revoke tokens for all users. All users logged with \"OAI-Secure\" or \"Single sign-on redirect\" will be logged out.\n   *\n   * @returns Returns a result object.\n   */\n  async revokeTokens(): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.revokeAllTokensUrl, { headers, method });\n    return { res, data: null };\n  }\n\n  hasRole(user: IUser, roleId: string): boolean {\n    return this.hasRoleInUser(user, roleId) || this.hasRoleInGroups(user, roleId);\n  }\n\n  hasAllRoles(user: IUser, roleIds: string[]): boolean {\n    return roleIds.every(roleId => this.hasRole(user, roleId));\n  }\n\n  hasAnyRole(user: IUser, roleIds: string[]): boolean {\n    return roleIds.some(roleId => this.hasRole(user, roleId));\n  }\n\n  hasAnyGlobalRole(user: IUser, globalRoleIds: number[]): boolean {\n    return globalRoleIds.some(globalRoleId => this.hasGlobalRoleInUser(user, globalRoleId));\n  }\n\n  isDeviceUser(user: IUser) {\n    return user.id.match(/^device_/);\n  }\n\n  protected onBeforeUpdate(user: IUser): any {\n    const obj = Object.assign({}, user);\n    delete obj.id;\n    delete obj.userName;\n    return obj;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IUser): string {\n    return `${this.listUrl}/${encodeURIComponent(this.getId(entityOrId))}`;\n  }\n\n  protected getId(entityOrId: string | number | IUser): string {\n    let id: string | number;\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else if (typeof entityOrId === 'object' && entityOrId.userName) {\n      id = entityOrId.userName;\n    } else {\n      id = entityOrId as string | number;\n    }\n    return String(id);\n  }\n\n  protected hasRoleInUser(user, roleId) {\n    const effectiveRoles = user.effectiveRoles || [];\n    return (\n      this.hasRoleInReferences((user && user.roles && user.roles.references) || [], roleId) ||\n      effectiveRoles.some(({ id }) => roleId === id)\n    );\n  }\n\n  protected hasRoleInGroups(user, roleId) {\n    const groupReferences = (user && user.groups && user.groups.references) || [];\n    return groupReferences.some(groupRef =>\n      this.hasRoleInReferences(groupRef.group.roles.references, roleId)\n    );\n  }\n\n  protected hasRoleInReferences(references, roleId) {\n    return references.some(ref => ref.role.id === roleId);\n  }\n\n  protected changeUserPasswordUrl(entityOrId: string | number | IUser) {\n    return `${this.client.tenant}/users/${this.getId(entityOrId)}/password`;\n  }\n\n  protected hasGlobalRoleInUser(user: IUser, globalRoleId: number) {\n    const groupReferencesIds = (user?.groups?.references || []).map(gR => gR?.group?.id);\n    return groupReferencesIds.some(id => id === globalRoleId);\n  }\n}\n","export enum PasswordStrength {\n  GREEN = 'GREEN',\n  RED = 'RED',\n  YELLOW = 'YELLOW'\n}\n","import { IFetchClient, Service, IResult, IFetchResponse } from '../core';\nimport { IApplication } from './IApplication';\nimport { IApplicationBinary } from './IApplicationBinary';\nimport { Stream } from 'stream';\nimport FormData from 'form-data';\nimport { IUploadParamsOverride } from './IUploadParamsOverride';\n\nexport class ApplicationBinaryService extends Service<IApplicationBinary> {\n  protected baseUrl;\n  protected listUrl = 'binaries';\n  protected propertyName = 'attachments';\n\n  constructor(client: IFetchClient, applicationOrId: string | number | IApplication) {\n    super(client);\n    this.baseUrl = `application/applications/${this.getIdString(applicationOrId)}`;\n  }\n\n  async upload(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ): Promise<IResult<IApplicationBinary>> {\n    const url = uploadParamsOverride?.listUrl || this.listUrl;\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(binary, fileName, uploadParamsOverride);\n    let bodyHeaders;\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = Object.assign(\n      uploadParamsOverride?.headers || {\n        Accept: 'application/json'\n      },\n      bodyHeaders\n    );\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  uploadWithProgressXhr(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    onProgress,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ): XMLHttpRequest {\n    const url = `/${this.baseUrl}/${uploadParamsOverride?.listUrl || this.listUrl}`;\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(binary, fileName, uploadParamsOverride);\n    let bodyHeaders;\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = this.client.getFetchOptions().headers;\n    Object.assign(\n      headers,\n      uploadParamsOverride?.headers || {\n        Accept: 'application/json'\n      }\n    );\n    Object.assign(headers, bodyHeaders);\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    xhr.upload.addEventListener('progress', onProgress);\n\n    let xhrBody: XMLHttpRequestBodyInit;\n    if (typeof body.getBuffer === 'function') {\n      xhrBody = body.getBuffer();\n    } else {\n      xhrBody = body as any;\n    }\n    xhr.send(xhrBody);\n    return xhr;\n  }\n\n  getXMLHttpResponse(xhr): Promise<IApplication> {\n    return new Promise((res, rej) => {\n      xhr.addEventListener('loadend', () => {\n        xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 201)\n          ? res(JSON.parse(xhr.responseText))\n          : rej(\n              xhr.responseText ? { data: JSON.parse(xhr.responseText) } : 'Could not upload file.'\n            );\n      });\n    });\n  }\n\n  async list(filter?) {\n    return super.list(filter);\n  }\n\n  async delete(binaryOrId: string | number | IApplicationBinary) {\n    return super.delete(binaryOrId);\n  }\n\n  async listPlugins() {\n    const headers = { accept: 'application/json' };\n    const url = `${this.listUrl}/plugins`;\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async addPlugin(pluginName: string, pluginFile: Stream | Buffer | ArrayBuffer) {\n    const url = `${this.listUrl}/plugins/${encodeURIComponent(pluginName)}`;\n    const method = 'POST';\n    const body = new FormData();\n    const bufferOrStream = pluginFile instanceof ArrayBuffer ? Buffer.from(pluginFile) : pluginFile;\n    body.append('file', bufferOrStream);\n\n    const headers = {\n      accept: 'application/json'\n    };\n\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async removePlugin(pluginName: string) {\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const url = `${this.listUrl}/plugins/${pluginName}`;\n    const res = await this.fetch(url, { method, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async updateFiles(files: Array<{ path: string; contents: Stream | Buffer | ArrayBuffer }>) {\n    const url = `${this.listUrl}/files`;\n    const method = 'POST';\n    const body = new FormData();\n    files.forEach(file => {\n      const bufferOrStream =\n        file.contents instanceof ArrayBuffer ? Buffer.from(file.contents) : file.contents;\n      body.append(file.path, bufferOrStream);\n    });\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async downloadArchive(binaryId: number | string): Promise<IFetchResponse> {\n    const url = `${this.listUrl}/${binaryId}`;\n    return await this.fetch(url);\n  }\n\n  private createBinaryRequestBody(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ) {\n    const body = new FormData();\n    const bufferOrStream = binary instanceof ArrayBuffer ? Buffer.from(binary) : binary;\n    let uploadFileName = fileName;\n    if (typeof File !== 'undefined' && binary instanceof File) {\n      uploadFileName = binary.name;\n    }\n    body.append(uploadParamsOverride?.bodyFileProperty || 'file', bufferOrStream, uploadFileName);\n    body.append('fileName', uploadFileName);\n    if (uploadParamsOverride?.requestBody) {\n      for (const key in uploadParamsOverride.requestBody) {\n        if (uploadParamsOverride.requestBody.hasOwnProperty(key)) {\n          body.append(key, JSON.stringify(uploadParamsOverride.requestBody[key]));\n        }\n      }\n    }\n    return body;\n  }\n}\n","export enum ApplicationType {\n  EXTERNAL = 'EXTERNAL',\n  HOSTED = 'HOSTED',\n  MICROSERVICE = 'MICROSERVICE',\n  FEATURE = 'FEATURE'\n}\n","import {\n  IApplicationInstanceLog,\n  IApplicationInstanceLogRequestParams,\n  IApplicationManagedObject\n} from './IApplicationInstanceDetails';\nimport { IFetchResponse, IResult, IResultList, Service } from '../core';\nimport { InventoryService } from '../inventory';\nimport { ITenant, TenantService } from '../tenant';\nimport { IUser, UserService } from '../user';\nimport { ApplicationBinaryService } from './ApplicationBinaryService';\nimport { ApplicationType } from './ApplicationType';\nimport { IApplication } from './IApplication';\nimport { gettext } from '../gettext';\nimport { IApplicationVersionDeleteParams, IApplicationVersion } from './IApplicationVersion';\nimport { IManifest } from './IManifest';\nimport { ApplicationAvailability } from './ApplicationAvailability';\n\nexport class ApplicationService extends Service<IApplication> {\n  protected baseUrl = 'application';\n  protected listUrl = 'applications';\n  protected propertyName = 'applications';\n  protected channel = '/applications/*';\n\n  /**\n   * Creates a new application.\n   *\n   * @param {IIdentified} entity Application object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const newApp = {\n   *    name: 'New application',\n   *    type: 'EXTERNAL',\n   *    key: 'new-app'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.create(newApp);\n   *  })();\n   * ```\n   */\n  async create(entity: IApplication): Promise<IResult<IApplication>> {\n    return super.create(entity);\n  }\n\n  async clone(entity: IApplication): Promise<IResult<IApplication>> {\n    const url = `${this.getDetailUrl(entity)}/clone`;\n    const method = 'POST';\n    const body = '';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the list of existing applications filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying applications.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await applicationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IApplication>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all application versions.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @param {object} params Additional request parameters.\n   *\n   * @returns Returns list of all application versions.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {res, data} = await applicationService.listVersions(applicationId);\n   *   })();\n   * ```\n   */\n  async listVersions(\n    entityOrId: string | number | IApplication,\n    params: object = {}\n  ): Promise<IResultList<IApplicationVersion>> {\n    const id = this.getEntityId(entityOrId);\n    const url = `${this.listUrl}/${id}/versions`;\n    const headers = { 'content-type': 'application/json' };\n    try {\n      const res = await this.fetch(url, { headers, params });\n      const data = (await res.json())?.applicationVersions;\n      return { res, data };\n    } catch (ex) {\n      if (ex.res.status === 404) {\n        const { data: appDetail, res } = await this.detail(entityOrId);\n        return { res, data: appDetail.applicationVersions };\n      }\n      throw ex;\n    }\n  }\n\n  /**\n   * Gets the details of selected application.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.detail(applicationId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IApplication): Promise<IResult<IApplication>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Updates existing application.\n   * Make sure that you specifiy the application id within the update object.\n   *\n   * @param {IIdentified} entity Application object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateApp = {\n   *    id: 38\n   *    name: 'Updated application'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.update(updateApp);\n   *  })();\n   * ```\n   */\n  async update(entity: IApplication): Promise<IResult<IApplication>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Removes an application with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the application.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const removeApp: object = {\n   *     id: 38\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res} = await applicationService.delete(removeApp);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IApplication): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  async listByName(name: string): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const url = `applicationsByName/${encodeURIComponent(name)}`;\n    const res = await this.fetch(url, { headers });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByTenant(\n    tenantOrName?: string | ITenant,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const tenantService = new TenantService(this.client);\n    const tenantName = this.getIdString(tenantOrName || (await tenantService.current()).data.name);\n    const url = `applicationsByTenant/${encodeURIComponent(tenantName)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByOwner(\n    tenantOrName?: string | ITenant,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const tenantService = new TenantService(this.client);\n    const tenantName = this.getIdString(tenantOrName || (await tenantService.current()).data.name);\n    const url = `applicationsByOwner/${encodeURIComponent(tenantName)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByUser(\n    userOrId?: string | number | IUser,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const userService = new UserService(this.client);\n    const userId = this.getIdString(userOrId || (await userService.current()).data);\n    const url = `applicationsByUser/${encodeURIComponent(userId)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async reactivateArchive(appId: number | string): Promise<IResult<null>> {\n    const url = `${this.listUrl}/${appId}/refresh`;\n    const method = 'POST';\n    const body = '';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    return { res, data: null };\n  }\n\n  binary(application: string | number | IApplication): ApplicationBinaryService {\n    return new ApplicationBinaryService(this.client, application);\n  }\n\n  getHref(application: IApplication): string {\n    if (application.type === ApplicationType.EXTERNAL) {\n      return application.externalUrl;\n    }\n    return `/apps/${application.public ? 'public/' : ''}${application.contextPath}`;\n  }\n\n  /**\n   * Checks if current user can access specified application.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | IApplication} application Application name or contextPath as a\n   * string or Application object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const checkApp: object = {\n   *    name: 'myApplication'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.isAvailable(checkApp);\n   *  })();\n   * ```\n   */\n  async isAvailable(application: string | Partial<IApplication>): Promise<IResult<boolean>> {\n    const { res, data } = await this.listByUser(undefined, {\n      dropOverwrittenApps: true,\n      noPaging: true\n    });\n\n    const available: boolean = (data || []).some((availableApp: IApplication) =>\n      typeof application === 'string'\n        ? availableApp.name === application || availableApp.contextPath === application\n        : this.isMatch(availableApp, application)\n    );\n\n    return { data: available, res };\n  }\n\n  /**\n   * Gets instance details of the specified application (microservice).\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getStatusDetails(applicationId);\n   *   })();\n   * ```\n   */\n  async getStatusDetails(\n    entityOrId: string | number | IApplication\n  ): Promise<IResultList<IApplicationManagedObject>> {\n    const appId = this.getEntityId(entityOrId);\n    const inventory = new InventoryService(this.client, this.realtime);\n    return inventory.list({ type: `c8y_Application_${appId}` });\n  }\n\n  /**\n   * Extracts instance names of the provided IApplicationManagedObject.\n   *\n   * @param {IApplicationManagedObject} appStatusDetails Application details managedObject.\n   *\n   * @returns instance names\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getStatusDetails(applicationId);\n   *      const instances = data.map((appMO) => applicationService.getInstanceNames(appMO));\n   *   })();\n   * ```\n   */\n  getInstanceNames(appStatusDetails: IApplicationManagedObject): string[] {\n    let instanceNames = new Array<string>();\n    if (appStatusDetails && appStatusDetails.c8y_Status && appStatusDetails.c8y_Status.instances) {\n      instanceNames = Object.keys(appStatusDetails.c8y_Status.instances);\n    }\n    return instanceNames;\n  }\n\n  /**\n   * Get log for a specific application instance.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {string} instanceName instance name of the application.\n   *\n   * @param {IApplicationInstanceLogRequestParams} params Object containing parameters for querying the log file.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *    const applicationInstanceName: string = 'apama-ctrl-1c-4g-scope-t123456789-deployment-abcdefghij-abcde';\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getInstanceLog(applicationId, applicationInstanceName);\n   *   })();\n   * ```\n   */\n  async getInstanceLog(\n    entityOrId: string | number | IApplication,\n    instanceName: string,\n    params?: IApplicationInstanceLogRequestParams\n  ): Promise<IResult<IApplicationInstanceLog>> {\n    const url = `${this.getDetailUrl(entityOrId)}/logs/${instanceName}`;\n    const headers = { accept: this.mimeType('applicationLogs') };\n    const res = await this.fetch(url, { headers, params });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Dynamic options are stored on the API in a specific `config: {}` object. They can\n   * be used to configure the app dynamically.\n   *\n   * Note: To avoids conflicts with the default Config, it is recommended\n   * to use a certain namespace.\n   * @param entityOrId Entity or Id of the application.\n   * @param config Configuration to be updated.\n   * @returns Returns updated configuration.\n   */\n  async updateApplicationConfig<T>(\n    entityOrId: string | number | IApplication,\n    config: T\n  ): Promise<IApplication & { config: T }> {\n    const id = this.getEntityId(entityOrId);\n    const { data: app } = await this.detail(id);\n    const currentConfig = app?.config || {};\n    const newConfig = { ...currentConfig, ...config };\n    const updatedConfigApp = await this.update({\n      id,\n      config: newConfig\n    });\n    return (await updatedConfigApp)?.data as any;\n  }\n\n  /**\n   * Gets manifest (cumulocity.json file) of a given application.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {string} app version\n   *\n   * @returns Application manifest object.\n   */\n  async getAppManifest(app: IApplication, version?: string): Promise<IManifest> {\n    const date = new Date();\n    let result: IFetchResponse;\n    if (!version) {\n      result = await this.client.fetch(\n        `/apps/${app.contextPath}/cumulocity.json?nocache=${date.getTime()}`\n      );\n    } else {\n      result = await this.client.fetch(\n        `/apps/${app.contextPath}@${version}/cumulocity.json?nocache=${date.getTime()}`\n      );\n    }\n    if (result.status >= 400) {\n      throw new Error(gettext('No Cumulocity IoT manifest found.'));\n    }\n    const c8yJson = await result.json();\n    return c8yJson;\n  }\n\n  /**\n   * Updates manifest (cumulocity.json file) of a given application.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {any} manifestJSON Application manifest object to be stored.\n   *\n   * @returns Application manifest object.\n   */\n  async storeAppManifest(entityOrId: string | number | IApplication, manifestJSON: any) {\n    return await this.binary(entityOrId).updateFiles([\n      { path: 'cumulocity.json', contents: JSON.stringify(manifestJSON) as any }\n    ]);\n  }\n\n  /**\n   * Sets tags for specific application package version.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {string} version Application package version which tags will be set.\n   *\n   * @param {string[]} tags Tags array to set on package version\n   *\n   * @returns Application version object.\n   */\n  async setPackageVersionTag(app: IApplication, version: string, tags: string[]) {\n    const url = `${this.getDetailUrl(app)}/versions/${version}`;\n    const method = 'PUT';\n    const body = JSON.stringify({ tags });\n    const headers = {\n      accept: 'application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9',\n      'content-type': 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Retrieves the manifest of the application behind the given context path.\n   * @param contextPath\n   */\n  async getManifestOfContextPath(contextPath: string): Promise<IResult<Partial<IApplication>>> {\n    const url = `${this.getDetailUrl(contextPath)}/manifest`;\n    const res = await this.fetch(url);\n    const { application } = await res.json();\n    return {\n      res,\n      data: application\n    };\n  }\n\n  /**\n   * Removes package version.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {IApplicationVersionDeleteParams} params Version or tag indication package to remove.\n   *\n   * @returns Request response.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const { res } = await applicationService.deleteVersionPackage(app, {version: '1.0.0'});\n   *\n   *    const { res } = await applicationService.deleteVersionPackage(app, {tag: 'next'});\n   *\n   * ```\n   */\n  async deleteVersionPackage(app: IApplication, params: IApplicationVersionDeleteParams) {\n    const url = `${this.getDetailUrl(app)}/versions/`;\n    const method = 'DELETE';\n    const res = await this.fetch(url, this.changeFetchOptions({ method, params }, url));\n    return { res, data: null };\n  }\n\n  /**\n   * Updates the availability of the given application to the provided value.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {any} availability The new application availability.\n   *\n   * @returns Updated application.\n   */\n  async updateApplicationAvailability(\n    entityOrId: string | number | IApplication,\n    availability: ApplicationAvailability\n  ): Promise<IResult<IApplication>> {\n    const id = this.getEntityId(entityOrId);\n    return await this.update({\n      id,\n      availability\n    });\n  }\n\n  private isMatch(object, source): boolean {\n    return Object.keys(source).every(key => {\n      if (Array.isArray(object[key]) && Array.isArray(source[key])) {\n        return source[key].every(el => object[key].includes(el));\n      } else if (\n        typeof object[key] === 'object' &&\n        object[key] !== null &&\n        typeof source[key] === 'object' &&\n        source[key] !== null\n      ) {\n        return this.isMatch(object[key], source[key]);\n      } else {\n        return object[key] === source[key];\n      }\n    });\n  }\n}\n","import { IManagedObject } from '../inventory';\n\nexport enum InstanceStatus {\n  Up = 'Up',\n  Unhealthy = 'Unhealthy',\n  Down = 'Down',\n  Unknown = 'Unknown'\n}\n\nexport interface ILastUpdated {\n  date: {\n    $date: string;\n  };\n  offset: number;\n  [key: string]: any;\n}\n\nexport interface IInstanceDetails {\n  lastUpdated: ILastUpdated;\n  memoryInBytes: number;\n  scheduled: boolean;\n  restarts: number;\n  cpuInMillis: number;\n  [key: string]: any;\n}\n\nexport interface IApplicationStatus {\n  lastUpdated: ILastUpdated;\n  instances: {\n    [instanceName: string]: IInstanceDetails;\n  };\n  details: {\n    desired: number;\n    aggregatedResources: {\n      memory: string;\n      cpu: string;\n    };\n    active: number;\n    restarts: number;\n  };\n  status: InstanceStatus;\n  [key: string]: any;\n}\n\nexport interface IApplicationManagedObjectAdditions {\n  c8y_Status?: IApplicationStatus;\n  applicationOwner?: string;\n  c8y_Subscriptions?: {\n    [tenantId: string]: IApplicationStatus;\n  };\n  applicationId?: string;\n  name?: string;\n  c8y_SupportedLogs?: string[];\n  [key: string]: any;\n}\n\nexport type IApplicationManagedObject = IManagedObject & IApplicationManagedObjectAdditions;\n\nexport interface IApplicationInstanceLog {\n  dateFrom: string;\n  dateTo: string;\n  logs: string;\n  truncated: boolean;\n  [key: string]: any;\n}\n\nexport interface IApplicationInstanceLogRequestParams {\n  dateFrom?: string;\n  dateTo?: string;\n  /**\n   * Limits the maximum number of lines to be returned by the backend.\n   */\n  limit?: number;\n  [key: string]: any;\n}\n","export enum BillingMode {\n  SUBSCRIPTION = 'SUBSCRIPTION',\n  RESOURCES = 'RESOURCES'\n}\n","export enum Isolation {\n  PER_TENANT = 'PER_TENANT',\n  MULTI_TENANT = 'MULTI_TENANT'\n}\n","import { gettext } from '../gettext';\n\nexport enum ApplicationAvailability {\n  MARKET = gettext('MARKET'),\n  PRIVATE = gettext('PRIVATE'),\n  SHARED = gettext('SHARED')\n}\n","import { Service, IResult, IResultList } from '../core';\r\nimport { ISystemOption } from './ISystemOption';\r\n\r\nexport class SystemOptionsService extends Service<ISystemOption> {\r\n  protected baseUrl = 'tenant/system';\r\n  protected listUrl = 'options';\r\n  protected propertyName = 'options';\r\n\r\n  /**\r\n   * Gets the details of given system option.\r\n   *\r\n   * @param {string|number|IIdentified} option System option object with mandantory fragments.\r\n   *\r\n   * @returns Response wrapped in [[IResult]]\r\n   *\r\n   * **Example**\r\n   * ```typescript\r\n   *\r\n   *    const option: ISystemOption = {\r\n   *      category: 'alarm.type.mapping',\r\n   *      key: 'temp_to_high'\r\n   *    };\r\n   *\r\n   *    (async () => {\r\n   *      const {data, res} = await systemOptionsService.detail(option);\r\n   *   })();\r\n   * ```\r\n   */\r\n  async detail(option: ISystemOption): Promise<IResult<ISystemOption>> {\r\n    return super.detail(option);\r\n  }\r\n\r\n  /**\r\n   * Gets the list of system options filtered by parameters.\r\n   *\r\n   * @returns Response wrapped in [[IResultList]]\r\n   *\r\n   * @param {object} filter Object containing filters for querying system options.\r\n   *\r\n   * **Example**\r\n   * ```typescript\r\n   *\r\n   *  const filter: object = {\r\n   *     pageSize: 100,\r\n   *     withTotalPages: true\r\n   *   };\r\n   *\r\n   *   (async () => {\r\n   *     const {data, res, paging} = await systemOptionsService.list(filter);\r\n   *   })();\r\n   * ```\r\n   */\r\n  async list(filter: object = {}): Promise<IResultList<ISystemOption>> {\r\n    const headers = { 'content-type': 'application/json' };\r\n    const url = this.listUrl;\r\n    const res = await this.fetch(url, { headers, params: filter });\r\n    const json = await res.json();\r\n    const data = json[this.propertyName];\r\n\r\n    return { res, data };\r\n  }\r\n\r\n  protected getDetailUrl(option: ISystemOption): string {\r\n    return `${this.listUrl}/${option.category}/${option.key}`;\r\n  }\r\n\r\n  protected onBeforeCreate(obj: ISystemOption): any {\r\n    return obj;\r\n  }\r\n}\r\n","import { Service, IResultList, IResult, IIdentified } from '../core';\nimport { ITenantOption } from './ITenantOption';\nimport { ITenantOptionDetailParams } from './ITenantOptionDetailParams';\n\n/**\n * @description\n * This service allows for managing tenant's options.\n */\nexport class TenantOptionsService extends Service<ITenantOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'options';\n  protected propertyName = 'options';\n\n  private securityOptionsCategories = ['password'];\n  private securityOptionsListUrl = 'security-options';\n  private systemOptions = 'system';\n\n  /**\n   * Get a representation of a tenant's option.\n   *\n   * @param entity Tenant option object.\n   * @param params Additional query parameters.\n   *\n   * @returns Returns promise object that is resolved with\n   * the ITenantOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   * const option: ITenantOption = {\n   *   category: 'access.control',\n   *   key: 'allow.origin'\n   * };\n   * const params: ITenantOptionDetailParams = {\n   *   evaluate: 'inherited'\n   * };\n   * (async () => {\n   *   const { data, res } = await tenantService.detail(option);\n   *   console.log('value inherited from parent tenant:', data.value);\n   * })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_READ\n   */\n  async detail(\n    entity: ITenantOption,\n    params: ITenantOptionDetailParams = {}\n  ): Promise<IResult<ITenantOption>> {\n    return super.detail(entity, params);\n  }\n\n  /**\n   * Creates a new tenant's option.\n   *\n   * @param {ITenantOption} entity Tenant's Option object.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with\n   * the details of newly created tenant option.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantObject = {\n   *    id: \"sample_tenant\",\n   *    company: \"sample_company\",\n   *    domain: \"sample_domain.com\",\n   *    contactName: \"Mr. Doe\",\n   *    ...\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.create(tenantObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_ADMIN<br><br>\n   * Options are category-key-value tuples, storing tenant configuration.Some categories of options\n   * allow creation of new one, other are limited to predefined set of keys.<br><br>\n   * Any option of any tenant can be defined as \"non-editable\" by \"management\" tenant. Afterwards, any PUT or DELETE\n   * requests made on that option by the owner tenant, will result in 403 error (Unauthorized).\n   */\n  async create(entity: ITenantOption): Promise<IResult<ITenantOption>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant's option data.\n   *\n   * @param {ITenantOption} entity Tenant option is partially updatable.\n   *\n   * @returns {IResult<ITenantOption>} Returns promise object that is resolved with the saved tenant option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: IIdentified = {\n   *     value : \"http://developer.cumulocity.com\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantOptionsService.update(partialUpdateObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_ADMIN\n   */\n  async update(entity: ITenantOption): Promise<IResult<ITenantOption>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of tenant's options filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying tenant options.\n   *\n   * @returns {IResultList<ITenantOption>} Returns promise object that is resolved\n   * with the ITenantOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantOptionsService.list(filter);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_READ\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenantOption>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Delete a representation of a tenant's option.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's option id or tenant's option object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantOptionId: string = \"uniqueTenantId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantOptionsService.delete(tenantOptionId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  protected getDetailUrl(entity: ITenantOption): string {\n    const encodedCategory = encodeURIComponent(entity.category);\n    const encodedKey = encodeURIComponent(entity.key);\n    if (this.securityOptionsCategories.indexOf(entity.category) > -1) {\n      return `${this.securityOptionsListUrl}/${encodedCategory}/${encodedKey}`;\n    } else {\n      return `${this.listUrl}/${encodedCategory}/${encodedKey}`;\n    }\n  }\n\n  protected onBeforeCreate(obj: ITenantOption): any {\n    return obj;\n  }\n}\n","import { Service, IResult } from '../core';\nimport { ITenantSecurityOption } from './ITenantSecurityOption';\n\n/**\n * @description\n * This service allows to get tenant security option.\n */\nexport class TenantSecurityOptionsService extends Service<ITenantSecurityOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'security-options';\n  protected category = 'password';\n  protected propertyName = 'options';\n\n  /**\n   * Get a specific tenant's security option.\n   *\n   * @param {ITenantSecurityOption} Tenant's security option object with key value.\n   *\n   * @returns Returns promise object that is resolved with the ITenantSecurityOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *     const option: ITenantSecurityOption = {\n   *        key: 'limit.validity'\n   *      };\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantSecurityOptionsService.detail(option);\n   *   })();\n   * ```\n   */\n  async detail(\n    tenantSecurityOption: ITenantSecurityOption\n  ): Promise<IResult<ITenantSecurityOption>> {\n    return super.detail(tenantSecurityOption);\n  }\n\n  protected getDetailUrl(tenantSecurityOption: ITenantSecurityOption): string {\n    return `${this.listUrl}/${this.category}/${tenantSecurityOption.key}`;\n  }\n\n  protected onBeforeCreate(obj: ITenantSecurityOption): any {\n    return obj;\n  }\n}\n","import { IIdentified, IResult, IResultList, Service } from '../core';\nimport { ITenantLoginOption } from './ITenantLoginOptions';\n\n/**\n * @description\n * This service allows to get tenant login options.\n */\nexport class TenantLoginOptionsService extends Service<ITenantLoginOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'loginOptions';\n  protected propertyName = 'loginOptions';\n\n  /**\n   * Gets the details of login option.\n   *\n   * @param entityIdentityOrId Login option's id or login option object.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantLoginOptionId: string = 'uniqueTenantLoginOptionId';\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantLoginOptionsService.detail(tenantLoginOptionId);\n   *   })();\n   * ```\n   */\n  async detail(entityIdentityOrId: string | IIdentified): Promise<IResult<ITenantLoginOption>> {\n    return super.detail(entityIdentityOrId);\n  }\n\n  /**\n   * Gets the list of tenant's login options filtered by parameters.\n   *\n   * @param filter Object containing filters for querying tenant's login options.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     tenantId: '1111111'\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenantLoginOption>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all tenant's login options for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.listForCurrentTenant();\n   *   })();\n   * ```\n   */\n  async listForCurrentTenant(): Promise<IResultList<ITenantLoginOption>> {\n    return super.list({ tenantId: this.client.tenant });\n  }\n\n  /**\n   * Gets the list of all tenant's login options for management tenant.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.listForManagement();\n   *   })();\n   * ```\n   */\n  async listForManagement(): Promise<IResultList<ITenantLoginOption>> {\n    return super.list({ management: true });\n  }\n\n  /**\n   * Creates a new tenant login option.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the details of newly created tenant login option.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.create(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async create(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant's login option data.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the saved tenant's login option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    id: \"2eff9a0b-e376-4ce8-a0f1-0a07cef8a8a1\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.update(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async update(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Update tenant's login option data if id exists in object, otherwise create new entity.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the saved tenant's login option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    id: \"2eff9a0b-e376-4ce8-a0f1-0a07cef8a8a1\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.save(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async save(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return entity.id ? this.update(entity) : this.create(entity);\n  }\n\n  /**\n   * Removes tenant's login option.\n   *\n   * @param entityOrId Tenant's login option's id or tenant's login option object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantLoginOptionId: string = 'uniqueTenantLoginOptionId';\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantLoginOptionsService.delete(tenantLoginOptionId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","/**\n * A list of supported [[ITenantLoginOption]] which\n * describe the way a user can login to the Platform.\n */\nimport { TfaStrategy } from '../tenant';\n\nexport interface ITenantLoginOptions {\n  /**\n   * Link to the resource\n   */\n  self?: string;\n  /**\n   * The list of tenant login options\n   */\n  loginOptions: ITenantLoginOption[];\n}\n\n/**\n * Describes the login option which can be requested by any\n * application on startup without login. It describes which kind\n * of login mechanism (e.g. Basic, SSO or OAI-Secure) is\n * supported by the current Platform.\n */\nexport interface ITenantLoginOption {\n  /**\n   * Identifies the login option\n   */\n  id?: string;\n  /**\n   * Login option type\n   */\n  type?: TenantLoginOptionType;\n  /**\n   * Grant type\n   */\n  grantType?: GrantType;\n  /**\n   * The origin of the users REMOTE or INTERNAL\n   */\n  userManagementSource: UserManagementSource;\n  /**\n   * Link to the resource\n   */\n  self?: string;\n  /**\n   * The strategy for Two Factor Authentication\n   */\n  tfaStrategy?: TfaStrategy;\n  /**\n   * Indicates whether the login option should be visible on the login page of UI applications.\n   * If set to `true` for more than one login option, then the preferred one will be selected according to priority:\n   * 1. OAI-Secure: authentication information is stored in a HttpOnly cookie\n   * 2. Basic Auth: authentication information is stored in a session storage\n   * 3. SSO redirect: allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.\n   * If no login option has `visibleOnLoginPage` set to `true`, the preferred login option will be Basic Auth.\n   */\n  visibleOnLoginPage?: boolean;\n  /**\n   * The label which is shown on the login button\n   */\n  buttonName?: string;\n  /**\n   * The request which is used to initialize an oauth flow\n   */\n  initRequest?: string;\n  /**\n   * Determines if password strength is enforced on system level\n   */\n  enforceStrength?: boolean;\n  /**\n   * Minimum length of a password to be considered as a “green” strong one\n   */\n  greenMinLength?: number;\n  /**\n   * Determines if password strength is enforced on tenant level\n   */\n  strengthValidity?: boolean;\n  /**\n   * Organizations name which provides login option\n   */\n  providerName?: string;\n  /**\n   * Basic authentication restrictions.\n   */\n  authenticationRestrictions?: IAuthenticationRestrictions;\n  /**\n   * Configuration for OAI-Secure sessions.\n   */\n  sessionConfiguration?: ISessionConfiguration;\n  /**\n   * Tenant correct domain for OAI-Secure login option.\n   * UI will redirect to this domain if OAI-Secure is\n   * set as preferred login mode and domain in browser is wrong.\n   */\n  loginRedirectDomain?: string;\n}\n\nexport interface IAuthenticationRestrictions {\n  /**\n   * The list of user agents which are allowed to use the platform's REST API.\n   * The values are compared with `User-Agent` HTTP header.\n   */\n  trustedUserAgents: string[];\n\n  /**\n   * The list of user agents which are forbidden to use the platform's REST API.\n   * The values are compared with `User-Agent` HTTP header.\n   */\n  forbiddenUserAgents: string[];\n\n  /**\n   * The list of clients which are forbidden to use the platform's REST API.\n   * For now, the only value supported in the array is `'WEB_BROWSERS'` (which blocks all web browsers).\n   */\n  forbiddenClients: string[];\n}\n\nexport interface ISessionConfiguration {\n  /**\n   * The maximum amount of time a session can be active.\n   */\n  absoluteTimeoutMillis: number;\n  /**\n   * The maximum amount of sessions per user.\n   */\n  maximumNumberOfParallelSessions: number;\n  /**\n   * The timeout after which the session id is automatically renewed. If there is no activity after renewal timeout and before absolute session timeout, the session will not be renewed.\n   */\n  renewalTimeoutMillis: number;\n  /**\n   * If `true`, then every request needs to use the same `User-Agent` header as the first request which initiated the session.\n   */\n  userAgentValidationRequired: boolean;\n}\n\nexport enum TenantLoginOptionType {\n  /**\n   * OAI-Secure: authentication information is stored in a HttpOnly cookie\n   */\n  OAUTH2_INTERNAL = 'OAUTH2_INTERNAL',\n  /**\n   * SSO redirect: allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.\n   */\n  OAUTH2 = 'OAUTH2',\n  /**\n   * Basic Auth: authentication information is stored in a session storage\n   */\n  BASIC = 'BASIC'\n}\n\nexport enum GrantType {\n  AUTHORIZATION_CODE = 'AUTHORIZATION_CODE',\n  PASSWORD = 'PASSWORD'\n}\n\nexport enum UserManagementSource {\n  REMOTE = 'REMOTE',\n  INTERNAL = 'INTERNAL'\n}\n","import { Service, IResult, IResultList } from '../core';\nimport { IAuditRecord } from './IAuditRecord';\n\nexport class AuditService extends Service<IAuditRecord> {\n  protected baseUrl = 'audit';\n  protected listUrl = 'auditRecords';\n  protected propertyName = 'auditRecords';\n\n  /**\n   * Gets the details of selected audit record.\n   *\n   * @param {string|number|IAuditRecord} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const auditId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await auditService.detail(auditId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IAuditRecord): Promise<IResult<IAuditRecord>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new audit record for a given source.\n   *\n   * @param {IAuditRecord} entity Audit record object with mandantory fragments.\n   * IAuditRecord implements the [[IEvent]] interface.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IAuditRecord = {\n   *    type: AuditRecordType.ALARM,\n   *    time: '2018-05-02T10:08:00Z',\n   *    severity: Severity.MAJOR,\n   *    source: {id: 1}\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await auditService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IAuditRecord): Promise<IResult<IAuditRecord>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Gets the list of audit records filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying audit records.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await auditService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IAuditRecord>> {\n    return super.list(filter);\n  }\n}\n","/**\n * A specific audit record can have one of the following types\n */\nexport enum AuditRecordType {\n  ALARM = 'Alarm',\n  BULK_OPERATION = 'BulkOperation',\n  CEP_MODULE = 'CepModule', // FIXME: legacy type. Remains because there might be audits from before migration to apama.\n  EVENT = 'Event',\n  INVENTORY = 'Inventory',\n  INVENTORY_ROLE = 'InventoryRole',\n  OPERATION = 'Operation',\n  OPTION = 'Option',\n  GROUP = 'Group',\n  SMART_RULE = 'SmartRule',\n  SYSTEM = 'SYSTEM',\n  TENANT = 'Tenant',\n  USER = 'User'\n}\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * An audit record can have one of the following change type\r\n */\r\nexport enum ChangeType {\r\n  ADDED = gettext('ADDED'),\r\n  REPLACED = gettext('REPLACED'),\r\n  REMOVED = gettext('REMOVED')\r\n}\r\n","import { IIdentified, Service, IResult, IResultList } from '../core';\n\nexport class InventoryRoleService extends Service<IIdentified> {\n  protected baseUrl = 'user';\n  protected listUrl = 'inventoryroles';\n  protected propertyName = 'roles';\n\n  /**\n   * Gets the details of inventory role.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryRoleService.detail(inventoryRoleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IIdentified>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new inventory role.\n   *\n   * @param {IIdentified} entity\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const newRole: IIdentified = {\n   *    name: 'Custom role'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryRoleService.create(newRole);\n   *  })();\n   * ```\n   */\n  async create(entity: IIdentified): Promise<IResult<IIdentified>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates inventory role data.\n   *\n   * @param {IIdentified} entity\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateObject: IIdentified = {\n   *    id: 1,\n   *    name: 'changed role'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryRoleService.update(updateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: IIdentified): Promise<IResult<IIdentified>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of inventory roles filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IIdentified>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an inventory role with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","import { gettext } from '../gettext';\n\n/**\n * Device registration can have one of the following states.\n */\nexport enum DeviceRegistrationStatus {\n  WAITING_FOR_CONNECTION = gettext('WAITING_FOR_CONNECTION'),\n  PENDING_ACCEPTANCE = gettext('PENDING_ACCEPTANCE'),\n  ACCEPTED = gettext('ACCEPTED'),\n  BLOCKED = gettext('BLOCKED')\n}\n","import { btoa } from 'b2a';\nimport { IIdentified, Service, IResult, IResultList } from '../core';\nimport {\n  IDeviceRegistration,\n  IDeviceRegistrationAccept,\n  IDeviceRegistrationCreate,\n  IDeviceRegistrationLimit\n} from './IDeviceRegistration';\nimport { DeviceRegistrationStatus } from './DeviceRegistrationStatus';\nimport { IDeviceCredentials } from './IDeviceCredentials';\n\n/**\n * Interface to use as options parameter\n * to bootstrap a new device.\n */\nexport interface IDeviceBootstrapOptions {\n  /**\n   * If already logged in it is accessible via\n   * client.auth.getFetchOptions, see [[BasicAuth.getFetchOptions]]\n   *\n   * **Example**\n   * ``` typescript\n   *\n   * // tenant/username:password\n   * const basicAuthToken = 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk';\n   * ```\n   */\n  basicAuthToken?: string;\n  /**\n   * Object to define username and password\n   * as string.\n   *\n   * **Example**\n   * ``` typescript\n   *\n   *    const basicAuth = {\n   *      user: 'username',\n   *      pass: 'password'\n   *    }\n   * ```\n   */\n  basicAuth?: {\n    user: string;\n    pass: string;\n  };\n}\n\n/**\n * This class allows registration of a new device.\n */\nexport class DeviceRegistrationService extends Service<IDeviceRegistration> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'newDeviceRequests';\n  protected propertyName = 'newDeviceRequests';\n\n  /**\n   * Gets the details of device registration.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const entityId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await deviceRegistrationService.detail(entityId);\n   *    })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new device registration.\n   *\n   * @param {IDeviceRegistrationCreate} entity Device registration object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mandantoryObject: IDeviceRegistrationCreate = {\n   *      id: 1,\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await deviceRegistrationService.create(mandantoryObject);\n   *    })();\n   * ```\n   */\n  async create(entity: IDeviceRegistrationCreate) {\n    return super.create(entity);\n  }\n\n  /**\n   * Gets the list of device registrations by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying registrations.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await deviceRegistrationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an registration with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the registration.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = 'abc';\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.delete(id);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Accepts the device registration for given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of registration.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = 'abc';\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.accept(id);\n   *   })();\n   * ```\n   */\n  async accept(entityOrId: string | number | IIdentified): Promise<IResult<IDeviceRegistration>> {\n    const securityToken: string = this.getSecurityToken(entityOrId);\n    let payload: Partial<IDeviceRegistration> = {\n      id: this.getIdString(entityOrId),\n      status: DeviceRegistrationStatus.ACCEPTED\n    };\n\n    if (securityToken) {\n      payload = {\n        ...payload,\n        securityToken\n      };\n    }\n    return super.update(payload);\n  }\n\n  /**\n   * Accepts the device registration for all registrations in pending acceptance.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.acceptAll();\n   *   })();\n   * ```\n   */\n  async acceptAll(): Promise<IResultList<IDeviceRegistrationAccept>> {\n    const res = await super.fetch(`${this.listUrl}/acceptAll`, { method: 'POST' });\n    const data = (await res.json()) as IDeviceRegistrationAccept[];\n    return { res, data };\n  }\n\n  /**\n   * Gets limitation information for registering devices to the platform\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.limit();\n   *   })();\n   * ```\n   */\n  async limit(): Promise<IResult<IDeviceRegistrationLimit>> {\n    const res = await super.fetch(`${this.listUrl}/limit`);\n    const data = (await res.json()) as IDeviceRegistrationLimit;\n    return { res, data };\n  }\n\n  /**\n   * Bootstraps the device with given id.\n   *\n   * @param entityOrId entity or id of registration.\n   * @param options for details see [[IDeviceBootstrapOptions]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: 'abc';\n   *   const options: IDeviceBootstrapOptions = {\n   *     basicAuthToken: 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk',\n   *     basicAuth: {\n   *       user: 'username',\n   *       pass: 'password'\n   *     }\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.bootstrap(id, options);\n   *   })();\n   * ```\n   */\n  async bootstrap(\n    entityOrId: string | number | IIdentified,\n    options: IDeviceBootstrapOptions\n  ): Promise<IResult<IDeviceCredentials>> {\n    const id = this.getIdString(entityOrId);\n    const securityToken = this.getSecurityToken(entityOrId);\n    const body = securityToken ? JSON.stringify({ id, securityToken }) : JSON.stringify({ id });\n    const url = `${this.baseUrl}/deviceCredentials`;\n    const { basicAuth } = options;\n    let { basicAuthToken } = options;\n    if (basicAuth) {\n      const { user, pass } = basicAuth;\n      basicAuthToken = btoa(`${user}:${pass}`);\n    }\n    const headers = {\n      Authorization: `Basic ${basicAuthToken}`,\n      accept: 'application/json',\n      'content-type': 'application/json'\n    };\n    const method = 'POST';\n    const res = await this.client.fetch(url, { body, headers, method });\n    const data = await res.json();\n    if (res.status > 400) {\n      throw { res, data };\n    }\n    return { res, data };\n  }\n\n  protected onBeforeCreate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate {\n    return entity;\n  }\n\n  protected onBeforeUpdate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate {\n    const noIdEntity = Object.assign({}, entity);\n    delete noIdEntity.id;\n    return noIdEntity;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IIdentified): string {\n    const id = encodeURIComponent(this.getEntityId(entityOrId));\n    return `${this.listUrl}/${id}`;\n  }\n\n  private getSecurityToken(entity: string | number | IIdentified): string {\n    let securityToken: string;\n    if (typeof entity === 'object') {\n      securityToken = entity.securityToken ? String(entity.securityToken) : undefined;\n    }\n    return securityToken;\n  }\n}\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { IFetchClient, IResult } from '../core';\nimport { IDeviceRegistrationBulkResult } from './IDeviceRegistrationBulkResult';\n\n/**\n * This class allows for bulk registering devices.\n */\nexport class DeviceRegistrationBulkService {\n  protected client: IFetchClient;\n\n  /**\n   * Instantiate class and assign client\n   * @param {IFetchClient} client\n   */\n  constructor(client: IFetchClient) {\n    this.client = client;\n  }\n\n  /**\n   * A new device registration as bulk.\n   *\n   * @param {Stream | Buffer} csv\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const csvString = `\n   *  ID,CREDENTIALS,TENANT,TYPE,NAME,ICCID,IDTYPE,PATH,SHELL\n   *  e2eDeviceRegistrationId,e2epassword123!,e2edocker,c8y_e2eDevice,e2eDevice,123456789,89456,e2eDeviceGroup,1\n   *  900001,e2epassword123!,e2edocker,c8y_e2eDevice1,e2eDevice1,123456789,89456,e2eDeviceGroup,1\n   *  900002,e2epassword123!,e2edocker,c8y_e2eDevice2,e2eDevice2,123456789,89456,e2eDeviceGroup,1`.trim();\n   *\n   *  const csvBuffer = Buffer.from(csvString):\n   *\n   *  (async () => {\n   *    const {data, res} = await deviceRegistrationBulkService.create(csvBuffer);\n   *  })();\n   * ```\n   */\n  async create(\n    inputFile: Stream | Buffer | File | Blob\n  ): Promise<IResult<IDeviceRegistrationBulkResult>> {\n    let csv = inputFile;\n    const url = '/devicecontrol/bulkNewDeviceRequests';\n    const method = 'POST';\n    const body = new FormData();\n    let fileName = 'bulk-registration.csv';\n    if (typeof File !== 'undefined' && csv instanceof File) {\n      fileName = csv.name;\n      const checkPattern = /\\.csv$/;\n      if (csv.name.match(checkPattern)) {\n        csv = new File([csv], csv.name, { type: 'text/csv' });\n      }\n    }\n    body.append('file', csv, fileName);\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.client.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n}\n","/**\n * Device registration can have one of the following security modes.\n */\nexport enum DeviceRegistrationSecurityMode {\n  REQUIRED = 'REQUIRED',\n  OPTIONAL = 'OPTIONAL',\n  IGNORED = 'IGNORED'\n}\n","import { Service } from '../core';\nimport { IRole } from './IRole';\n\n/**\n * @description\n * This service allows for fetch user roles.\n */\nexport class UserRoleService extends Service<IRole> {\n  protected baseUrl = 'user';\n  protected listUrl = 'roles';\n  protected propertyName = 'roles';\n\n  /**\n   * Gets the details of given role.\n   *\n   * @param {string|number|IRole} entityOrId Roles's id or role object.\n   *\n   * @returns Returns promise object that is resolved with the IRole wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const roleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userRoleService.detail(roleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IRole) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Gets the list of user roles filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying roles.\n   *\n   * @returns Returns promise object that is resolved with the IRole wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n}\n","import { Service, IIdentified, IResult, ISource, IResultList } from '../core';\nimport { IUserGroup } from './IUserGroup';\nimport { IRoleReference } from '../user-role';\nimport { IUserReference } from '../user';\n\nenum ChildType {\n  ROLES = 'roles',\n  USERS = 'users'\n}\n\n/**\n * @description\n * This service allows for managing user groups.\n */\nexport class UserGroupService extends Service<IUserGroup> {\n  protected baseUrl = 'user';\n  protected propertyName = 'groups';\n\n  protected get listUrl() {\n    return `${this.client.tenant}/groups`;\n  }\n\n  /**\n   * Gets the details of given user group.\n   *\n   * @param {string|number|IUserGroup} entityOrId Group's id or role object.\n   *\n   * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const groupId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.detail(roleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IUserGroup): Promise<IResult<IUserGroup>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new user group.\n   *\n   * @param {IUserGroup} entity User Group object.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with\n   * the details of newly created user group.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const userGroupObject: IUserGroup = {\n   *    name: \"new user group\"\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await userGroupService.create(userGroupObject);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<IUserGroup>): Promise<IResult<IUserGroup>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates user group data.\n   *\n   * @param {Partial<IUserGroup>} entity User group is partially updatable.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user group object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IUserGroup> = {\n   *     \"id\" : 1,\n   *     \"self\" : \"[URL to this resource]\",\n   *     \"name\" : \"PlatformAdministrators\",\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await userGroupService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IUserGroup>): Promise<IResult<IUserGroup>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of user groups filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying User Groups.\n   *\n   * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userGroupService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IUserGroup>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes user group.\n   *\n   * @param {number | IIdentified} entityOrId User group's id or user group object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.delete(userGroupId);\n   *   })();\n   * ```\n   * When group is removed, suitable audit records are created with type 'User'\n   * and activity 'User updated' with information that user has been removed from group.\n   *\n   * Please, note that the ADMINS and DEVICES groups can not be deleted.\n   */\n  async delete(entityOrId: number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Assign role to user group.\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to role resource or IRoleReference object.\n   *\n   * @returns Returns promise object that is resolved with the IRoleReference wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const roleResource: string = \"[URL to the Role resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.addRoleToGroup(userGroupId, roleResource);\n   *   })();\n   * ```\n   * When role is assigned to user, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async addRoleToGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<IRoleReference>> {\n    return this.addChild(ChildType.ROLES, entityOrId, childEntityOrSelf) as Promise<\n      IResult<IRoleReference>\n    >;\n  }\n\n  /**\n   * Unassign role from user\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IRoleReference object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the Role resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.removeRoleFromGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   */\n  async removeRoleFromGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<null>> {\n    return this.removeChild(ChildType.ROLES, entityOrId, childEntityOrSelf);\n  }\n\n  /**\n   * Assign user to user group.\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.\n   *\n   * @returns Returns promise object that is resolved with the IUserReference wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the User resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.addUserToGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   * When user is added to group, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async addUserToGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<IUserReference>> {\n    return this.addChild(ChildType.USERS, entityOrId, childEntityOrSelf) as Promise<\n      IResult<IUserReference>\n    >;\n  }\n\n  /**\n   * Remove user from a group\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the User resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.removeUserFromGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   * When user is removed from group, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async removeUserFromGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<null>> {\n    return this.removeChild(ChildType.USERS, entityOrId, childEntityOrSelf);\n  }\n\n  protected getSelf(childReference: string | Partial<ISource>): string {\n    if (typeof childReference === 'object' && childReference.self) {\n      return childReference.self;\n    } else {\n      return childReference as string;\n    }\n  }\n\n  private getChildUrl(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>\n  ): string {\n    return `${this.getDetailUrl(userGroupOrId)}/${type}`;\n  }\n\n  private getChildReferenceAsBody(type: ChildType, childReference: string | Partial<ISource>) {\n    const childSelf = this.getSelf(childReference);\n    switch (type) {\n      case ChildType.ROLES:\n        return JSON.stringify({ role: { self: String(childSelf) } });\n      case ChildType.USERS:\n        return JSON.stringify({ user: { self: String(childSelf) } });\n    }\n    throw new Error('UserGroupService -> getChild -> unsupported child type');\n  }\n\n  private async addChild(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>,\n    childReference: string | Partial<ISource>\n  ): Promise<IResult<IUserReference | IRoleReference>> {\n    const url = this.getChildUrl(type, userGroupOrId);\n    const method = 'POST';\n    const body = this.getChildReferenceAsBody(type, childReference);\n    const headers = {\n      accept: 'application/json',\n      'content-type': 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    let data = await res.json();\n    data = data.managedObject;\n    return { res, data };\n  }\n\n  private async removeChild(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>,\n    childReference: string | IIdentified\n  ): Promise<IResult<null>> {\n    const childId = this.getIdString(childReference);\n    const url = `${this.getChildUrl(type, userGroupOrId)}/${encodeURIComponent(String(childId))}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { method, headers });\n    const data = null;\n    return { res, data };\n  }\n}\n","import { IResult, IResultList, IFetchClient, IFetchOptions, IFetchResponse } from '../core';\nimport { IExternalIdentity } from './IExternalIdentity';\n\n/**\n * This class allwos for managing external identifiers.\n */\nexport class IdentityService {\n  private baseUrl = 'identity';\n  private propertyName = 'externalIds';\n  private client: IFetchClient;\n\n  constructor(client: IFetchClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the list of identities filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying identity.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await identityService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(managedObjectId: string): Promise<IResultList<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getExternalIdsOfGlobalIdUrl(managedObjectId);\n    const res = await this.fetch(url, { headers });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  /**\n   * Creates a new identity.\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *   const linkedManagedObjectId = '123';\n   *   const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1',\n   *      managedObject: {\n   *        id: linkedManagedObjectId\n   *      }\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.create(identity);\n   *   })();\n   * ```\n   */\n  async create(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'POST';\n    const body = JSON.stringify(identity);\n    const url = this.getExternalIdsOfGlobalIdUrl(identity.managedObject.id);\n    const res = await this.fetch(url, { headers, method, body });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the details of an identity.\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1'\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.detail(identity);\n   *   })();\n   * ```\n   */\n  async detail(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getExternalIdUrl(identity);\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Removes an identity with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1'\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.delete(identity);\n   *   })();\n   * ```\n   */\n  async delete(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const method = 'DELETE';\n    const url = this.getExternalIdUrl(identity);\n    const res = await this.fetch(url, { headers, method });\n    return { res, data: null };\n  }\n\n  private async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    const res: IFetchResponse = await this.client.fetch(url, init);\n    if (res.status >= 400) {\n      let data = null;\n      try {\n        data = await res.json();\n      } catch (ex) {\n        try {\n          data = await res.text();\n        } catch (ex) {\n          // do nothing\n        }\n      }\n      throw { res, data };\n    }\n    return res;\n  }\n\n  private getExternalIdsOfGlobalIdUrl(managedObjectId: string | number): string {\n    return `/${this.baseUrl}/globalIds/${managedObjectId}/externalIds`;\n  }\n\n  private getExternalIdUrl(identity: IExternalIdentity): string {\n    return `/${this.baseUrl}/externalIds/${identity.type}/${identity.externalId}`;\n  }\n}\n","import { IResult, Service } from '../core';\nimport { ITrustedCertificate } from './ITrustedCertificate';\n\n/**\n * This class allows for managing trusted certificates.\n */\nexport class TrustedCertificateService extends Service<ITrustedCertificate> {\n  protected get baseUrl() {\n    return `/tenant/tenants/${this.client.tenant}`;\n  }\n  protected listUrl = 'trusted-certificates';\n  protected proofOfPossessionUrl = 'trusted-certificates-pop';\n  protected propertyName = 'certificates';\n\n  /**\n   * Gets a list of trusted certificates.\n   *\n   * @returns Response wrapped in [[IResultList]].\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await trustedCertificateService.list();\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the details of trusted certificate\n   *\n   * @param entityOrId Trusted certificate object or trusted certificate fingerprint.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const fingerprint: string = 'abc';\n   *\n   *    (async () => {\n   *      const {data, res} = await trustedCertificateService.detail(fingerprint);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | ITrustedCertificate) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Removes a trusted certificate with given fingerprint.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param entityOrId Trusted certificate object or trusted certificate fingerprint.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const fingerprint: string = 'abc';\n   *\n   *    (async () => {\n   *      const {data, res} = await trustedCertificateService.delete(fingerprint);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | ITrustedCertificate) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Updates trusted certificate data.\n   *\n   * @param entity Trusted certificate partial object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const certificate: Partial<ITrustedCertificate> = {\n   *    name: 'Name'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await trustedCertificateService.update(certificate);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<ITrustedCertificate>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Creates a new trusted certificate.\n   *\n   * @param entity Trusted certificate object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const certificate: Partial<ITrustedCertificate> = {\n   *    name: 'Name',\n   *    certInPemFormat: 'MIID+DCCAuCgAwIBAgIJAO1Q9t/M9gYlMA0GC...',\n   *    status: 'ENABLED'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await trustedCertificateService.create(certificate);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<ITrustedCertificate>) {\n    return super.create(entity);\n  }\n\n  /**\n   * Regenerates unsigned verification code for trusted certificate.\n   *\n   *\n   * @param entityOrId Trusted certificate object or finger print.\n   *\n   * @returns Certificate object with new verification code (wrapped in [[IResult]])\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  (async () => {\n   *    const fingerPrint = '00a360973e3e8d61e05aedb32c72438e2442279e';\n   *    const {data, res} = await trustedCertificateService.regeneratePoPVerificationCode(fingerPrint);\n   *    const newProofOfPossessionUnsignedVerificationCode = data.proofOfPossessionUnsignedVerificationCode;\n   *  })();\n   * ```\n   */\n  async regeneratePoPVerificationCode(\n    entityOrId: string | ITrustedCertificate\n  ): Promise<IResult<ITrustedCertificate>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', Accept: 'application/json' };\n    const url = `${this.proofOfPossessionUrl}/${this.getEntityId(entityOrId)}/verification-code`;\n    const res = await this.fetch(url, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Verifies signed verification code for trusted certificate.\n   *\n   *\n   * @param entityOrId Trusted certificate object or finger print.\n   * @param proofOfPossessionSignedVerificationCode Unsigned verification code encrypted by the private key.\n   *\n   * @returns Certificate object with the result of verification (wrapped in [[IResult]]).\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  (async () => {\n   *    const fingerPrint = '00a360973e3e8d61e05aedb32c72438e2442279e';\n   *    const encryptedVerificationCode ='fuvlVWLfXG3V3bJWAdEhPD0HFCrYo5';\n   *    const {data, res} = await trustedCertificateService.verifySignedVerificationCode(fingerPrint, encryptedVerificationCode);\n   *    const isCertificateVerified = data.proofOfPossessionValid;\n   *  })();\n   * ```\n   */\n  async verifySignedVerificationCode(\n    entityOrId: string | ITrustedCertificate,\n    proofOfPossessionSignedVerificationCode: string\n  ): Promise<IResult<ITrustedCertificate>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', Accept: 'application/json' };\n    const url = `${this.proofOfPossessionUrl}/${this.getEntityId(entityOrId)}/pop`;\n    const body = JSON.stringify({ proofOfPossessionSignedVerificationCode });\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected getDetailUrl(entityOrId: string | ITrustedCertificate): string {\n    const id = this.getEntityId(entityOrId);\n    return `${this.listUrl}/${id}`;\n  }\n\n  protected getEntityId(entityOrId: string | ITrustedCertificate): string {\n    let id: string;\n    if (typeof entityOrId === 'object' && entityOrId.fingerprint) {\n      id = entityOrId.fingerprint;\n    } else {\n      id = entityOrId as string;\n    }\n    return id;\n  }\n}\n","import { ApplicationService } from '../application';\nimport { IFetchClient, IResult } from '../core';\nimport { Service } from '../core/Service';\nimport { IdReference, IManagedObject } from '../inventory';\nexport class SmartGroupsService extends Service<IManagedObject> {\n  protected baseUrl = 'inventory';\n  protected listUrl = 'managedObjects';\n  private applicationService: ApplicationService;\n  private readonly SMART_GROUP_TYPE = 'c8y_DynamicGroup';\n  private readonly SMART_GROUP_FRAGMENT_TYPE = 'c8y_IsDynamicGroup';\n  private readonly DEVICE_GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';\n  private readonly DEVICE_GROUP_TYPE = 'c8y_DeviceGroup';\n  private readonly DEVICE_SUBGROUP_TYPE = 'c8y_DeviceSubgroup';\n  private readonly COLUMNS_CONFIG_FRAGMENT = 'c8y_DeviceColumnsConfig';\n  private readonly FILTER_CONFIG_FRAGMENT = 'c8y_DeviceFilterConfig';\n  private readonly QUERY_STRING_FRAGMENT = 'c8y_DeviceQueryString';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_APP_NAME = 'smartgroup';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_BASE_PATH = 'service/smartgroup';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH = `${this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH}/smartgroups`;\n\n  constructor(client: IFetchClient) {\n    super(client);\n    this.applicationService = new ApplicationService(client);\n  }\n\n  /**\n   * Gets the details of managed object\n   *\n   * @param {IdReference} entityOrId Entity or Id of the ManagedObject.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *    const filter: any = { withChildren: false };\n   *\n   *    (async () => {\n   *      const {data, res} = await smartGroupsService.detail(id, filter);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: IdReference, filter: object = {}): Promise<IResult<IManagedObject>> {\n    return super.detail(entityOrId, filter);\n  }\n\n  /**\n   * Creates a smart group managed object with columns configuration.\n   *\n   * @param {object} smartGroup Dynamic group managed object.\n   * @param {object} deviceQueryString Columns configuration query string to filter the new group.\n   * @param {object} configurableColumns Configurable columns definitions.\n   * @param {object} filterConfig Columns filter configuration for the new group.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const smartGroup = { name: 'newName', type: 'c8y_DynamicGroup', c8y_IsDynamicGroup: {} };\n   *    const deviceQueryString = 'c8y_DeviceQueryString: \"$filter=(name eq 'test*') $orderby=c8y_Hardware.model asc';\n   *    const configurableColumns = [\n   *        {headerName: 'Status', active: false, key: 'status'},\n   *        {headerName: 'Name', active: true, key: 'name', filter: { externalFilterQuery: { name: { names: ['test*'] } } }},\n   *        {headerName: 'Model', active: true, key: 'model'}\n   *    ];\n   *\n   *    (async () => {\n   *      await smartGroupsService.create({ smartGroup, deviceQueryString, configurableColumns });\n   *   })();\n   *\n   *    Note: filterConfig has been removed as a default property to the input object.\n   *    Now it is part of the configurable columns properties as it is shown above.\n   *    You can still pass it as an optional parameter.\n   *    ( const filterConfig = [{ name: { names: ['test*'] } }] )\n   * ```\n   */\n  async create(obj: Partial<IManagedObject>): Promise<IResult<IManagedObject>> {\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const entity = {\n      ...obj.smartGroup,\n      [this.QUERY_STRING_FRAGMENT]: obj.deviceQueryString,\n      [this.COLUMNS_CONFIG_FRAGMENT]: obj.configurableColumns,\n      ...(obj.filterConfig && { [this.FILTER_CONFIG_FRAGMENT]: obj.filterConfig })\n    };\n\n    return isInstalled ? this.createSmartGroupV2(entity) : super.create(entity);\n  }\n\n  /**\n   * Updates smart group managed object with given id.\n   *\n   * @param {Partial<IManagedObject>} mo Partial managed object of the smart group.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const smartGroup = { id: '1', name: 'newName' };\n   *\n   *    (async () => {\n   *      await smartGroupsService.update(smartGroup);\n   *   })();\n   * ```\n   */\n  async update(mo: Partial<IManagedObject>, filter: object = {}): Promise<IResult<IManagedObject>> {\n    const { id } = mo;\n\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const { data: groupMo } = await this.detail(id, { withChildren: false });\n\n    return isInstalled && this.isSmartGroupV2(groupMo)\n      ? this.updateSmartGroupV2(mo, filter)\n      : super.update(mo);\n  }\n\n  /**\n   * Updates smart group v2 managed object with given id.\n   *\n   * @param {Partial<IManagedObject>} mo Partial managed object of the smart group v2.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const smartGroupV2 = { id: '1', name: 'newName' };\n   *\n   *    (async () => {\n   *      await smartGroupsService.updateSmartGroupV2(smartGroupV2);\n   *   })();\n   * ```\n   */\n  async updateSmartGroupV2(\n    mo: Partial<IManagedObject>,\n    filter: object = {}\n  ): Promise<IResult<IManagedObject>> {\n    const { id, ...partialMo } = mo;\n    const method = 'PUT';\n    const body = JSON.stringify(this.onBeforeUpdate(partialMo));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;\n    const res = await this.fetch(url, { method, body, headers, params: { ...filter } });\n\n    const data = await res.json();\n\n    return { res, data };\n  }\n\n  /**\n   * Removes managed object with given id.\n   *\n   * @param {IManagedObject} group Managed object of the group.\n   * @param {object} params Additional query params.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *   const group = { id: '1' } as IManagedObject;\n   *   const params: any = {\n   *     withChildren: false\n   *   }\n   *\n   *    (async () => {\n   *      await smartGroupsService.delete(group, params);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: IdReference, params: any = {}): Promise<IResult<null>> {\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const data = (await this.detail(entityOrId, { withChildren: false })).data;\n\n    return isInstalled && this.isSmartGroupV2(data)\n      ? await this.removeSmartGroupV2(data)\n      : await super.delete(data, params);\n  }\n\n  /**\n   * Checks if the smart groups v2 microservice is installed.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await smartGroupsService.isSmartGroupsV2MicroserviceInstalled();\n   *   })();\n   * ```\n   */\n  isSmartGroupsV2MicroserviceInstalled(): Promise<IResult<boolean>> {\n    return this.applicationService.isAvailable({\n      name: this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME\n    });\n  }\n\n  /**\n   * Checks whether a given managed object is a smart group\n   *\n   * @param {IManagedObject} mo Managed object to check.\n   *\n   * @returns boolean\n   *\n   * @example\n   * ```typescript\n   *\n   *    const mo: IManagedObject = {id: 1, type: \"c8y_DeviceGroup\", c8y_IsDeviceGroup: {}} as IManagedObject;\n   *\n   *    (() => {\n   *      const isSmartGroup = smartGroupsService.isSmartGroup(mo);\n   *   })();\n   * ```\n   */\n  isSmartGroup(mo: Partial<IManagedObject>): boolean {\n    const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);\n    const isSmartGroupType = mo && mo.type === this.SMART_GROUP_TYPE;\n\n    return hasSmartGroupFragmentType || isSmartGroupType;\n  }\n\n  /**\n   * Checks whether a given managed object is a smart group v2\n   *\n   * @param {IManagedObject} mo Managed object to check.\n   *\n   * @returns boolean\n   *\n   * @example\n   * ```typescript\n   *\n   *    const mo: IManagedObject = {id: 1, type: \"c8y_DeviceGroup\", c8y_IsDeviceGroup: {}} as IManagedObject;\n   *\n   *    (() => {\n   *      const isSmartGroup = smartGroupsService.isSmartGroupV2(mo);\n   *   })();\n   * ```\n   */\n  isSmartGroupV2(mo: Partial<IManagedObject>): boolean {\n    const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);\n    const hasDeviceGroupFragmentType = mo.hasOwnProperty(this.DEVICE_GROUP_FRAGMENT_TYPE);\n    const isGroupOrSubgroup =\n      (mo && mo.type === this.DEVICE_GROUP_TYPE) || mo.type === this.DEVICE_SUBGROUP_TYPE;\n\n    return hasSmartGroupFragmentType && hasDeviceGroupFragmentType && isGroupOrSubgroup;\n  }\n\n  /**\n   * Removes smart group v2 managed object with given id.\n   *\n   * @param {IdReference} entityOrId entity or Id of the ManagedObject.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *\n   *    (async () => {\n   *      await smartGroupsService.removeSmartGroupV2(id);\n   *   })();\n   * ```\n   */\n  async removeSmartGroupV2(entityOrId: IdReference): Promise<IResult<null>> {\n    let id: IdReference;\n\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else {\n      id = entityOrId as string | number;\n    }\n\n    const method = 'DELETE';\n    const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;\n    const res = await this.client.fetch(url, { method });\n\n    return { res, data: null };\n  }\n\n  protected getUrl(url = ''): string {\n    const partialUrl = url.replace(/^\\/+/, '');\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '');\n\n    if (url.includes(this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH)) {\n      return partialUrl;\n    } else {\n      return `${baseUrl}/${partialUrl}`;\n    }\n  }\n\n  private async createSmartGroupV2(\n    entity: Partial<IManagedObject>\n  ): Promise<IResult<IManagedObject>> {\n    const method = 'POST';\n    const body = JSON.stringify(entity);\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const url = this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH;\n    const res = await this.fetch(url, { method, body, headers });\n\n    const data = await res.json();\n\n    return { res, data };\n  }\n}\n","import { ApplicationService } from '../application';\nimport { IResult } from '../core';\nimport { IFetchClient } from '../core/IFetchClient';\nimport { Service } from '../core/Service';\nimport { IdReference } from '../inventory';\nimport { IRule } from './IRule';\n\nexport class SmartRulesService extends Service<IRule> {\n  private static readonly microserviceName = 'smartrule';\n  protected readonly baseUrl = 'service/smartrule';\n  protected readonly listUrl;\n  private readonly rulesUrl = 'smartrules';\n  private readonly unupdatableFields = ['type', 'cepModuleId', 'creationTime', 'lastUpdated'];\n  private microserviceAvailable: boolean;\n  private applicationService: ApplicationService;\n\n  constructor(client: IFetchClient) {\n    super(client);\n    this.applicationService = new ApplicationService(client);\n  }\n\n  /**\n   * Checks if the smart rules microservice is subscribed and available to user.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const isAvailable = await smartRulesService.isMicroserviceAvailable();\n   *   })();\n   * ```\n   */\n  async isMicroserviceAvailable(): Promise<boolean> {\n    if (this.microserviceAvailable === undefined) {\n      this.microserviceAvailable = (\n        await this.applicationService.isAvailable(SmartRulesService.microserviceName)\n      ).data;\n    }\n    return this.microserviceAvailable;\n  }\n\n  /**\n   * Gets a list of smart rules for given managed object.\n   *\n   * @param {IdReference} entityOrId Entity or Id of the ManagedObject.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.listByContext(id);\n   *   })();\n   * ```\n   */\n  async listByContext(entityOrId: IdReference): Promise<IResult<IRule[]>> {\n    const url = this.contextRulesUrl(entityOrId);\n    const res = await this.fetch(url, { method: 'GET' });\n    const rules = (await res.json()).rules;\n    return { res, data: rules };\n  }\n\n  /**\n   * Deactivates smart rule for given entities list.\n   *\n   * @param {Partial<IRule>} rule Smart rule managed object.\n   * @param {IdReference[]} entitiesOrIdsList List of entities or Id of the ManagedObjects.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const rule: IRule = {id: '1', enabledSources: ['2', '3'],...};\n   *    const entityOrIdList: IdReference[] = ['2'];\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.bulkDeactivateEnabledSources(rule, entityOrIdList);\n   *   })();\n   * ```\n   */\n  bulkDeactivateEnabledSources(\n    rule: Partial<IRule>,\n    entitiesOrIdsList: IdReference[]\n  ): Promise<IResult<IRule>> {\n    if (entitiesOrIdsList.length === 0) {\n      return Promise.resolve({ res: null, data: null });\n    }\n    const { enabledSources } = rule;\n    const newEnabledSources = this.disableEnabledSources(enabledSources, entitiesOrIdsList);\n    const ruleCopy = { ...rule };\n\n    Object.assign(ruleCopy, { enabledSources: newEnabledSources });\n    return this.update(ruleCopy);\n  }\n\n  /**\n   * Updates smart rule.\n   *\n   * @param {Parial<IRule>} rule Smart rule managed object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const rule: IRule = {id: '1', enabledSources: ['2', '3'],...};\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.updateSmartRule(rule);\n   *   })();\n   * ```\n   */\n  async update(rule: Partial<IRule>): Promise<IResult<IRule>> {\n    const url = this.getSmartRulesUrl(rule);\n    const method = 'PUT';\n    const body = JSON.stringify(this.removeUnclonableFields(rule, this.unupdatableFields));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n\n    return { res, data };\n  }\n\n  private disableEnabledSources(\n    enabledSources: string[] = [],\n    entityOrIdList: IdReference[]\n  ): string[] {\n    return enabledSources.filter(id => !this.getListOfStringIds(entityOrIdList).includes(id));\n  }\n\n  private getListOfStringIds(entityOrIdList: IdReference[]): string[] {\n    return entityOrIdList.map(entityOrId => {\n      if (typeof entityOrId === 'object' && entityOrId.id) {\n        return entityOrId.id.toString();\n      }\n      return entityOrId.toString();\n    });\n  }\n\n  private getSmartRulesUrl(rule: Partial<IRule>): string {\n    const contextMoId = rule && rule.c8y_Context && rule.c8y_Context.id;\n    let url = !!contextMoId ? this.contextRulesUrl(contextMoId) : this.rulesUrl;\n\n    if (rule.id) {\n      url = `${url}/${rule.id}`;\n    }\n    return url;\n  }\n\n  private removeUnclonableFields(rule: Partial<IRule>, fieldsToRemove: string[]): Partial<IRule> {\n    const ruleCopy = { ...rule };\n    fieldsToRemove.forEach(f => {\n      delete ruleCopy[f];\n    });\n    return ruleCopy;\n  }\n\n  private contextRulesUrl(entityOrId: IdReference = {}): string {\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      return `managedObjects/${entityOrId.id}/smartrules`;\n    }\n    return `managedObjects/${entityOrId}/smartrules`;\n  }\n}\n","import { IAuthentication, ICredentials, IMicroserviceSubscriptionsResponse } from './core';\nimport { Realtime } from './realtime';\nimport {\n  FetchClient,\n  BasicAuth,\n  AlarmService,\n  ApplicationService,\n  AuditService,\n  DeviceRegistrationBulkService,\n  DeviceRegistrationService,\n  EventService,\n  InventoryBinaryService,\n  InventoryRoleService,\n  InventoryService,\n  MeasurementService,\n  OperationBulkService,\n  OperationService,\n  SystemOptionsService,\n  TenantOptionsService,\n  TenantSecurityOptionsService,\n  TenantLoginOptionsService,\n  TenantService,\n  UserGroupService,\n  UserRoleService,\n  UserService,\n  IdentityService,\n  SmartGroupsService,\n  SmartRulesService\n} from './services';\n\nexport interface IBootstrapOptions {\n  deviceId: string;\n  basicAuthToken: string;\n  timeout?: number;\n  expire?: number;\n  baseUrl?: string;\n}\n\nexport class Client {\n  /**\n   * Authenticates the given user. Determines the tenant by itself via a call to tenant/currentTenant.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * let client: Client;\n   * (async () => {\n   *  client = await Client.authenticate({\n   *    user: 'testuser',\n   *    password: 'password1337!'\n   *  }, 'https://acme.cumulocity.com');\n   *\n   *  //you have access to the client api now\n   *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   */\n  static async authenticate(credentials: ICredentials, baseUrl?: string): Promise<Client> {\n    const auth = new BasicAuth(credentials);\n    const clientCore = new FetchClient(auth, baseUrl);\n    const res = await clientCore.fetch('/tenant/currentTenant', { method: 'GET' });\n    if (res.status !== 200) {\n      throw { res };\n    }\n    const { name } = await res.json();\n    const client = new Client(auth, baseUrl);\n    client.core.tenant = name;\n    return client;\n  }\n  /**\n   * Allows to use http to register a device on the platform.\n   *\n   * **Deprecated** Please use MQTT to bootstrap a device.\n   */\n  static async deviceBootstrap(options: IBootstrapOptions): Promise<Client> {\n    const { deviceId, timeout, baseUrl, basicAuthToken } = options;\n    let { expire } = options;\n    if (timeout && !expire) {\n      expire = Date.now() + timeout;\n    }\n    const clientCore = new FetchClient(undefined, baseUrl);\n    const deviceRegistration = new DeviceRegistrationService(clientCore);\n    let client;\n    try {\n      const { data } = await deviceRegistration.bootstrap(deviceId, { basicAuthToken });\n      const { username, password, tenantId } = data;\n      const auth = new BasicAuth({ user: username, tenant: tenantId, password });\n      client = new Client(auth, baseUrl);\n      client.core.tenant = tenantId;\n    } catch (error) {\n      const retry = (!expire || Date.now() < expire) && error.res.status === 404;\n      if (retry) {\n        return Client.deviceBootstrap(Object.assign({ expire }, options));\n      } else {\n        throw error;\n      }\n    }\n    return client;\n  }\n\n  /**\n   * Retrieves microservice credentials for the subscribed tenants\n   * using provided bootstrap credentials\n   *\n   * **Example**\n   * ```typescript\n   *\n   * (async () => {\n   *  const subscriptions = await Client.getMicroserviceSubscriptions({\n   *    tenant: process.env.C8Y_BOOTSTRAP_TENANT,\n   *    user: process.env.C8Y_BOOTSTRAP_USER,\n   *    password: process.env.C8Y_BOOTSTRAP_PASSWORD\n   *  }, process.env.C8Y_BASEURL);\n   *\n   *  const clients = subscriptions.map(subscription => new Client(new BasicAuth(subscription), process.env.C8Y_BASEURL));\n   *  // you have access to the client api now\n   *  const promiseArray = clients.map(client => client.options.tenant.detail({\n   *    category: process.env.APPLICATION_KEY,\n   *    key: 'someSetting'\n   *  }));\n   * })();\n   * ```\n   */\n  static async getMicroserviceSubscriptions(\n    bootstrapCredentials: ICredentials,\n    baseUrl: string\n  ): Promise<ICredentials[]> {\n    const microserviceSubscriptionsEndpoint = '/application/currentApplication/subscriptions';\n    const clientCore = new FetchClient(new BasicAuth(bootstrapCredentials), baseUrl);\n    const res = await clientCore.fetch(microserviceSubscriptionsEndpoint);\n    const { users }: IMicroserviceSubscriptionsResponse = await res.json();\n    return users.map(({ tenant, name, password }) => {\n      return {\n        tenant,\n        user: name,\n        password\n      } as ICredentials;\n    });\n  }\n\n  alarm: AlarmService;\n  application: ApplicationService;\n  audit: AuditService;\n  core: FetchClient;\n  deviceRegistration: DeviceRegistrationService;\n  deviceRegistrationBulk: DeviceRegistrationBulkService;\n  event: EventService;\n  inventory: InventoryService;\n  inventoryRole: InventoryRoleService;\n  inventoryBinary: InventoryBinaryService;\n  measurement: MeasurementService;\n  operation: OperationService;\n  operationBulk: OperationBulkService;\n  options: {\n    security: TenantSecurityOptionsService;\n    system: SystemOptionsService;\n    login: TenantLoginOptionsService;\n    tenant: TenantOptionsService;\n  };\n  realtime: Realtime;\n  role: InventoryRoleService;\n  tenant: TenantService;\n  user: UserService;\n  userGroup: UserGroupService;\n  userRole: UserRoleService;\n  identity: IdentityService;\n  smartGroups: SmartGroupsService;\n  smartRules: SmartRulesService;\n\n  /**\n   * Initializes a new Client, which allows to request data from the API. Differently\n   * to Client.authenticate([...]) it needs a tenant given and does not verify if the\n   * login is correct.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * const auth = new BasicAuth({\n   *   user: 'youruser',\n   *   password: 'yourpassword',\n   *   tenant: 'acme'\n   * }); // use CookieAuth() if your platform uses oauth (only in browser!)\n   *\n   * const baseUrl = 'https://acme.cumulocity.com';\n   * const client = new Client(auth, baseUrl);\n   * (async () => {\n   *   const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   *\n   * @param auth The Authentication strategy to use (e.g. new BasicAuth())\n   * @param baseUrl The URL to request (optional in browser, mandatory in node)\n   */\n  constructor(auth: IAuthentication, baseUrl?: string) {\n    const client = new FetchClient(auth, baseUrl);\n    this.realtime = new Realtime(client);\n    this.alarm = new AlarmService(client, this.realtime);\n    this.application = new ApplicationService(client, this.realtime);\n    this.audit = new AuditService(client);\n    this.core = client;\n    this.deviceRegistration = new DeviceRegistrationService(client);\n    this.deviceRegistrationBulk = new DeviceRegistrationBulkService(client);\n    this.event = new EventService(client, this.realtime);\n    this.inventory = new InventoryService(client, this.realtime);\n    this.inventoryBinary = new InventoryBinaryService(client);\n    this.inventoryRole = new InventoryRoleService(client);\n    this.measurement = new MeasurementService(client, this.realtime);\n    this.operation = new OperationService(client);\n    this.operationBulk = new OperationBulkService(client);\n    this.options = {\n      security: new TenantSecurityOptionsService(client),\n      system: new SystemOptionsService(client),\n      login: new TenantLoginOptionsService(client),\n      tenant: new TenantOptionsService(client)\n    };\n    this.role = new InventoryRoleService(client);\n    this.tenant = new TenantService(client);\n    this.user = new UserService(client);\n    this.userGroup = new UserGroupService(client);\n    this.userRole = new UserRoleService(client);\n    this.identity = new IdentityService(client);\n    this.smartGroups = new SmartGroupsService(client);\n    this.smartRules = new SmartRulesService(client);\n  }\n\n  /**\n   * Allows to change the current Authentication\n   * @param auth The new Authentication information.\n   */\n  setAuth(auth: IAuthentication) {\n    this.core.setAuth(auth);\n    this.realtime.disconnect();\n  }\n}\n","import { IAuthentication, ICredentials } from './IAuthentication';\nimport { FetchClient } from './FetchClient';\n\n/**\n * Allows to use Cookies for Authorization to the\n * Cumulocity API.\n */\nexport class CookieAuth implements IAuthentication {\n  user: string;\n  private logoutUrl = 'user/logout';\n\n  updateCredentials({ user }: ICredentials = {}): string {\n    this.user = user;\n    return undefined;\n  }\n\n  getFetchOptions(options) {\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const headers: any = { 'X-XSRF-TOKEN': xsrfToken };\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: object } = {}) {\n    const KEY = 'com.cumulocity.authn';\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { xsrfToken });\n    return config;\n  }\n\n  async logout() {\n    if (this.user) {\n      delete this.user;\n    }\n    const client = new FetchClient();\n    client.setAuth(this);\n    const method = 'POST';\n    const body = JSON.stringify({});\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    return client.fetch(this.logoutUrl, { headers, body, method });\n  }\n\n  private getCookieValue(name) {\n    const value = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n    return value ? value.pop() : '';\n  }\n}\n","import { IAuthentication, IMicroserviceClientRequestHeaders } from './IAuthentication';\n\n/**\n * Allows to use either Cookie-Auth or Basic-Auth\n * of a microservice client request header\n * for Authorization to the Cumulocity API.\n */\nexport class MicroserviceClientRequestAuth implements IAuthentication {\n  // Bearer token read from cookie from header\n  private authTokenFromCookie: string;\n  // Bearer/Basic auth token read from header\n  private authTokenFromHeader: string;\n  private xsrfToken: string;\n\n  /**\n   * Authenticates using the credentials which were\n   * provided within the request headers of the\n   * client call to the microservice.\n   * @param headers\n   */\n  constructor(headers: IMicroserviceClientRequestHeaders = {}) {\n    this.xsrfToken = this.getCookieValue(headers, 'XSRF-TOKEN');\n    this.authTokenFromCookie = this.getCookieValue(headers, 'authorization');\n    this.authTokenFromHeader = headers.authorization;\n  }\n\n  updateCredentials(): string {\n    return undefined;\n  }\n\n  getFetchOptions(options: any) {\n    const headers: any = {\n      Authorization: this.authTokenFromCookie\n        ? `Bearer ${this.authTokenFromCookie}`\n        : this.authTokenFromHeader,\n      ...(this.xsrfToken ? { 'X-XSRF-TOKEN': this.xsrfToken } : undefined)\n    };\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: { [key: string]: any } } = {}) {\n    const KEY = 'com.cumulocity.authn';\n    const xsrfToken = this.xsrfToken;\n    let token = this.authTokenFromCookie;\n    if (!token && this.authTokenFromHeader) {\n      token = this.authTokenFromHeader.replace('Basic ', '').replace('Bearer ', '');\n    }\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { token, ...(xsrfToken ? { xsrfToken } : undefined) });\n    return config;\n  }\n\n  logout() {\n    if (this.authTokenFromCookie) {\n      delete this.authTokenFromCookie;\n    }\n    if (this.authTokenFromHeader) {\n      delete this.authTokenFromHeader;\n    }\n    if (this.xsrfToken) {\n      delete this.xsrfToken;\n    }\n  }\n\n  private getCookieValue(headers: IMicroserviceClientRequestHeaders, name: string) {\n    try {\n      const value =\n        headers && headers.cookie && headers.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n      return value ? value.pop() : undefined;\n    } catch (ex) {\n      return undefined;\n    }\n  }\n}\n"],"names":["MetaChannel","Scheduler","Utils","TransportRegistry","Transport","RequestTransport","LongPollingTransport","CallbackPollingTransport","WebSocketTransport","_z85EncodeTable","_z85DecodeTable","module","exports","_ids","_tasks","this","register","funktion","id","unregister","setTimeout","delay","window","clearTimeout","isString","value","String","isArray","Array","inArray","element","array","i","length","_types","_transports","getTransportTypes","slice","findTransportTypes","version","crossDomain","url","result","type","accept","push","negotiateTransport","types","j","transport","add","index","existing","splice","find","remove","clear","reset","init","_type","_cometd","_url","registered","cometd","unregistered","_debug","apply","arguments","_mixin","getConfiguration","getAdvice","convertToMessages","response","JSON","parse","x","Object","getType","getURL","setURL","send","envelope","metaConnect","abort","toString","derive","baseObject","F","prototype","CometD","name","_transport","_handshakeProps","_handshakeCallback","_handleMessages","_handleFailure","_scheduler","_name","_crossDomain","_status","_messageId","_clientId","_batch","_messageQueue","_internalBatch","_listenerId","_listeners","_backoff","_scheduledSend","_extensions","_advice","_callbacks","_remoteCalls","_reestablish","_connected","_unconnectTime","_handshakeMessages","_metaConnect","_config","useWorkerScheduler","protocol","stickyReconnect","connectTimeout","maxConnections","backoffIncrement","maxBackoff","logLevel","maxNetworkDelay","requestHeaders","appendMessageTypeToURL","autoBatch","urls","maxURILength","advice","timeout","interval","reconnect","undefined","maxInterval","_fieldValue","object","_isString","_isFunction","_zeroPad","Math","pow","_log","level","args","now","console","logger","Date","call","getHours","getMinutes","getSeconds","getMilliseconds","_splitURL","RegExp","exec","_configure","configuration","worker","urlParts","hostAndPort","uri","afterURI","_isCrossDomain","_info","lastSegmentIndex","uriSegments","split","match","indexOf","Worker","Blob","URL","code","self","onmessage","e","cmd","data","postMessage","substring","lastIndexOf","blob","blobURL","createObjectURL","_removeListener","subscription","subscriptions","channel","listener","_removeSubscription","_clearSubscriptions","hasOwnProperty","_setStatus","newStatus","_isDisconnected","_nextMessageId","_applyExtension","scope","callback","message","outgoing","handler","onExtensionException","xx","_notify","onListenerException","_notifyListeners","channelParts","last","channelPart","join","_cancelDelayedSend","_delayedSend","operation","time","_send","messages","extraPath","messageId","clientId","extension","sync","onSuccess","rcvdMessages","onFailure","conduit","failure","getTransport","connectionType","_queueSend","_resetBackoff","_flushBatch","_delayedConnect","bayeuxMessage","_updateAdvice","newAdvice","_disconnect","reason","_notifyTransportException","oldTransport","newTransport","onTransportException","_handshake","handshakeProps","handshakeCallback","transportTypes","minimumVersion","supportedConnectionTypes","_putCallback","_warn","_notifyCallback","onCallbackException","_handleCallback","_getCallback","_handleRemoteCall","context","_handleTransportFailure","failureInfo","action","_failHandshake","onTransportFailure","_matchMetaConnect","connect","_failConnect","_failDisconnect","_failSubscribe","_failUnsubscribe","_failMessage","_receive","incoming","_handshakeResponse","successful","cause","reestablish","_hasSubscriptions","_resolveScopedCallback","delegate","method","_addListener","isListener","deep","target","objects","prop","source","propName","targ","location","host","failureHandler","oldTransportType","transports","getTransportRegistry","getBackoffPeriod","newTransportType","increaseBackoffPeriod","getTime","resetBackoffPeriod","receive","failureMessage","registerTransport","unregisterTransport","unregisterTransports","findTransport","configure","handshake","disconnect","disconnectProps","disconnectCallback","startBatch","endBatch","batch","addListener","removeListener","clearListeners","subscribe","subscribeProps","subscribeCallback","unsubscribe","unsubscribeProps","unsubscribeCallback","resubscribe","clearSubscriptions","publish","content","publishProps","publishCallback","test","publishBinary","meta","ArrayBuffer","ext","binary","remoteCall","callProps","error","remoteCallBinary","getStatus","isDisconnected","setBackoffIncrement","period","getBackoffIncrement","setLogLevel","registerExtension","unregisterExtension","getExtension","getName","getClientId","WebSocket","_super","_self","_requestIds","_metaConnectRequest","_requests","_envelopes","_transportSend","request","maxDelay","transportSend","expired","errorMessage","xhr","httpCode","xhrStatus","abortXHR","complete","requestId","_complete","success","nextEnvelope","nextRequest","envelopeAndRequest","shift","newEnvelope","newRequest","concat","transportSuccess","responses","transportFailure","metaConnectRequest","state","readyState","XMLHttpRequest","UNSENT","status","_supportsCrossDomain","newXMLHttpRequest","xhrSend","packet","headers","_copyContext","withCredentials","open","headerName","setRequestHeader","onload","responseText","onError","statusText","onabort","onerror","body","sameStack","stringify","received","exception","jsonp","_failTransportFn","jsonpSend","head","document","getElementsByTagName","script","createElement","callbackName","removeChild","encodeURIComponent","src","async","appendChild","start","lengths","json","urlLength","encodeURI","maxLength","envelopeToSend","end","begin","_webSocketSupported","_webSocketConnected","_stickyReconnect","_context","_connecting","_successCallback","_forceClose","event","webSocketClose","onClose","_sameContext","_storeEnvelope","messageIds","envelopes","_webSocketSend","webSocket","timeouts","replace","onclose","connectTimer","onopen","onOpen","wsMessage","onMessage","_notifySuccess","fn","_notifyFailure","key","close","removed","ids","websocketCode","websocketEnabled","Z85","encode","bytes","buffer","Uint8Array","byteLength","remainder","padding","view","DataView","isPadding","getUint8","divisor","floor","decode","string","p","charIdx","byteIdx","charCodeAt","setUint8","lib","default","Realtime","constructor","client","metaHandshake","msg","Error","HANDSHAKE","checkConnection","getFetchOptions","config","getUrl","getCometdHandshake","Paging","service","statistics","filter","currentPage","nextPage","prevPage","pageSize","totalPages","next","list","getFilter","prev","goto","page","assign","Service","realtime","cache","Map","getPrototypeOf","forEach","defineProperty","get","listUrl","res","yield","fetch","changeFetchOptions","params","propertyName","paging","getPaging","detail","entityOrId","getDetailUrl","create","entity","onBeforeCreate","content-type","update","onBeforeUpdate","delete","obj","objWithId","options","baseUrl","getEntityId","fullUrl","handleErrorStatusCodes","let","ex","text","mimeType","getIdString","reference","getCurrentPageFromLink","link","matches","parseInt","global","__self__","DOMException","viewClasses","isArrayBufferView","support","Symbol","normalizeName","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","done","Headers","map","append","header","getOwnPropertyNames","consumed","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","set","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","arrayBuffer","then","readAsText","chars","fromCharCode","formData","isView","oldValue","has","thisArg","keys","values","entries","methods","Request","input","upcased","credentials","mode","signal","toUpperCase","referrer","form","trim","decodeURIComponent","Response","bodyInit","ok","clone","redirectStatuses","redirect","RangeError","err","stack","aborted","abortXhr","rawHeaders","getAllResponseHeaders","line","parts","responseURL","ontimeout","responseType","addEventListener","onreadystatechange","removeEventListener","polyfill","ponyfill","ctx","auths","WeakMap","FetchClient","authOrBaseUrl","tenant","defaultHeaders","setAuth","resolveServerUrl","auth","fetchFn","optionsWithAdjustedBody","adjustOptionsForFormData","paramPart","k","vals","encodedKey","v","clonedOptions","UseXBasic","startsWith","E","btoa$1","_btoa","p1","btoa","block","charCode","str","output","idx","charAt","secrets","BasicAuth","updateCredentials","user","password","token","tfa","secret","xsrfToken","getCookieValue","Authorization","X-XSRF-TOKEN","tfatoken","KEY","logout","cookie","pop","Severity","QueriesUtil","operatorFns","__not","operand","buildQueryFilter","__and","__or","__eq","contextKey","quoteString","__gt","__ge","__lt","__le","__in","stmts","op","glue","__bygroupid","__has","__useFilterQueryString","query","_a","queryString","buildQuery","q","__filter","orderBy","buildQueryOrderby","__orderby","queryFilter","_queryKey","_glueType","queryKey","glueType","qFilter","_q","queryOrderbys","o","addAndFilter","addFilter","addOrFilter","operator","oldFilter","newFilter","skipEmptyObjects","prependOrderbys","orderbys","addOrderbys","appendOrderbys","how","oldOrderbys","newOrderbys","newQuery","isEmptyObject","extractAndMergeOrderBys","queries","orderByQuery","s","escapeSingleQuote","objs","EventService","browser","EventBinaryService","upload","file","download","InventoryBinaryService","managedObject","fileName","fileType","File","managedObjectOrId","createWithProgress","onProgress","bodyHeaders","getHeaders","xhrBody","getBuffer","getXMLHttpResponse","rej","getIdFromUrl","regexp","ChildType","InventoryService","super","inventoriesQueryParamName","devicesQueryParamName","queriesUtil","listQuery","listQueryDevices","childAdditionsList","parentReference","listChildren","ADDITIONS","childAdditionsCreate","createChild","childAdditionsAdd","childReference","addChild","childAdditionsRemove","childAssetsList","ASSETS","childAssetsCreate","childAssetsAdd","childAssetsBulkAdd","addChildBulk","childAssetsRemove","childDevicesList","DEVICES","childDevicesCreate","childDevicesAdd","childDevicesRemove","getSupportedMeasurements","getSupportedMeasurementDetails","getSupportedSeries","getMeasurementsAndSeries","supportedMeasurements","supportedSeries","all","sortedSupportedMeasurements","sort","a","b","fragment","m","series","assetKPIsList","listKPIs","getChildrenUrl","lastUpdated","getChildUrl","childId","references","ref","pagingFilter","childReferenceArray","c8y_SupportedMeasurements","c8y_SupportedSeries","MeasurementService","listSeries","sourceId","aggregationType","AlarmService","AlarmStatus","OperationService","OperationBulkService","operationOrId","OperationBulkStatus","OperationBulkGeneralStatus","OperationStatus","TenantService","currentTenantUrl","fetchOptions","current","enableSupportUser","disableSupportUser","currentTenantType","tenantData","customProperties","tenantType","getTfaSettings","subscribeApplication","application","applicationId","unsubscribeApplication","TenantStatus","TfaStrategy","UserInventoryRoleService","userUrl","currenUserUrl","UserService","currentUserUrl","passwordResetUrl","currentUserPhoneUrl","verifyTFACodeUrl","totpCurrentUserURL","verifyTOTPCodeUrl","activateTOTPCodeUrl","revokeTOTPSecretUrl","newsletterEmailsUrl","currentUserPasswordUrl","revokeAllTokensUrl","inventoryAssignment","Accept","currentWithEffectiveRoles","updateCurrent","sendPasswordResetMail","email","tenantId","resetPassword","newPassword","verifyTFACode","pin","verifyTotpCode","activateTotp","isActive","getActivityTotp","generateTotpSecret","totpRevokeSecret","savePhoneNumber","phoneNumber","phone","getNewsletterEmails","changeUserPassword","currentUserPassword","changeUserPasswordUrl","changeCurrentUserPassword","revokeTokens","hasRole","roleId","hasRoleInUser","hasRoleInGroups","hasAllRoles","roleIds","every","hasAnyRole","some","hasAnyGlobalRole","globalRoleIds","globalRoleId","hasGlobalRoleInUser","isDeviceUser","userName","getId","effectiveRoles","hasRoleInReferences","roles","groups","groupRef","group","role","gR","PasswordStrength","ApplicationBinaryService","applicationOrId","uploadParamsOverride","createBinaryRequestBody","uploadWithProgressXhr","binaryOrId","listPlugins","addPlugin","pluginName","pluginFile","bufferOrStream","Buffer","from","removePlugin","updateFiles","files","contents","path","downloadArchive","binaryId","uploadFileName","bodyFileProperty","requestBody","ApplicationType","ApplicationService","listVersions","applicationVersions","appDetail","listByName","listByTenant","tenantOrName","tenantService","tenantName","listByOwner","listByUser","userOrId","userService","userId","reactivateArchive","appId","getHref","EXTERNAL","externalUrl","public","contextPath","isAvailable","dropOverwrittenApps","noPaging","availableApp","isMatch","getStatusDetails","getInstanceNames","appStatusDetails","instanceNames","c8y_Status","instances","getInstanceLog","instanceName","updateApplicationConfig","app","currentConfig","newConfig","updatedConfigApp","getAppManifest","date","storeAppManifest","manifestJSON","setPackageVersionTag","tags","getManifestOfContextPath","deleteVersionPackage","updateApplicationAvailability","availability","el","includes","InstanceStatus","BillingMode","Isolation","ApplicationAvailability","SystemOptionsService","option","category","TenantOptionsService","securityOptionsCategories","securityOptionsListUrl","systemOptions","encodedCategory","TenantSecurityOptionsService","tenantSecurityOption","TenantLoginOptionsService","entityIdentityOrId","listForCurrentTenant","listForManagement","management","save","TenantLoginOptionType","GrantType","UserManagementSource","AuditService","AuditRecordType","ChangeType","InventoryRoleService","DeviceRegistrationStatus","DeviceRegistrationService","securityToken","getSecurityToken","payload","ACCEPTED","acceptAll","limit","bootstrap","basicAuth","basicAuthToken","pass","noIdEntity","DeviceRegistrationBulkService","inputFile","csv","DeviceRegistrationSecurityMode","UserRoleService","UserGroupService","addRoleToGroup","childEntityOrSelf","ROLES","removeRoleFromGroup","addUserToGroup","USERS","removeUserFromGroup","getSelf","userGroupOrId","getChildReferenceAsBody","childSelf","IdentityService","managedObjectId","getExternalIdsOfGlobalIdUrl","identity","getExternalIdUrl","externalId","TrustedCertificateService","proofOfPossessionUrl","regeneratePoPVerificationCode","verifySignedVerificationCode","proofOfPossessionSignedVerificationCode","fingerprint","SmartGroupsService","SMART_GROUP_TYPE","SMART_GROUP_FRAGMENT_TYPE","DEVICE_GROUP_FRAGMENT_TYPE","DEVICE_GROUP_TYPE","DEVICE_SUBGROUP_TYPE","COLUMNS_CONFIG_FRAGMENT","FILTER_CONFIG_FRAGMENT","QUERY_STRING_FRAGMENT","SMART_GROUPS_V2_MICROSERVICE_APP_NAME","SMART_GROUPS_V2_MICROSERVICE_BASE_PATH","SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH","applicationService","isInstalled","isSmartGroupsV2MicroserviceInstalled","smartGroup","deviceQueryString","configurableColumns","filterConfig","createSmartGroupV2","mo","groupMo","withChildren","isSmartGroupV2","updateSmartGroupV2","partialMo","__rest","removeSmartGroupV2","isSmartGroup","hasSmartGroupFragmentType","isSmartGroupType","hasDeviceGroupFragmentType","isGroupOrSubgroup","partialUrl","SmartRulesService","rulesUrl","unupdatableFields","isMicroserviceAvailable","microserviceAvailable","microserviceName","listByContext","contextRulesUrl","rules","bulkDeactivateEnabledSources","rule","entitiesOrIdsList","newEnabledSources","enabledSources","disableEnabledSources","ruleCopy","getSmartRulesUrl","removeUnclonableFields","entityOrIdList","getListOfStringIds","contextMoId","c8y_Context","fieldsToRemove","f","Client","authenticate","core","deviceBootstrap","deviceId","expire","clientCore","deviceRegistration","username","getMicroserviceSubscriptions","bootstrapCredentials","users","alarm","audit","deviceRegistrationBulk","inventory","inventoryBinary","inventoryRole","measurement","operationBulk","security","system","login","userGroup","userRole","smartGroups","smartRules","logoutUrl","authTokenFromCookie","authTokenFromHeader","authorization"],"mappings":"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","x_google_ignoreList":[1,2,6,8,9,11,15]}
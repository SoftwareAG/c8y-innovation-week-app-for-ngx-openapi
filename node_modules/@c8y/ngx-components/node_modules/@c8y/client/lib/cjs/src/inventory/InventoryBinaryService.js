"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InventoryBinaryService = void 0;
const form_data_1 = __importDefault(require("form-data"));
const core_1 = require("../core");
class InventoryBinaryService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'inventory';
        this.listUrl = 'binaries';
        this.propertyName = 'managedObjects';
    }
    /**
     * Uploads a file and creates a managed object with its metadata.
     * @param file A file to be uploaded.
     * @param managedObject An object containing metadata about the file.
     * Note that you can specify `fileType` and `fileName` in case `file` does not define them
     * but these two properties will be removed from `managedObject` before saving.
     */
    async create(file, managedObject = {}) {
        const method = 'POST';
        const url = this.listUrl;
        const body = new form_data_1.default();
        let fileName;
        let fileType;
        if (managedObject.fileName) {
            fileName = managedObject.fileName;
            delete managedObject.fileName;
        }
        if (managedObject.fileType) {
            fileType = managedObject.fileType;
            delete managedObject.fileType;
        }
        if (!fileName) {
            fileName = 'bin';
        }
        if (typeof File !== 'undefined' && file instanceof File) {
            fileName = file.name;
            fileType = file.type;
        }
        if (!managedObject.name) {
            managedObject.name = fileName;
        }
        if (!managedObject.type) {
            managedObject.type = fileType || 'c8y_upload';
        }
        body.append('file', file, fileName);
        body.append('object', JSON.stringify(managedObject));
        const headers = {
            accept: 'application/json'
        };
        const res = await this.fetch(url, { method, body, headers });
        const data = await res.json();
        return { res, data };
    }
    async list(filter = {}) {
        return super.list(filter);
    }
    async delete(managedObjectOrId) {
        return super.delete(managedObjectOrId);
    }
    async download(managedObjectOrId, init) {
        const url = this.getDetailUrl(managedObjectOrId);
        return await this.fetch(url, init);
    }
    /**
     * Uploads a file and creates a managed object with its metadata. What's more, it invokes an upload progress callback.
     * @param file A file to be uploaded.
     * @param managedObject An object containing metadata about the file.
     * @param onProgress Event handler for progress update, invoked while the browser is uploading the file.
     */
    createWithProgress(file, onProgress, managedObject = {}) {
        const url = `/${this.baseUrl}/${this.listUrl}`;
        const method = 'POST';
        const body = new form_data_1.default();
        let fileName;
        let fileType;
        if (managedObject.fileName) {
            fileName = managedObject.fileName;
            delete managedObject.fileName;
        }
        if (managedObject.fileType) {
            fileType = managedObject.fileType;
            delete managedObject.fileType;
        }
        if (!fileName) {
            fileName = 'bin';
        }
        if (typeof File !== 'undefined' && file instanceof File) {
            fileName = file.name;
            fileType = file.type;
        }
        if (!managedObject.name) {
            managedObject.name = fileName;
        }
        if (!managedObject.type) {
            managedObject.type = fileType || 'c8y_upload';
        }
        body.append('file', file, fileName);
        body.append('object', JSON.stringify(managedObject));
        let bodyHeaders;
        if (typeof body.getHeaders === 'function') {
            bodyHeaders = body.getHeaders();
        }
        const headers = this.client.getFetchOptions().headers;
        Object.assign(headers, {
            accept: 'application/json'
        }, bodyHeaders);
        const xhr = new XMLHttpRequest();
        xhr.open(method, url, true);
        for (const key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
        xhr.upload.addEventListener('progress', onProgress);
        let xhrBody;
        if (typeof body.getBuffer === 'function') {
            xhrBody = body.getBuffer();
        }
        else {
            xhrBody = body;
        }
        xhr.send(xhrBody);
        return xhr;
    }
    getXMLHttpResponse(xhr) {
        return new Promise((res, rej) => {
            xhr.addEventListener('loadend', () => {
                xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 201)
                    ? res(JSON.parse(xhr.responseText))
                    : rej(xhr.responseText ? { data: JSON.parse(xhr.responseText) } : 'Could not upload file.');
            });
        });
    }
    /**
     * Gets binary managed object's id from its download or self URL.
     *
     * @param {string} url URL string.
     *
     * @returns {number} Binary managed object's id.
     *
     * **Example**
     * ```typescript
     *
     *   const id = InventoryBinaryService.getIdFromUrl('http://mytenant.cumulocity.com/inventory/binaries/12345');
     * ```
     */
    getIdFromUrl(url) {
        if (!!url) {
            const regexp = new RegExp('\\/inventory\\/binaries\\/(\\d+)|\\/inventory\\/managedObjects\\/(\\d+)');
            const matches = url.match(regexp);
            return matches && (matches[1] || matches[2]);
        }
    }
}
exports.InventoryBinaryService = InventoryBinaryService;
//# sourceMappingURL=InventoryBinaryService.js.map
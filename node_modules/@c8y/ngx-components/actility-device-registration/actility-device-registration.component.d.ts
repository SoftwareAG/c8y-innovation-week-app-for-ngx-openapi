import { CdkStep } from '@angular/cdk/stepper';
import { FormGroup } from '@angular/forms';
import { C8yStepper, GainsightService } from '@c8y/ngx-components';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Subject } from 'rxjs';
import { ActilityDeviceRegistration } from './actility-device-registration.model';
import { ActilityDeviceRegistrationService } from './actility-device-registration.service';
import * as i0 from "@angular/core";
type State = 'loadPending' | 'loadSuccess' | 'loadError' | 'registrationPending' | 'registrationSuccess' | 'registrationError';
export declare class ActilityDeviceRegistrationComponent {
    bsModalRef: BsModalRef;
    private registrationService;
    private gainsightService;
    stepper: C8yStepper;
    registrationStepLabels: {
        next: "Register";
    };
    finalStepLabels: {
        custom: "Close";
    };
    state: State;
    errors$: BehaviorSubject<Error[]>;
    errorMessages$: import("rxjs").Observable<any>;
    connections$: import("rxjs").Observable<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    deviceProtocols$: import("rxjs").Observable<import("@c8y/client").IResultList<import("@c8y/client").IManagedObject>>;
    unsubscribe$: Subject<void>;
    load$: import("rxjs").Observable<any[]>;
    form: FormGroup<{}>;
    model: ActilityDeviceRegistration;
    fields: FormlyFieldConfig[];
    constructor(bsModalRef: BsModalRef, registrationService: ActilityDeviceRegistrationService, gainsightService: GainsightService);
    getConnectivityPlans$(name: any): import("rxjs").Observable<import("@c8y/client").IResultList<import("./actility-device-registration.model").ConnectivityPlan>>;
    getDeviceProfiles$(name: any): import("rxjs").Observable<import("@c8y/client").IResultList<import("./actility-device-registration.model").DeviceProfile>>;
    getDeviceProtocols$(): import("rxjs").Observable<import("@c8y/client").IResultList<import("@c8y/client").IManagedObject>>;
    getConnections$(): import("rxjs").Observable<{
        res: import("@c8y/client").IFetchResponse;
        data: any;
    }>;
    register(event: {
        stepper: C8yStepper;
        step: CdkStep;
    }): Promise<void>;
    getActilityDeviceToSend(): ActilityDeviceRegistration;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActilityDeviceRegistrationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ActilityDeviceRegistrationComponent, "c8y-actility-registration", never, {}, {}, never, never, false, never>;
}
export {};

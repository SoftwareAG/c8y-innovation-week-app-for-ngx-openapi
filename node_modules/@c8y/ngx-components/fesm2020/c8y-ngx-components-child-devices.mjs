import * as i0 from '@angular/core';
import { Component, Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import * as i3 from '@c8y/ngx-components';
import { ManagedObjectRealtimeService, CoreModule, hookRoute, ViewContext, gettext } from '@c8y/ngx-components';
import * as i2 from '@c8y/ngx-components/device-grid';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import * as i1$1 from '@c8y/client';
import { isEmpty } from 'lodash-es';

class ChildDevicesComponent {
    constructor(route, deviceGridService) {
        this.route = route;
        this.deviceGridService = deviceGridService;
    }
    async ngOnInit() {
        await this.getAllDevices();
        this.columns = this.deviceGridService.getChildDeviceGridColumns();
    }
    async getAllDevices() {
        this.id = this.route.snapshot.parent.data.contextData;
    }
}
ChildDevicesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.DeviceGridService }], target: i0.ɵɵFactoryTarget.Component });
ChildDevicesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ChildDevicesComponent, selector: "c8y-child-devices", providers: [ManagedObjectRealtimeService], ngImport: i0, template: "<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [title]=\"'Child devices' | translate\"\n    [childDeviceGrid]=\"true\"\n    [columns]=\"columns\"\n    [parentDeviceId]=\"id\"\n    c8yProductExperience\n    [actionName]=\"'childDevices'\"\n  ></c8y-device-grid>\n</div>\n", dependencies: [{ kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i2.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-child-devices', providers: [ManagedObjectRealtimeService], template: "<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [title]=\"'Child devices' | translate\"\n    [childDeviceGrid]=\"true\"\n    [columns]=\"columns\"\n    [parentDeviceId]=\"id\"\n    c8yProductExperience\n    [actionName]=\"'childDevices'\"\n  ></c8y-device-grid>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.DeviceGridService }]; } });

class ChildDevicesTabGuard {
    constructor(inventory) {
        this.inventory = inventory;
    }
    async canActivate(route) {
        const contextData = route.data.contextData;
        const filter = {
            pageSize: 1
        };
        if (isEmpty(contextData)) {
            return true;
        }
        const device = await this.inventory.childDevicesList(contextData.id, filter);
        const hasChildren = device.data.length;
        const isVendme = route.data.contextData.type === 'com_nsn_startups_vendme_VendingMachine';
        return hasChildren && !isVendme;
    }
}
ChildDevicesTabGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesTabGuard, deps: [{ token: i1$1.InventoryService }], target: i0.ɵɵFactoryTarget.Injectable });
ChildDevicesTabGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesTabGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesTabGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.InventoryService }]; } });

class ChildDevicesModule {
}
ChildDevicesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ChildDevicesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, declarations: [ChildDevicesComponent], imports: [CoreModule, DeviceGridModule, PopoverModule] });
ChildDevicesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, providers: [
        ChildDevicesTabGuard,
        hookRoute({
            context: ViewContext.Device,
            path: 'child-devices',
            priority: 1000,
            icon: 'code-fork',
            label: gettext('Child devices'),
            component: ChildDevicesComponent,
            canActivate: [ChildDevicesTabGuard]
        })
    ], imports: [CoreModule, DeviceGridModule, PopoverModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ChildDevicesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChildDevicesComponent],
                    imports: [CoreModule, DeviceGridModule, PopoverModule],
                    entryComponents: [ChildDevicesComponent],
                    providers: [
                        ChildDevicesTabGuard,
                        hookRoute({
                            context: ViewContext.Device,
                            path: 'child-devices',
                            priority: 1000,
                            icon: 'code-fork',
                            label: gettext('Child devices'),
                            component: ChildDevicesComponent,
                            canActivate: [ChildDevicesTabGuard]
                        })
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ChildDevicesComponent, ChildDevicesModule };
//# sourceMappingURL=c8y-ngx-components-child-devices.mjs.map

import * as i0 from '@angular/core';
import { forwardRef, Component, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@c8y/ngx-components';
import { gettext, CoreModule } from '@c8y/ngx-components';
import * as i3 from 'ngx-bootstrap/datepicker';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import * as i4 from 'ngx-bootstrap/timepicker';
import { TimepickerModule } from 'ngx-bootstrap/timepicker';
import { isEmpty } from 'lodash-es';
import { throttleTime } from 'rxjs/operators';

class OperationSchedulerComponent {
    set _minutesAhead(minutes) {
        if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {
            this.minutesAhead = minutes;
        }
    }
    set _delayConfig(config) {
        if (config) {
            if (config.seconds > this.DELAY_SECONDS_DEFAULT) {
                this.delaySeconds = config.seconds;
            }
            if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {
                this.delayMilliseconds = config.milliseconds;
            }
        }
    }
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.placeholder = gettext('Start date');
        this.delayErrors = null;
        this.pickerErrors = null;
        this.DELAY_SECONDS_DEFAULT = 1;
        this.DELAY_MILLISECONDS_DEFAULT = 1;
        this.MINUTES_AHEAD_DEFAULT = 5;
        this.delaySeconds = this.DELAY_SECONDS_DEFAULT;
        this.delayMilliseconds = this.DELAY_MILLISECONDS_DEFAULT;
        this.minutesAhead = this.MINUTES_AHEAD_DEFAULT;
        this.currentUnit = 'seconds';
    }
    ngOnInit() {
        this.minDate = new Date();
        this.initialDate = new Date(this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead));
        this.minDelay = this.delaySeconds;
        this.fgOperationScheduler = this.formBuilder.group({
            picker: ['', [Validators.required, this.dateValidation]],
            time: ['', [Validators.required, this.timeValidation]],
            delay: ['', [Validators.required, Validators.min(this.minDelay)]],
            unit: ['seconds']
        });
        this.fgOperationScheduler.patchValue({
            picker: this.initialDate,
            time: this.initialDate,
            delay: this.minDelay
        });
        // Due to the validation of picker and time it could be possible that value changes
        // are emitted more than once. Therefore we throttle the emits.
        const valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));
        this.subscription = valueChanges$.subscribe(data => {
            this.delayErrors = this.fgOperationScheduler.controls.delay.errors;
            this.pickerErrors = this.fgOperationScheduler.controls.picker.errors;
            this.convertDelayHandler(data.unit);
            this.emitData(data);
        });
    }
    ngOnDestroy() {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
    writeValue(value) {
        if (value) {
            this.fgOperationScheduler.patchValue({
                picker: value.scheduledDate,
                time: value.scheduledDate,
                delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,
                unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'
            });
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.fgOperationScheduler?.disabled === isDisabled) {
            return;
        }
        isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();
    }
    validate() {
        if (this.fgOperationScheduler.invalid) {
            return {
                ...this.fgOperationScheduler.controls.picker.errors,
                ...this.fgOperationScheduler.controls.time.errors,
                ...this.fgOperationScheduler.controls.delay.errors
            };
        }
    }
    registerOnValidatorChange(fn) {
        this.onValidatorChanged = fn;
    }
    markAsTouched() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    convertDelayHandler(unit) {
        if (this.currentUnit === unit) {
            return;
        }
        this.currentUnit = unit;
        this.convertDelay(this.currentUnit);
        // update validator on delay control to make sure that
        // switching from minutes to seconds or vice versa does not harm validation.
        this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);
        this.fgOperationScheduler.controls.delay.updateValueAndValidity();
    }
    emitData(data) {
        if (this.onValidatorChanged) {
            this.onValidatorChanged();
        }
        if (data.picker && data.time) {
            data.picker = this.combineDateAndTime(data.picker, data.time);
        }
        this.convertDelay(this.currentUnit);
        data.delayInSeconds = this.delayInSeconds;
        if (this.onChange) {
            this.onChange({
                delayInSeconds: data.delayInSeconds,
                scheduledDate: data.picker
            });
        }
    }
    convertDelay(unit) {
        if (unit && this.fgOperationScheduler.controls.delay.value) {
            this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;
            if (unit === 'milliseconds') {
                this.minDelay =
                    this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT
                        ? this.delayMilliseconds
                        : this.DELAY_MILLISECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;
            }
            else {
                this.delaySeconds = this.fgOperationScheduler.controls.delay.value;
                this.minDelay =
                    this.delaySeconds > this.DELAY_SECONDS_DEFAULT
                        ? this.delaySeconds
                        : this.DELAY_SECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;
            }
        }
    }
    combineDateAndTime(date, time) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
    }
    dateValidation(fControl) {
        if (fControl.value) {
            const date = fControl.value;
            fControl.parent.get('time').setValue(date);
            return date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
        }
        return { dateValidation: true };
    }
    timeValidation(fControl) {
        if (fControl.value) {
            const date = fControl.value;
            const result = date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
            const picker = fControl.parent.get('picker');
            if (result) {
                picker.setErrors(result);
                picker.markAsTouched();
                return result;
            }
            if (picker && picker.errors && picker.errors.dateValidation) {
                delete picker.errors.dateValidation;
                if (isEmpty(picker.errors)) {
                    picker.setErrors(null);
                    return result;
                }
                picker.setErrors(picker.errors);
            }
            return result;
        }
        return { dateValidation: true };
    }
}
OperationSchedulerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationSchedulerComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
OperationSchedulerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OperationSchedulerComponent, selector: "c8y-operation-scheduler", inputs: { _minutesAhead: ["minutesAhead", "_minutesAhead"], _delayConfig: ["delayConfig", "_delayConfig"] }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => OperationSchedulerComponent)
        },
        {
            provide: NG_VALIDATORS,
            multi: true,
            useExisting: forwardRef(() => OperationSchedulerComponent)
        }
    ], ngImport: i0, template: "<div [formGroup]=\"fgOperationScheduler\">\n  <div class=\"form-group\">\n    <label translate>Start date</label>\n    <div class=\"datetime-picker\">\n      <c8y-form-group class=\"datepicker\">\n        <input\n          class=\"form-control\"\n          placeholder=\"{{ placeholder | translate }}\"\n          required\n          formControlName=\"picker\"\n          [bsConfig]=\"{ customTodayClass: 'today' }\"\n          [minDate]=\"minDate\"\n          bsDatepicker\n          (blur)=\"markAsTouched()\"\n        />\n        <c8y-messages>\n          <c8y-message\n            [name]=\"'dateValidation'\"\n            [text]=\"'Select time in the future.' | translate\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n      <timepicker\n        class=\"form-group\"\n        [showSpinners]=\"false\"\n        [showMeridian]=\"false\"\n        formControlName=\"time\"\n        (blur)=\"markAsTouched()\"\n      ></timepicker>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <c8y-form-group [hasError]=\"delayErrors\">\n      <label translate>Delay</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 15\"\n          type=\"number\"\n          required\n          formControlName=\"delay\"\n          (blur)=\"markAsTouched()\"\n        />\n        <div class=\"input-group-btn\">\n          <div class=\"c8y-select-wrapper\">\n            <select\n              class=\"form-control m-r-sm-32 m-r-xs-56\"\n              [attr.aria-label]=\"'Delay units' | translate\"\n              formControlName=\"unit\"\n              (blur)=\"markAsTouched()\"\n              maxlength=\"10\"\n            >\n              <option\n                value=\"seconds\"\n                translate\n              >\n                Seconds\n              </option>\n              <option\n                value=\"milliseconds\"\n                translate\n              >\n                Milliseconds\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </div>\n      </div>\n    </c8y-form-group>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "component", type: i2.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i2.MessageDirective, selector: "c8y-message", inputs: ["name", "text"] }, { kind: "component", type: i2.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }, { kind: "directive", type: i2.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i3.BsDatepickerDirective, selector: "[bsDatepicker]", inputs: ["placement", "triggers", "outsideClick", "container", "outsideEsc", "isDisabled", "minDate", "maxDate", "minMode", "daysDisabled", "datesDisabled", "datesEnabled", "dateCustomClasses", "dateTooltipTexts", "isOpen", "bsValue", "bsConfig"], outputs: ["onShown", "onHidden", "bsValueChange"], exportAs: ["bsDatepicker"] }, { kind: "directive", type: i3.BsDatepickerInputDirective, selector: "input[bsDatepicker]" }, { kind: "component", type: i4.TimepickerComponent, selector: "timepicker", inputs: ["hourStep", "minuteStep", "secondsStep", "readonlyInput", "disabled", "mousewheel", "arrowkeys", "showSpinners", "showMeridian", "showMinutes", "showSeconds", "meridians", "min", "max", "hoursPlaceholder", "minutesPlaceholder", "secondsPlaceholder"], outputs: ["isValid", "meridianChange"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OperationSchedulerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-operation-scheduler', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => OperationSchedulerComponent)
                        },
                        {
                            provide: NG_VALIDATORS,
                            multi: true,
                            useExisting: forwardRef(() => OperationSchedulerComponent)
                        }
                    ], template: "<div [formGroup]=\"fgOperationScheduler\">\n  <div class=\"form-group\">\n    <label translate>Start date</label>\n    <div class=\"datetime-picker\">\n      <c8y-form-group class=\"datepicker\">\n        <input\n          class=\"form-control\"\n          placeholder=\"{{ placeholder | translate }}\"\n          required\n          formControlName=\"picker\"\n          [bsConfig]=\"{ customTodayClass: 'today' }\"\n          [minDate]=\"minDate\"\n          bsDatepicker\n          (blur)=\"markAsTouched()\"\n        />\n        <c8y-messages>\n          <c8y-message\n            [name]=\"'dateValidation'\"\n            [text]=\"'Select time in the future.' | translate\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n      <timepicker\n        class=\"form-group\"\n        [showSpinners]=\"false\"\n        [showMeridian]=\"false\"\n        formControlName=\"time\"\n        (blur)=\"markAsTouched()\"\n      ></timepicker>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <c8y-form-group [hasError]=\"delayErrors\">\n      <label translate>Delay</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 15\"\n          type=\"number\"\n          required\n          formControlName=\"delay\"\n          (blur)=\"markAsTouched()\"\n        />\n        <div class=\"input-group-btn\">\n          <div class=\"c8y-select-wrapper\">\n            <select\n              class=\"form-control m-r-sm-32 m-r-xs-56\"\n              [attr.aria-label]=\"'Delay units' | translate\"\n              formControlName=\"unit\"\n              (blur)=\"markAsTouched()\"\n              maxlength=\"10\"\n            >\n              <option\n                value=\"seconds\"\n                translate\n              >\n                Seconds\n              </option>\n              <option\n                value=\"milliseconds\"\n                translate\n              >\n                Milliseconds\n              </option>\n            </select>\n            <span></span>\n          </div>\n        </div>\n      </div>\n    </c8y-form-group>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { _minutesAhead: [{
                type: Input,
                args: ['minutesAhead']
            }], _delayConfig: [{
                type: Input,
                args: ['delayConfig']
            }] } });

/**
 * This module provides components for scheduling bulk operations.
 */
class BulkOperationSchedulerModule {
}
BulkOperationSchedulerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkOperationSchedulerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BulkOperationSchedulerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: BulkOperationSchedulerModule, declarations: [OperationSchedulerComponent], imports: [CoreModule,
        ReactiveFormsModule, i3.BsDatepickerModule, i4.TimepickerModule], exports: [OperationSchedulerComponent] });
BulkOperationSchedulerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkOperationSchedulerModule, imports: [CoreModule,
        ReactiveFormsModule,
        BsDatepickerModule.forRoot(),
        TimepickerModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: BulkOperationSchedulerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        ReactiveFormsModule,
                        BsDatepickerModule.forRoot(),
                        TimepickerModule.forRoot()
                    ],
                    providers: [],
                    declarations: [OperationSchedulerComponent],
                    entryComponents: [OperationSchedulerComponent],
                    exports: [OperationSchedulerComponent]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BulkOperationSchedulerModule, OperationSchedulerComponent };
//# sourceMappingURL=c8y-ngx-components-operations-bulk-operation-scheduler.mjs.map

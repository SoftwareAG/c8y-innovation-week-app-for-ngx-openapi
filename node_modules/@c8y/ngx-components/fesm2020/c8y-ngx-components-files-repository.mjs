import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Output, ViewChild, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import * as i3 from '@c8y/ngx-components';
import { NavigatorNode, gettext, Status, DataGridComponent, CoreModule, DropAreaModule, hookNavigator, hookRoute } from '@c8y/ngx-components';
import * as i1 from '@c8y/client';
import { QueriesUtil } from '@c8y/client';
import { combineLatest, Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import * as i4 from 'ngx-bootstrap/modal';
import { has, transform } from 'lodash-es';
import * as i5 from '@ngx-translate/core';
import * as i6 from '@angular/common';
import * as i7 from '@c8y/ngx-components/file-preview';
import { FilePreviewModule } from '@c8y/ngx-components/file-preview';

class FilesRepositoryGuard {
    constructor(permissions) {
        this.permissions = permissions;
    }
    /**
     * Checks if files repository should be active,
     * i.e. whether the current tenant can read or admin files in repository.
     *
     * @returns True, if the feature should be active.
     */
    canActivate() {
        return (this.permissions.hasRole('ROLE_INVENTORY_READ') ||
            this.permissions.hasRole('ROLE_INVENTORY_ADMIN'));
    }
}
FilesRepositoryGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryGuard, deps: [{ token: i3.Permissions }], target: i0.ɵɵFactoryTarget.Injectable });
FilesRepositoryGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryGuard, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryGuard, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i3.Permissions }]; } });

class FilesRepositoryNavigationFactory {
    constructor(filesRepositoryGuard) {
        this.filesRepositoryGuard = filesRepositoryGuard;
        this.navs = [];
    }
    async get() {
        if (this.filesRepositoryGuard.canActivate()) {
            if (!this.navs.length) {
                this.navs.push(new NavigatorNode({
                    parent: gettext('Management'),
                    label: gettext('Files repository'),
                    icon: 'c8y-archive',
                    path: 'files',
                    routerLinkExact: false,
                    priority: 1000
                }));
            }
        }
        return this.navs;
    }
}
FilesRepositoryNavigationFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryNavigationFactory, deps: [{ token: FilesRepositoryGuard }], target: i0.ɵɵFactoryTarget.Injectable });
FilesRepositoryNavigationFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryNavigationFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryNavigationFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: FilesRepositoryGuard }]; } });

const PRODUCT_EXPERIENCE = {
    EVENTS: {
        FILE_REPOSITORY_UPLOAD: 'filesRepositoryUpload'
    },
    COMPONENTS: {
        FILE_REPOSITORY_UPLOAD_COMPONENT: 'files-repository-upload'
    },
    RESULTS: {
        UPLOAD_ITEM_SUCCESS: 'fileUploadSuccess',
        UPLOAD_ITEM_FAILED: 'fileUploadFailed'
    }
};

class FilesRepositoryUploadComponent {
    constructor(alertService, gainsightService, filesService) {
        this.alertService = alertService;
        this.gainsightService = gainsightService;
        this.filesService = filesService;
        /** Emits an event when modal is closed. `uploaded` indicates if any files were uploaded. */
        this.onClose = new EventEmitter();
        this.isLoading = false;
        this.dropFilesHereMessage = gettext('Drop files here');
    }
    async upload() {
        this.isLoading = true;
        this.uploadProgress$ = combineLatest(this.filesToUpload.map(file => this.filesService.uploadFileWithProgress$(file)));
        this.uploadSubscription = this.uploadProgress$.subscribe(uploadProgress => {
            this.uploadProgress = uploadProgress;
        }, e => {
            if (e) {
                this.alertService.addServerFailure(e);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                    component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                    action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_FAILED
                });
            }
            this.isLoading = false;
        }, () => {
            this.alertService.success(gettext('File(s) uploaded.'));
            this.onClose.emit({ uploaded: true });
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_SUCCESS
            });
        });
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            this.filesToUpload = event;
        }
    }
}
FilesRepositoryUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryUploadComponent, deps: [{ token: i3.AlertService }, { token: i3.GainsightService }, { token: i3.FilesService }], target: i0.ɵɵFactoryTarget.Component });
FilesRepositoryUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FilesRepositoryUploadComponent, selector: "c8y-files-repository-upload", outputs: { onClose: "onClose" }, ngImport: i0, template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4\n      id=\"modal-title\"\n      translate\n    >\n      Upload files\n    </h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div\n      class=\"modal-body\"\n      id=\"modal-body\"\n    >\n      <c8y-file-picker-form-control\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [uploadProgress]=\"uploadProgress\"\n      ></c8y-file-picker-form-control>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      type=\"button\"\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      translate\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i3.FilePickerFormControlComponent, selector: "c8y-file-picker-form-control", inputs: ["accept", "maxAllowedFiles", "minRequiredFiles", "disableValidators", "uploadInProgress", "uploadProgress", "validateExtensionOnDrag"], outputs: ["dropped"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-files-repository-upload', template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4\n      id=\"modal-title\"\n      translate\n    >\n      Upload files\n    </h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div\n      class=\"modal-body\"\n      id=\"modal-body\"\n    >\n      <c8y-file-picker-form-control\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n        [uploadProgress]=\"uploadProgress\"\n      ></c8y-file-picker-form-control>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      type=\"button\"\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      translate\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i3.AlertService }, { type: i3.GainsightService }, { type: i3.FilesService }]; }, propDecorators: { onClose: [{
                type: Output
            }] } });

class FilesRepositoryService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.baseQuery = { __has: 'c8y_IsBinary' };
        this.queriesUtil = new QueriesUtil();
    }
    getPagination() {
        return {
            pageSize: 10,
            currentPage: 1
        };
    }
    hasApplicationStorageFragment(file) {
        return has(file, 'c8y_applications_storage');
    }
    getColumns() {
        return [
            {
                name: 'name',
                header: gettext('Name'),
                path: 'name',
                filterable: true,
                sortable: true,
                sortOrder: 'asc'
            },
            {
                name: 'type',
                header: gettext('Type'),
                path: 'type',
                filterable: true,
                sortable: true
            },
            {
                name: 'length',
                header: gettext('Size'),
                path: 'length',
                filterable: false,
                sortable: true
            },
            {
                name: 'owner',
                header: gettext('Owner'),
                path: 'owner',
                filterable: true,
                sortable: true
            },
            {
                name: 'lastUpdated',
                header: gettext('Last update'),
                path: 'lastUpdated',
                filterable: false,
                sortable: true
            }
        ];
    }
    /** Returns array with items id where item has not c8y_applications_storage fragment. */
    getDeletableItemsIds(selectedItemsIds, dataFromDataGrid) {
        const selectedItemsWithoutApplications = [];
        dataFromDataGrid.forEach(item => {
            selectedItemsIds.forEach(selectedItemId => {
                if (selectedItemId === item.id && !this.hasApplicationStorageFragment(item)) {
                    selectedItemsWithoutApplications.push(selectedItemId);
                }
            });
        });
        return selectedItemsWithoutApplications;
    }
    /** Returns the total number of items (with no filters based on columns setup). */
    async getTotal() {
        const filters = {
            query: this.queriesUtil.buildQuery(this.baseQuery),
            pageSize: 1,
            withTotalPages: true
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    /** Returns data for current columns and pagination setup. */
    async getData(columns, pagination, searchText = '') {
        // build filters based on columns and pagination
        const filters = {
            text: searchText,
            ...this.getFilters(columns, pagination)
        };
        // execute inventory query for the list of managed objects
        return this.inventoryService.list(filters);
    }
    /** Returns the number of items matching current columns and pagination setup. */
    async getCount(columns, pagination) {
        const filters = {
            // build filters based on columns and pagination
            ...this.getFilters(columns, pagination),
            // but we only need the number of items, not the items themselves
            pageSize: 1,
            currentPage: 1
        };
        return (await this.inventoryService.list(filters)).paging.totalPages;
    }
    /** Returns filters for given columns and pagination setup. */
    getFilters(columns, pagination) {
        return {
            query: this.getQueryString(columns),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withChildren: false,
            withTotalPages: true
        };
    }
    /** Returns a query string based on columns setup. */
    getQueryString(columns) {
        let fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, this.baseQuery);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    /** Returns a query object based on columns setup. */
    getQueryObj(columns) {
        return transform(columns, (query, column) => this.addColumnQuery(query, column), {
            __filter: {},
            __orderby: []
        });
    }
    /** Extends given query with a part based on the setup of given column. */
    addColumnQuery(query, column) {
        // when a column is marked as filterable
        if (column.filterable) {
            // in the case of default filtering form, `filterPredicate` will contain the string entered by a user
            if (column.filterPredicate) {
                // so we use it as the expected value, * allow to search for it anywhere in the property
                query.__filter[column.path] = `*${column.filterPredicate}*`;
            }
            // in the case of custom filtering form, we're storing the query in `externalFilterQuery.query`
            if (column.externalFilterQuery) {
                query = this.queriesUtil.addAndFilter(query, column.externalFilterQuery.query);
            }
        }
        // when a column is sortable and has a specified sorting order
        if (column.sortable && column.sortOrder) {
            // add sorting condition for the configured column `path`
            query.__orderby.push({
                [column.path]: column.sortOrder === 'asc' ? 1 : -1
            });
        }
        return query;
    }
}
FilesRepositoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, deps: [{ token: i1.InventoryService }], target: i0.ɵɵFactoryTarget.Injectable });
FilesRepositoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }]; } });

class FilesRepositoryComponent {
    constructor(filesRepositoryService, inventoryBinaryService, modalService, alertService, bsModalService, fileService, translateService) {
        this.filesRepositoryService = filesRepositoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.modalService = modalService;
        this.alertService = alertService;
        this.bsModalService = bsModalService;
        this.fileService = fileService;
        this.translateService = translateService;
        this.destroy$ = new Subject();
        this.title = gettext('Files repository');
        this.managementTitle = gettext('Management');
        this.loadMoreItemsLabel = gettext('Load more files');
        this.loadingItemsLabel = gettext('Loading files…');
        this.isLoading = true;
        this.displayOptions = {
            bordered: false,
            striped: true,
            filter: true,
            gridHeader: true
        };
        this.columns = this.filesRepositoryService.getColumns();
        this.pagination = this.filesRepositoryService.getPagination();
        this.infiniteScroll = 'auto';
        this.selectable = true;
        this.actionControls = [
            {
                text: gettext('Delete'),
                icon: 'trash',
                type: "DELETE" /* BuiltInActionType.Delete */,
                showIf: selectedItem => !this.filesRepositoryService.hasApplicationStorageFragment(selectedItem),
                callback: selectedItem => this.onDeleteItem(selectedItem)
            },
            {
                text: gettext('Download'),
                icon: 'download',
                type: "EXPORT" /* BuiltInActionType.Export */,
                callback: selectedItem => this.onDownloadItem(selectedItem)
            }
        ];
        this.bulkActionControls = [
            {
                type: "DELETE" /* BuiltInActionType.Delete */,
                callback: selectedItemIds => this.onDeleteItems(selectedItemIds)
            }
        ];
        this.refresh = new EventEmitter();
        // we're setting up `serverSideDataCallback` to execute a method from this component with bound `this`
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    async onDataSourceModifier(dataSourceModifier) {
        const { res, data, paging } = await this.filesRepositoryService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, dataSourceModifier.searchText);
        const filteredSize = await this.filesRepositoryService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination);
        const size = await this.filesRepositoryService.getTotal();
        const serverSideDataResult = { res, data, paging, filteredSize, size };
        this.isLoading = false;
        this.returnedDataSize = serverSideDataResult.size;
        return serverSideDataResult;
    }
    async onDeleteItem(selectedItem) {
        return this.deleteItemsWithConfirmation([selectedItem.id], {
            title: gettext('Delete file'),
            body: this.translateService.instant(gettext('You are about to delete file "{{ name }}". Do you want to proceed?'), selectedItem),
            successText: gettext('File deleted.')
        });
    }
    async onDeleteItems(selectedItemsIds) {
        const dataGridDataSourceData = await this.dataGrid.dataSource.data$.pipe(take(1)).toPromise();
        const deletableItemsIds = this.filesRepositoryService.getDeletableItemsIds(selectedItemsIds, dataGridDataSourceData);
        let body;
        if (deletableItemsIds.length < selectedItemsIds.length) {
            body = gettext(`
        You are about to delete the selected files.
        Note: the selected files of type "c8y_applications_storage_*" won't be deleted though
        - such files can be deleted only from the "Activity log" of the associated application.
        Do you want to proceed?
      `);
        }
        else {
            body = gettext('You are about to delete the selected files. Do you want to proceed?');
        }
        return this.deleteItemsWithConfirmation(deletableItemsIds, {
            title: gettext('Delete files'),
            body,
            successText: gettext('Files deleted.')
        });
    }
    async onDownloadItem(selectedItem) {
        return this.fileService.download(selectedItem);
    }
    openFileUploadComponent() {
        const modalOptions = {
            class: 'modal-sm',
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title',
            ignoreBackdropClick: true
        };
        const modalRef = this.bsModalService.show(FilesRepositoryUploadComponent, modalOptions);
        modalRef.content.onClose.pipe(takeUntil(this.destroy$)).subscribe(({ uploaded }) => {
            if (uploaded) {
                this.refresh.emit();
            }
            modalRef.hide();
        });
    }
    async deleteItemsWithConfirmation(selectedItemsIds, options) {
        try {
            await this.confirmItemsDeletion(options);
            this.isLoading = true;
            const promises = selectedItemsIds.map(selectedItemId => this.inventoryBinaryService.delete(selectedItemId));
            await Promise.all(promises);
            this.alertService.success(options.successText);
            this.refresh.next();
        }
        catch (ex) {
            if (ex) {
                this.alertService.addServerFailure(ex);
            }
        }
        finally {
            this.isLoading = false;
        }
    }
    async confirmItemsDeletion({ title, body }) {
        const status = Status.DANGER;
        const labels = { ok: gettext('Delete'), cancel: gettext('Cancel') };
        await this.modalService.confirm(title, body, status, labels);
    }
}
FilesRepositoryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryComponent, deps: [{ token: FilesRepositoryService }, { token: i1.InventoryBinaryService }, { token: i3.ModalService }, { token: i3.AlertService }, { token: i4.BsModalService }, { token: i3.FilesService }, { token: i5.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
FilesRepositoryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: FilesRepositoryComponent, selector: "c8y-files-repository", viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true, static: true }], ngImport: i0, template: "<c8y-title>\n  {{ title | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    icon=\"c8y-management\"\n    [label]=\"managementTitle | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"title | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']; allowAny: true\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Upload files' | translate }}\"\n    (click)=\"openFileUploadComponent()\"\n    data-cy=\"c8y-files-repository--open-file-upload-component\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ 'Upload files' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/administration/#files\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [infiniteScroll]=\"infiniteScroll\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [showSearch]=\"true\"\n    [refresh]=\"refresh\"\n    [bulkActionControls]=\"bulkActionControls\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"isLoading\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container>\n        <div class=\"text-center list-group\">\n          <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-archive\"></h1>\n          <h3 translate>No files to display.</h3>\n          <div\n            class=\"text-center\"\n            *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']\"\n          >\n            <p translate>Add a new file by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Upload file' | translate }}\"\n                type=\"button\"\n                (click)=\"openFileUploadComponent()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                {{ 'Upload file' | translate }}\n              </button>\n            </p>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n\n    <c8y-column name=\"name\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value }}\">\n          <div class=\"d-flex j-c-between a-i-center\">\n            {{ context.value }}\n            <c8y-file-preview [mo]=\"context.item\" class=\"m-l-auto\">\n              <button\n                class=\"btn btn-emphasis btn-icon\"\n                type=\"button\"\n                [title]=\"'Preview file' | translate\"\n                customButton\n              >\n                <i c8yIcon=\"search\"></i>\n              </button>\n            </c8y-file-preview>\n          </div>\n        </span>\n      </ng-container>\n    </c8y-column>\n\n    <c8y-column name=\"length\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value }} B\">\n          {{ context.value | bytes }}\n        </span>\n      </ng-container>\n    </c8y-column>\n\n    <c8y-column name=\"lastUpdated\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value | c8yDate }}\">\n          {{ context.value | c8yDate }}\n        </span>\n      </ng-container>\n    </c8y-column>\n  </c8y-data-grid>\n</div>\n", dependencies: [{ kind: "component", type: i3.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i3.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i3.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.IfAllowedDirective, selector: "[c8yIfAllowed]", inputs: ["c8yIfAllowed", "c8yIfAllowedAllowAny"] }, { kind: "component", type: i3.LoadingComponent, selector: "c8y-loading" }, { kind: "directive", type: i3.CellRendererDefDirective, selector: "[c8yCellRendererDef]" }, { kind: "directive", type: i3.ColumnDirective, selector: "c8y-column", inputs: ["name"] }, { kind: "component", type: i3.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "singleSelection", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning", "activeClassName"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "component", type: i3.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: i3.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "component", type: i7.FilePreviewComponent, selector: "c8y-file-preview", inputs: ["mo"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i3.DatePipe, name: "c8yDate" }, { kind: "pipe", type: i3.BytesPipe, name: "bytes" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-files-repository', template: "<c8y-title>\n  {{ title | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    icon=\"c8y-management\"\n    [label]=\"managementTitle | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"title | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']; allowAny: true\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Upload files' | translate }}\"\n    (click)=\"openFileUploadComponent()\"\n    data-cy=\"c8y-files-repository--open-file-upload-component\"\n  >\n    <i c8yIcon=\"upload\"></i>\n    {{ 'Upload files' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/administration/#files\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [infiniteScroll]=\"infiniteScroll\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [showSearch]=\"true\"\n    [refresh]=\"refresh\"\n    [bulkActionControls]=\"bulkActionControls\"\n  >\n    <div class=\"c8y-empty-state\">\n      <ng-container *ngIf=\"isLoading\">\n        <c8y-loading></c8y-loading>\n      </ng-container>\n      <ng-container>\n        <div class=\"text-center list-group\">\n          <h1 class=\"c8y-icon-duocolor\" c8yIcon=\"c8y-archive\"></h1>\n          <h3 translate>No files to display.</h3>\n          <div\n            class=\"text-center\"\n            *c8yIfAllowed=\"['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']\"\n          >\n            <p translate>Add a new file by clicking below.</p>\n            <p>\n              <button\n                class=\"btn btn-primary\"\n                title=\"{{ 'Upload file' | translate }}\"\n                type=\"button\"\n                (click)=\"openFileUploadComponent()\"\n              >\n                <i c8yIcon=\"plus-circle\"></i>\n                {{ 'Upload file' | translate }}\n              </button>\n            </p>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n\n    <c8y-column name=\"name\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value }}\">\n          <div class=\"d-flex j-c-between a-i-center\">\n            {{ context.value }}\n            <c8y-file-preview [mo]=\"context.item\" class=\"m-l-auto\">\n              <button\n                class=\"btn btn-emphasis btn-icon\"\n                type=\"button\"\n                [title]=\"'Preview file' | translate\"\n                customButton\n              >\n                <i c8yIcon=\"search\"></i>\n              </button>\n            </c8y-file-preview>\n          </div>\n        </span>\n      </ng-container>\n    </c8y-column>\n\n    <c8y-column name=\"length\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value }} B\">\n          {{ context.value | bytes }}\n        </span>\n      </ng-container>\n    </c8y-column>\n\n    <c8y-column name=\"lastUpdated\">\n      <ng-container *c8yCellRendererDef=\"let context\">\n        <span title=\"{{ context.value | c8yDate }}\">\n          {{ context.value | c8yDate }}\n        </span>\n      </ng-container>\n    </c8y-column>\n  </c8y-data-grid>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: FilesRepositoryService }, { type: i1.InventoryBinaryService }, { type: i3.ModalService }, { type: i3.AlertService }, { type: i4.BsModalService }, { type: i3.FilesService }, { type: i5.TranslateService }]; }, propDecorators: { dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: true }]
            }] } });

class FilesRepositoryModule {
}
FilesRepositoryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FilesRepositoryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryModule, declarations: [FilesRepositoryComponent, FilesRepositoryUploadComponent], imports: [RouterModule, CoreModule, DropAreaModule, FilePreviewModule] });
FilesRepositoryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryModule, providers: [
        FilesRepositoryGuard,
        hookNavigator(FilesRepositoryNavigationFactory),
        hookRoute({
            path: 'files',
            component: FilesRepositoryComponent,
            canActivate: [FilesRepositoryGuard]
        }, { multi: true }),
        FilesRepositoryService
    ], imports: [RouterModule, CoreModule, DropAreaModule, FilePreviewModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: FilesRepositoryModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule, CoreModule, DropAreaModule, FilePreviewModule],
                    exports: [],
                    declarations: [FilesRepositoryComponent, FilesRepositoryUploadComponent],
                    providers: [
                        FilesRepositoryGuard,
                        hookNavigator(FilesRepositoryNavigationFactory),
                        hookRoute({
                            path: 'files',
                            component: FilesRepositoryComponent,
                            canActivate: [FilesRepositoryGuard]
                        }, { multi: true }),
                        FilesRepositoryService
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FilesRepositoryComponent, FilesRepositoryGuard, FilesRepositoryModule, FilesRepositoryNavigationFactory, FilesRepositoryService, FilesRepositoryUploadComponent };
//# sourceMappingURL=c8y-ngx-components-files-repository.mjs.map

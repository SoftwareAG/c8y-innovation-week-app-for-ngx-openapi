import * as i0 from '@angular/core';
import { Component, Input, Optional, Inject, ViewChild, NgModule } from '@angular/core';
import * as i1 from '@c8y/client';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2$1 from '@c8y/ngx-components';
import { gettext, CommonModule as CommonModule$1, FormsModule as FormsModule$1 } from '@c8y/ngx-components';
import * as i6 from '@angular/forms';
import { ControlContainer, NgForm, FormsModule } from '@angular/forms';
import * as i4 from '@c8y/ngx-components/icon-selector';
import * as i1$1 from '@c8y/ngx-components/map';
import { defaultMapConfig, MAP_DEFAULT_CONFIG, MapComponent, ClusterMapComponent, MapModule } from '@c8y/ngx-components/map';
import * as i3 from '@ngx-translate/core';
import * as i7 from 'ngx-bootstrap/tooltip';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i4$1 from '@angular/router';
import { RouterModule } from '@angular/router';

class MapEventInfoComponent {
    constructor(eventService) {
        this.eventService = eventService;
        this.loading = true;
    }
    async ngOnChanges() {
        this.loading = true;
        const { data } = await this.eventService.list({
            dateFrom: '1970-01-01',
            dateTo: new Date(Date.now()).toISOString(),
            fragmentType: 'c8y_Position',
            pageSize: 1,
            source: this.asset.id
        });
        this.event = data[0];
        this.loading = false;
    }
}
MapEventInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapEventInfoComponent, deps: [{ token: i1.EventService }], target: i0.ɵɵFactoryTarget.Component });
MapEventInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MapEventInfoComponent, selector: "c8y-map-event-info", inputs: { asset: "asset" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"text-muted text-10 p-t-4 p-b-4\">\n  <span translate>Last position update:</span>\n  <br />\n  <c8y-loading *ngIf=\"loading\"></c8y-loading>\n  <ng-container *ngIf=\"!loading\">\n    <i *ngIf=\"!event\" translate>No information found</i>\n    <ng-container *ngIf=\"event\">\n      <i>{{ event.time | c8yDate }}</i>\n      <ng-content></ng-content>\n    </ng-container>\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i2$1.LoadingComponent, selector: "c8y-loading" }, { kind: "pipe", type: i2$1.DatePipe, name: "c8yDate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapEventInfoComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map-event-info', template: "<div class=\"text-muted text-10 p-t-4 p-b-4\">\n  <span translate>Last position update:</span>\n  <br />\n  <c8y-loading *ngIf=\"loading\"></c8y-loading>\n  <ng-container *ngIf=\"!loading\">\n    <i *ngIf=\"!event\" translate>No information found</i>\n    <ng-container *ngIf=\"event\">\n      <i>{{ event.time | c8yDate }}</i>\n      <ng-content></ng-content>\n    </ng-container>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.EventService }]; }, propDecorators: { asset: [{
                type: Input
            }] } });

class MapWidgetConfigComponent {
    constructor(mapService, alertService, translateService, defaultConfig, iconSelector) {
        this.mapService = mapService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.defaultConfig = defaultConfig;
        this.iconSelector = iconSelector;
        this.config = {
            mapConfig: undefined
        };
        this.canAutoCenter = true;
        this.isPositionedDevice = false;
        this.refreshOptions = 'none';
        if (!this.defaultConfig) {
            this.defaultConfig = defaultMapConfig;
        }
        this.formConfig = {
            zoomLevel: this.defaultConfig.zoomLevel,
            center: this.defaultConfig.center
        };
    }
    async ngOnInit() {
        if (!this.config.mapConfig) {
            this.config.mapConfig = this.formConfig;
        }
        this.formConfig = {
            ...this.formConfig,
            ...this.config.mapConfig,
            disablePan: false
        };
        await this.updateAsset();
    }
    async ngOnChanges(changes) {
        if (changes.config.currentValue !== changes.config.previousValue &&
            !changes.config.firstChange) {
            await this.updateAsset();
        }
    }
    async ngAfterViewInit() {
        this.leaflet = await this.mapService.getLeaflet();
        this.addCenterIcon(this.formConfig.center[0], this.formConfig.center[1]);
    }
    onBeforeSave() {
        this.config.mapConfig = this.formConfig;
        return true;
    }
    zoomLevelChanged() {
        this.config.mapConfig = {
            ...this.config.mapConfig,
            zoomLevel: this.formConfig.zoomLevel
        };
    }
    changeCenter() {
        this.config.mapConfig = { ...this.formConfig, center: this.formConfig.center };
    }
    onPreviewZoomStart() {
        this.centerIcon.remove();
    }
    onPreviewZoomEnd(event) {
        this.formConfig.zoomLevel = Math.floor(event.target.getZoom());
    }
    onPreviewMapMove(event) {
        if (this.centerIcon) {
            this.centerIcon.remove();
        }
        const { lat, lng } = event.target.getBounds().getCenter();
        this.addCenterIcon(lat, lng);
        this.formConfig.center = [lat, lng];
    }
    useOwnPosition() {
        navigator.geolocation.getCurrentPosition(({ coords }) => {
            this.formConfig.center = [coords.latitude, coords.longitude];
            this.changeCenter();
        });
    }
    centerToAsset() {
        this.formConfig.center = [
            this.config.device.c8y_Position.lat,
            this.config.device.c8y_Position.lng
        ];
        this.changeCenter();
    }
    updateRefreshOptions() {
        this.formConfig.realtime = this.refreshOptions === 'realtime';
        this.formConfig.refreshInterval = this.refreshOptions === 'interval' ? 5000 : null;
        if (!this.formConfig.realtime) {
            this.formConfig.follow = false;
        }
    }
    async openIconSelector() {
        try {
            const icon = await this.iconSelector.selectIcon({
                currentSelection: this.formConfig.icon
            });
            this.formConfig.icon = icon;
            this.config.mapConfig = { ...this.config.mapConfig, icon };
        }
        catch {
            // nothing to do
        }
    }
    removeIcon() {
        this.formConfig.icon = undefined;
        this.config.mapConfig.icon = undefined;
        this.previewMap.refreshMarkers();
    }
    async updateAsset() {
        this.canAutoCenter = this.mapService.hasPosition(this.config.device);
        this.isPositionedDevice = this.mapService.isPositionedDevice(this.config.device);
        this.refreshOptions = this.getRefreshOptions();
        this.updateRefreshOptions();
        const { data, paging } = await this.mapService.getAllPositionsMOs(this.config.device);
        this.assets = data;
        if (paging.totalPages > 1) {
            this.alertService.danger(gettext('It might be possible that assets are not shown in the preview, as the current selection has more than 500 assets and the preview only supports a maximum of 500 assets.'));
        }
    }
    getRefreshOptions() {
        let option = 'none';
        if (this.formConfig.realtime) {
            option = 'realtime';
        }
        else if (this.formConfig.refreshInterval) {
            option = 'interval';
        }
        const isNotAllowedOption = (!this.isPositionedDevice && option === 'realtime') ||
            (this.isPositionedDevice && option === 'interval');
        option = isNotAllowedOption ? 'none' : option;
        return option;
    }
    addCenterIcon(lat, lng) {
        const titleText = this.translateService.instant(gettext('Map center'));
        const icon = this.leaflet.divIcon({
            html: `<i style="pointer-events: none" class="c8y-map-marker-icon text-muted dlt-c8y-icon-target icon-2x" title="${titleText}" />`
        });
        this.centerIcon = this.leaflet.marker([lat, lng], {
            icon
        });
        this.previewMap.addMarkerToMap(this.centerIcon);
    }
}
MapWidgetConfigComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetConfigComponent, deps: [{ token: i1$1.MapService }, { token: i2$1.AlertService }, { token: i3.TranslateService }, { token: MAP_DEFAULT_CONFIG, optional: true }, { token: i4.IconSelectorService }], target: i0.ɵɵFactoryTarget.Component });
MapWidgetConfigComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MapWidgetConfigComponent, selector: "c8y-map-widget-config", inputs: { config: "config" }, viewQueries: [{ propertyName: "previewMap", first: true, predicate: MapComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"row p-t-16\">\n  <div class=\"col-xs-2\">\n    <c8y-form-group class=\"m-b-0 text-center form-group-sm\">\n      <label translate>Marker icon</label>\n      <div\n        class=\"icon-32 text-muted text-center p-b-8\"\n        *ngIf=\"formConfig.icon\"\n      >\n        <i [c8yIcon]=\"formConfig.icon\"></i>\n      </div>\n      <div\n        class=\"icon-32 text-muted text-center\"\n        *ngIf=\"!formConfig.icon\"\n      >\n        <span class=\"d-block text-12 p-b-16 p-t-16\">\n          <em>{{ 'Auto' | translate }}</em>\n        </span>\n      </div>\n      <button\n        class=\"btn btn-default btn-xs btn-block\"\n        title=\"{{ 'Select icon to override default behavior' | translate }}\"\n        type=\"button\"\n        *ngIf=\"!formConfig.icon\"\n        (click)=\"openIconSelector()\"\n      >\n        {{ 'Select' | translate }}\n      </button>\n      <button\n        class=\"btn btn-default btn-xs btn-block\"\n        title=\"{{ 'Change icon' | translate }}\"\n        type=\"button\"\n        *ngIf=\"formConfig.icon\"\n        (click)=\"openIconSelector()\"\n      >\n        {{ 'Change' | translate }}\n      </button>\n      <button\n        class=\"btn btn-danger btn-xs btn-block\"\n        title=\"{{ 'Remove icon and use default behavior' | translate }}\"\n        type=\"button\"\n        *ngIf=\"formConfig.icon\"\n        (click)=\"removeIcon()\"\n      >\n        {{ 'Remove' | translate }}\n      </button>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-xs-10\">\n    <div class=\"row tight-grid separator-bottom\">\n      <div class=\"col-xs-4\">\n        <div class=\"form-group form-group-sm\">\n          <label translate>Zoom level</label>\n          <c8y-range\n            class=\"label-bottom\"\n            name=\"zoomLevel\"\n            #range\n            [(ngModel)]=\"formConfig.zoomLevel\"\n            (change)=\"zoomLevelChanged()\"\n          >\n            <input\n              type=\"range\"\n              min=\"2\"\n              max=\"18\"\n              step=\"1\"\n            />\n          </c8y-range>\n        </div>\n      </div>\n      <div class=\"col-xs-8\">\n        <c8y-form-group class=\"form-group-sm m-b-8\">\n          <label translate>Center bound</label>\n          <div class=\"input-group input-group-sm\">\n            <input\n              class=\"form-control\"\n              placeholder=\"lat\"\n              name=\"centerLat\"\n              type=\"number\"\n              required\n              [(ngModel)]=\"formConfig.center[0]\"\n              (change)=\"changeCenter()\"\n            />\n            <input\n              class=\"form-control\"\n              placeholder=\"lng\"\n              name=\"centerLng\"\n              type=\"number\"\n              required\n              [(ngModel)]=\"formConfig.center[1]\"\n              (change)=\"changeCenter()\"\n            />\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-default\"\n                [attr.aria-label]=\"'Use your location' | translate\"\n                [tooltip]=\"'Use your location' | translate\"\n                placement=\"top\"\n                container=\"body\"\n                (click)=\"useOwnPosition()\"\n              >\n                <i\n                  class=\"icon-14\"\n                  c8yIcon=\"location-arrow\"\n                ></i>\n              </button>\n            </div>\n            <div\n              class=\"input-group-btn\"\n              *ngIf=\"canAutoCenter\"\n            >\n              <button\n                class=\"btn btn-default\"\n                [attr.aria-label]=\"'Use selected asset location' | translate\"\n                [tooltip]=\"'Use selected asset location' | translate\"\n                placement=\"top\"\n                container=\"body\"\n                (click)=\"centerToAsset()\"\n              >\n                <i\n                  class=\"icon-14\"\n                  c8yIcon=\"location\"\n                ></i>\n              </button>\n            </div>\n          </div>\n          <div class=\"help-block\">\n            {{ 'Drag the map to the desired position' | translate }}\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <div class=\"row tight-grid p-t-8 d-flex a-i-center\">\n      <div class=\"col-xs-4\">\n        <c8y-form-group class=\"m-b-0 form-group-sm\">\n          <div class=\"c8y-select-wrapper\">\n            <select\n              class=\"form-control\"\n              title=\"{{ 'Refresh options' | translate }}\"\n              id=\"selectExample\"\n              name=\"refreshSelection\"\n              [(ngModel)]=\"refreshOptions\"\n              (change)=\"updateRefreshOptions()\"\n            >\n              <option\n                [title]=\"'Only refreshing on interaction' | translate\"\n                value=\"none\"\n                translate\n              >\n                No automatic refresh\n              </option>\n              <option\n                [title]=\"'Refreshing after a give interval and on interaction' | translate\"\n                value=\"interval\"\n                *ngIf=\"!isPositionedDevice\"\n                translate\n              >\n                Use refresh interval\n              </option>\n              <option\n                [title]=\"'Live updating on each position change' | translate\"\n                value=\"realtime\"\n                *ngIf=\"isPositionedDevice\"\n                translate\n              >\n                Realtime\n              </option>\n            </select>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-xs-8\">\n        <div class=\"form-group form-group-sm m-b-0\">\n          <c8y-range\n            class=\"label-bottom\"\n            name=\"refreshInterval\"\n            #intervalRange\n            [(ngModel)]=\"formConfig.refreshInterval\"\n            *ngIf=\"refreshOptions === 'interval'\"\n          >\n            <ng-template #c8yRangeValue>\n              <div>\n                <span\n                  translate\n                  [translateParams]=\"{ intervalInSeconds: intervalRange.value * 0.001 }\"\n                  ngNonBindable\n                >\n                  {{ intervalInSeconds }} s\n                </span>\n              </div>\n            </ng-template>\n            <input\n              type=\"range\"\n              min=\"5000\"\n              max=\"100000\"\n              step=\"1000\"\n            />\n          </c8y-range>\n        </div>\n        <label\n          class=\"c8y-switch c8y-switch--inline\"\n          *ngIf=\"refreshOptions === 'realtime'\"\n        >\n          <input\n            name=\"follow\"\n            type=\"checkbox\"\n            [(ngModel)]=\"formConfig.follow\"\n          />\n          <span></span>\n          <span\n            class=\"text-12\"\n            translate\n          >\n            Follow selected\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"p-t-16 p-b-16\"\n  style=\"width: 100%; height: 240px\"\n>\n  <c8y-map\n    [assets]=\"assets\"\n    (onMove)=\"onPreviewMapMove($event)\"\n    (onZoomStart)=\"onPreviewZoomStart()\"\n    (onZoomEnd)=\"onPreviewZoomEnd($event)\"\n    [config]=\"config.mapConfig\"\n  ></c8y-map>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i6.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i6.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2$1.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2$1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2$1.MinValidationDirective, selector: "[min]", inputs: ["min"] }, { kind: "directive", type: i2$1.MaxValidationDirective, selector: "[max]", inputs: ["max"] }, { kind: "component", type: i2$1.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i2$1.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "directive", type: i2$1.RangeDirective, selector: "input[type=\"range\"]" }, { kind: "component", type: i2$1.RangeComponent, selector: "c8y-range" }, { kind: "component", type: i1$1.MapComponent, selector: "c8y-map", inputs: ["config", "assets"], outputs: ["onMove", "onMoveEnd", "onZoomStart", "onZoomEnd"] }, { kind: "directive", type: i7.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "pipe", type: i2$1.C8yTranslatePipe, name: "translate" }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetConfigComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map-widget-config', viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], template: "<div class=\"row p-t-16\">\n  <div class=\"col-xs-2\">\n    <c8y-form-group class=\"m-b-0 text-center form-group-sm\">\n      <label translate>Marker icon</label>\n      <div\n        class=\"icon-32 text-muted text-center p-b-8\"\n        *ngIf=\"formConfig.icon\"\n      >\n        <i [c8yIcon]=\"formConfig.icon\"></i>\n      </div>\n      <div\n        class=\"icon-32 text-muted text-center\"\n        *ngIf=\"!formConfig.icon\"\n      >\n        <span class=\"d-block text-12 p-b-16 p-t-16\">\n          <em>{{ 'Auto' | translate }}</em>\n        </span>\n      </div>\n      <button\n        class=\"btn btn-default btn-xs btn-block\"\n        title=\"{{ 'Select icon to override default behavior' | translate }}\"\n        type=\"button\"\n        *ngIf=\"!formConfig.icon\"\n        (click)=\"openIconSelector()\"\n      >\n        {{ 'Select' | translate }}\n      </button>\n      <button\n        class=\"btn btn-default btn-xs btn-block\"\n        title=\"{{ 'Change icon' | translate }}\"\n        type=\"button\"\n        *ngIf=\"formConfig.icon\"\n        (click)=\"openIconSelector()\"\n      >\n        {{ 'Change' | translate }}\n      </button>\n      <button\n        class=\"btn btn-danger btn-xs btn-block\"\n        title=\"{{ 'Remove icon and use default behavior' | translate }}\"\n        type=\"button\"\n        *ngIf=\"formConfig.icon\"\n        (click)=\"removeIcon()\"\n      >\n        {{ 'Remove' | translate }}\n      </button>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-xs-10\">\n    <div class=\"row tight-grid separator-bottom\">\n      <div class=\"col-xs-4\">\n        <div class=\"form-group form-group-sm\">\n          <label translate>Zoom level</label>\n          <c8y-range\n            class=\"label-bottom\"\n            name=\"zoomLevel\"\n            #range\n            [(ngModel)]=\"formConfig.zoomLevel\"\n            (change)=\"zoomLevelChanged()\"\n          >\n            <input\n              type=\"range\"\n              min=\"2\"\n              max=\"18\"\n              step=\"1\"\n            />\n          </c8y-range>\n        </div>\n      </div>\n      <div class=\"col-xs-8\">\n        <c8y-form-group class=\"form-group-sm m-b-8\">\n          <label translate>Center bound</label>\n          <div class=\"input-group input-group-sm\">\n            <input\n              class=\"form-control\"\n              placeholder=\"lat\"\n              name=\"centerLat\"\n              type=\"number\"\n              required\n              [(ngModel)]=\"formConfig.center[0]\"\n              (change)=\"changeCenter()\"\n            />\n            <input\n              class=\"form-control\"\n              placeholder=\"lng\"\n              name=\"centerLng\"\n              type=\"number\"\n              required\n              [(ngModel)]=\"formConfig.center[1]\"\n              (change)=\"changeCenter()\"\n            />\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-default\"\n                [attr.aria-label]=\"'Use your location' | translate\"\n                [tooltip]=\"'Use your location' | translate\"\n                placement=\"top\"\n                container=\"body\"\n                (click)=\"useOwnPosition()\"\n              >\n                <i\n                  class=\"icon-14\"\n                  c8yIcon=\"location-arrow\"\n                ></i>\n              </button>\n            </div>\n            <div\n              class=\"input-group-btn\"\n              *ngIf=\"canAutoCenter\"\n            >\n              <button\n                class=\"btn btn-default\"\n                [attr.aria-label]=\"'Use selected asset location' | translate\"\n                [tooltip]=\"'Use selected asset location' | translate\"\n                placement=\"top\"\n                container=\"body\"\n                (click)=\"centerToAsset()\"\n              >\n                <i\n                  class=\"icon-14\"\n                  c8yIcon=\"location\"\n                ></i>\n              </button>\n            </div>\n          </div>\n          <div class=\"help-block\">\n            {{ 'Drag the map to the desired position' | translate }}\n          </div>\n        </c8y-form-group>\n      </div>\n    </div>\n\n    <div class=\"row tight-grid p-t-8 d-flex a-i-center\">\n      <div class=\"col-xs-4\">\n        <c8y-form-group class=\"m-b-0 form-group-sm\">\n          <div class=\"c8y-select-wrapper\">\n            <select\n              class=\"form-control\"\n              title=\"{{ 'Refresh options' | translate }}\"\n              id=\"selectExample\"\n              name=\"refreshSelection\"\n              [(ngModel)]=\"refreshOptions\"\n              (change)=\"updateRefreshOptions()\"\n            >\n              <option\n                [title]=\"'Only refreshing on interaction' | translate\"\n                value=\"none\"\n                translate\n              >\n                No automatic refresh\n              </option>\n              <option\n                [title]=\"'Refreshing after a give interval and on interaction' | translate\"\n                value=\"interval\"\n                *ngIf=\"!isPositionedDevice\"\n                translate\n              >\n                Use refresh interval\n              </option>\n              <option\n                [title]=\"'Live updating on each position change' | translate\"\n                value=\"realtime\"\n                *ngIf=\"isPositionedDevice\"\n                translate\n              >\n                Realtime\n              </option>\n            </select>\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"col-xs-8\">\n        <div class=\"form-group form-group-sm m-b-0\">\n          <c8y-range\n            class=\"label-bottom\"\n            name=\"refreshInterval\"\n            #intervalRange\n            [(ngModel)]=\"formConfig.refreshInterval\"\n            *ngIf=\"refreshOptions === 'interval'\"\n          >\n            <ng-template #c8yRangeValue>\n              <div>\n                <span\n                  translate\n                  [translateParams]=\"{ intervalInSeconds: intervalRange.value * 0.001 }\"\n                  ngNonBindable\n                >\n                  {{ intervalInSeconds }} s\n                </span>\n              </div>\n            </ng-template>\n            <input\n              type=\"range\"\n              min=\"5000\"\n              max=\"100000\"\n              step=\"1000\"\n            />\n          </c8y-range>\n        </div>\n        <label\n          class=\"c8y-switch c8y-switch--inline\"\n          *ngIf=\"refreshOptions === 'realtime'\"\n        >\n          <input\n            name=\"follow\"\n            type=\"checkbox\"\n            [(ngModel)]=\"formConfig.follow\"\n          />\n          <span></span>\n          <span\n            class=\"text-12\"\n            translate\n          >\n            Follow selected\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"p-t-16 p-b-16\"\n  style=\"width: 100%; height: 240px\"\n>\n  <c8y-map\n    [assets]=\"assets\"\n    (onMove)=\"onPreviewMapMove($event)\"\n    (onZoomStart)=\"onPreviewZoomStart()\"\n    (onZoomEnd)=\"onPreviewZoomEnd($event)\"\n    [config]=\"config.mapConfig\"\n  ></c8y-map>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.MapService }, { type: i2$1.AlertService }, { type: i3.TranslateService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAP_DEFAULT_CONFIG]
                }] }, { type: i4.IconSelectorService }]; }, propDecorators: { config: [{
                type: Input
            }], previewMap: [{
                type: ViewChild,
                args: [MapComponent]
            }] } });

class MapWidgetComponent {
    constructor(dashboardChild) {
        this.mapConfig = { center: [0, 0] };
        this.destroy$ = new Subject();
        this.listenToWidgetResizeEvent(dashboardChild);
    }
    ngOnInit() {
        if (this.config.device) {
            this.rootNode = this.config.device;
        }
        this.mapConfig = { ...this.config.mapConfig };
        this.savedNode = this.rootNode;
    }
    startFollow(context) {
        if (context.id !== this.rootNode?.id) {
            this.rootNode = context;
        }
        this.mapConfig = {
            ...this.config.mapConfig,
            follow: true,
            realtime: true
        };
    }
    stopFollow() {
        this.mapConfig = {
            ...this.config.mapConfig,
            follow: false
        };
        this.rootNode = this.savedNode;
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    listenToWidgetResizeEvent(dashboardChild) {
        dashboardChild.changeEnd
            .pipe(filter(child => child.lastChange === 'resize'), takeUntil(this.destroy$))
            .subscribe(() => {
            this.clusterMap.reset();
        });
    }
}
MapWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetComponent, deps: [{ token: i2$1.DashboardChildComponent }], target: i0.ɵɵFactoryTarget.Component });
MapWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: MapWidgetComponent, selector: "c8y-map-widget", viewQueries: [{ propertyName: "clusterMap", first: true, predicate: ClusterMapComponent, descendants: true }], ngImport: i0, template: "<c8y-map-status\n  [clusterMap]=\"mapWidget\"\n  [(config)]=\"mapConfig\"\n  (onUnfollow)=\"stopFollow()\"\n></c8y-map-status>\n<c8y-cluster-map #mapWidget [rootNode]=\"rootNode\" [config]=\"mapConfig\">\n  <div *c8yMapPopup=\"let context\" class=\"map-marker\">\n    <a class=\"text-truncate deviceLink text-12\" routerLink=\"/device/{{ context.id }}\">\n      <strong>{{ context.name }}</strong>\n    </a>\n    <c8y-map-event-info [asset]=\"context\">\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"startFollow(context)\"\n        [title]=\"'Activate realtime on this asset and follow it if it moves' | translate\"\n        *ngIf=\"!mapConfig.follow\"\n        translate\n      >\n        Follow\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"stopFollow()\"\n        [title]=\"'Stop following this asset.' | translate\"\n        *ngIf=\"mapConfig.follow\"\n        translate\n      >\n        Unfollow\n      </button>\n    </c8y-map-event-info>\n  </div>\n</c8y-cluster-map>\n", dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i1$1.MapStatusComponent, selector: "c8y-map-status", inputs: ["config", "clusterMap"], outputs: ["configChange", "onUnfollow"] }, { kind: "component", type: i1$1.ClusterMapComponent, selector: "c8y-cluster-map", inputs: ["config", "rootNode", "asset", "showClusterColor"], outputs: ["mapChange"] }, { kind: "directive", type: i1$1.MapPopupDirective, selector: "[c8yMapPopup]" }, { kind: "directive", type: i4$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: MapEventInfoComponent, selector: "c8y-map-event-info", inputs: ["asset"] }, { kind: "pipe", type: i2$1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map-widget', template: "<c8y-map-status\n  [clusterMap]=\"mapWidget\"\n  [(config)]=\"mapConfig\"\n  (onUnfollow)=\"stopFollow()\"\n></c8y-map-status>\n<c8y-cluster-map #mapWidget [rootNode]=\"rootNode\" [config]=\"mapConfig\">\n  <div *c8yMapPopup=\"let context\" class=\"map-marker\">\n    <a class=\"text-truncate deviceLink text-12\" routerLink=\"/device/{{ context.id }}\">\n      <strong>{{ context.name }}</strong>\n    </a>\n    <c8y-map-event-info [asset]=\"context\">\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"startFollow(context)\"\n        [title]=\"'Activate realtime on this asset and follow it if it moves' | translate\"\n        *ngIf=\"!mapConfig.follow\"\n        translate\n      >\n        Follow\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-default btn-xs btn-block m-t-8\"\n        (click)=\"stopFollow()\"\n        [title]=\"'Stop following this asset.' | translate\"\n        *ngIf=\"mapConfig.follow\"\n        translate\n      >\n        Unfollow\n      </button>\n    </c8y-map-event-info>\n  </div>\n</c8y-cluster-map>\n" }]
        }], ctorParameters: function () { return [{ type: i2$1.DashboardChildComponent }]; }, propDecorators: { clusterMap: [{
                type: ViewChild,
                args: [ClusterMapComponent]
            }] } });

class MapWidgetModule {
}
MapWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MapWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetModule, declarations: [MapWidgetComponent, MapWidgetConfigComponent, MapEventInfoComponent], imports: [CommonModule,
        FormsModule,
        CommonModule$1,
        FormsModule$1,
        MapModule,
        RouterModule, i7.TooltipModule], exports: [MapWidgetComponent, MapWidgetConfigComponent, MapEventInfoComponent] });
MapWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetModule, imports: [CommonModule,
        FormsModule,
        CommonModule$1,
        FormsModule$1,
        MapModule,
        RouterModule,
        TooltipModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: MapWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MapWidgetComponent, MapWidgetConfigComponent, MapEventInfoComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        CommonModule$1,
                        FormsModule$1,
                        MapModule,
                        RouterModule,
                        TooltipModule.forRoot()
                    ],
                    exports: [MapWidgetComponent, MapWidgetConfigComponent, MapEventInfoComponent]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MapEventInfoComponent, MapWidgetComponent, MapWidgetConfigComponent, MapWidgetModule };
//# sourceMappingURL=c8y-ngx-components-widgets-implementations-map.mjs.map

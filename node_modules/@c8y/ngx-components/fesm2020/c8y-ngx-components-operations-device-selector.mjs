import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@c8y/ngx-components';
import { FilteringActionType, DATA_GRID_CONFIGURATION_STRATEGY, UserPreferencesConfigurationStrategy, DATA_GRID_CONFIGURATION_CONTEXT, CoreModule } from '@c8y/ngx-components';
import * as i2 from '@c8y/ngx-components/device-grid';
import { TypeDeviceGridColumn, StatusDeviceGridColumn, NameDeviceGridColumn, ModelDeviceGridColumn, GroupDeviceGridColumn, RegistrationDateDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridComponent, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';

class DeviceSelectorComponent {
    constructor() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe((types) => {
                this.deviceGrid.updateFiltering([this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
}
DeviceSelectorComponent.GRID_CONFIG_KEY = 'device-grid-bulk';
DeviceSelectorComponent.GRID_CONFIG_CONTEXT = {
    key: DeviceSelectorComponent.GRID_CONFIG_KEY,
    configFilter: {
        filter: false
    }
};
DeviceSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceSelectorComponent, selector: "c8y-device-selector", inputs: { deviceTypes: "deviceTypes" }, outputs: { onDeviceQueryStringChange: "onDeviceQueryStringChange" }, providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT,
            useValue: DeviceSelectorComponent.GRID_CONFIG_CONTEXT
        }
    ], viewQueries: [{ propertyName: "deviceGrid", first: true, predicate: DeviceGridComponent, descendants: true, static: true }], ngImport: i0, template: "<c8y-device-grid\n  [title]=\"'Target devices' | translate\"\n  [columns]=\"columns\"\n  [infiniteScroll]=\"'auto'\"\n  [showSearch]=\"false\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"'bulkOperations'\"\n></c8y-device-grid>\n", dependencies: [{ kind: "directive", type: i1.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i2.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "pipe", type: i1.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-selector', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT,
                            useValue: DeviceSelectorComponent.GRID_CONFIG_CONTEXT
                        }
                    ], template: "<c8y-device-grid\n  [title]=\"'Target devices' | translate\"\n  [columns]=\"columns\"\n  [infiniteScroll]=\"'auto'\"\n  [showSearch]=\"false\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n  c8yProductExperience\n  [actionName]=\"'bulkOperations'\"\n></c8y-device-grid>\n" }]
        }], propDecorators: { deviceGrid: [{
                type: ViewChild,
                args: [DeviceGridComponent, { static: true }]
            }], deviceTypes: [{
                type: Input
            }], onDeviceQueryStringChange: [{
                type: Output
            }] } });

/**
 * This module provides a component for selecting devices based on filters.
 */
class DeviceSelectorModule {
}
DeviceSelectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceSelectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorModule, declarations: [DeviceSelectorComponent], imports: [CoreModule, DeviceGridModule], exports: [DeviceSelectorComponent] });
DeviceSelectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorModule, imports: [CoreModule, DeviceGridModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CoreModule, DeviceGridModule],
                    declarations: [DeviceSelectorComponent],
                    exports: [DeviceSelectorComponent]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceSelectorComponent, DeviceSelectorModule };
//# sourceMappingURL=c8y-ngx-components-operations-device-selector.mjs.map

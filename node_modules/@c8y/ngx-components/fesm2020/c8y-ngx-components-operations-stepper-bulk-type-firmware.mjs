import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as i4 from '@c8y/ngx-components';
import { memoize, gettext, CoreModule, FormsModule } from '@c8y/ngx-components';
import * as i3$2 from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import * as i3 from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationType, hookListBulkType, baseUrl } from '@c8y/ngx-components/operations/bulk-operations-service';
import * as i3$1 from '@ngx-translate/core';
import { property, get } from 'lodash-es';
import { defer, of, BehaviorSubject, Observable } from 'rxjs';
import * as i7 from '@c8y/ngx-components/operations/stepper-frames';
import { StepperFramesModule } from '@c8y/ngx-components/operations/stepper-frames';
import { __decorate, __metadata } from 'tslib';
import * as i2 from '@c8y/client';
import * as i1 from '@c8y/ngx-components/repository/shared';
import { RepositoryType, SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { distinctUntilChanged, switchMap, catchError, shareReplay, distinctUntilKeyChanged, tap, map, debounceTime } from 'rxjs/operators';
import * as i5 from '@angular/common';
import * as i6 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';

class VersionOrPatchComponent {
    constructor(repositoryService, inventoryService, bulkOpsService) {
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(id => defer(() => this.inventoryService.detail(id).then(result => result.data)).pipe(catchError(error => of(error)))), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersions(firmware)), tap(resp => {
            this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(firmware => this.repositoryService.isLegacyEntry(firmware)), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    getBaseVersionAndPatches$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(firmware => this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)), shareReplay(1));
    }
    getPatchVersionsCount$(baseVersion) {
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(() => this.firmware$), switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)), shareReplay(1));
    }
    selectVersionOrPatch(selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    }
}
VersionOrPatchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionOrPatchComponent, deps: [{ token: i1.RepositoryService }, { token: i2.InventoryService }, { token: i3.BulkOperationsService }], target: i0.ɵɵFactoryTarget.Component });
VersionOrPatchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: VersionOrPatchComponent, selector: "c8y-version-or-patch-step", inputs: { selected: "selected" }, outputs: { versionOrPatch: "versionOrPatch" }, ngImport: i0, template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n", dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgPlural, selector: "[ngPlural]", inputs: ["ngPlural"] }, { kind: "directive", type: i5.NgPluralCase, selector: "[ngPluralCase]" }, { kind: "directive", type: i4.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i4.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i4.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i4.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i4.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "component", type: i4.ListItemCollapseComponent, selector: "c8y-list-item-collapse, c8y-li-collapse", inputs: ["collapseWay"] }, { kind: "component", type: i4.ListItemRadioComponent, selector: "c8y-list-item-radio, c8y-li-radio", inputs: ["selected", "name", "disabled", "value"], outputs: ["onSelect"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
__decorate([
    memoize(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], VersionOrPatchComponent.prototype, "getBinaryName$", null);
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: VersionOrPatchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-version-or-patch-step', template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n" }]
        }], ctorParameters: function () { return [{ type: i1.RepositoryService }, { type: i2.InventoryService }, { type: i3.BulkOperationsService }]; }, propDecorators: { selected: [{
                type: Input
            }], versionOrPatch: [{
                type: Output
            }], getBinaryName$: [], getBaseVersionAndPatches$: [], getPatchVersionsCount$: [] } });

class SelectFirmwareComponent {
    constructor(repositoryService, bulkOpsService, translate) {
        this.repositoryService = repositoryService;
        this.bulkOpsService = bulkOpsService;
        this.translate = translate;
        this.firmware = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.textFilter$ = new BehaviorSubject('');
        this.firmwares$ = this.textFilter$
            .pipe(debounceTime(400), distinctUntilChanged())
            .pipe(switchMap(text => this.getFirmwares(text)), tap(resp => {
            this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available.');
        this.DESCRIPTION_NOT_AVAILABLE = gettext('No description available.');
    }
    ngOnInit() {
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    selectFirmware(selected, fw) {
        if (selected) {
            this.firmware.emit(fw);
        }
    }
    getBaseVersionsCount$(firmware) {
        return this.firmwares$.pipe(switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)), shareReplay(1));
    }
    getDescriptionTitle(firmware) {
        return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
    }
    getDeviceTypeTitle(firmware) {
        return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    }
    getFirmwares(partialName) {
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });
    }
}
SelectFirmwareComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectFirmwareComponent, deps: [{ token: i1.RepositoryService }, { token: i3.BulkOperationsService }, { token: i3$1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
SelectFirmwareComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SelectFirmwareComponent, selector: "c8y-select-firmware-step", inputs: { selected: "selected" }, outputs: { firmware: "firmware" }, ngImport: i0, template: "<c8y-select-step-frame\n  [header]=\"'Select firmware' | translate\"\n  [noResults]=\"(textFilter$ | async).length > 0 && elementCount === 0\"\n>\n<label for=\"fFilter\" class=\"sr-only\">{{ 'Filter firmware\u2026' | translate }}</label>\n  <div filters class=\"input-group input-group-search\">\n    <input\n      type=\"search\"\n      class=\"form-control\"\n      id=\"fFilter\"\n      title=\"{{ 'Filter firmware\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        c8yIcon=\"times\"\n        class=\"text-muted\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n  <c8y-li header class=\"hidden-sm hidden-xs m-r-8 m-l-8\">\n    <c8y-li-icon><i class=\"p-l-32 p-r-40\"></i></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-40\">\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\" {{ 'Name' | translate }} \">\n          {{ 'Name' | translate }}\n        </span>\n      </div>\n      <div class=\"col-4\">\n        <span class=\"text-truncate\" title=\"{{ 'Description' | translate }}\">\n          {{ 'Description' | translate }}\n        </span>\n      </div>\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\"{{ 'Device type' | translate }}\">\n          {{ 'Device type' | translate }}\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"text-truncate\" title=\"{{ 'Versions' | translate }}\">\n          {{ 'Versions' | translate }}\n        </span>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-list-group list [ngClass]=\"{ 'dd-low': elementCount < DD_LOW_COUNT }\">\n    <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n      <c8y-li-radio\n        (onSelect)=\"selectFirmware($event, firmware)\"\n        [selected]=\"firmware === selected\"\n      ></c8y-li-radio>\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-firmware\"></i>\n      </c8y-li-icon>\n\n      <c8y-li-body class=\"content-flex-40\">\n        <div class=\"col-3 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n            <c8y-highlight [text]=\"firmware.name\" [pattern]=\"textFilter$ | async\"></c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-4 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Description\n            </span>\n            <small *ngIf=\"firmware.description; else noDesc\">\n              {{ firmware.description }}\n            </small>\n            <ng-template #noDesc>\n              <small>\n                <em class=\"text-muted\" translate>No description available.</em>\n              </small>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-3 m-b-xs-8\">\n          <div\n            class=\"text-truncate\"\n            title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\"\n          >\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Device type\n            </span>\n            <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n              {{ firmware.c8y_Filter?.type }}\n            </span>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-2\">\n          <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning m-l-auto-sm\">\n            <span translate>Legacy</span>\n          </span>\n\n          <span *ngIf=\"!isLegacy(firmware)\">\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n              <span class=\"label label-info\">\n                <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n              </span>\n            </span>\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n              <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                <ng-template ngPluralCase=\"=0\">\n                  <span class=\"label label-default\">\n                    <span translate>No versions</span>\n                  </span>\n                </ng-template>\n                <ng-template ngPluralCase=\"=1\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    version\n                  </span>\n                  <span class=\"badge badge-info m-l-auto-sm\">1</span>\n                </ng-template>\n                <ng-template ngPluralCase=\"other\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    versions\n                  </span>\n                  <span class=\"badge badge-info m-l-auto-sm\">\n                    {{ getBaseVersionsCount$(firmware) | async }}\n                  </span>\n                </ng-template>\n              </span>\n            </span>\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</c8y-select-step-frame>\n", dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgPlural, selector: "[ngPlural]", inputs: ["ngPlural"] }, { kind: "directive", type: i5.NgPluralCase, selector: "[ngPluralCase]" }, { kind: "directive", type: i4.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i4.HighlightComponent, selector: "c8y-highlight", inputs: ["pattern", "text", "elementClass", "shouldTrimPattern"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i4.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i4.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i4.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "component", type: i4.ListItemRadioComponent, selector: "c8y-list-item-radio, c8y-li-radio", inputs: ["selected", "name", "disabled", "value"], outputs: ["onSelect"] }, { kind: "component", type: i7.SelectStepFrameComponent, selector: "c8y-select-step-frame", inputs: ["header", "noResults"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
__decorate([
    memoize(property('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Observable)
], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectFirmwareComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-select-firmware-step', template: "<c8y-select-step-frame\n  [header]=\"'Select firmware' | translate\"\n  [noResults]=\"(textFilter$ | async).length > 0 && elementCount === 0\"\n>\n<label for=\"fFilter\" class=\"sr-only\">{{ 'Filter firmware\u2026' | translate }}</label>\n  <div filters class=\"input-group input-group-search\">\n    <input\n      type=\"search\"\n      class=\"form-control\"\n      id=\"fFilter\"\n      title=\"{{ 'Filter firmware\u2026' | translate }}\"\n      placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        c8yIcon=\"times\"\n        class=\"text-muted\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n      ></i>\n    </span>\n  </div>\n  <c8y-li header class=\"hidden-sm hidden-xs m-r-8 m-l-8\">\n    <c8y-li-icon><i class=\"p-l-32 p-r-40\"></i></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-40\">\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\" {{ 'Name' | translate }} \">\n          {{ 'Name' | translate }}\n        </span>\n      </div>\n      <div class=\"col-4\">\n        <span class=\"text-truncate\" title=\"{{ 'Description' | translate }}\">\n          {{ 'Description' | translate }}\n        </span>\n      </div>\n      <div class=\"col-3\">\n        <span class=\"text-truncate\" title=\"{{ 'Device type' | translate }}\">\n          {{ 'Device type' | translate }}\n        </span>\n      </div>\n      <div class=\"col-2\">\n        <span class=\"text-truncate\" title=\"{{ 'Versions' | translate }}\">\n          {{ 'Versions' | translate }}\n        </span>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-list-group list [ngClass]=\"{ 'dd-low': elementCount < DD_LOW_COUNT }\">\n    <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n      <c8y-li-radio\n        (onSelect)=\"selectFirmware($event, firmware)\"\n        [selected]=\"firmware === selected\"\n      ></c8y-li-radio>\n      <c8y-li-icon>\n        <i c8yIcon=\"c8y-firmware\"></i>\n      </c8y-li-icon>\n\n      <c8y-li-body class=\"content-flex-40\">\n        <div class=\"col-3 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n            <c8y-highlight [text]=\"firmware.name\" [pattern]=\"textFilter$ | async\"></c8y-highlight>\n          </div>\n        </div>\n        <div class=\"col-4 m-b-xs-8\">\n          <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Description\n            </span>\n            <small *ngIf=\"firmware.description; else noDesc\">\n              {{ firmware.description }}\n            </small>\n            <ng-template #noDesc>\n              <small>\n                <em class=\"text-muted\" translate>No description available.</em>\n              </small>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-3 m-b-xs-8\">\n          <div\n            class=\"text-truncate\"\n            title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\"\n          >\n            <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n              Device type\n            </span>\n            <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n              {{ firmware.c8y_Filter?.type }}\n            </span>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n        <div class=\"col-2\">\n          <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning m-l-auto-sm\">\n            <span translate>Legacy</span>\n          </span>\n\n          <span *ngIf=\"!isLegacy(firmware)\">\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n              <span class=\"label label-info\">\n                <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n              </span>\n            </span>\n            <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n              <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                <ng-template ngPluralCase=\"=0\">\n                  <span class=\"label label-default\">\n                    <span translate>No versions</span>\n                  </span>\n                </ng-template>\n                <ng-template ngPluralCase=\"=1\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    version\n                  </span>\n                  <span class=\"badge badge-info m-l-auto-sm\">1</span>\n                </ng-template>\n                <ng-template ngPluralCase=\"other\">\n                  <span class=\"text-label-small m-r-8 visible-xs visible-sm\" translate>\n                    versions\n                  </span>\n                  <span class=\"badge badge-info m-l-auto-sm\">\n                    {{ getBaseVersionsCount$(firmware) | async }}\n                  </span>\n                </ng-template>\n              </span>\n            </span>\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n  </c8y-list-group>\n</c8y-select-step-frame>\n" }]
        }], ctorParameters: function () { return [{ type: i1.RepositoryService }, { type: i3.BulkOperationsService }, { type: i3$1.TranslateService }]; }, propDecorators: { selected: [{
                type: Input
            }], firmware: [{
                type: Output
            }], getBaseVersionsCount$: [] } });

class StepperBulkTypeFirmwareComponent extends BaseStepperComponent {
    constructor(bulkOperationService, translate) {
        super();
        this.bulkOperationService = bulkOperationService;
        this.translate = translate;
        this.type = BulkOperationType.FIRMWARE;
        this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        this.textFilter$ = new BehaviorSubject('');
        this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
    }
    goToVersionOrPatchStep({ stepper }) {
        const selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    }
    onVersionOrPatchSelected(versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    }
    onFirmwareSelected(fw) {
        this.stepData.firmware = fw;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    retrieveOperationPrototype() {
        const selectedFirmware = this.stepData.firmware;
        const selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        const firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        const name = selectedFirmware.name;
        const version = selectedVersionOrPatch.c8y_Firmware.version;
        const description = `Update firmware to: ${name} (version: ${version}).`;
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description,
                c8y_Firmware: firmware
            }
        };
    }
    onSelectionChange(event) {
        this.textFilter$.next('');
        super.onSelectionChange(event);
    }
}
StepperBulkTypeFirmwareComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareComponent, deps: [{ token: i3.BulkOperationsService }, { token: i3$1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
StepperBulkTypeFirmwareComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: StepperBulkTypeFirmwareComponent, selector: "c8y-stepper-firmware", usesInheritance: true, ngImport: i0, template: "<c8y-bulk-operation-stepper [type]=\"type\">\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <c8y-preview-selection-frame\n      [header]=\"'Select version or patch' | translate\"\n      [name]=\"stepData?.firmware?.name\"\n      [description]=\"stepData?.firmware?.description\"\n    >\n      <c8y-version-or-patch-step\n        list\n        [selected]=\"stepData?.versionOrPatch\"\n        (versionOrPatch)=\"onVersionOrPatchSelected($event)\"\n      >\n      </c8y-version-or-patch-step>\n    </c8y-preview-selection-frame>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n", dependencies: [{ kind: "component", type: i3$2.BulkOperationStepper, selector: "c8y-bulk-operation-stepper", inputs: ["type"], outputs: ["selectionChange"] }, { kind: "directive", type: i3$2.CustomStep, selector: "[customStep]", inputs: ["customStep", "customStepCompleted", "customStepButtonsDisabled", "customStepOnNext"] }, { kind: "component", type: i7.PreviewSelectionFrameComponent, selector: "c8y-preview-selection-frame", inputs: ["header", "name", "description", "type"] }, { kind: "component", type: VersionOrPatchComponent, selector: "c8y-version-or-patch-step", inputs: ["selected"], outputs: ["versionOrPatch"] }, { kind: "component", type: SelectFirmwareComponent, selector: "c8y-select-firmware-step", inputs: ["selected"], outputs: ["firmware"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-stepper-firmware', template: "<c8y-bulk-operation-stepper [type]=\"type\">\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <c8y-preview-selection-frame\n      [header]=\"'Select version or patch' | translate\"\n      [name]=\"stepData?.firmware?.name\"\n      [description]=\"stepData?.firmware?.description\"\n    >\n      <c8y-version-or-patch-step\n        list\n        [selected]=\"stepData?.versionOrPatch\"\n        (versionOrPatch)=\"onVersionOrPatchSelected($event)\"\n      >\n      </c8y-version-or-patch-step>\n    </c8y-preview-selection-frame>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n" }]
        }], ctorParameters: function () { return [{ type: i3.BulkOperationsService }, { type: i3$1.TranslateService }]; } });

/** Module for the 'Firmware update' operation type stepper */
class StepperBulkTypeFirmwareModule {
}
StepperBulkTypeFirmwareModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
StepperBulkTypeFirmwareModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareModule, declarations: [StepperBulkTypeFirmwareComponent,
        VersionOrPatchComponent,
        SelectFirmwareComponent], imports: [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        StepperFramesModule,
        SharedRepositoryModule], exports: [StepperBulkTypeFirmwareComponent] });
StepperBulkTypeFirmwareModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareModule, providers: [
        hookListBulkType({
            type: BulkOperationType.FIRMWARE,
            c8yIcon: 'c8y-firmware',
            name: gettext('Firmware update'),
            path: `${baseUrl}firmware`,
            component: StepperBulkTypeFirmwareComponent,
            fragments: ['c8y_Firmware'],
            selected: false
        })
    ], imports: [CoreModule,
        FormsModule,
        ReactiveFormsModule,
        BulkOperationStepperModule,
        StepperFramesModule,
        SharedRepositoryModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: StepperBulkTypeFirmwareModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        StepperBulkTypeFirmwareComponent,
                        VersionOrPatchComponent,
                        SelectFirmwareComponent
                    ],
                    imports: [
                        CoreModule,
                        FormsModule,
                        ReactiveFormsModule,
                        BulkOperationStepperModule,
                        StepperFramesModule,
                        SharedRepositoryModule
                    ],
                    providers: [
                        hookListBulkType({
                            type: BulkOperationType.FIRMWARE,
                            c8yIcon: 'c8y-firmware',
                            name: gettext('Firmware update'),
                            path: `${baseUrl}firmware`,
                            component: StepperBulkTypeFirmwareComponent,
                            fragments: ['c8y_Firmware'],
                            selected: false
                        })
                    ],
                    entryComponents: [StepperBulkTypeFirmwareComponent],
                    exports: [StepperBulkTypeFirmwareComponent]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SelectFirmwareComponent, StepperBulkTypeFirmwareComponent, StepperBulkTypeFirmwareModule, VersionOrPatchComponent };
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-firmware.mjs.map

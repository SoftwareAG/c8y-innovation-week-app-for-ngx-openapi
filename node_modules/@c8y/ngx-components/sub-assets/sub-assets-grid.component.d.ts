import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { IManagedObject, SmartGroupsService } from '@c8y/client';
import { ActionControl, BulkActionControl, Column, DataGridComponent, DataSourceModifier, DisplayOptions, GridConfigContextProvider, Pagination, ServerSideDataResult } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { BsModalService } from 'ngx-bootstrap/modal';
import { SubAssetsGridConfigContext } from './sub-assets-grid-configuration-strategy.service';
import { SubAssetsService } from './sub-assets.service';
import * as i0 from "@angular/core";
export declare class SubAssetsGridComponent implements OnInit, GridConfigContextProvider {
    subAssetsGridService: SubAssetsService;
    private bsModalService;
    private smartGroupsService;
    private deviceGridService;
    private assetNodeService;
    PRODUCT_EXPERIENCE: {
        EVENT: string;
        DELETE_ASSET: {
            COMPONENTS: {
                DELETE_ASSETS_MODAL: string;
            };
            ACTIONS: {
                CASCADE_DELETE: string;
                DELETE_DEVICE_OWNER: string;
            };
            RESULTS: {
                CANCELED: string;
                DELETED: string;
            };
        };
        ASSIGN_DEVICES: {
            COMPONENTS: {
                ASSIGN_DEVICES: string;
            };
            ACTIONS: {
                ASSIGN: string;
                CANCEL: string;
                DISPLAY_CHILD_DEVICES: string;
            };
        };
        UNASSIGN_MODAL: {
            COMPONENTS: {
                UNASSIGN_MODAL: string;
            };
            RESULTS: {
                ASSET_UNASSIGNED: string;
            };
            ACTIONS: {
                CANCEL: string;
            };
        };
        GROUP_INFO: {
            COMPONENTS: {
                GROUP_INFO: string;
            };
            ACTIONS: {
                EDIT: string;
            };
            RESULTS: {
                EDIT_SAVED: string;
            };
            PROPERTIES: {
                NAME: string;
                DESCRIPTION: string;
            };
        };
        ADD_GROUP: {
            COMPONENTS: {
                ADD_GROUP: string;
            };
            ACTIONS: {
                ADD: string;
            };
            RESULTS: {
                ADD_SUCCESS: string;
            };
        };
    };
    parentGroup: IManagedObject;
    refresh: EventEmitter<any>;
    title: string;
    emptyStateText: string;
    loadingItemsLabel: string;
    /** The name of the key where columns configuration will be stored. */
    columnsConfigKey: string;
    get columns(): Column[];
    set columns(value: Column[]);
    set _pagination(value: Pagination);
    set _actionControls(value: ActionControl[]);
    selectable: boolean;
    baseQuery: any;
    set _bulkActionControls(value: BulkActionControl[]);
    filterable: boolean;
    sortable: boolean;
    onColumnsChange: EventEmitter<Column[]>;
    itemsSelect: EventEmitter<string[]>;
    pagination: Pagination;
    showCounterWarning: boolean;
    actionControls: ActionControl[];
    bulkActionControls: BulkActionControl[];
    serverSideDataCallback: any;
    dataGrid: DataGridComponent;
    displayOptions: DisplayOptions;
    showSearch: boolean;
    private _columns;
    get isRootGroup(): boolean;
    get getInfiniteScrollMode(): string;
    set _displayOptions(displayOptions: any);
    constructor(subAssetsGridService: SubAssetsService, bsModalService: BsModalService, smartGroupsService: SmartGroupsService, deviceGridService: DeviceGridService, assetNodeService: AssetNodeService);
    getGridConfigContext(): SubAssetsGridConfigContext;
    ngOnInit(): void;
    setActionControls(): Promise<void>;
    onUnassignAsset(asset: IManagedObject, parentRef: IManagedObject): void;
    onDeleteAsset(asset: IManagedObject, parentRef: IManagedObject): Promise<void>;
    ngOnChanges(changes: SimpleChanges): void;
    trackByName(_index: any, column: Column): string;
    onDataSourceModifier(dataSourceModifier: DataSourceModifier): Promise<ServerSideDataResult>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SubAssetsGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SubAssetsGridComponent, "c8y-sub-assets-grid", never, { "parentGroup": "parent-group"; "refresh": "refresh"; "title": "title"; "emptyStateText": "emptyStateText"; "loadingItemsLabel": "loadingItemsLabel"; "columnsConfigKey": "columnsConfigKey"; "columns": "columns"; "_pagination": "pagination"; "_actionControls": "actionControls"; "selectable": "selectable"; "baseQuery": "baseQuery"; "_bulkActionControls": "bulkActionControls"; "filterable": "filterable"; "sortable": "sortable"; "_displayOptions": "displayOptions"; }, { "onColumnsChange": "onColumnsChange"; "itemsSelect": "itemsSelect"; }, never, never, false, never>;
}

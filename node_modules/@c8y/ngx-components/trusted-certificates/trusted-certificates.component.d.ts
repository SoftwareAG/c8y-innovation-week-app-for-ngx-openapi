import { OnInit } from '@angular/core';
import { AlertService, ClipboardService, ForOfFilterPipe, GainsightService, ModalService } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { IResultList, ITrustedCertificate, TrustedCertificateService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { TrustedCertificate } from './trusted-certificate.model';
import * as i0 from "@angular/core";
export declare class TrustedCertificatesComponent implements OnInit {
    private bsModal;
    private alertService;
    private trustedCertificateService;
    private modalService;
    private translateService;
    private clipboardService;
    private gainsightService;
    PROOF_OF_POSSESSION_POPOVER: "\"Proof of possession\" is a security method used to prove that whoever sends a message is also in the possession of the particular cryptographic key.";
    SIGNED_VERIFICATION_CODE_POPOVER: "Use the following openssl command to create the signed verification code: openssl dgst -sha256 -sign <private.key> <verification_code.txt> | openssl base64 -A";
    reloading: BehaviorSubject<boolean>;
    reload: BehaviorSubject<void>;
    trustedCertificates: Observable<IResultList<ITrustedCertificate>>;
    sortByExpirationDateAsc: ForOfFilterPipe<ITrustedCertificate>;
    signedVerificationCode: string;
    PRODUCT_EXPERIENCE: {
        EVENT: string;
        CERTIFICATES: {
            COMPONENTS: {
                TRUSTED_CERTIFICATE: string;
            };
            ACTIONS: {
                ADD: string;
                UPDATE: string;
                DELETE: string;
            };
            RESULTS: {
                ADD_SUCCESS: string;
                UPDATE_SUCCESS: string;
                DELETE_SUCCESS: string;
            };
        };
        VERIFICATION_CODE: {
            COMPONENTS: {
                REGENERATE_CODE: string;
                VERIFY_CODE: string;
                DOWNLOAD_CODE: string;
            };
            ACTIONS: {
                REGENERATE: string;
                VERIFY: string;
                DOWNLOAD: string;
            };
            RESULTS: {
                REGENERATE_SUCCESS: string;
                VERIFY_SUCCESS: string;
                VERIFY_FAILED: string;
            };
        };
    };
    constructor(bsModal: BsModalService, alertService: AlertService, trustedCertificateService: TrustedCertificateService, modalService: ModalService, translateService: TranslateService, clipboardService: ClipboardService, gainsightService: GainsightService);
    ngOnInit(): Promise<void>;
    loadTrustedCertificates(): Promise<void>;
    getTrustedCertificates(): Promise<IResultList<ITrustedCertificate>>;
    addTrustedCertificate(): Promise<void>;
    deleteTrustedCertificate(certificate: any): Promise<void>;
    updateCertificate(trustedCertificate: ITrustedCertificate, updatingPart: Partial<ITrustedCertificate>): Promise<void>;
    highlightDependingOnExpirationStatus(item: ITrustedCertificate): "text-danger" | "text-warning" | "";
    regenerateUnsignedVerificationCode(trustedCertificate: ITrustedCertificate): void;
    verifySignedVerificationCode(trustedCertificate: TrustedCertificate): void;
    downloadUnsignedVerificationCode(trustedCertificate: ITrustedCertificate): void;
    copyUnsignedVerificationCodeToClipboard(trustedCertificate: ITrustedCertificate): void;
    onFileInput(event: any, trustedCertificate: TrustedCertificate): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TrustedCertificatesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TrustedCertificatesComponent, "c8y-trusted-certificates", never, {}, {}, never, never, false, never>;
}

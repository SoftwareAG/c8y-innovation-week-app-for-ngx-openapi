import { NgForm } from '@angular/forms';
import { NavigatorNode, NavigatorService, Permissions } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Observable } from 'rxjs';
import { ContextDashboard, DashboardGlobalRoles } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import * as i0 from "@angular/core";
export declare class DashboardDetailComponent {
    private modal;
    private contextDashboardService;
    private navigatorService;
    private permissionsService;
    private translateService;
    dashboardDetailForm: NgForm;
    dashboard: ContextDashboard;
    currentDashboard: ContextDashboard;
    dashboardName: string;
    isReport: boolean;
    deviceType: string;
    isNamedDashboard: boolean;
    isDeviceType: boolean;
    icons: string[];
    filteredIcons: string[];
    styling: {
        themeClass: string;
        headerClass: string;
    };
    possibleStyling: {
        DASHBOARD_THEME_CLASSES: ({
            label: "Match UI`theme`";
            class: string;
            description: "The dashboard appearance matches the UI appearance.";
        } | {
            label: "Light`theme`";
            class: string;
            description: "The dashboard has light appearance, that is, dark text on light background.";
        } | {
            label: "Dark`theme`";
            class: string;
            description: "The dashboard has dark appearance, that is, light text on dark background.";
        } | {
            label: "Branded`theme`";
            class: string;
            description: "The dashboard is styled using the brand palette.";
        })[];
        WIDGET_HEADER_CLASSES: ({
            label: "Regular`style`";
            class: string;
            description: "The widget has no border between header and content.";
        } | {
            label: "Border`style`";
            class: string;
            description: "The widget has a small separation border between header and content.";
        } | {
            label: "Overlay`style`";
            class: string;
            description: "The widget content overlays the header.";
        } | {
            label: "Hidden`style`";
            class: string;
            description: "The widget header is not shown.";
        })[];
    };
    title: string;
    namePlaceholder: string;
    navigatorNodes$: Observable<NavigatorNode[]>;
    result: Promise<ContextDashboard>;
    globalRolesIds: DashboardGlobalRoles;
    applyToDevicesOfTypePermitted: boolean;
    get applyToDevicesOfTypeTitle(): string;
    readonly DEFAULT_DASHBOARD_MARGIN = 12;
    readonly DEFAULT_DASHBOARD_ICON = "th";
    readonly DEFAULT_DASHBOARD_PRIORITY = 10000;
    private _save;
    private _cancel;
    constructor(modal: BsModalRef, iconList: string[], contextDashboardService: ContextDashboardService, navigatorService: NavigatorService, permissionsService: Permissions, translateService: TranslateService);
    ngAfterContentInit(): void;
    setTitle(): void;
    setupApplyToDevicesOfTypeCheckbox(): void;
    save(): void;
    close(): void;
    getDashboardPreviewStyle(): {};
    selectIcon(icon: any): void;
    updateFiltered(term: string): void;
    private setDashboardStyle;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DashboardDetailComponent, "c8y-dashboard-detail", never, {}, {}, never, never, false, never>;
}

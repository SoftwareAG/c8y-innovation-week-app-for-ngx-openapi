import { EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export declare class AppearanceSettingsComponent {
    themeClass: string;
    headerClass: string;
    defaultThemeClass: string;
    defaultHeaderClass: string;
    themeClassChange: EventEmitter<string>;
    headerClassChange: EventEmitter<string>;
    possibleStylingTheme: ({
        label: "Match UI`theme`";
        class: string;
        description: "The dashboard appearance matches the UI appearance.";
    } | {
        label: "Light`theme`";
        class: string;
        description: "The dashboard has light appearance, that is, dark text on light background.";
    } | {
        label: "Dark`theme`";
        class: string;
        description: "The dashboard has dark appearance, that is, light text on dark background.";
    } | {
        label: "Branded`theme`";
        class: string;
        description: "The dashboard is styled using the brand palette.";
    })[];
    possibleStylingHeader: ({
        label: "Regular`style`";
        class: string;
        description: "The widget has no border between header and content.";
    } | {
        label: "Border`style`";
        class: string;
        description: "The widget has a small separation border between header and content.";
    } | {
        label: "Overlay`style`";
        class: string;
        description: "The widget content overlays the header.";
    } | {
        label: "Hidden`style`";
        class: string;
        description: "The widget header is not shown.";
    })[];
    themeClassClick(value: any): void;
    headerClassClick(value: any): void;
    private resetToDefault;
    static ɵfac: i0.ɵɵFactoryDeclaration<AppearanceSettingsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AppearanceSettingsComponent, "c8y-appearance-settings", never, { "themeClass": "themeClass"; "headerClass": "headerClass"; "defaultThemeClass": "defaultThemeClass"; "defaultHeaderClass": "defaultHeaderClass"; "possibleStylingTheme": "possibleStylingTheme"; "possibleStylingHeader": "possibleStylingHeader"; }, { "themeClassChange": "themeClassChange"; "headerClassChange": "headerClassChange"; }, never, never, false, never>;
}

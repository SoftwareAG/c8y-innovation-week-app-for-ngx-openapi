import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ExtensionFactory, ExtensionPointWithoutStateForPlugins, GenericHookType, PluginsResolveService, HookOptions } from '@c8y/ngx-components';
import { Observable } from 'rxjs';
import { DeviceGridActionHook } from './device-grid.model';
import { DeviceGridService } from './device-grid.service';
import * as i0 from "@angular/core";
/**
 * An extension HOOK can use either a pure value:
 * ```typescript
 *  { provide: HOOK_X, useValue: { ...hookValue }, multi: true }
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  { provide: HOOK_X, useValue: [{ ...hookValues }], multi: true }
 * ```
 *
 * Or an ExtensionFactory which allows to define a get() function. This function
 * gets called on each navigation with the current route and can return values
 * async (observable or promise).
 * ```typescript
 *  { provide: HOOK_X, useFactory: { get: (route) => doSomethingAsync(route) }, multi: true }
 * ```
 */
export type DeviceGridActionExtension = DeviceGridActionHook | DeviceGridActionHook[] | ExtensionFactory<DeviceGridActionHook>;
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookDeviceGridAction` function instead.
 */
export declare const HOOK_DEVICE_GRID_ACTION: InjectionToken<DeviceGridActionExtension>;
/**
 * You can either provide a single `DeviceGridActionExtension` as parameter:
 * ```typescript
 *  hookDeviceGridAction(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDeviceGridAction([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DeviceGridActionExtension>`
 * ```typescript
 *  export class MyDeviceGridActionFactory implements ExtensionFactory<DeviceGridActionExtension> {...}
 *  ...
 *  hookDeviceGridAction(MyDeviceGridActionFactory)
 * ```
 * A typed alternative to `HOOK_DEVICE_GRID_ACTION_DELETE`.
 * @param action The `DeviceGridDeleteExtension`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export declare function hookDeviceGridAction(action: GenericHookType<DeviceGridActionExtension>, options?: Partial<HookOptions>): import("@angular/core").ValueProvider | import("@angular/core").ClassProvider | import("@angular/core").ExistingProvider;
/**
 * A service which defines device grid action options.
 */
export declare class DeviceGridExtensionService extends ExtensionPointWithoutStateForPlugins<DeviceGridActionHook> {
    private router;
    private deviceGridService;
    constructor(rootInjector: Injector, plugins: PluginsResolveService, router: Router, deviceGridService: DeviceGridService);
    protected setupItemsObservable(): Observable<DeviceGridActionHook[]>;
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceGridExtensionService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DeviceGridExtensionService>;
}

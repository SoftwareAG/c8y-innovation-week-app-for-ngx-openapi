import { FetchClient, IApplication, IFetchResponse } from '@c8y/client';
import { AlertService, AppStateService } from '@c8y/ngx-components';
import { ActilityConnection, SigfoxConnection, ConnectionType, LoriotConnection } from './multiple-lns-connector.model';
import * as i0 from "@angular/core";
export declare class MultipleLnsConnectorService {
    private client;
    private appStateService;
    private alertService;
    private headers;
    constructor(client: FetchClient, appStateService: AppStateService, alertService: AlertService);
    list(connectionType: ConnectionType): Promise<IFetchResponse>;
    /**
     * Saves the connection.
     * @param connection The connection to be saved.
     * @param originalName The original name of the connection, required to perform an update.
     */
    save(connection: ActilityConnection | SigfoxConnection | LoriotConnection, originalName?: string): Promise<IFetchResponse>;
    detail(connectionType: ConnectionType, connectionName: string): Promise<ActilityConnection | SigfoxConnection | LoriotConnection | null>;
    exists(connectionType: ConnectionType, connectionName: string): Promise<boolean>;
    create(connection: ActilityConnection | SigfoxConnection | LoriotConnection): Promise<IFetchResponse>;
    update(connection: ActilityConnection | SigfoxConnection | LoriotConnection, originalName: string): Promise<IFetchResponse>;
    getBaseUrlByConnection(connection: ActilityConnection | SigfoxConnection | LoriotConnection): "service/sigfox-agent" | "service/actility" | "service/loriot" | "";
    getBaseUrlByType(connectionType: ConnectionType): "service/sigfox-agent" | "service/actility" | "service/loriot" | "";
    delete(connection: ActilityConnection | SigfoxConnection | LoriotConnection): Promise<IFetchResponse>;
    getApplication(name: string): Partial<IApplication>;
    download(url: string): Promise<IFetchResponse>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultipleLnsConnectorService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MultipleLnsConnectorService>;
}

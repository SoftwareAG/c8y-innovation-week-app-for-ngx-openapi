import { EventEmitter, ElementRef } from '@angular/core';
import { LogsJSON } from './logs.model';
import { AppLogsService } from './app-logs.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class AppLogsAutoRefreshComponent {
    private appLogsService;
    cancel$: Subject<boolean>;
    isAutoRefreshDisabled: boolean;
    logsToOutput: LogsJSON;
    isAutoRefreshOn: boolean;
    selectedInstance: any;
    mo: any;
    set buttonsDisabled(areDisabled: boolean);
    onNewLogs: EventEmitter<LogsJSON>;
    isRealtimeEnabled: EventEmitter<boolean>;
    button: ElementRef;
    private subscription;
    constructor(appLogsService: AppLogsService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private toggleState;
    private setButtonState;
    private watchForNewLogs;
    private startPolling;
    private getNewLogs;
    private getAppId;
    private getInstanceName;
    private updateLogsToOutput;
    private getEmptyLogsJson;
    static ɵfac: i0.ɵɵFactoryDeclaration<AppLogsAutoRefreshComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AppLogsAutoRefreshComponent, "c8y-app-logs-auto-refresh", never, { "selectedInstance": "selectedInstance"; "mo": "mo"; "buttonsDisabled": "buttonsDisabled"; }, { "onNewLogs": "onNewLogs"; "isRealtimeEnabled": "isRealtimeEnabled"; }, never, never, false, never>;
}

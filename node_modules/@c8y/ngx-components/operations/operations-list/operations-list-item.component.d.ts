import { OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IOperation, OperationStatus } from '@c8y/client';
import { ListItemComponent, ProductExperienceEvent, ProductExperienceEventSource } from '@c8y/ngx-components';
import { BulkOperationListItemService } from '@c8y/ngx-components/operations/bulk-operation-list-item';
import { OperationsService, OperationStatusOptionsMap } from '@c8y/ngx-components/operations/shared';
import { OperationsListService } from './operations-list.service';
import * as i0 from "@angular/core";
export declare class OperationsListItemComponent implements OnInit, ProductExperienceEventSource {
    bulkOperationListItemService: BulkOperationListItemService;
    sharedService: OperationsService;
    operationsListService: OperationsListService;
    private route;
    private router;
    operation: Partial<IOperation>;
    collapsed: boolean;
    readOnly: boolean;
    noExpandToggle: boolean;
    isSmartRulesMicroserviceAvailable: boolean;
    listItem: ListItemComponent;
    refreshLoading: boolean;
    OPERATION_STATUS: typeof OperationStatus;
    OPERATION_STATUS_OPTIONS_MAP: OperationStatusOptionsMap;
    deviceId: string | number;
    inventoryPermissions: string[];
    smartRuleAdminPermissions: string[];
    operationTitle: string;
    productExperienceEvent: ProductExperienceEvent;
    constructor(bulkOperationListItemService: BulkOperationListItemService, sharedService: OperationsService, operationsListService: OperationsListService, route: ActivatedRoute, router: Router);
    ngOnInit(): void;
    createCustomizedBulkOperation($event?: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OperationsListItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OperationsListItemComponent, "c8y-operations-list-item", never, { "operation": "operation"; "collapsed": "collapsed"; "readOnly": "readOnly"; "noExpandToggle": "noExpandToggle"; "isSmartRulesMicroserviceAvailable": "isSmartRulesMicroserviceAvailable"; }, {}, never, never, false, never>;
}

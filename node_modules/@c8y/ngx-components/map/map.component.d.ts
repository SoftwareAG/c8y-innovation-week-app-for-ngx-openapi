import { ElementRef, EventEmitter, SimpleChange, SimpleChanges } from '@angular/core';
import { ManagedObjectRealtimeService } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import type * as L from 'leaflet';
import { Subject, Subscription } from 'rxjs';
import { MapPopupDirective } from './map-popup.directive';
import { C8yMarker, MapConfig, MapDefaultConfig, MapTileLayer, PositionManagedObject } from './map.model';
import { MapService } from './map.service';
import * as i0 from "@angular/core";
export declare class MapComponent {
    protected moRealtimeService: ManagedObjectRealtimeService;
    protected mapService: MapService;
    protected layers: Array<MapTileLayer | MapTileLayer[]>;
    protected defaultConfig: MapDefaultConfig;
    protected translateService: TranslateService;
    map: L.Map;
    markers: Array<C8yMarker | L.Marker>;
    leaflet: typeof L;
    mapElement: ElementRef;
    popup: MapPopupDirective;
    config: MapConfig;
    assets: PositionManagedObject | PositionManagedObject[];
    onMove: EventEmitter<L.LeafletEvent>;
    onMoveEnd: EventEmitter<L.LeafletEvent>;
    onZoomStart: EventEmitter<L.LeafletEvent>;
    onZoomEnd: EventEmitter<L.LeafletEvent>;
    protected realtimeSubscription: Subscription;
    protected destroy$: Subject<unknown>;
    constructor(moRealtimeService: ManagedObjectRealtimeService, mapService: MapService, layers: Array<MapTileLayer | MapTileLayer[]>, defaultConfig: MapDefaultConfig, translateService: TranslateService);
    startRealtime(): void;
    moveToPositionOfMo(positions: PositionManagedObject | PositionManagedObject[]): void;
    stopRealtime(): void;
    findMarker(assetId: any): L.Marker<any> | C8yMarker;
    addMarkerToMap(marker: C8yMarker | L.Marker): void;
    getAssetMarker(asset: PositionManagedObject): C8yMarker;
    getAssetIcon(asset: PositionManagedObject): L.DivIcon;
    clearMarkers(): void;
    refreshMarkers(): void;
    center(): void;
    protected ngAfterViewInit(): Promise<void>;
    protected ngOnChanges(changes: SimpleChanges): void;
    protected ngOnDestroy(): void;
    protected unsubscribeAllListeners(): void;
    protected initMap(): void;
    protected handleMobile(): void;
    protected addLayers(): void;
    protected changeConfig(change: SimpleChange): void;
    protected hasChanged(change: SimpleChange, prop: keyof MapConfig): boolean;
    protected toggleControls(): void;
    private handleTouch;
    private zoomToBound;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapComponent, [null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapComponent, "c8y-map", never, { "config": "config"; "assets": "assets"; }, { "onMove": "onMove"; "onMoveEnd": "onMoveEnd"; "onZoomStart": "onZoomStart"; "onZoomEnd": "onZoomEnd"; }, ["popup"], ["*"], false, never>;
}

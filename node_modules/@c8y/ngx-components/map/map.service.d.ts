import { IManagedObject, InventoryService, IResultList } from '@c8y/client';
import type * as L from 'leaflet';
import { ClusterSize, PositionManagedObject } from './map.model';
import * as i0 from "@angular/core";
export declare class MapService {
    private inventory;
    /**
     * The devices that are maximal displayed in one cluster.
     */
    MAX_DEVICE_PER_CLUSTER: number;
    /**
     * The count until the cluster is sized. There are a maximum of
     * three clusters: 1, 4 or 16.
     */
    CLUSTER_LEVEL_THRESHOLD: number;
    constructor(inventory: InventoryService);
    /**
     * Returns the leaflet instance used by the cumulocity core.
     */
    getLeaflet(): Promise<typeof L>;
    /**
     * Verifies if a given managed object is a device with a position fragment.
     * @param mo The given managed object.
     */
    isPositionedDevice(mo: IManagedObject): boolean;
    /**
     * Verifies if a given managed object has a position fragment.
     * @param mo The given managed object.
     */
    hasPosition(mo: IManagedObject): any;
    getPositionMOs(bound: L.LatLngBounds, byGroupIdMO?: IManagedObject): Promise<PositionManagedObject[]>;
    getPositionMOsFromBoundCount(bound: L.LatLngBounds, byGroupIdMO?: IManagedObject): Promise<number>;
    getPositionDevices(): Promise<PositionManagedObject[]>;
    getPositionDevices(pageSize: number): Promise<PositionManagedObject[]>;
    getPositionDevices(pageSize: number, count: false): Promise<PositionManagedObject[]>;
    getPositionDevices(pageSize: number, count: true): Promise<number>;
    getPositionMOsFromBound(bound: L.LatLngBounds): Promise<PositionManagedObject[]>;
    getPositionMOsFromBound(bound: L.LatLngBounds, byGroupIdMO?: IManagedObject): Promise<PositionManagedObject[]>;
    getPositionMOsFromBound(bound: L.LatLngBounds, byGroupIdMO: IManagedObject, count: false): Promise<PositionManagedObject[]>;
    getPositionMOsFromBound(bound: L.LatLngBounds, byGroupIdMO: IManagedObject, count: true): Promise<number>;
    getAllPositionsMOs(byGroupIdMO?: IManagedObject, pageSize?: number): Promise<IResultList<PositionManagedObject>>;
    getClusterSize(bound: L.LatLngBounds): Promise<ClusterSize>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MapService>;
}

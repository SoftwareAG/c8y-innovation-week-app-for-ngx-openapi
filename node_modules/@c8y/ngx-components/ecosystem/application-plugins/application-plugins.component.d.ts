import { OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ApplicationRemotePlugins, IApplication } from '@c8y/client';
import { ActionControl, AlertService, ApplicationPlugin, BulkActionControl, Column, DataGridComponent, DisplayOptions, GainsightService, HeaderActionControl, Pagination, PluginsService } from '@c8y/ngx-components';
import { EcosystemService } from '@c8y/ngx-components/ecosystem/shared';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class ApplicationPluginsComponent implements OnInit, OnDestroy {
    private activatedRoute;
    private ecosystemService;
    private bsModalService;
    private pluginsService;
    private alertService;
    private gainsightService;
    PRODUCT_EXPERIENCE: {
        APPLICATIONS: {
            EVENTS: {
                AVAILABILITY: string;
                APPLICATION_CARD: string;
                APPLICATION_PROPERTIES: string;
                DEPLOY_APPLICATION: string;
                DUPLICATE_APPLICATION: string;
                INSTALLED_PLUGINS: string;
                PACKAGE_PLUGINS: string;
                PACKAGE_VERSIONS: string;
                FILTER_LIST: string;
            };
            COMPONENTS: {
                APPLICATION_CARD: string;
                APPLICATION_PLUGINS: string;
                APPLICATION_PROPERTIES: string;
                DEPLOY_APPLICATION: string;
                DUPLICATE_APPLICATION_PROPERTIES: string;
                PLUGIN_LIST: string;
                PACKAGE_VERSIONS: string;
                UPDATE_PLUGIN_OF_APP: string;
                LIST_FILTERS: string;
            };
            ACTIONS: {
                AVAILABILITY_CHANGE: string;
                CANCEL: string;
                CLONE: string;
                CHANGE_PLUGIN_VERSION: string;
                DELETE: string;
                DOWNLOAD: string;
                DEPLOY_APPLICATION: string;
                EDIT: string;
                INSTALL_PLUGIN: string;
                INSTALL_PLUGINS: string;
                SELECT_VERSION: string;
                SET_AS_LATEST: string;
                UPDATE_AVAILABLE: string;
                UPLOAD: string;
                SET_FILTER_TERM: string;
                SET_PREDEFINED_FILTERS: string;
                RESET_FILTER: string;
            };
            RESULTS: {
                DEPLOYED: string;
                DUPLICATED: string;
                PLUGIN_INSTALLED: string;
                PLUGIN_REMOVED: string;
                PLUGIN_VERSION_CHANGED: string;
                SERVER_FAILURE: string;
                SUCCESS: string;
            };
        };
    };
    CURRENT_LOCATION: string;
    appId: string | number;
    dataGrid: DataGridComponent;
    exportedPlugins$: BehaviorSubject<ApplicationPlugin[]>;
    remotePlugins$: BehaviorSubject<ApplicationRemotePlugins>;
    allAvailablePlugins$: BehaviorSubject<ApplicationPlugin[]>;
    installedPlugins$: Observable<ApplicationPlugin[]>;
    orphanedPlugins$: Observable<ApplicationPlugin[]>;
    app: IApplication;
    isLoading: boolean;
    title: string;
    loadMoreItemsLabel: string;
    loadingItemsLabel: string;
    actionControls: ActionControl[];
    bulkActionControls: BulkActionControl[];
    headerActionControls: HeaderActionControl[];
    pagination: Pagination;
    displayOptions: DisplayOptions;
    columns: Column[];
    private destroy$;
    constructor(activatedRoute: ActivatedRoute, ecosystemService: EcosystemService, bsModalService: BsModalService, pluginsService: PluginsService, alertService: AlertService, gainsightService: GainsightService);
    ngOnInit(): void;
    loadData(): Promise<void>;
    installPlugins(): Promise<void>;
    removePlugins(plugins: string[]): Promise<void>;
    cleanupOrphanedPlugins(plugins: ApplicationPlugin[]): Promise<void>;
    getActionControls(): ActionControl[];
    getBulkActionControls(): BulkActionControl[];
    updatePlugin(app: IApplication, plugin: ApplicationPlugin, downgrade?: boolean): Promise<void>;
    refresh(): void;
    ngOnDestroy(): void;
    private addInstallButtonToHeaderActionControls;
    private handleRemotesInstallation;
    private emitRemotes;
    private getApplicationMO;
    private getApplicationMFExports;
    private getApplicationMFRemotes;
    private getAllApplicationsMFExports;
    private getInstallModalInitState;
    private convertInstalledRemotesToIds;
    private createId;
    private getOrphanedPlugins;
    private splitOrphanedPluginsIntoOrphanedAndRevokedPlugins;
    private getInstalledPlugins;
    private extractDetails;
    private getStringMatchingRegex;
    static ɵfac: i0.ɵɵFactoryDeclaration<ApplicationPluginsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ApplicationPluginsComponent, "c8y-app-plugins", never, { "appId": "appId"; }, {}, never, never, false, never>;
}

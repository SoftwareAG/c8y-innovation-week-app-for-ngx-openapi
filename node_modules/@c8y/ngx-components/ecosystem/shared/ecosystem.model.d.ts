import { ApplicationPlugin } from '@c8y/ngx-components';
export interface ApplicationState {
    label: string;
    class: string;
    tooltip: string;
}
/** Wizard types  */
export declare enum EcosystemWizards {
    APPLICATION_UPLOAD = "ecosystemApplicationUpload",
    MICROSERVICE_UPLOAD = "ecosystemMicroserviceUpload",
    PACKAGE_UPLOAD = "ecosystemPackageUpload",
    BLUEPRINT_DEPLOYMENT = "ecosystemBlueprintDeployment",
    LICENSE_CONFIRM = "ecosystemLicenseConfirm"
}
export declare enum ERROR_TYPE {
    TYPE_VALIDATION = "TYPE_VALIDATION",
    ALREADY_SUBSCRIBED = "ALREADY_SUBSCRIBED",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NO_MANIFEST_FILE = "NO_MANIFEST_FILE",
    INVALID_PACKAGE = "INVALID_PACKAGE",
    INVALID_APPLICATION = "INVALID_APPLICATION",
    MICROSERVICE_NAME_TOO_LONG = "MICROSERVICE_NAME_TOO_LONG",
    APPLICATION_CREATION_FAILED = "APPLICATION_CREATION_FAILED",
    KEY_OR_CONTEXT_PATH_MISMATCH = "KEY_OR_CONTEXT_PATH_MISMATCH"
}
export type LicensedApplicationPlugin = Pick<ApplicationPlugin, 'type' | 'license' | 'name' | 'version' | 'contextPath'>;
export declare const PRODUCT_EXPERIENCE: {
    APPLICATIONS: {
        EVENTS: {
            AVAILABILITY: string;
            APPLICATION_CARD: string;
            APPLICATION_PROPERTIES: string;
            DEPLOY_APPLICATION: string;
            DUPLICATE_APPLICATION: string;
            INSTALLED_PLUGINS: string;
            PACKAGE_PLUGINS: string;
            PACKAGE_VERSIONS: string;
            FILTER_LIST: string;
        };
        COMPONENTS: {
            APPLICATION_CARD: string;
            APPLICATION_PLUGINS: string;
            APPLICATION_PROPERTIES: string;
            DEPLOY_APPLICATION: string;
            DUPLICATE_APPLICATION_PROPERTIES: string;
            PLUGIN_LIST: string;
            PACKAGE_VERSIONS: string;
            UPDATE_PLUGIN_OF_APP: string;
            LIST_FILTERS: string;
        };
        ACTIONS: {
            AVAILABILITY_CHANGE: string;
            CANCEL: string;
            CLONE: string;
            CHANGE_PLUGIN_VERSION: string;
            DELETE: string;
            DOWNLOAD: string;
            DEPLOY_APPLICATION: string;
            EDIT: string;
            INSTALL_PLUGIN: string;
            INSTALL_PLUGINS: string;
            SELECT_VERSION: string;
            SET_AS_LATEST: string;
            UPDATE_AVAILABLE: string;
            UPLOAD: string;
            SET_FILTER_TERM: string;
            SET_PREDEFINED_FILTERS: string;
            RESET_FILTER: string;
        };
        RESULTS: {
            DEPLOYED: string;
            DUPLICATED: string;
            PLUGIN_INSTALLED: string;
            PLUGIN_REMOVED: string;
            PLUGIN_VERSION_CHANGED: string;
            SERVER_FAILURE: string;
            SUCCESS: string;
        };
    };
};

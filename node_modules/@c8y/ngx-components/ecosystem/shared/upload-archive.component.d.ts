import { EventEmitter } from '@angular/core';
import { IApplication, IApplicationBinary } from '@c8y/client';
import { AlertService } from '@c8y/ngx-components';
import { BehaviorSubject } from 'rxjs';
import { EcosystemService } from './ecosystem.service';
import * as i0 from "@angular/core";
export declare class UploadArchiveComponent {
    private ecosystemService;
    private alertService;
    application: IApplication;
    uploadNewVersion: boolean;
    preUploadCallback: () => Promise<any>;
    applicationChange: EventEmitter<IApplication>;
    refresh: EventEmitter<any>;
    archives: IApplicationBinary[];
    toActivateVersionId: string;
    last: IApplicationBinary;
    isLoading: boolean;
    fileList: FileList;
    uploadInProgress: boolean;
    canReactivate: boolean;
    constructor(ecosystemService: EcosystemService, alertService: AlertService);
    get uploadProgress(): BehaviorSubject<number>;
    onFileDroppedEvent(event: any): Promise<void>;
    private onFile;
    static ɵfac: i0.ɵɵFactoryDeclaration<UploadArchiveComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UploadArchiveComponent, "c8y-upload-archive", never, { "application": "application"; "uploadNewVersion": "uploadNewVersion"; "preUploadCallback": "preUploadCallback"; }, { "applicationChange": "applicationChange"; "refresh": "refresh"; }, never, never, false, never>;
}

{"version":3,"file":"c8y-ngx-components-protocol-lpwan.mjs","sources":["../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.model.ts","../../protocol-lpwan/multiple-lns-connectors/no-connections-found.component.ts","../../protocol-lpwan/multiple-lns-connectors/no-connections-found.component.html","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connector.service.ts","../../protocol-lpwan/multiple-lns-connectors/connection-info-with-download-csv.component.ts","../../protocol-lpwan/multiple-lns-connectors/connection-info-with-download-csv.component.html","../../protocol-lpwan/multiple-lns-connectors/sigfox-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/sigfox-multiple-lns-connector.component.html","../../protocol-lpwan/multiple-lns-connectors/actility-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/actility-multiple-lns-connector.component.html","../../protocol-lpwan/multiple-lns-connectors/loriot/loriot-multiple-lns-connector.component.ts","../../protocol-lpwan/multiple-lns-connectors/loriot/loriot-multiple-lns-connector.component.html","../../protocol-lpwan/multiple-lns-connectors/multiple-lns-connectors.module.ts","../../protocol-lpwan/lpwan-set-device-protocol.service.ts","../../protocol-lpwan/lpwan-set-connections.component.ts","../../protocol-lpwan/lpwan-set-connections.component.html","../../protocol-lpwan/lpwan-set-device-protocol.component.ts","../../protocol-lpwan/lpwan-set-device-protocol.component.html","../../protocol-lpwan/lpwan-agent.guard.ts","../../protocol-lpwan/lpwan-protocol.module.ts","../../protocol-lpwan/c8y-ngx-components-protocol-lpwan.ts"],"sourcesContent":["export enum ConnectionType {\n  ACTILITY,\n  SIGFOX,\n  LORIOT\n}\nexport interface Connection {\n  name: string;\n  baseUrl: string;\n  username: string;\n  password: string;\n  description: string;\n}\nexport interface SigfoxConnection extends Connection {\n  parentGroupId: string;\n}\nexport interface ActilityConnection extends Connection {\n  profileId: string;\n  routeApplicationServerId?: string;\n  routeApplicationServerKey?: string;\n  adminApiVersion: string;\n  coreApiVersion: string;\n  enterpriseConnection: boolean;\n}\n\nexport interface LoriotConnection extends Connection {\n  providerType: string;\n}\n\nexport function isSigfoxConnection(\n  connection: SigfoxConnection | ActilityConnection | LoriotConnection\n): connection is SigfoxConnection {\n  return typeof (connection as SigfoxConnection).parentGroupId !== 'undefined';\n}\nexport function isActilityConnection(\n  connection: SigfoxConnection | ActilityConnection | LoriotConnection\n): connection is ActilityConnection {\n  return typeof (connection as ActilityConnection).profileId !== 'undefined';\n}\n\nexport function isLoriotConnection(\n  connection: SigfoxConnection | ActilityConnection | LoriotConnection\n): connection is LoriotConnection {\n  return typeof (connection as LoriotConnection).providerType !== 'undefined';\n}\n\nexport type State =\n  | 'loadingConnection'\n  | 'loadingError'\n  | 'connectionAvailable'\n  | 'connectionNotAvailable'\n  | 'addConnections'\n  | 'savedSuccessfully'\n  | 'updateConnection';\n","import { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'no-connections-found',\n  templateUrl: './no-connections-found.component.html'\n})\nexport class NoConnectionsFoundComponent {\n  @Output() onAction: EventEmitter<void> = new EventEmitter();\n  @Input() header: string = gettext('Connections');\n  addConnection() {\n    this.onAction.emit();\n  }\n}\n","<div class=\"card content-fullpage split-view--5-7\">\n  <div class=\"card-header separator grid__col--fullspan\">\n    <h4>{{ header | translate}}</h4>\n  </div>\n  <div class=\"inner-scroll split-view__list\">\n    <div class=\"bg-level-1 flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'plug'\"\n          [title]=\"'No connections found.' | translate\"\n          [subtitle]=\"'Click below to add a new connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n\n    <div class=\"card-footer separator\">\n      <button\n        title=\"{{ 'Add connection' | translate }}\"\n        class=\"btn btn-primary\"\n        (click)=\"addConnection()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add connection' | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll split-view__detail\">\n    <div class=\"flex-grow\">\n      <div class=\"card-block large-padding\">\n        <c8y-ui-empty-state\n          [icon]=\"'more-details'\"\n          [title]=\"'No settings to display.' | translate\"\n          [subtitle]=\"'Add a connection.' | translate\"\n          [horizontal]=\"true\"\n        ></c8y-ui-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IApplication, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { AlertService, AppStateService } from '@c8y/ngx-components';\nimport {\n  ActilityConnection,\n  isActilityConnection,\n  isSigfoxConnection,\n  SigfoxConnection,\n  ConnectionType,\n  LoriotConnection,\n  isLoriotConnection\n} from './multiple-lns-connector.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultipleLnsConnectorService {\n  private headers: any;\n  constructor(\n    private client: FetchClient,\n    private appStateService: AppStateService,\n    private alertService: AlertService\n  ) {\n    this.headers = { 'Content-Type': 'application/json' };\n  }\n\n  async list(connectionType: ConnectionType) {\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    return this.client.fetch(url, options);\n  }\n\n  /**\n   * Saves the connection.\n   * @param connection The connection to be saved.\n   * @param originalName The original name of the connection, required to perform an update.\n   */\n  async save(\n    connection: ActilityConnection | SigfoxConnection | LoriotConnection,\n    originalName: string = null\n  ) {\n    if (originalName) {\n      return this.update(connection, originalName);\n    }\n    return this.create(connection);\n  }\n\n  async detail(\n    connectionType: ConnectionType,\n    connectionName: string\n  ): Promise<ActilityConnection | SigfoxConnection | LoriotConnection | null> {\n    const name = connectionName.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByType(connectionType)}/lns-connection/${encodeURIComponent(\n      String(name)\n    )}`;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.headers\n    };\n    const res = await this.client.fetch(url, options);\n    if (res.status === 200) {\n      return await res.json();\n    }\n    return null;\n  }\n\n  async exists(connectionType: ConnectionType, connectionName: string): Promise<boolean> {\n    const connection = await this.detail(connectionType, connectionName);\n    return connection !== null;\n  }\n\n  async create(connection: ActilityConnection | SigfoxConnection | LoriotConnection) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  async update(\n    connection: ActilityConnection | SigfoxConnection | LoriotConnection,\n    originalName: string\n  ) {\n    connection.name = connection.name.toLocaleLowerCase();\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection/${encodeURIComponent(\n      String(originalName)\n    )}`;\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: this.headers,\n      body: JSON.stringify(connection)\n    };\n    return this.client.fetch(url, options);\n  }\n\n  getBaseUrlByConnection(connection: ActilityConnection | SigfoxConnection | LoriotConnection) {\n    return isSigfoxConnection(connection)\n      ? 'service/sigfox-agent'\n      : isActilityConnection(connection)\n      ? 'service/actility'\n      : isLoriotConnection(connection)\n      ? 'service/loriot'\n      : '';\n  }\n\n  getBaseUrlByType(connectionType: ConnectionType) {\n    return connectionType === ConnectionType.SIGFOX\n      ? 'service/sigfox-agent'\n      : connectionType === ConnectionType.ACTILITY\n      ? 'service/actility'\n      : connectionType === ConnectionType.LORIOT\n      ? 'service/loriot'\n      : '';\n  }\n\n  async delete(connection: ActilityConnection | SigfoxConnection | LoriotConnection) {\n    const url = `${this.getBaseUrlByConnection(connection)}/lns-connection`;\n    const options: IFetchOptions = {\n      method: 'DELETE'\n    };\n    return this.client.fetch(`${url}/${encodeURIComponent(String(connection.name))}`, options);\n  }\n\n  getApplication(name: string): Partial<IApplication> {\n    const { references } = this.appStateService.currentTenant.value.applications;\n    return references.find(({ application }) => application.name === name).application;\n  }\n\n  async download(url: string): Promise<IFetchResponse> {\n    try {\n      const options: IFetchOptions = {\n        method: 'GET'\n      };\n      return this.client.fetch(url, options);\n    } catch (e) {\n      this.alertService.addServerFailure(e);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { saveAs } from 'file-saver';\nimport { IApplication } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'connection-info-with-download-csv',\n  templateUrl: './connection-info-with-download-csv.component.html'\n})\nexport class ConnectionInfoWithDownloadCsvComponent {\n  @Input() messageData: any;\n  @Input() appData: IApplication;\n  @Input() modalTitle: string;\n  @Input() connectionName: string;\n\n  constructor(\n    private modal: BsModalRef,\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService\n  ) {}\n\n  dismiss() {\n    this.modal.hide();\n  }\n\n  async download() {\n    const url = `/service/${this.appData.contextPath}${this.messageData.attrs.URL}`;\n    const res = await this.connectorService.download(url);\n    if (res && res.status === 200) {\n      const streamData = await res.blob();\n      saveAs(\n        streamData,\n        this.translateService.instant(gettext('{{ connectionName }} - devices.csv'), {\n          connectionName: this.connectionName\n        })\n      );\n    } else {\n      this.alertService.danger(gettext('A server error occurred.'));\n    }\n  }\n}\n","<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"c8y-prompt alert alert-danger\">\n      <h3 class=\"m-b-16\">\n        <i class=\"dlt-c8y-icon-exclamation-circle\"></i>\n        <span>{{ modalTitle | translate }}</span>\n      </h3>\n      <p class=\"text-break-word\">\n        {{ messageData.message | translate }}\n      </p>\n      <br>\n      <span class=\"btn-default\" (click)=\"download()\">{{\n        'Click the link to download the file with the affected devices.' | translate\n      }}</span>\n      <div class=\"alert-footer\">\n        <button\n          title=\"{{ 'Cancel' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default\"\n          (click)=\"dismiss()\"\n        >\n          {{ 'Cancel' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex, escapeRegExp, cloneDeep } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ConnectionType, SigfoxConnection, State } from './multiple-lns-connector.model';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'sigfox-multiple-lns-connector',\n  templateUrl: './sigfox-multiple-lns-connector.component.html'\n})\nexport class SigfoxMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection: SigfoxConnection;\n  connections = Array<SigfoxConnection>();\n  showPassword = false;\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  cardHeader = gettext('Sigfox connections');\n  allowedSpecialCharacters = '~!@$^(){}[]|:,<+=,.`_ -';\n  namePattern = `^[a-zA-Z0-9 ${escapeRegExp(this.allowedSpecialCharacters)}]*$`;\n  namePatternError = this.translateService.instant(\n    gettext(\n      'Connection name can only contain letters, numbers, spaces, and the following symbols: {{ symbols }}'\n    ),\n    {\n      symbols: this.allowedSpecialCharacters\n    }\n  );\n  originalConnection: SigfoxConnection;\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: BsModalService,\n    private modal: ModalService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.SIGFOX);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.originalConnection = this.connection ? cloneDeep(this.connection) : undefined;\n  }\n\n  async resetEditedUnsavedConnection() {\n    if (this.state !== 'updateConnection' || !this.originalConnection) {\n      return;\n    }\n\n    const { name } = this.originalConnection;\n    const index = findIndex(this.connections, { name });\n    if (index !== -1) {\n      const originalData = (await this.connectorService.detail(\n        ConnectionType.SIGFOX,\n        name\n      )) as SigfoxConnection;\n      this.connections[index] = originalData;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as SigfoxConnection;\n    this.originalConnection = {} as SigfoxConnection;\n    this.state = 'addConnections';\n    this.showPassword = true;\n  }\n\n  async save() {\n    const checkForConnectionName =\n      this.originalConnection && this.originalConnection.name && this.originalConnection.name !== ''\n        ? this.originalConnection.name\n        : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.SIGFOX,\n      checkForConnectionName\n    );\n    if (this.state === 'addConnections' && isConnectionExist) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(originalConnection) {\n    const { name } = originalConnection;\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(originalConnection);\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n      this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  private async saveConnection() {\n    const res = await this.connectorService.save(this.connection, this.originalConnection?.name);\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('sigfox-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection'),\n        ariaDescribedby: 'modal-body',\n        ariaLabelledBy: 'modal-title',\n        connectionName: this.connection.name\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(originalConnection) {\n    try {\n      const response = await this.connectorService.delete(originalConnection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('sigfox-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          ariaDescribedby: 'modal-body',\n          ariaLabelledBy: 'modal-title',\n          modalTitle: gettext('Failed to delete the connection'),\n          connectionName: originalConnection.name\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n      // empty catch block\n    }\n  }\n}\n","<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n<c8y-title>{{ 'Connectivity' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [label]=\"'Settings' | translate\"\n    [icon]=\"'cog'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Connectivity' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Sigfox' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  ></no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <div class=\"card-title\">{{ cardHeader | translate }}</div>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-level-1 flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connectionBeingEdited\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Sigfox connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                  [pattern]=\"namePattern\"\n                />\n                <c8y-messages>\n                  <c8y-message name=\"pattern\" [text]=\"namePatternError\"></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. This connection has a built-in functionality to…' | translate\n                  \"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://backend.sigfox.com/api' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"parentGroupId\">\n                  {{ 'Parent group ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: '58c1793b9e93a15370f71caa' }\n                  \"\n                  id=\"parentGroupId\"\n                  name=\"parentGroupId\"\n                  [(ngModel)]=\"connection.parentGroupId\"\n                  required\n                  pattern=\"[a-z\\d]+\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid Parent group ID' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  required\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">\n                  {{ 'Change password' | translate }}\n                </span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">\n                  {{ 'Cancel password change' | translate }}\n                </span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n            </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(originalConnection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n            </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { head, orderBy, findIndex, escapeRegExp, cloneDeep } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ActilityConnection, ConnectionType, State } from './multiple-lns-connector.model';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'actility-multiple-lns-connector',\n  templateUrl: './actility-multiple-lns-connector.component.html'\n})\nexport class ActilityMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection: ActilityConnection;\n  connections = Array<ActilityConnection>();\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  showPassword = false;\n  cardHeader = gettext('Actility connections');\n  allowedSpecialCharacters = '~!@$^(){}[]|:,<+=,.`_ -';\n  namePattern = `^[a-zA-Z0-9 ${escapeRegExp(this.allowedSpecialCharacters)}]*$`;\n  namePatternError = this.translateService.instant(\n    gettext(\n      'Connection name can only contain letters, numbers, spaces, and the following symbols: {{ symbols }}'\n    ),\n    {\n      symbols: this.allowedSpecialCharacters\n    }\n  );\n  originalConnection: ActilityConnection;\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modal: ModalService,\n    private modalService: BsModalService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.ACTILITY);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.originalConnection = this.connection ? cloneDeep(this.connection) : undefined;\n  }\n\n  async setAdminAndCoreApiVersion() {\n    this.connection.adminApiVersion = 'latest';\n    this.connection.coreApiVersion = 'latest';\n  }\n\n  async resetEditedUnsavedConnection() {\n    if (this.state !== 'updateConnection' || !this.originalConnection) {\n      return;\n    }\n\n    const { name } = this.originalConnection;\n    const index = findIndex(this.connections, { name });\n    if (index !== -1) {\n      const originalData = (await this.connectorService.detail(\n        ConnectionType.ACTILITY,\n        name\n      )) as ActilityConnection;\n      this.connections[index] = originalData;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as ActilityConnection;\n    this.originalConnection = {} as ActilityConnection;\n    this.state = 'addConnections';\n    this.showPassword = true;\n    await this.setAdminAndCoreApiVersion();\n  }\n\n  async save() {\n    const checkForConnectionName =\n      this.originalConnection && this.originalConnection.name && this.originalConnection.name !== ''\n        ? this.originalConnection.name\n        : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.ACTILITY,\n      checkForConnectionName\n    );\n    if (this.state === 'addConnections' && isConnectionExist) {\n      const mesg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(mesg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(originalConnection) {\n    const { name } = originalConnection;\n    const mesg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), mesg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(originalConnection);\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n      this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  async saveConnection() {\n    const res = await this.connectorService.save(this.connection, this.originalConnection?.name);\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('actility');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection'),\n        ariaDescribedby: 'modal-body',\n        ariaLabelledBy: 'modal-title',\n        connectionName: this.connection.name\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(originalConnection) {\n    try {\n      const response = await this.connectorService.delete(originalConnection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('actility');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          ariaDescribedby: 'modal-body',\n          ariaLabelledBy: 'modal-title',\n          modalTitle: gettext('Failed to delete the connection'),\n          connectionName: originalConnection.name\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n      // empty catch block\n    }\n  }\n}\n","<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n\n<c8y-title>{{ 'Connectivity' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [label]=\"'Settings' | translate\"\n    [icon]=\"'cog'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Connectivity' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Actility' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  ></no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <div class=\"card-title\">{{ cardHeader | translate }}</div>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-level-1 flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connectionBeingEdited\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        ng-class=\"{ 'split-view__detail--selected': vm.selected && vm.jsonSchemaObjects }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            ng-click=\"vm.deselect()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Actility connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required\n                  [pattern]=\"namePattern\"\n                />\n                <c8y-messages>\n                  <c8y-message name=\"pattern\" [text]=\"namePatternError\"></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. This connection has a built-in functionality to…' | translate\n                  \"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"\n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://dx-api.thingpark.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"profileId\">\n                  {{ 'Profile ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'dev1-api' }\"\n                  id=\"profileId\"\n                  name=\"profileId\"\n                  [(ngModel)]=\"connection.profileId\"\n                  required\n                />\n              </c8y-form-group>\n              <!-- DM-1171 start-->\n              <c8y-form-group>\n                <label for=\"applicationServerId\">\n                  {{ 'Application server ID' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. Application Server' | translate\"\n                  id=\"applicationServerId\"\n                  name=\"applicationServerId\"\n                  [(ngModel)]=\"connection.routeApplicationServerId\"\n                  [required]=\"connection.routeApplicationServerKey ? 'required' : null\"\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"applicationServerKey\">\n                  {{ 'Application server key' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}'\n                      | translate: { example: '0011AEDF0011AEDF0011AEDF0011AEDF' }\n                  \"\n                  id=\"applicationServerKey\"\n                  name=\"applicationServerKey\"\n                  [(ngModel)]=\"connection.routeApplicationServerKey\"\n                  [required]=\"connection.routeApplicationServerId ? 'required' : null\"\n                  pattern=\"[A-Fa-f0-9]{32}\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid server key' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"adminApiVersion\">\n                  {{ 'Admin API version' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v102' }\"\n                  id=\"adminApiVersion\"\n                  name=\"adminApiVersion\"\n                  [(ngModel)]=\"connection.adminApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"coreApiVersion\">\n                  {{ 'Core API version' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. {{ example }}' | translate: { example: 'v121' }\"\n                  id=\"coreApiVersion\"\n                  name=\"coreApiVersion\"\n                  [(ngModel)]=\"connection.coreApiVersion\"\n                  required\n                  pattern=\"^v\\d+$|latest\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    text=\"{{ 'Must be a valid API version' | translate }}\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n              <!-- DM-1171 end-->\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  required\n                />\n              </c8y-form-group>\n              \n              <!-- DM-1254 begins -->\n              <c8y-form-group>\n                <label title=\"{{ 'Connection type' | translate }}\">\n                  {{ 'Connection type' | translate }}\n                </label>\n                <label title=\"{{ 'Thingpark Enterprise' }}\" class=\"c8y-radio radio-inline\">\n                  <input type=\"radio\" name=\"c8y-group\" [value]=\"true\"\n                  [(ngModel)]=\"connection.enterpriseConnection\" required>\n                  <span></span> \n                  <span>{{ 'Thingpark Enterprise' }}</span>\n                </label>\n                <label title=\"{{ 'Thingpark Wireless' }}\" class=\"c8y-radio radio-inline\">\n                  <input type=\"radio\" name=\"c8y-group\" [value]=\"false\"\n                  [(ngModel)]=\"connection.enterpriseConnection\" required>\n                  <span></span> \n                  <span>{{ 'Thingpark Wireless' }}</span>\n                </label>\n              </c8y-form-group>\n              <!-- DM-1254 ends -->\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">\n                  {{ 'Change password' | translate }}\n                </span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">\n                  {{ 'Cancel password change' | translate }}\n                </span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n            </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(originalConnection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n            </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { head, orderBy, findIndex, escapeRegExp, cloneDeep } from 'lodash-es';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { NgForm } from '@angular/forms';\nimport { MultipleLnsConnectorService } from '../multiple-lns-connector.service';\nimport { ConnectionType, LoriotConnection, State } from '../multiple-lns-connector.model';\nimport { ConnectionInfoWithDownloadCsvComponent } from '../connection-info-with-download-csv.component';\n\n@Component({\n  selector: 'loriot-multiple-lns-connector',\n  templateUrl: './loriot-multiple-lns-connector.component.html'\n})\nexport class LoriotMultipleLnsConnectorComponent implements OnInit {\n  state: State = 'loadingConnection';\n  connection: LoriotConnection;\n  connections = Array<LoriotConnection>();\n  showPassword = false;\n  @ViewChild('connectorsForm', { static: false }) connectorsForm: NgForm;\n  cardHeader = gettext('LORIOT connections');\n  allowedSpecialCharacters = '~!@$^(){}[]|:,<+=,.`_ -';\n  namePattern = `^[a-zA-Z0-9 ${escapeRegExp(this.allowedSpecialCharacters)}]*$`;\n  namePatternError = this.translateService.instant(\n    gettext(\n      'Connection name can only contain letters, numbers, spaces, and the following symbols: {{ symbols }}'\n    ),\n    {\n      symbols: this.allowedSpecialCharacters\n    }\n  );\n  originalConnection: LoriotConnection;\n  constructor(\n    private connectorService: MultipleLnsConnectorService,\n    private alertService: AlertService,\n    private translateService: TranslateService,\n    private modalService: BsModalService,\n    private modal: ModalService\n  ) {}\n\n  async ngOnInit() {\n    await this.loadConnections();\n  }\n\n  async loadConnections() {\n    const res = await this.connectorService.list(ConnectionType.LORIOT);\n    if (res && res.status !== 200) {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n      this.state = 'loadingError';\n    } else {\n      const list = await res.json();\n      this.connections = orderBy(list, ['name'], ['asc']);\n      await this.setModel();\n    }\n  }\n\n  async setModel(connectionObj = null) {\n    await this.resetEditedUnsavedConnection();\n    this.connection = connectionObj\n      ? connectionObj\n      : this.state === 'savedSuccessfully'\n      ? this.connection\n      : head(this.connections);\n    this.state = 'updateConnection';\n    this.showPassword = false;\n    this.originalConnection = this.connection ? cloneDeep(this.connection) : undefined;\n    this.connection.providerType = 'loriotType';\n  }\n\n  async resetEditedUnsavedConnection() {\n    if (this.state !== 'updateConnection' || !this.originalConnection) {\n      return;\n    }\n\n    const { name } = this.originalConnection;\n    const index = findIndex(this.connections, { name });\n    if (index !== -1) {\n      const originalData = (await this.connectorService.detail(\n        ConnectionType.LORIOT,\n        name\n      )) as LoriotConnection;\n      this.connections[index] = originalData;\n    }\n  }\n\n  async addConnection() {\n    await this.resetEditedUnsavedConnection();\n    this.connection = {} as LoriotConnection;\n    this.originalConnection = {} as LoriotConnection;\n    this.state = 'addConnections';\n    this.showPassword = true;\n    this.connection.providerType = 'loriotType';\n  }\n\n  async save() {\n    const checkForConnectionName =\n      this.originalConnection && this.originalConnection.name && this.originalConnection.name !== ''\n        ? this.originalConnection.name\n        : this.connection.name;\n    const isConnectionExist = await this.connectorService.exists(\n      ConnectionType.LORIOT,\n      checkForConnectionName\n    );\n    if (this.state === 'addConnections' && isConnectionExist) {\n      const msg = this.translateService.instant(\n        gettext(`Connection with name \"{{ name }}\" already exists.`),\n        { name: this.connection.name }\n      );\n      this.alertService.danger(msg);\n    } else {\n      this.saveConnection();\n    }\n  }\n\n  async deleteConnection(originalConnection) {\n    const { name } = originalConnection;\n    const msg = this.translateService.instant(\n      gettext(`You are about to delete the connection \"{{ name }}\". Do you want to proceed?`),\n      { name }\n    );\n\n    try {\n      await this.modal.confirm(gettext('Delete connection'), msg, Status.DANGER, {\n        ok: gettext('Delete'),\n        cancel: gettext('Cancel')\n      });\n\n      await this.delete(originalConnection);\n    } catch (error) {\n      // empty catch block\n    }\n  }\n\n  changePassword() {\n    this.showPassword = !this.showPassword;\n    if (this.connectorsForm.controls.password) {\n      this.connectorsForm.controls.password.setValue(null);\n    }\n  }\n\n  private async saveConnection() {\n    const res = await this.connectorService.save(this.connection, this.originalConnection?.name);\n    if (res && (res.status === 201 || res.status === 200)) {\n      this.state = 'savedSuccessfully';\n      this.alertService.success(gettext('Connection saved.'));\n      await this.loadConnections();\n    } else if (res && res.status === 500) {\n      const data = res.json ? await res.json() : undefined;\n      const app = this.connectorService.getApplication('loriot-agent');\n      const initialState = {\n        messageData: data,\n        appData: app,\n        modalTitle: gettext('Failed to update the connection'),\n        ariaDescribedby: 'modal-body',\n        ariaLabelledBy: 'modal-title',\n        connectionName: this.connection.name\n      };\n      this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n    } else {\n      const data = res.json ? await res.json() : undefined;\n      this.alertService.addServerFailure({ data, res });\n    }\n  }\n\n  private async delete(originalConnection) {\n    if (!originalConnection.providerType) originalConnection.providerType = 'loriotType';\n    try {\n      const response = await this.connectorService.delete(originalConnection);\n\n      if (response.ok && response.status === 204) {\n        this.alertService.success(gettext('Connection deleted.'));\n        await this.loadConnections();\n      } else if (response && response.status === 500) {\n        const data = response.json ? await response.json() : undefined;\n        const app = this.connectorService.getApplication('loriot-agent');\n        const initialState = {\n          messageData: data,\n          appData: app,\n          ariaDescribedby: 'modal-body',\n          ariaLabelledBy: 'modal-title',\n          modalTitle: gettext('Failed to delete the connection'),\n          connectionName: originalConnection.name\n        };\n        this.modalService.show(ConnectionInfoWithDownloadCsvComponent, { initialState });\n      } else {\n        const data = response.json ? await response.json() : undefined;\n        this.alertService.addServerFailure({ data, response });\n      }\n    } catch (error) {\n      // empty catch block\n    }\n  }\n}\n","<ng-container *ngIf=\"state === 'loadingConnection'; else renderListAndForm\">\n  <c8y-loading></c8y-loading>\n</ng-container>\n\n<c8y-title>{{ 'Connectivity' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [label]=\"'Settings' | translate\"\n    [icon]=\"'cog'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'Connectivity' | translate\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'cog'\"\n    [label]=\"'LORIOT' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<ng-template #renderListAndForm>\n  <no-connections-found\n    (onAction)=\"addConnection()\"\n    *ngIf=\"connections.length === 0 && state !== 'addConnections'\"\n    [header]=\"cardHeader | translate\"\n  >\n  </no-connections-found>\n  <div>\n    <div\n      class=\"card content-fullpage split-view--5-7\"\n      *ngIf=\"connections.length !== 0 || state === 'addConnections'\"\n    >\n      <div class=\"card-header separator grid__col--fullspan\">\n        <div class=\"card-title\">{{ cardHeader | translate }}</div>\n      </div>\n      <div class=\"inner-scroll split-view__list\">\n        <div class=\"bg-gray-white flex-grow\">\n          <c8y-list-group class=\"nav c8y-nav-stacked\">\n            <c8y-li\n              class=\"c8y-stacked-item p-0\"\n              [class.active]=\"connection.name === connectionBeingEdited\"\n              *ngFor=\"let connection of connections; let index = index\"\n              (click)=\"setModel(connection)\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              <span title=\"{{ connection.name }}\">\n                {{ connection.name }}\n              </span>\n            </c8y-li>\n\n            <c8y-li\n              *ngIf=\"state === 'addConnections'\"\n              class=\"c8y-nav-stacked active\"\n              (click)=\"addConnection()\"\n            >\n              <c8y-li-icon [icon]=\"'plug'\"></c8y-li-icon>\n              {{ 'New connection' | translate }}\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-footer separator-top\">\n          <button\n            [disabled]=\"state === 'addConnections'\"\n            title=\"{{ 'Add connection' | translate }}\"\n            class=\"btn btn-default\"\n            (click)=\"addConnection()\"\n          >\n            <i [c8yIcon]=\"'plus-circle'\"></i>\n            {{ 'Add connection' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <!-- 'split-view__detail--selected' condition needs to be fixed. this is needed so that both columns are visible in tablet format -->\n\n      <div\n        class=\"inner-scroll split-view__detail\"\n        [class]=\"{ 'split-view__detail--selected': connection }\"\n      >\n        <div class=\"card-header separator visible-sm visible-xs fit-w sticky-top\">\n          <button\n            title=\"{{ 'Back' | translate }}\"\n            class=\"btn btn-clean text-primary\"\n            (click)=\"resetEditedUnsavedConnection()\"\n          >\n            <i [c8yIcon]=\"'chevron-left'\"></i>\n            <span>{{ 'Back' | translate }}</span>\n          </button>\n        </div>\n        <form #connectorsForm=\"ngForm\" class=\"d-contents\">\n          <div class=\"flex-grow\">\n            <div class=\"card-block large-padding\">\n              <c8y-form-group>\n                <label for=\"name\">\n                  {{ 'Name' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. LORIOT connection' | translate\"\n                  id=\"name\"\n                  name=\"name\"\n                  [(ngModel)]=\"connection.name\"\n                  required                  \n                  [pattern]=\"namePattern\"\n                />\n                <c8y-messages >\n                  <c8y-message name=\"pattern\" [text]=\"namePatternError\"></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"description\">\n                  {{ 'Description' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"'e.g. This connection has a built-in functionality to…' | translate\"\n                  id=\"description\"\n                  name=\"description\"\n                  [(ngModel)]=\"connection.description\"                  \n                />\n              </c8y-form-group>\n\n              <c8y-form-group>\n                <label for=\"baseUrl\">\n                  {{ 'URL' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [placeholder]=\"\n                    'e.g. {{ example }}' | translate: { example: 'https://ap3.loriot.io' }\n                  \"\n                  id=\"baseUrl\"\n                  name=\"baseUrl\"\n                  [(ngModel)]=\"connection.baseUrl\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group>\n                <label for=\"username\">\n                  {{ 'Username' | translate }}\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n                  id=\"username\"\n                  name=\"username\"\n                  [(ngModel)]=\"connection.username\"\n                  required\n                />\n              </c8y-form-group>\n              <c8y-form-group *ngIf=\"showPassword\">\n                <label for=\"password\">\n                  {{ 'Password' | translate }}\n                </label>\n                <input\n                  type=\"password\"\n                  class=\"form-control\"\n                  placeholder=\"{{ 'e.g. my_password' | translate }}\"\n                  id=\"password\"\n                  name=\"password\"\n                  [(ngModel)]=\"connection.password\"\n                  required\n                />\n              </c8y-form-group>\n\n              <button\n                *ngIf=\"state === 'updateConnection'\"\n                type=\"button\"\n                class=\"btn btn-default\"\n                name=\"changePassword\"\n                (click)=\"changePassword()\"\n              >\n                <span title=\"{{ 'Change password' | translate }}\" *ngIf=\"!showPassword\">{{\n                  'Change password' | translate\n                }}</span>\n                <span title=\"{{ 'Cancel password change' | translate }}\" *ngIf=\"showPassword\">{{\n                  'Cancel password change' | translate\n                }}</span>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"card-footer separator-top\">\n            <button\n              title=\"{{ 'Cancel' | translate }}\"\n              class=\"btn btn-default\"\n              (click)=\"setModel()\"\n              translate\n              type=\"button\"\n            >\n              Cancel\n          </button>\n            <button\n              *ngIf=\"state === 'updateConnection'\"\n              title=\"{{ 'Delete' | translate }}\"\n              class=\"btn btn-danger\"\n              (click)=\"deleteConnection(originalConnection)\"\n              translate\n              type=\"button\"\n            >\n              Delete\n          </button>\n            <button\n              [disabled]=\"!this.connectorsForm.form.valid || this.connectorsForm.form.pristine\"\n              title=\"{{ 'Save' | translate }}\"\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              translate\n              type=\"submit\"\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule, CoreModule, FormsModule, Route } from '@c8y/ngx-components';\nimport { NoConnectionsFoundComponent } from './no-connections-found.component';\nimport { RouterModule } from '@angular/router';\nimport { SigfoxMultipleLnsConnectorComponent } from './sigfox-multiple-lns-connector.component';\nimport { ActilityMultipleLnsConnectorComponent } from './actility-multiple-lns-connector.component';\nimport { MultipleLnsConnectorService } from './multiple-lns-connector.service';\nimport { ConnectionInfoWithDownloadCsvComponent } from './connection-info-with-download-csv.component';\nimport { LoriotMultipleLnsConnectorComponent } from './loriot/loriot-multiple-lns-connector.component';\n\nconst settingsRoutes: Route[] = [\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_sigfox',\n    component: SigfoxMultipleLnsConnectorComponent\n  },\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_actility',\n    component: ActilityMultipleLnsConnectorComponent\n  },\n  {\n    path: 'connectivitySettings/multiple_lns_connectors_loriot',\n    component: LoriotMultipleLnsConnectorComponent\n  }\n];\n@NgModule({\n  declarations: [\n    SigfoxMultipleLnsConnectorComponent,\n    NoConnectionsFoundComponent,\n    ActilityMultipleLnsConnectorComponent,\n    LoriotMultipleLnsConnectorComponent,\n    ConnectionInfoWithDownloadCsvComponent\n  ],\n  imports: [CoreModule, CommonModule, FormsModule, RouterModule.forChild(settingsRoutes)],\n  providers: [MultipleLnsConnectorService]\n})\nexport class MultipleLnsConnectorsModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IManagedObject,\n  InventoryService,\n  IResultList,\n  FetchClient,\n  IFetchOptions,\n  IdentityService\n} from '@c8y/client';\nimport { get, orderBy } from 'lodash-es';\nimport { MultipleLnsConnectorService } from './multiple-lns-connectors';\nimport {\n  ActilityConnection,\n  ConnectionType,\n  SigfoxConnection\n} from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Injectable()\nexport class LpwanSetDeviceProtocolService {\n  supportedDevicesCfgs = [\n    {\n      name: 'actility',\n      match: device =>\n        get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora' &&\n        get(device, 'c8y_LpwanDevice.serviceProvider') === 'Actility',\n      protocolTypes: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],\n      connectionType: ConnectionType.ACTILITY\n    },\n    {\n      name: 'loriot',\n      match: device =>\n        get(device, 'c8y_LpwanDevice.lpwanDeviceType') === 'Lora' &&\n        get(device, 'c8y_LpwanDevice.serviceProvider') === 'Loriot',\n      protocolTypes: ['c8y_LoraDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['c8y_LoriotEUI', 'c8y_Serial'],\n      connectionType: ConnectionType.LORIOT\n    },\n    {\n      name: 'sigfox',\n      match: device => get(device, 'c8y_LpwanDevice.serviceProvider') === 'Sigfox',\n      protocolTypes: ['c8y_SigfoxDeviceType', 'c8y_LpwanDeviceType'],\n      externalIdTypes: ['com.sigfox.deviceId'],\n      connectionType: ConnectionType.SIGFOX\n    }\n  ];\n\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(\n    private inventoryService: InventoryService,\n    private client: FetchClient,\n    private identityService: IdentityService,\n    private lnsService: MultipleLnsConnectorService\n  ) {}\n\n  async refreshCache(device) {\n    const externalId = await this.getExternalId(device);\n    if (externalId) {\n      const url = `${this.getMicroserviceUrl(device)}/refreshCache/${externalId}`;\n      const options: IFetchOptions = {\n        method: 'POST',\n        headers: this.header,\n        body: JSON.stringify({})\n      };\n      return this.client.fetch(url, options);\n    }\n  }\n\n  getMicroserviceUrl(device) {\n    const { serviceProvider } = device.c8y_LpwanDevice;\n\n    let serviceName = serviceProvider.toLowerCase();\n    if (serviceProvider === 'Sigfox') {\n      serviceName = 'sigfox-agent';\n    }\n\n    return `/service/${serviceName}`;\n  }\n\n  isSupportedDevice(device: IManagedObject): boolean {\n    return this.supportedDevicesCfgs.some(({ match }) => match(device));\n  }\n\n  async getCurrentProtocol(device: IManagedObject) {\n    const lpwanDevice = device.c8y_LpwanDevice;\n    let protocolId;\n\n    if (lpwanDevice.typeExternalId) {\n      const externalId = (await this.identityService.detail(lpwanDevice.typeExternalId)).data;\n      protocolId = externalId.managedObject.id;\n    }\n\n    if (!protocolId && lpwanDevice.type) {\n      protocolId = lpwanDevice.type.split('/')[2];\n    }\n\n    if (!protocolId) {\n      return null;\n    }\n\n    return (await this.inventoryService.detail(protocolId)).data;\n  }\n\n  async applyProtocol(device: IManagedObject, selectedProtocol: IManagedObject) {\n    const [protocolExternalId] = (await this.identityService.list(selectedProtocol.id)).data;\n    const { externalId, type } = protocolExternalId;\n    device.c8y_LpwanDevice.typeExternalId = { externalId, type };\n    device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;\n    device.type = selectedProtocol.name;\n    return this.inventoryService.update(device);\n  }\n\n  async getAvailableProtocols(device: IManagedObject): Promise<IResultList<IManagedObject>> {\n    const query = {\n      __filter: {\n        type: { __in: this.getProtocolTypesMatchingDevice(device) }\n      },\n      __orderby: [{ name: 1 }]\n    };\n    return this.inventoryService.listQuery(query, { withTotalPages: true, pageSize: 5 });\n  }\n\n  async getAvailableConnections(\n    device: IManagedObject\n  ): Promise<IResultList<ActilityConnection | SigfoxConnection>> {\n    let list;\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const response = await this.lnsService.list(matchingCfg.connectionType);\n    if (response && response.status === 200) {\n      list = await response.json();\n      list = orderBy(list, ['name'], ['asc']);\n      return { res: response, data: list };\n    }\n  }\n\n  private getProtocolTypesMatchingDevice(device: IManagedObject): string[] {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    return matchingCfg ? matchingCfg.protocolTypes : [];\n  }\n\n  private async getExternalId(device: IManagedObject): Promise<string> {\n    const matchingCfg = this.supportedDevicesCfgs.find(({ match }) => match(device));\n    const externalIds = (await this.identityService.list(device.id)).data;\n    const externalId = externalIds.find(({ type }) => matchingCfg.externalIdTypes.includes(type));\n    return externalId ? externalId.externalId : null;\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport {\n  AlertService,\n  ForOfFilterPipe,\n  gettext,\n  PopoverConfirmButtons,\n  PopoverConfirmComponent\n} from '@c8y/ngx-components';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { find } from 'lodash-es';\nimport {\n  ActilityConnection,\n  SigfoxConnection\n} from './multiple-lns-connectors/multiple-lns-connector.model';\n\n@Component({\n  selector: 'set-lns-connections',\n  templateUrl: './lpwan-set-connections.component.html'\n})\nexport class LpwanAssignLnsConnectionsComponent implements OnInit {\n  loading: boolean;\n  @Input() device: IManagedObject;\n  buttons: PopoverConfirmButtons[] = [\n    { label: gettext('Cancel'), action: () => Promise.reject() },\n    { label: gettext('Re-register'), action: () => this.deviceReregister(), status: 'default' }\n  ];\n  reRegisterMsg = gettext('To change provider connection, you need to re-register device first.');\n  filterConnection: ForOfFilterPipe<ActilityConnection | SigfoxConnection> = pipe();\n  pattern = '';\n  @ViewChild(PopoverConfirmComponent, { static: true }) popoverConfirm: PopoverConfirmComponent;\n\n  newConnection: ActilityConnection | SigfoxConnection;\n  availableConnections: IResultList<ActilityConnection | SigfoxConnection>;\n  currentConnection: ActilityConnection | SigfoxConnection;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setConnectionPipe('');\n  }\n\n  setConnectionPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterConnection = pipe(\n      map(connections =>\n        connections.filter(\n          connection =>\n            (!this.currentConnection || this.currentConnection.name !== connection.name) &&\n            (!filterStr || connection.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newConnection = null;\n    try {\n      this.availableConnections = await this.lpwanService.getAvailableConnections(this.device);\n      this.currentConnection = find(this.availableConnections.data, {\n        name: this.device.c8y_LpwanDevice.lnsConnectionName\n      });\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  togglePopover(popoverCfrm) {\n    popoverCfrm.show();\n    this.setConnectionPipe('');\n  }\n\n  deviceReregister() {\n    return new Promise(resolve => {\n      window.location.href = `#/deviceregistration`;\n      resolve(true);\n    });\n  }\n}\n","<div class=\"col-md-6\">\n  <div class=\"form-group\">\n    <label translate>Current connection</label>\n    <p class=\"form-control-static\" *ngIf=\"!currentConnection\">\n      {{ 'Connection is not set. Select connection for this device' | translate }}\n    </p>\n    <p class=\"form-control-static text-truncate\" *ngIf=\"currentConnection\" title=\"{{ currentConnection.name }}\">\n      {{ currentConnection.name }}\n    </p>\n  </div>\n\n  <c8y-form-group>\n    <c8y-popover-confirm\n      outsideClick=\"true\"\n      containerClass=\"lns-connection-popover\"\n      [message]=\"reRegisterMsg\"\n      [buttons]=\"buttons\"\n      [placement]=\"'bottom'\"\n    ></c8y-popover-confirm>\n    <c8y-typeahead\n      *ngIf=\"!loading\"\n      [(ngModel)]=\"newConnection\"\n      placeholder=\"{{ 'Select new connection' | translate }}\"\n      name=\"newConnection\"\n      (onSearch)=\"setConnectionPipe($event)\"\n      [allowFreeEntries]=\"false\"\n    >\n      <c8y-li\n        *c8yFor=\"let connection of availableConnections; loadMore: 'hidden'; pipe: filterConnection\"\n        class=\"p-l-8 p-r-8 c8y-list__item--link\"\n        (click)=\"togglePopover(popoverConfirm)\"\n      >\n        <c8y-highlight [text]=\"connection.name\" [pattern]=\"pattern\"></c8y-highlight>\n      </c8y-li>\n    </c8y-typeahead>\n    <c8y-messages\n      ><c8y-message\n        name=\"notExisting\"\n        [text]=\"'Select one of the connections.' | translate\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { AlertService, ForOfFilterPipe, gettext } from '@c8y/ngx-components';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\nimport { Router } from '@angular/router';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'set-device-protocol',\n  templateUrl: './lpwan-set-device-protocol.component.html'\n})\nexport class LpwanAssignDeviceProtocolComponent implements OnInit {\n  loading: boolean;\n  device: IManagedObject;\n  currentProtocol: IManagedObject;\n  availableProtocols: IResultList<IManagedObject>;\n  newProtocol: IManagedObject;\n  filterProtocols: ForOfFilterPipe<IManagedObject> = pipe();\n  pattern = '';\n  @ViewChild('lpwanSetDeviceProtocolForm', { static: false }) lpwanSetDeviceProtocolForm: NgForm;\n\n  constructor(\n    private lpwanService: LpwanSetDeviceProtocolService,\n    private alertService: AlertService,\n    private router: Router,\n    private inventoryService: InventoryService\n  ) {}\n  async ngOnInit() {\n    await this.reload();\n    this.setPipe('');\n  }\n\n  setPipe(filterStr: string) {\n    this.pattern = filterStr;\n    this.filterProtocols = pipe(\n      map(protocols =>\n        protocols.filter(\n          protocol =>\n            (!this.currentProtocol || this.currentProtocol.id !== protocol.id) &&\n            (!filterStr || protocol.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1)\n        )\n      )\n    );\n  }\n\n  async reload() {\n    this.loading = true;\n    this.newProtocol = null;\n    try {\n      await this.loadDevice();\n      this.availableProtocols = await this.lpwanService.getAvailableProtocols(this.device);\n      this.currentProtocol = await this.lpwanService.getCurrentProtocol(this.device);\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  async loadDevice() {\n    const deviceId = this.router.routerState.snapshot.url.match(/\\d+/)[0];\n    const { data } = await this.inventoryService.detail(deviceId);\n    this.device = data;\n  }\n\n  async apply(selectedProtocol) {\n    try {\n      const moUpdated =\n        (await this.lpwanService.applyProtocol(this.device, selectedProtocol)).res.status === 200;\n      await this.reload();\n      this.alertService.success(gettext('Device protocol set.'));\n      this.lpwanSetDeviceProtocolForm.reset('dirty');\n      if (moUpdated) {\n        this.refreshCache();\n      }\n    } catch (ex) {\n      this.alertService.danger(gettext('Could not set device protocol.'));\n    }\n  }\n\n  async refreshCache() {\n    try {\n      await this.lpwanService.refreshCache(this.device);\n    } catch (ex) {\n      // do nothing (refreshing is an optional step)\n    }\n  }\n}\n","<form #lpwanSetDeviceProtocolForm=\"ngForm\">\n  <div class=\"row\">\n    <div class=\"col-md-9\">\n      <div class=\"card card--fullpage\">\n        <div class=\"card-header separator\">\n          <div class=\"card-title\">\n            {{ 'LPWAN configuration' | translate }}\n          </div>\n        </div>\n\n        <div class=\"card-block p-t-24 p-b-8 overflow-visible\">\n          <div *ngIf=\"loading\">\n            <c8y-loading></c8y-loading>\n          </div>\n\n          <div *ngIf=\"!loading\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate>Current device protocol</label>\n                <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n                  {{ device.type }}\n                </p>\n                <p\n                  class=\"form-control-static text-truncate\"\n                  *ngIf=\"currentProtocol\"\n                  title=\"{{ currentProtocol.name }}\"\n                >\n                  {{ currentProtocol.name }}\n                </p>\n              </div>\n              <c8y-form-group>\n                <c8y-typeahead\n                  [(ngModel)]=\"newProtocol\"\n                  placeholder=\"{{ 'Select new device protocol' | translate }}\"\n                  (onSearch)=\"setPipe($event)\"\n                  name=\"newProtocol\"\n                  [allowFreeEntries]=\"false\"\n                >\n                  <c8y-li\n                    *c8yFor=\"\n                      let protocol of availableProtocols;\n                      loadMore: 'hidden';\n                      pipe: filterProtocols\n                    \"\n                    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                    (click)=\"newProtocol = protocol; setPipe('')\"\n                  >\n                    <c8y-highlight [text]=\"protocol.name\" [pattern]=\"pattern\"></c8y-highlight>\n                  </c8y-li>\n                </c8y-typeahead>\n                <c8y-messages>\n                  <c8y-message\n                    name=\"notExisting\"\n                    [text]=\"'Select one of the protocols.' | translate\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n            <set-lns-connections [device]=\"device\"></set-lns-connections>\n          </div>\n        </div>\n\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            type=\"submit\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            [disabled]=\"!newProtocol\"\n          >\n            {{ 'Save' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n‌\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\n@Injectable()\nexport class LpwanAgentGuard implements CanActivate {\n  constructor(private lpwanService: LpwanSetDeviceProtocolService) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const device = route.data.contextData || route.parent.data.contextData;\n    return this.lpwanService.isSupportedDevice(device);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  CoreModule,\n  FormsModule,\n  gettext,\n  hookRoute,\n  Route,\n  ViewContext\n} from '@c8y/ngx-components';\nimport { LpwanAssignDeviceProtocolComponent } from './lpwan-set-device-protocol.component';\nimport { LpwanAgentGuard } from './lpwan-agent.guard';\nimport { LpwanSetDeviceProtocolService } from './lpwan-set-device-protocol.service';\nimport { LpwanAssignLnsConnectionsComponent } from './lpwan-set-connections.component';\n\nconst routes: Route[] = [\n  {\n    context: ViewContext.Device,\n    path: 'assign-protocol',\n    component: LpwanAssignDeviceProtocolComponent,\n    label: gettext('LPWAN'),\n    icon: 'c8y-device-protocols',\n    canActivate: [LpwanAgentGuard]\n  }\n];\n\n@NgModule({\n  declarations: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],\n  imports: [CoreModule, FormsModule],\n  entryComponents: [LpwanAssignDeviceProtocolComponent, LpwanAssignLnsConnectionsComponent],\n  providers: [LpwanAgentGuard, LpwanSetDeviceProtocolService, hookRoute(routes)]\n})\nexport class LpwanProtocolModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1","i2.MultipleLnsConnectorService","i3","i4","i1.MultipleLnsConnectorService","i7.NoConnectionsFoundComponent","i1.LpwanSetDeviceProtocolService","i7.LpwanAssignLnsConnectionsComponent"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAY,cAIX,CAAA;AAJD,CAAA,UAAY,cAAc,EAAA;IACxB,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ,CAAA;IACR,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;IACN,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;AACR,CAAC,EAJW,cAAc,KAAd,cAAc,GAIzB,EAAA,CAAA,CAAA,CAAA;AAwBK,SAAU,kBAAkB,CAChC,UAAoE,EAAA;AAEpE,IAAA,OAAO,OAAQ,UAA+B,CAAC,aAAa,KAAK,WAAW,CAAC;AAC/E,CAAC;AACK,SAAU,oBAAoB,CAClC,UAAoE,EAAA;AAEpE,IAAA,OAAO,OAAQ,UAAiC,CAAC,SAAS,KAAK,WAAW,CAAC;AAC7E,CAAC;AAEK,SAAU,kBAAkB,CAChC,UAAoE,EAAA;AAEpE,IAAA,OAAO,OAAQ,UAA+B,CAAC,YAAY,KAAK,WAAW,CAAC;AAC9E;;MCpCa,2BAA2B,CAAA;AAJxC,IAAA,WAAA,GAAA;AAKY,QAAA,IAAA,CAAA,QAAQ,GAAuB,IAAI,YAAY,EAAE,CAAC;AACnD,QAAA,IAAA,CAAA,MAAM,GAAW,OAAO,CAAC,aAAa,CAAC,CAAC;KAIlD;IAHC,aAAa,GAAA;AACX,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;KACtB;;wHALU,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAA3B,2BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,2BAA2B,6HCPxC,yzCAwCA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAA,YAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDjCa,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAJvC,SAAS;+BACE,sBAAsB,EAAA,QAAA,EAAA,yzCAAA,EAAA,CAAA;8BAItB,QAAQ,EAAA,CAAA;sBAAjB,MAAM;gBACE,MAAM,EAAA,CAAA;sBAAd,KAAK;;;MEOK,2BAA2B,CAAA;AAEtC,IAAA,WAAA,CACU,MAAmB,EACnB,eAAgC,EAChC,YAA0B,EAAA;AAF1B,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAa;AACnB,QAAA,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;AAChC,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAElC,IAAI,CAAC,OAAO,GAAG,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;KACvD;AAEK,IAAA,IAAI,CAAC,cAA8B,EAAA;;YACvC,MAAM,GAAG,GAAG,CAAA,EAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAA,eAAA,CAAiB,CAAC;AACtE,YAAA,MAAM,OAAO,GAAkB;AAC7B,gBAAA,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAED;;;;AAIG;AACG,IAAA,IAAI,CACR,UAAoE,EACpE,eAAuB,IAAI,EAAA;;AAE3B,YAAA,IAAI,YAAY,EAAE;gBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AAC9C,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAChC,CAAA,CAAA;AAAA,KAAA;IAEK,MAAM,CACV,cAA8B,EAC9B,cAAsB,EAAA;;AAEtB,YAAA,MAAM,IAAI,GAAG,cAAc,CAAC,iBAAiB,EAAE,CAAC;AAChD,YAAA,MAAM,GAAG,GAAG,CAAA,EAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAmB,gBAAA,EAAA,kBAAkB,CACvF,MAAM,CAAC,IAAI,CAAC,CACb,EAAE,CAAC;AACJ,YAAA,MAAM,OAAO,GAAkB;AAC7B,gBAAA,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CAAC;AACF,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAClD,YAAA,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACtB,gBAAA,OAAO,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AACzB,aAAA;AACD,YAAA,OAAO,IAAI,CAAC;SACb,CAAA,CAAA;AAAA,KAAA;IAEK,MAAM,CAAC,cAA8B,EAAE,cAAsB,EAAA;;YACjE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YACrE,OAAO,UAAU,KAAK,IAAI,CAAC;SAC5B,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,MAAM,CAAC,UAAoE,EAAA;;YAC/E,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACtD,MAAM,GAAG,GAAG,CAAA,EAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAA,eAAA,CAAiB,CAAC;AACxE,YAAA,MAAM,OAAO,GAAkB;AAC7B,gBAAA,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,IAAI,CAAC,OAAO;AACrB,gBAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;aACjC,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;IAEK,MAAM,CACV,UAAoE,EACpE,YAAoB,EAAA;;YAEpB,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACtD,YAAA,MAAM,GAAG,GAAG,CAAA,EAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAmB,gBAAA,EAAA,kBAAkB,CACzF,MAAM,CAAC,YAAY,CAAC,CACrB,EAAE,CAAC;AACJ,YAAA,MAAM,OAAO,GAAkB;AAC7B,gBAAA,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,IAAI,CAAC,OAAO;AACrB,gBAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;aACjC,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,sBAAsB,CAAC,UAAoE,EAAA;QACzF,OAAO,kBAAkB,CAAC,UAAU,CAAC;AACnC,cAAE,sBAAsB;AACxB,cAAE,oBAAoB,CAAC,UAAU,CAAC;AAClC,kBAAE,kBAAkB;AACpB,kBAAE,kBAAkB,CAAC,UAAU,CAAC;AAChC,sBAAE,gBAAgB;sBAChB,EAAE,CAAC;KACR;AAED,IAAA,gBAAgB,CAAC,cAA8B,EAAA;AAC7C,QAAA,OAAO,cAAc,KAAK,cAAc,CAAC,MAAM;AAC7C,cAAE,sBAAsB;AACxB,cAAE,cAAc,KAAK,cAAc,CAAC,QAAQ;AAC5C,kBAAE,kBAAkB;AACpB,kBAAE,cAAc,KAAK,cAAc,CAAC,MAAM;AAC1C,sBAAE,gBAAgB;sBAChB,EAAE,CAAC;KACR;AAEK,IAAA,MAAM,CAAC,UAAoE,EAAA;;YAC/E,MAAM,GAAG,GAAG,CAAA,EAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAA,eAAA,CAAiB,CAAC;AACxE,YAAA,MAAM,OAAO,GAAkB;AAC7B,gBAAA,MAAM,EAAE,QAAQ;aACjB,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,EAAG,GAAG,CAAA,CAAA,EAAI,kBAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE,CAAA,EAAE,OAAO,CAAC,CAAC;SAC5F,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,cAAc,CAAC,IAAY,EAAA;AACzB,QAAA,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC;AAC7E,QAAA,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,WAAW,CAAC;KACpF;AAEK,IAAA,QAAQ,CAAC,GAAW,EAAA;;YACxB,IAAI;AACF,gBAAA,MAAM,OAAO,GAAkB;AAC7B,oBAAA,MAAM,EAAE,KAAK;iBACd,CAAC;gBACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACxC,aAAA;AAAC,YAAA,OAAO,CAAC,EAAE;AACV,gBAAA,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACvC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;wHA/HU,2BAA2B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,eAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAA3B,2BAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,2BAA2B,cAF1B,MAAM,EAAA,CAAA,CAAA;2FAEP,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAHvC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;iBACnB,CAAA;;;MCHY,sCAAsC,CAAA;AAMjD,IAAA,WAAA,CACU,KAAiB,EACjB,gBAA6C,EAC7C,YAA0B,EAC1B,gBAAkC,EAAA;AAHlC,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAY;AACjB,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA6B;AAC7C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;KACxC;IAEJ,OAAO,GAAA;AACL,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;KACnB;IAEK,QAAQ,GAAA;;AACZ,YAAA,MAAM,GAAG,GAAG,CAAA,SAAA,EAAY,IAAI,CAAC,OAAO,CAAC,WAAW,CAAG,EAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YAChF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACtD,YAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AAC7B,gBAAA,MAAM,UAAU,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AACpC,gBAAA,MAAM,CACJ,UAAU,EACV,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,EAAE;oBAC3E,cAAc,EAAE,IAAI,CAAC,cAAc;AACpC,iBAAA,CAAC,CACH,CAAC;AACH,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC;AAC/D,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;mIA/BU,sCAAsC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,2BAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,EAAA,CAAA,gBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAtC,sCAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,sCAAsC,iMCZnD,g1BA0BM,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAAD,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDdO,sCAAsC,EAAA,UAAA,EAAA,CAAA;kBAJlD,SAAS;+BACE,mCAAmC,EAAA,QAAA,EAAA,g1BAAA,EAAA,CAAA;kMAIpC,WAAW,EAAA,CAAA;sBAAnB,KAAK;gBACG,OAAO,EAAA,CAAA;sBAAf,KAAK;gBACG,UAAU,EAAA,CAAA;sBAAlB,KAAK;gBACG,cAAc,EAAA,CAAA;sBAAtB,KAAK;;;MEFK,mCAAmC,CAAA;IAkB9C,WACU,CAAA,gBAA6C,EAC7C,YAA0B,EAC1B,gBAAkC,EAClC,YAA4B,EAC5B,KAAmB,EAAA;AAJnB,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA6B;AAC7C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;AAClC,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAgB;AAC5B,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAc;AAtB7B,QAAA,IAAK,CAAA,KAAA,GAAU,mBAAmB,CAAC;AAEnC,QAAA,IAAW,CAAA,WAAA,GAAG,KAAK,EAAoB,CAAC;AACxC,QAAA,IAAY,CAAA,YAAA,GAAG,KAAK,CAAC;AAErB,QAAA,IAAA,CAAA,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC3C,QAAA,IAAwB,CAAA,wBAAA,GAAG,yBAAyB,CAAC;QACrD,IAAW,CAAA,WAAA,GAAG,CAAe,YAAA,EAAA,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA,GAAA,CAAK,CAAC;AAC9E,QAAA,IAAgB,CAAA,gBAAA,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC9C,OAAO,CACL,qGAAqG,CACtG,EACD;YACE,OAAO,EAAE,IAAI,CAAC,wBAAwB;AACvC,SAAA,CACF,CAAC;KAQE;IAEE,QAAQ,GAAA;;AACZ,YAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;SAC9B,CAAA,CAAA;AAAA,KAAA;IAEK,eAAe,GAAA;;AACnB,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AACpE,YAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AAC7B,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAClD,gBAAA,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;AAC7B,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,gBAAA,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,gBAAA,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,QAAQ,CAAC,aAAa,GAAG,IAAI,EAAA;;AACjC,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,aAAa;AAC7B,kBAAE,aAAa;AACf,kBAAE,IAAI,CAAC,KAAK,KAAK,mBAAmB;sBAClC,IAAI,CAAC,UAAU;AACjB,sBAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3B,YAAA,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC;AAChC,YAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;SACpF,CAAA,CAAA;AAAA,KAAA;IAEK,4BAA4B,GAAA;;YAChC,IAAI,IAAI,CAAC,KAAK,KAAK,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACjE,OAAO;AACR,aAAA;AAED,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC;AACzC,YAAA,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AACpD,YAAA,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAChB,gBAAA,MAAM,YAAY,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CACtD,cAAc,CAAC,MAAM,EACrB,IAAI,CACL,CAAqB,CAAC;AACvB,gBAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AACxC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,aAAa,GAAA;;AACjB,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;AAC1C,YAAA,IAAI,CAAC,UAAU,GAAG,EAAsB,CAAC;AACzC,YAAA,IAAI,CAAC,kBAAkB,GAAG,EAAsB,CAAC;AACjD,YAAA,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;AAC9B,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B,CAAA,CAAA;AAAA,KAAA;IAEK,IAAI,GAAA;;AACR,YAAA,MAAM,sBAAsB,GAC1B,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,KAAK,EAAE;AAC5F,kBAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI;AAC9B,kBAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AAC3B,YAAA,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1D,cAAc,CAAC,MAAM,EACrB,sBAAsB,CACvB,CAAC;AACF,YAAA,IAAI,IAAI,CAAC,KAAK,KAAK,gBAAgB,IAAI,iBAAiB,EAAE;gBACxD,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACxC,OAAO,CAAC,CAAA,iDAAA,CAAmD,CAAC,EAC5D,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAC/B,CAAC;AACF,gBAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,cAAc,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,gBAAgB,CAAC,kBAAkB,EAAA;;AACvC,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,kBAAkB,CAAC;AACpC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACxC,OAAO,CAAC,8EAA8E,CAAC,EACvF,EAAE,IAAI,EAAE,CACT,CAAC;YAEF,IAAI;AACF,gBAAA,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE;AAC1E,oBAAA,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC;AACrB,oBAAA,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC;AAC1B,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACvC,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAED,cAAc,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;AACvC,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtD,SAAA;KACF;IAEa,cAAc,GAAA;;;YAC1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAA,IAAI,CAAC,kBAAkB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,CAAC,CAAC;AAC7F,YAAA,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,EAAE;AACrD,gBAAA,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;AACxD,gBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,aAAA;AAAM,iBAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACpC,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;AACjE,gBAAA,MAAM,YAAY,GAAG;AACnB,oBAAA,WAAW,EAAE,IAAI;AACjB,oBAAA,OAAO,EAAE,GAAG;AACZ,oBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;AACtD,oBAAA,eAAe,EAAE,YAAY;AAC7B,oBAAA,cAAc,EAAE,aAAa;AAC7B,oBAAA,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;iBACrC,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACnD,aAAA;;AACF,KAAA;AAEa,IAAA,MAAM,CAAC,kBAAkB,EAAA;;YACrC,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAExE,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oBAC1C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAC1D,oBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,iBAAA;AAAM,qBAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC9C,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;AACjE,oBAAA,MAAM,YAAY,GAAG;AACnB,wBAAA,WAAW,EAAE,IAAI;AACjB,wBAAA,OAAO,EAAE,GAAG;AACZ,wBAAA,eAAe,EAAE,YAAY;AAC7B,wBAAA,cAAc,EAAE,aAAa;AAC7B,wBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;wBACtD,cAAc,EAAE,kBAAkB,CAAC,IAAI;qBACxC,CAAC;oBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AACxD,iBAAA;AACF,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;gIA/KU,mCAAmC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAE,2BAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAnC,mCAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,mCAAmC,uLCdhD,25RAwPA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,cAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,8CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,0FAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,wIAAA,EAAA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,sEAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,wDAAA,EAAA,MAAA,EAAA,CAAA,eAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iCAAA,EAAA,QAAA,EAAA,yCAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,iCAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,2BAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FD1Oa,mCAAmC,EAAA,UAAA,EAAA,CAAA;kBAJ/C,SAAS;+BACE,+BAA+B,EAAA,QAAA,EAAA,25RAAA,EAAA,CAAA;iOAQO,cAAc,EAAA,CAAA;sBAA7D,SAAS;gBAAC,IAAA,EAAA,CAAA,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;;;MELnC,qCAAqC,CAAA;IAkBhD,WACU,CAAA,gBAA6C,EAC7C,YAA0B,EAC1B,gBAAkC,EAClC,KAAmB,EACnB,YAA4B,EAAA;AAJ5B,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA6B;AAC7C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;AAClC,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAc;AACnB,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAgB;AAtBtC,QAAA,IAAK,CAAA,KAAA,GAAU,mBAAmB,CAAC;AAEnC,QAAA,IAAW,CAAA,WAAA,GAAG,KAAK,EAAsB,CAAC;AAE1C,QAAA,IAAY,CAAA,YAAA,GAAG,KAAK,CAAC;AACrB,QAAA,IAAA,CAAA,UAAU,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC7C,QAAA,IAAwB,CAAA,wBAAA,GAAG,yBAAyB,CAAC;QACrD,IAAW,CAAA,WAAA,GAAG,CAAe,YAAA,EAAA,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA,GAAA,CAAK,CAAC;AAC9E,QAAA,IAAgB,CAAA,gBAAA,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC9C,OAAO,CACL,qGAAqG,CACtG,EACD;YACE,OAAO,EAAE,IAAI,CAAC,wBAAwB;AACvC,SAAA,CACF,CAAC;KAQE;IAEE,QAAQ,GAAA;;AACZ,YAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;SAC9B,CAAA,CAAA;AAAA,KAAA;IAEK,eAAe,GAAA;;AACnB,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AACtE,YAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AAC7B,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAClD,gBAAA,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;AAC7B,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,gBAAA,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,gBAAA,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,QAAQ,CAAC,aAAa,GAAG,IAAI,EAAA;;AACjC,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,aAAa;AAC7B,kBAAE,aAAa;AACf,kBAAE,IAAI,CAAC,KAAK,KAAK,mBAAmB;sBAClC,IAAI,CAAC,UAAU;AACjB,sBAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3B,YAAA,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC;AAChC,YAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;SACpF,CAAA,CAAA;AAAA,KAAA;IAEK,yBAAyB,GAAA;;AAC7B,YAAA,IAAI,CAAC,UAAU,CAAC,eAAe,GAAG,QAAQ,CAAC;AAC3C,YAAA,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,QAAQ,CAAC;SAC3C,CAAA,CAAA;AAAA,KAAA;IAEK,4BAA4B,GAAA;;YAChC,IAAI,IAAI,CAAC,KAAK,KAAK,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACjE,OAAO;AACR,aAAA;AAED,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC;AACzC,YAAA,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AACpD,YAAA,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAChB,gBAAA,MAAM,YAAY,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CACtD,cAAc,CAAC,QAAQ,EACvB,IAAI,CACL,CAAuB,CAAC;AACzB,gBAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AACxC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,aAAa,GAAA;;AACjB,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;AAC1C,YAAA,IAAI,CAAC,UAAU,GAAG,EAAwB,CAAC;AAC3C,YAAA,IAAI,CAAC,kBAAkB,GAAG,EAAwB,CAAC;AACnD,YAAA,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;AAC9B,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,YAAA,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;SACxC,CAAA,CAAA;AAAA,KAAA;IAEK,IAAI,GAAA;;AACR,YAAA,MAAM,sBAAsB,GAC1B,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,KAAK,EAAE;AAC5F,kBAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI;AAC9B,kBAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AAC3B,YAAA,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1D,cAAc,CAAC,QAAQ,EACvB,sBAAsB,CACvB,CAAC;AACF,YAAA,IAAI,IAAI,CAAC,KAAK,KAAK,gBAAgB,IAAI,iBAAiB,EAAE;gBACxD,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACxC,OAAO,CAAC,CAAA,iDAAA,CAAmD,CAAC,EAC5D,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAC/B,CAAC;AACF,gBAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,cAAc,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,gBAAgB,CAAC,kBAAkB,EAAA;;AACvC,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,kBAAkB,CAAC;AACpC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACxC,OAAO,CAAC,8EAA8E,CAAC,EACvF,EAAE,IAAI,EAAE,CACT,CAAC;YAEF,IAAI;AACF,gBAAA,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE;AAC1E,oBAAA,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC;AACrB,oBAAA,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC;AAC1B,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACvC,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAED,cAAc,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;AACvC,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtD,SAAA;KACF;IAEK,cAAc,GAAA;;;YAClB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAA,IAAI,CAAC,kBAAkB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,CAAC,CAAC;AAC7F,YAAA,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,EAAE;AACrD,gBAAA,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;AACxD,gBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,aAAA;AAAM,iBAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACpC,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AAC7D,gBAAA,MAAM,YAAY,GAAG;AACnB,oBAAA,WAAW,EAAE,IAAI;AACjB,oBAAA,OAAO,EAAE,GAAG;AACZ,oBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;AACtD,oBAAA,eAAe,EAAE,YAAY;AAC7B,oBAAA,cAAc,EAAE,aAAa;AAC7B,oBAAA,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;iBACrC,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACnD,aAAA;;AACF,KAAA;AAEa,IAAA,MAAM,CAAC,kBAAkB,EAAA;;YACrC,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAExE,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oBAC1C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAC1D,oBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,iBAAA;AAAM,qBAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC9C,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AAC7D,oBAAA,MAAM,YAAY,GAAG;AACnB,wBAAA,WAAW,EAAE,IAAI;AACjB,wBAAA,OAAO,EAAE,GAAG;AACZ,wBAAA,eAAe,EAAE,YAAY;AAC7B,wBAAA,cAAc,EAAE,aAAa;AAC7B,wBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;wBACtD,cAAc,EAAE,kBAAkB,CAAC,IAAI;qBACxC,CAAC;oBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AACxD,iBAAA;AACF,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;kIArLU,qCAAqC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,2BAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAArC,qCAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,qCAAqC,yLCdlD,shaAsVA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,cAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,8CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,yBAAA,EAAA,QAAA,EAAA,8FAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,iBAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,0FAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,wIAAA,EAAA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,sEAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,wDAAA,EAAA,MAAA,EAAA,CAAA,eAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iCAAA,EAAA,QAAA,EAAA,yCAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,iCAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,2BAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDxUa,qCAAqC,EAAA,UAAA,EAAA,CAAA;kBAJjD,SAAS;+BACE,iCAAiC,EAAA,QAAA,EAAA,shaAAA,EAAA,CAAA;iOAOK,cAAc,EAAA,CAAA;sBAA7D,SAAS;gBAAC,IAAA,EAAA,CAAA,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;;;MEJnC,mCAAmC,CAAA;IAkB9C,WACU,CAAA,gBAA6C,EAC7C,YAA0B,EAC1B,gBAAkC,EAClC,YAA4B,EAC5B,KAAmB,EAAA;AAJnB,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA6B;AAC7C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;AAClC,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAgB;AAC5B,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAc;AAtB7B,QAAA,IAAK,CAAA,KAAA,GAAU,mBAAmB,CAAC;AAEnC,QAAA,IAAW,CAAA,WAAA,GAAG,KAAK,EAAoB,CAAC;AACxC,QAAA,IAAY,CAAA,YAAA,GAAG,KAAK,CAAC;AAErB,QAAA,IAAA,CAAA,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC3C,QAAA,IAAwB,CAAA,wBAAA,GAAG,yBAAyB,CAAC;QACrD,IAAW,CAAA,WAAA,GAAG,CAAe,YAAA,EAAA,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA,GAAA,CAAK,CAAC;AAC9E,QAAA,IAAgB,CAAA,gBAAA,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC9C,OAAO,CACL,qGAAqG,CACtG,EACD;YACE,OAAO,EAAE,IAAI,CAAC,wBAAwB;AACvC,SAAA,CACF,CAAC;KAQE;IAEE,QAAQ,GAAA;;AACZ,YAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;SAC9B,CAAA,CAAA;AAAA,KAAA;IAEK,eAAe,GAAA;;AACnB,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AACpE,YAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AAC7B,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAClD,gBAAA,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;AAC7B,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,gBAAA,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,gBAAA,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,QAAQ,CAAC,aAAa,GAAG,IAAI,EAAA;;AACjC,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,aAAa;AAC7B,kBAAE,aAAa;AACf,kBAAE,IAAI,CAAC,KAAK,KAAK,mBAAmB;sBAClC,IAAI,CAAC,UAAU;AACjB,sBAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3B,YAAA,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC;AAChC,YAAA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;AACnF,YAAA,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,YAAY,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;IAEK,4BAA4B,GAAA;;YAChC,IAAI,IAAI,CAAC,KAAK,KAAK,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACjE,OAAO;AACR,aAAA;AAED,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC;AACzC,YAAA,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AACpD,YAAA,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAChB,gBAAA,MAAM,YAAY,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CACtD,cAAc,CAAC,MAAM,EACrB,IAAI,CACL,CAAqB,CAAC;AACvB,gBAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AACxC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,aAAa,GAAA;;AACjB,YAAA,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;AAC1C,YAAA,IAAI,CAAC,UAAU,GAAG,EAAsB,CAAC;AACzC,YAAA,IAAI,CAAC,kBAAkB,GAAG,EAAsB,CAAC;AACjD,YAAA,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;AAC9B,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,YAAA,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,YAAY,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;IAEK,IAAI,GAAA;;AACR,YAAA,MAAM,sBAAsB,GAC1B,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,KAAK,EAAE;AAC5F,kBAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI;AAC9B,kBAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AAC3B,YAAA,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1D,cAAc,CAAC,MAAM,EACrB,sBAAsB,CACvB,CAAC;AACF,YAAA,IAAI,IAAI,CAAC,KAAK,KAAK,gBAAgB,IAAI,iBAAiB,EAAE;gBACxD,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACvC,OAAO,CAAC,CAAA,iDAAA,CAAmD,CAAC,EAC5D,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAC/B,CAAC;AACF,gBAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,aAAA;AAAM,iBAAA;gBACL,IAAI,CAAC,cAAc,EAAE,CAAC;AACvB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,gBAAgB,CAAC,kBAAkB,EAAA;;AACvC,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,kBAAkB,CAAC;AACpC,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACvC,OAAO,CAAC,8EAA8E,CAAC,EACvF,EAAE,IAAI,EAAE,CACT,CAAC;YAEF,IAAI;AACF,gBAAA,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE;AACzE,oBAAA,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC;AACrB,oBAAA,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC;AAC1B,iBAAA,CAAC,CAAC;AAEH,gBAAA,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACvC,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAED,cAAc,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;AACvC,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtD,SAAA;KACF;IAEa,cAAc,GAAA;;;YAC1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAA,IAAI,CAAC,kBAAkB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,CAAC,CAAC;AAC7F,YAAA,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,EAAE;AACrD,gBAAA,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;AACxD,gBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,aAAA;AAAM,iBAAA,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACpC,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;AACjE,gBAAA,MAAM,YAAY,GAAG;AACnB,oBAAA,WAAW,EAAE,IAAI;AACjB,oBAAA,OAAO,EAAE,GAAG;AACZ,oBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;AACtD,oBAAA,eAAe,EAAE,YAAY;AAC7B,oBAAA,cAAc,EAAE,aAAa;AAC7B,oBAAA,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;iBACrC,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;gBACrD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACnD,aAAA;;AACF,KAAA;AAEa,IAAA,MAAM,CAAC,kBAAkB,EAAA;;YACrC,IAAI,CAAC,kBAAkB,CAAC,YAAY;AAAE,gBAAA,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;YACrF,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAExE,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oBAC1C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAC1D,oBAAA,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC9B,iBAAA;AAAM,qBAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC9C,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;AACjE,oBAAA,MAAM,YAAY,GAAG;AACnB,wBAAA,WAAW,EAAE,IAAI;AACjB,wBAAA,OAAO,EAAE,GAAG;AACZ,wBAAA,eAAe,EAAE,YAAY;AAC7B,wBAAA,cAAc,EAAE,aAAa;AAC7B,wBAAA,UAAU,EAAE,OAAO,CAAC,iCAAiC,CAAC;wBACtD,cAAc,EAAE,kBAAkB,CAAC,IAAI;qBACxC,CAAC;oBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;AAClF,iBAAA;AAAM,qBAAA;AACL,oBAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AACxD,iBAAA;AACF,aAAA;AAAC,YAAA,OAAO,KAAK,EAAE;;AAEf,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;gIAlLU,mCAAmC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,2BAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAnC,mCAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,mCAAmC,uLCdhD,k+PAgOA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,cAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,8CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,8MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,0FAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,wIAAA,EAAA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,sEAAA,EAAA,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,wDAAA,EAAA,MAAA,EAAA,CAAA,eAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iCAAA,EAAA,QAAA,EAAA,yCAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,iCAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,2BAAA,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDlNa,mCAAmC,EAAA,UAAA,EAAA,CAAA;kBAJ/C,SAAS;+BACE,+BAA+B,EAAA,QAAA,EAAA,k+PAAA,EAAA,CAAA;iOAQO,cAAc,EAAA,CAAA;sBAA7D,SAAS;gBAAC,IAAA,EAAA,CAAA,gBAAgB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;;;AEThD,MAAM,cAAc,GAAY;AAC9B,IAAA;AACE,QAAA,IAAI,EAAE,qDAAqD;AAC3D,QAAA,SAAS,EAAE,mCAAmC;AAC/C,KAAA;AACD,IAAA;AACE,QAAA,IAAI,EAAE,uDAAuD;AAC7D,QAAA,SAAS,EAAE,qCAAqC;AACjD,KAAA;AACD,IAAA;AACE,QAAA,IAAI,EAAE,qDAAqD;AAC3D,QAAA,SAAS,EAAE,mCAAmC;AAC/C,KAAA;CACF,CAAC;MAYW,2BAA2B,CAAA;;wHAA3B,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAA3B,2BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,2BAA2B,iBATpC,mCAAmC;QACnC,2BAA2B;QAC3B,qCAAqC;QACrC,mCAAmC;AACnC,QAAA,sCAAsC,CAE9B,EAAA,OAAA,EAAA,CAAA,UAAU,EAAE,YAAY,EAAE,WAAW,EAAAL,IAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA;AAGpC,2BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,2BAA2B,aAF3B,CAAC,2BAA2B,CAAC,EAAA,OAAA,EAAA,CAD9B,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAA,EAAA,CAAA,CAAA;2FAG3E,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAXvC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE;wBACZ,mCAAmC;wBACnC,2BAA2B;wBAC3B,qCAAqC;wBACrC,mCAAmC;wBACnC,sCAAsC;AACvC,qBAAA;AACD,oBAAA,OAAO,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;oBACvF,SAAS,EAAE,CAAC,2BAA2B,CAAC;iBACzC,CAAA;;;MChBY,6BAA6B,CAAA;AA+BxC,IAAA,WAAA,CACU,gBAAkC,EAClC,MAAmB,EACnB,eAAgC,EAChC,UAAuC,EAAA;AAHvC,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;AAClC,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAa;AACnB,QAAA,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;AAChC,QAAA,IAAU,CAAA,UAAA,GAAV,UAAU,CAA6B;QAlCjD,IAAA,CAAA,oBAAoB,GAAG;AACrB,YAAA;AACE,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,KAAK,EAAE,MAAM,IACX,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,KAAK,MAAM;AACzD,oBAAA,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,KAAK,UAAU;AAC/D,gBAAA,aAAa,EAAE,CAAC,wBAAwB,EAAE,oBAAoB,EAAE,qBAAqB,CAAC;AACtF,gBAAA,eAAe,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC;gBAChD,cAAc,EAAE,cAAc,CAAC,QAAQ;AACxC,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,KAAK,EAAE,MAAM,IACX,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,KAAK,MAAM;AACzD,oBAAA,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,KAAK,QAAQ;AAC7D,gBAAA,aAAa,EAAE,CAAC,oBAAoB,EAAE,qBAAqB,CAAC;AAC5D,gBAAA,eAAe,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC;gBAChD,cAAc,EAAE,cAAc,CAAC,MAAM;AACtC,aAAA;AACD,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,KAAK,EAAE,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,KAAK,QAAQ;AAC5E,gBAAA,aAAa,EAAE,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;gBAC9D,eAAe,EAAE,CAAC,qBAAqB,CAAC;gBACxC,cAAc,EAAE,cAAc,CAAC,MAAM;AACtC,aAAA;SACF,CAAC;QAEe,IAAA,CAAA,MAAM,GAAQ,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;KAOlE;AAEE,IAAA,YAAY,CAAC,MAAM,EAAA;;YACvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACpD,YAAA,IAAI,UAAU,EAAE;AACd,gBAAA,MAAM,GAAG,GAAG,CAAG,EAAA,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA,cAAA,EAAiB,UAAU,CAAA,CAAE,CAAC;AAC5E,gBAAA,MAAM,OAAO,GAAkB;AAC7B,oBAAA,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,IAAI,CAAC,MAAM;AACpB,oBAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;iBACzB,CAAC;gBACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACxC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,kBAAkB,CAAC,MAAM,EAAA;AACvB,QAAA,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,CAAC,eAAe,CAAC;AAEnD,QAAA,IAAI,WAAW,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,eAAe,KAAK,QAAQ,EAAE;YAChC,WAAW,GAAG,cAAc,CAAC;AAC9B,SAAA;QAED,OAAO,CAAA,SAAA,EAAY,WAAW,CAAA,CAAE,CAAC;KAClC;AAED,IAAA,iBAAiB,CAAC,MAAsB,EAAA;AACtC,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KACrE;AAEK,IAAA,kBAAkB,CAAC,MAAsB,EAAA;;AAC7C,YAAA,MAAM,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC;AAC3C,YAAA,IAAI,UAAU,CAAC;YAEf,IAAI,WAAW,CAAC,cAAc,EAAE;AAC9B,gBAAA,MAAM,UAAU,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC;AACxF,gBAAA,UAAU,GAAG,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC;AAC1C,aAAA;AAED,YAAA,IAAI,CAAC,UAAU,IAAI,WAAW,CAAC,IAAI,EAAE;AACnC,gBAAA,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,aAAA;YAED,IAAI,CAAC,UAAU,EAAE;AACf,gBAAA,OAAO,IAAI,CAAC;AACb,aAAA;AAED,YAAA,OAAO,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC;SAC9D,CAAA,CAAA;AAAA,KAAA;IAEK,aAAa,CAAC,MAAsB,EAAE,gBAAgC,EAAA;;AAC1E,YAAA,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;AACzF,YAAA,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,kBAAkB,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,cAAc,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;YAC7D,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG,2BAA2B,GAAG,gBAAgB,CAAC,EAAE,CAAC;AAChF,YAAA,MAAM,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC;YACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC7C,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,qBAAqB,CAAC,MAAsB,EAAA;;AAChD,YAAA,MAAM,KAAK,GAAG;AACZ,gBAAA,QAAQ,EAAE;oBACR,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,EAAE;AAC5D,iBAAA;AACD,gBAAA,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;aACzB,CAAC;AACF,YAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;SACtF,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,uBAAuB,CAC3B,MAAsB,EAAA;;AAEtB,YAAA,IAAI,IAAI,CAAC;YACT,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACjF,YAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;AACxE,YAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AACvC,gBAAA,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC7B,gBAAA,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACtC,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEO,IAAA,8BAA8B,CAAC,MAAsB,EAAA;QAC3D,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACjF,OAAO,WAAW,GAAG,WAAW,CAAC,aAAa,GAAG,EAAE,CAAC;KACrD;AAEa,IAAA,aAAa,CAAC,MAAsB,EAAA;;YAChD,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACjF,YAAA,MAAM,WAAW,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;YACtE,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9F,OAAO,UAAU,GAAG,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC;SAClD,CAAA,CAAA;AAAA,KAAA;;0HAhIU,6BAA6B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,eAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,2BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;8HAA7B,6BAA6B,EAAA,CAAA,CAAA;2FAA7B,6BAA6B,EAAA,UAAA,EAAA,CAAA;kBADzC,UAAU;;;MCKE,kCAAkC,CAAA;IAgB7C,WACU,CAAA,YAA2C,EAC3C,YAA0B,EAAA;AAD1B,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAA+B;AAC3C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAfpC,IAAA,CAAA,OAAO,GAA4B;AACjC,YAAA,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC,MAAM,EAAE,EAAE;YAC5D,EAAE,KAAK,EAAE,OAAO,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE;SAC5F,CAAC;AACF,QAAA,IAAA,CAAA,aAAa,GAAG,OAAO,CAAC,sEAAsE,CAAC,CAAC;AAChG,QAAA,IAAgB,CAAA,gBAAA,GAA2D,IAAI,EAAE,CAAC;AAClF,QAAA,IAAO,CAAA,OAAA,GAAG,EAAE,CAAC;KAUT;IACE,QAAQ,GAAA;;AACZ,YAAA,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;AACpB,YAAA,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;SAC5B,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,iBAAiB,CAAC,SAAiB,EAAA;AACjC,QAAA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AACzB,QAAA,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAC1B,GAAG,CAAC,WAAW,IACb,WAAW,CAAC,MAAM,CAChB,UAAU,IACR,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI;aAC1E,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CACtF,CACF,CACF,CAAC;KACH;IAEK,MAAM,GAAA;;AACV,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI;AACF,gBAAA,IAAI,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACzF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE;AAC5D,oBAAA,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,iBAAiB;AACpD,iBAAA,CAAC,CAAC;AACJ,aAAA;AAAC,YAAA,OAAO,EAAE,EAAE;AACX,gBAAA,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACxC,aAAA;AAAS,oBAAA;AACR,gBAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACtB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,aAAa,CAAC,WAAW,EAAA;QACvB,WAAW,CAAC,IAAI,EAAE,CAAC;AACnB,QAAA,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;KAC5B;IAED,gBAAgB,GAAA;AACd,QAAA,OAAO,IAAI,OAAO,CAAC,OAAO,IAAG;AAC3B,YAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,sBAAsB,CAAC;YAC9C,OAAO,CAAC,IAAI,CAAC,CAAC;AAChB,SAAC,CAAC,CAAC;KACJ;;+HA/DU,kCAAkC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAK,6BAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mHAAlC,kCAAkC,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAUlC,uBAAuB,EAAA,WAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EChCpC,6/CA2CA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAJ,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,gBAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,2BAAA,EAAA,gCAAA,EAAA,6BAAA,EAAA,oCAAA,CAAA,EAAA,OAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,cAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,EAAA,cAAA,EAAA,mBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAC,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDrBa,kCAAkC,EAAA,UAAA,EAAA,CAAA;kBAJ9C,SAAS;+BACE,qBAAqB,EAAA,QAAA,EAAA,6/CAAA,EAAA,CAAA;4IAKtB,MAAM,EAAA,CAAA;sBAAd,KAAK;gBAQgD,cAAc,EAAA,CAAA;sBAAnE,SAAS;gBAAC,IAAA,EAAA,CAAA,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAA;;;MEnBzC,kCAAkC,CAAA;AAU7C,IAAA,WAAA,CACU,YAA2C,EAC3C,YAA0B,EAC1B,MAAc,EACd,gBAAkC,EAAA;AAHlC,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAA+B;AAC3C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;AAC1B,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;AACd,QAAA,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;AAR5C,QAAA,IAAe,CAAA,eAAA,GAAoC,IAAI,EAAE,CAAC;AAC1D,QAAA,IAAO,CAAA,OAAA,GAAG,EAAE,CAAC;KAQT;IACE,QAAQ,GAAA;;AACZ,YAAA,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;AACpB,YAAA,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SAClB,CAAA,CAAA;AAAA,KAAA;AAED,IAAA,OAAO,CAAC,SAAiB,EAAA;AACvB,QAAA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AACzB,QAAA,IAAI,CAAC,eAAe,GAAG,IAAI,CACzB,GAAG,CAAC,SAAS,IACX,SAAS,CAAC,MAAM,CACd,QAAQ,IACN,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE;aAChE,CAAC,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CACpF,CACF,CACF,CAAC;KACH;IAEK,MAAM,GAAA;;AACV,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,YAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI;AACF,gBAAA,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;AACxB,gBAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACrF,gBAAA,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChF,aAAA;AAAC,YAAA,OAAO,EAAE,EAAE;AACX,gBAAA,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;AACxC,aAAA;AAAS,oBAAA;AACR,gBAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACtB,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,UAAU,GAAA;;AACd,YAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,YAAA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC9D,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACpB,CAAA,CAAA;AAAA,KAAA;AAEK,IAAA,KAAK,CAAC,gBAAgB,EAAA;;YAC1B,IAAI;gBACF,MAAM,SAAS,GACb,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAAE,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC;AAC5F,gBAAA,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;gBACpB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC3D,gBAAA,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/C,gBAAA,IAAI,SAAS,EAAE;oBACb,IAAI,CAAC,YAAY,EAAE,CAAC;AACrB,iBAAA;AACF,aAAA;AAAC,YAAA,OAAO,EAAE,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC,CAAC;AACrE,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;IAEK,YAAY,GAAA;;YAChB,IAAI;gBACF,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnD,aAAA;AAAC,YAAA,OAAO,EAAE,EAAE;;AAEZ,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;;+HA3EU,kCAAkC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAG,6BAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAAJ,IAAA,CAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,EAAA,CAAA,gBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAlC,kCAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,kCAAkC,qMCb/C,6vFA8EA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,qBAAA,EAAA,QAAA,EAAA,6BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,uBAAA,EAAA,qBAAA,EAAA,gBAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,2BAAA,EAAA,gCAAA,EAAA,6BAAA,EAAA,oCAAA,CAAA,EAAA,OAAA,EAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,EAAA,cAAA,EAAA,mBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,aAAA,EAAA,QAAA,EAAA,8CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,eAAA,EAAA,QAAA,EAAA,2CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,QAAA,EAAA,0FAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,qDAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,EAAA,CAAA,eAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,wDAAA,EAAA,MAAA,EAAA,CAAA,eAAA,CAAA,EAAA,OAAA,EAAA,CAAA,UAAA,CAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,EAAA,cAAA,EAAA,WAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAAI,kCAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;2FDjEa,kCAAkC,EAAA,UAAA,EAAA,CAAA;kBAJ9C,SAAS;+BACE,qBAAqB,EAAA,QAAA,EAAA,6vFAAA,EAAA,CAAA;kMAW6B,0BAA0B,EAAA,CAAA;sBAArF,SAAS;gBAAC,IAAA,EAAA,CAAA,4BAA4B,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;;;MEjB/C,eAAe,CAAA;AAC1B,IAAA,WAAA,CAAoB,YAA2C,EAAA;AAA3C,QAAA,IAAY,CAAA,YAAA,GAAZ,YAAY,CAA+B;KAAI;AAEnE,IAAA,WAAW,CAAC,KAA6B,EAAA;AACvC,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QACvE,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;KACpD;;4GANU,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,6BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;gHAAf,eAAe,EAAA,CAAA,CAAA;2FAAf,eAAe,EAAA,UAAA,EAAA,CAAA;kBAD3B,UAAU;;;ACWX,MAAM,MAAM,GAAY;AACtB,IAAA;QACE,OAAO,EAAE,WAAW,CAAC,MAAM;AAC3B,QAAA,IAAI,EAAE,iBAAiB;AACvB,QAAA,SAAS,EAAE,kCAAkC;AAC7C,QAAA,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC;AACvB,QAAA,IAAI,EAAE,sBAAsB;QAC5B,WAAW,EAAE,CAAC,eAAe,CAAC;AAC/B,KAAA;CACF,CAAC;MAQW,mBAAmB,CAAA;;gHAAnB,mBAAmB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAnB,mBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,mBAAmB,iBALf,kCAAkC,EAAE,kCAAkC,CAC3E,EAAA,OAAA,EAAA,CAAA,UAAU,EAAE,WAAW,CAAA,EAAA,CAAA,CAAA;AAItB,mBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,mBAAmB,EAFnB,SAAA,EAAA,CAAC,eAAe,EAAE,6BAA6B,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,EAFpE,OAAA,EAAA,CAAA,UAAU,EAAE,WAAW,CAAA,EAAA,CAAA,CAAA;2FAItB,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAN/B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE,CAAC,kCAAkC,EAAE,kCAAkC,CAAC;AACtF,oBAAA,OAAO,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;AAClC,oBAAA,eAAe,EAAE,CAAC,kCAAkC,EAAE,kCAAkC,CAAC;oBACzF,SAAS,EAAE,CAAC,eAAe,EAAE,6BAA6B,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;iBAC/E,CAAA;;;AC9BD;;AAEG;;;;"}
{"version":3,"file":"c8y-ngx-components-repository-shared.mjs","sources":["../../repository/shared/advanced-software.service.ts","../../repository/shared/file-download/link-render-type.enum.ts","../../repository/shared/repository.model.ts","../../repository/shared/repository.service.ts","../../repository/shared/file-download/file-download.component.ts","../../repository/shared/file-download/file-download.component.html","../../repository/shared/select-modal/repository-select-modal.component.ts","../../repository/shared/select-modal/repository-select-modal.component.html","../../repository/shared/software-type/software-type.component.ts","../../repository/shared/software-type/software-type.component.html","../../repository/shared/shared-repository.module.ts","../../repository/shared/c8y-ngx-components-repository-shared.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AppStateService } from '@c8y/ngx-components';\nimport { FetchClient, IManagedObject, IResultList, Service } from '@c8y/client';\n\n@Injectable()\nexport class AdvancedSoftwareService extends Service<IManagedObject> {\n  private static readonly applicationName = 'advanced-software-mgmt';\n\n  protected baseUrl = 'service/advanced-software-mgmt';\n  protected listUrl = 'software';\n  protected propertyName = 'softwareList';\n\n  private isAvailable: Promise<boolean>;\n\n  constructor(client: FetchClient, private appState: AppStateService) {\n    super(client);\n  }\n\n  list(filter: object = {}): Promise<IResultList<IManagedObject>> {\n    return super.list(filter);\n  }\n\n  isASMAvailable(): Promise<boolean> {\n    if (this.isAvailable === undefined) {\n      this.isAvailable = this.appState.isApplicationAvailable(\n        AdvancedSoftwareService.applicationName\n      );\n    }\n\n    return this.isAvailable;\n  }\n}\n","export enum LinkRenderType {\n  DOWNLOAD,\n  LINK,\n  TEXTONLY\n}\n","import { IManagedObject } from '@c8y/client';\n\nexport enum RepositoryType {\n  FIRMWARE = 'c8y_Firmware',\n  SOFTWARE = 'c8y_Software',\n  CONFIGURATION = 'c8y_ConfigurationDump'\n}\n\nexport const REPOSITORY_BINARY_TYPES = {\n  [RepositoryType.SOFTWARE]: 'c8y_SoftwareBinary',\n  [RepositoryType.FIRMWARE]: 'c8y_FirmwareBinary',\n  [RepositoryType.CONFIGURATION]: 'c8y_ConfigurationDumpBinary'\n};\n\nexport interface ModalModel {\n  selected?: { id?: string; name?: string; [key: string]: any };\n  version?: string;\n  dependency?: { c8y_Firmware: { version: string } };\n  patchVersion?: string;\n  description?: string;\n  deviceType?: string;\n  softwareType?;\n  binary?: {\n    file?: File;\n    url?: string;\n  };\n}\n\nexport interface RepositoryCategory extends Partial<IManagedObject> {\n  type: string;\n  description?: string;\n  c8y_Filter?: {\n    type: string;\n  };\n  softwareType?: string;\n}\n\nexport interface FirmwareBinary extends Partial<IManagedObject> {\n  type: 'c8y_FirmwareBinary';\n  c8y_Firmware: {\n    version: string;\n    url: string;\n  };\n}\n\nexport interface FirmwarePatchBinary extends FirmwareBinary {\n  c8y_Patch: {\n    dependency: string;\n  };\n}\n\nexport interface SoftwareBinary extends Partial<IManagedObject> {\n  type: string;\n  c8y_Software: {\n    version: string;\n    url: string;\n  };\n}\n\nexport type RepositoryBinary = FirmwareBinary | SoftwareBinary | FirmwarePatchBinary;\n\nexport interface SelectedRepositoryBinary {\n  id?: string;\n  name: string;\n  version: string;\n  url: string;\n  dependency?: string;\n  c8y_Patch?: boolean;\n  isPatch?: boolean;\n  patchDependency?: string;\n}\n\nexport interface DeviceFirmware {\n  version: string;\n  url: string;\n  name: string;\n}\n\nexport interface DeviceSoftware {\n  name: string;\n  version?: string;\n  url: string;\n  softwareType?: string;\n}\n\nexport interface DeviceSoftwareChange extends DeviceSoftware {\n  action: 'install' | 'delete';\n}\n\nexport interface ConfigurationSnapshot {\n  id?: string;\n  time: string;\n  name: string;\n  binaryUrl?: string;\n  binary?: any;\n  binaryType?: any;\n  deviceType?: string;\n  configurationType?: string;\n  description?: string;\n}\n\nexport interface SupportedConfigurationItem {\n  name: string;\n  deviceType?: string;\n  configurationType?: string;\n  isLegacy?: boolean;\n}\n\nexport interface DeviceConfigurationListEmptyState {\n  icon?: string;\n  title?: string;\n  text?: string;\n}\n\nexport enum DeviceConfigurationOperation {\n  UPLOAD_CONFIG = 'c8y_UploadConfigFile',\n  DOWNLOAD_CONFIG = 'c8y_DownloadConfigFile',\n  CONFIG = 'c8y_Configuration',\n  SEND_CONFIG = 'c8y_SendConfiguration'\n}\nexport interface FilterCriteria {\n  name?: string;\n  [key: string]: any;\n}\n\nexport const PRODUCT_EXPERIENCE = {\n  SOFTWARE: {\n    EVENTS: {\n      REPOSITORY: 'softwareRepository',\n      DEVICE_TAB: 'deviceSoftware'\n    },\n    COMPONENTS: {\n      ADD_SOFTWARE_MODAL: 'add-software-modal',\n      DEVICE_SOFTWARE_CHANGES: 'device-software-changes',\n      DEVICE_SOFTWARE_LIST: 'device-software-list'\n    },\n    ACTIONS: {\n      APPLY_SOFTWARE_CHANGES: 'applySoftwareChanges',\n      CLEAR_SOFTWARE_CHANGES: 'clearSoftwareChanges',\n      OPEN_INSTALL_SOFTWARE: 'openInstallSoftwareModal',\n      OPEN_UPDATE_SOFTWARE: 'openUpdateSoftwareModal',\n      DELETE_SOFTWARE: 'deleteSoftware'\n    },\n    RESULTS: {\n      ADD_SOFTWARE: 'addSoftware',\n      ADD_SOFTWARE_VERSION: 'addSoftwareVersion',\n      EDIT_SOFTWARE: 'editSoftware'\n    }\n  },\n  FIRMWARE: {\n    EVENTS: {\n      REPOSITORY: 'firmwareRepository',\n      DEVICE_TAB: 'deviceFirmware'\n    },\n    COMPONENTS: {\n      ADD_FIRMWARE_MODAL: 'add-firmware-modal',\n      ADD_FIRMWAR_PATCH_MODAL: 'add-firmware-patch-modal',\n      FIRMWARE_DEVICE_TAB: 'firmware-device-tab',\n      DEVICE_FIRMWARE_LIST: 'device-firmware-list'\n    },\n    ACTIONS: {\n      FILTER_FIRMWARE_LIST: 'filterFirmwareList',\n      OPEN_INSTALL_FIRMWARE_DIALOG: 'openInstallFirmwareDialog',\n      OPEN_REPLACE_FIRMWARE_DIALOG: 'openReplaceFirmwareDialog',\n      OPEN_INSTALL_FIRMWARE_PATCH_DIALOG: 'openInstallFirmwarePatchDialog'\n    },\n    RESULTS: {\n      ADD_FIRMWARE: 'addFirmware',\n      ADD_FIRMWARE_VERSION: 'addFirmwareVersion',\n      ADD_FIRMWARE_PATCH: 'addFirmwarePatch',\n      EDIT_FIRMWARE: 'editFirmware',\n      CREATE_FIRMWARE_UPDATE_OPERATION: 'createFirmwareUpdateOperation'\n    }\n  },\n  SHARED: {\n    COMPONENTS: {\n      REPOSITORY_SELECT_MODAL: 'repository-select-modal',\n      SELECT_CONFIGURATION_MODAL: 'select-configuration-modal'\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport {\n  EventBinaryService,\n  EventService,\n  IdReference,\n  IEvent,\n  IFetchResponse,\n  IIdentified,\n  IManagedObject,\n  IManagedObjectBinary,\n  InventoryBinaryService,\n  InventoryService,\n  IOperation,\n  IResult,\n  IResultList,\n  OperationService,\n  OperationStatus,\n  QueriesUtil\n} from '@c8y/client';\nimport { AlertService, gettext, OperationRealtimeService } from '@c8y/ngx-components';\nimport {\n  assign,\n  cloneDeep,\n  find,\n  forEach,\n  get,\n  head,\n  isNil,\n  isString,\n  isUndefined,\n  map as _map,\n  omitBy,\n  pick,\n  remove,\n  set\n} from 'lodash-es';\nimport { defer, from, merge, Observable, of, throwError } from 'rxjs';\nimport { filter, map, switchMap, take, takeWhile, withLatestFrom } from 'rxjs/operators';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport {\n  ConfigurationSnapshot,\n  DeviceFirmware,\n  DeviceSoftware,\n  DeviceSoftwareChange,\n  FirmwareBinary,\n  FirmwarePatchBinary,\n  ModalModel,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  REPOSITORY_BINARY_TYPES,\n  SelectedRepositoryBinary,\n  SoftwareBinary\n} from './repository.model';\n\n@Injectable()\nexport class RepositoryService {\n  readonly dateFrom = new Date(0);\n  readonly dateTo = new Date(Date.now() + 86400000); // 1 day in the future\n  private queriesUtil: QueriesUtil;\n\n  constructor(\n    private inventory: InventoryService,\n    private inventoryBinary: InventoryBinaryService,\n    private operation: OperationService,\n    private alert: AlertService,\n    private event: EventService,\n    private operationRealtime: OperationRealtimeService,\n    private eventBinary: EventBinaryService,\n    private advancedSoftwareService: AdvancedSoftwareService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  /**\n   * Lists repository entries of given type.\n   * @param type The type of repository entries to list.\n   * @param options Extra listing options.\n   */\n  listRepositoryEntries(\n    type: RepositoryType,\n    options?: {\n      /** Additional query. */\n      query?: any;\n      /** (deprecated - to be removed) Only include entries with matching partial names. */\n      partialName?: string;\n      /** Include entries with matching partial text in the specified properties. */\n      partialTextFilter?: { partialText: string; properties: string[] };\n      /** Exclude legacy entries. */\n      skipLegacy?: boolean;\n      /** Exclude default ordering. */\n      skipDefaultOrder?: boolean;\n      /** Other request params. */\n      params?: any;\n    }\n  ) {\n    const defaultOrder = [{ name: 1 }];\n    const defaultFilters = { type };\n    const legacyFilters = { __has: `url` };\n    let filters = {};\n\n    let fullQuery = (options && options.query) || {};\n    if (!options || (options && !options.skipDefaultOrder)) {\n      fullQuery = this.queriesUtil.addOrderbys(fullQuery, defaultOrder, 'prepend');\n    }\n\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, defaultFilters);\n\n    if (options && options.partialTextFilter) {\n      const { partialText, properties } = options.partialTextFilter;\n      const orFilter = { __or: properties.map(property => ({ [property]: `*${partialText}*` })) };\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, orFilter);\n    }\n\n    if (options && options.partialName) {\n      // backwards compatibility if\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { name: `*${options.partialName}*` });\n    }\n\n    if (options && options.skipLegacy) {\n      fullQuery = this.queriesUtil.addAndFilter(fullQuery, { __not: legacyFilters });\n    }\n\n    filters = {\n      query: this.queriesUtil.buildQuery(fullQuery),\n      pageSize: 50,\n      withTotalPages: true,\n      ...((options && options.params) || {})\n    };\n    return this.inventory.list(filters);\n  }\n\n  // TODO: merge with create()\n  async save(data: ModalModel, type: RepositoryType, mo: Partial<IManagedObject> = {}) {\n    switch (type) {\n      case RepositoryType.CONFIGURATION: {\n        Object.assign(mo, {\n          type: RepositoryType.CONFIGURATION,\n          configurationType: data.selected ? data.selected.configurationType : undefined,\n          name: data.version,\n          description: data.description,\n          deviceType: data.deviceType,\n          c8y_Global: {}\n        });\n        if (!data.deviceType && mo.id) {\n          mo.deviceType = null;\n        }\n        if (!data.selected && mo.id) {\n          mo.configurationType = null;\n        }\n        break;\n      }\n    }\n\n    const existingUrl = mo.url;\n    if (data.binary.url) {\n      mo.url = data.binary.url;\n    } else if (data.binary.file) {\n      const response = await this.inventoryBinary.create(data.binary.file, {\n        c8y_Global: {}\n      } as Partial<IManagedObject>);\n      mo.url = response.data.self;\n    }\n\n    if (mo.id) {\n      return this.updateEntry(mo, existingUrl);\n    }\n    return this.createEntry(mo);\n  }\n\n  async create(modal: ModalModel, type: RepositoryType) {\n    switch (type) {\n      case RepositoryType.FIRMWARE:\n      case RepositoryType.SOFTWARE:\n        return this.createFirmwareOrSoftware(modal, type);\n    }\n  }\n\n  async createFirmwareOrSoftware(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<RepositoryCategory> {\n    let binary: IManagedObjectBinary;\n    let binaryURL: string;\n    let repositoryEntry: RepositoryCategory;\n    let repositoryBinary: FirmwareBinary | SoftwareBinary;\n    const mos = [];\n    const {\n      selected: { id: selectedId },\n      binary: { file, url }\n    } = modal;\n    try {\n      if (file) {\n        ({ data: binary } = await this.saveBinary(file));\n        ({ self: binaryURL } = binary);\n        mos.push(binary);\n      } else {\n        binaryURL = url;\n      }\n\n      ({ data: repositoryEntry } = await this.createOrUpdateRepositoryEntry(modal, type));\n      if (isNil(selectedId)) {\n        mos.push(repositoryEntry);\n      }\n\n      ({ data: repositoryBinary } = await this.createRepositoryBinary(\n        modal,\n        binaryURL,\n        type,\n        repositoryEntry\n      ));\n      mos.push(repositoryBinary);\n\n      if (file) {\n        await this.linkBinary(repositoryBinary, binary);\n      }\n\n      return repositoryEntry;\n    } catch (error) {\n      this.cleanUp(mos);\n      this.errorMsg();\n\n      // Propagate error\n      throw error;\n    }\n  }\n\n  saveBinary(file: File): Promise<IResult<IManagedObjectBinary>> {\n    return this.inventoryBinary.create(file, { c8y_Global: {} } as Partial<IManagedObject>);\n  }\n\n  createOrUpdateRepositoryEntry(\n    modal: ModalModel,\n    type: RepositoryType\n  ): Promise<IResult<RepositoryCategory>> {\n    const {\n      selected: { id, name },\n      description,\n      deviceType\n    } = modal;\n\n    const mo = {\n      id,\n      name: id ? undefined : name,\n      description,\n      type: id ? undefined : type,\n      c8y_Global: {}\n    };\n\n    if (deviceType) {\n      set(mo, 'c8y_Filter.type', deviceType);\n    }\n\n    if (modal.softwareType) {\n      set(mo, 'softwareType', modal.softwareType.softwareType);\n    }\n\n    return id\n      ? (this.inventory.update(mo) as Promise<IResult<RepositoryCategory>>)\n      : (this.inventory.create(mo) as Promise<IResult<RepositoryCategory>>);\n  }\n\n  createRepositoryBinary(\n    modal: ModalModel,\n    binaryURL: string,\n    type: RepositoryType,\n    parent: RepositoryCategory\n  ): Promise<IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>> {\n    const mo = this.prepareRepositoryBinaryMO(modal, binaryURL, type);\n\n    return this.inventory.childAdditionsCreate(mo, parent) as Promise<\n      IResult<FirmwareBinary | SoftwareBinary | FirmwarePatchBinary>\n    >;\n  }\n\n  prepareRepositoryBinaryMO(modal: ModalModel, binaryURL: string, type: RepositoryType) {\n    const { version, patchVersion, dependency } = modal;\n    const result = {\n      type: REPOSITORY_BINARY_TYPES[type],\n      [type]: {\n        url: binaryURL\n      },\n      c8y_Global: {}\n    };\n\n    if (dependency) {\n      set(result, [type, 'version'], patchVersion);\n      assign(result, {\n        c8y_Patch: {\n          dependency: dependency.c8y_Firmware.version\n        }\n      });\n    } else {\n      set(result, [type, 'version'], version);\n    }\n    return result;\n  }\n\n  async linkBinary(\n    repositoryBinary: FirmwareBinary | SoftwareBinary,\n    binary: IManagedObjectBinary\n  ) {\n    const { id: repositoryBinaryId } = repositoryBinary;\n    if (binary) {\n      const { id: binaryId } = binary;\n      return this.inventory.childAdditionsAdd(binaryId, repositoryBinaryId);\n    }\n  }\n\n  cleanUp(mosToDelete: IIdentified[]) {\n    mosToDelete.forEach(mo => {\n      const { c8y_IsBinary } = mo;\n      isUndefined(c8y_IsBinary) ? this.delete(mo) : this.inventoryBinary.delete(mo);\n    });\n  }\n\n  delete(entity: IIdentified): Promise<IResult<null>> {\n    return this.inventory.delete(entity, { forceCascade: true });\n  }\n\n  errorMsg() {\n    const msg = gettext('Failed to save');\n    this.alert.danger(msg);\n  }\n\n  getBaseVersionsCount$(entry: IManagedObject): Observable<number> {\n    if (this.isLegacyEntry(entry)) {\n      return of(1);\n    }\n    return from(this.listBaseVersions(entry, { pageSize: 1, withTotalPages: true })).pipe(\n      map(({ paging }) => paging.totalPages)\n    );\n  }\n\n  getBaseVersionFromMO(mo: RepositoryBinary): string {\n    return this.isPatch(mo) ? get(mo, 'c8y_Patch.dependency') : get(mo, 'c8y_Firmware.version');\n  }\n\n  isPatch(mo: RepositoryBinary): boolean {\n    return !!get(mo, 'c8y_Patch.dependency');\n  }\n\n  getPatchVersionsCount$(entry: IManagedObject, baseVersion: FirmwareBinary): Observable<number> {\n    if (this.isLegacyEntry(baseVersion)) {\n      return of(0);\n    }\n    return from(\n      this.listPatchVersions(entry, baseVersion, { pageSize: 1, withTotalPages: true })\n    ).pipe(map(({ paging }) => paging.totalPages));\n  }\n\n  isLegacyEntry(entry: Partial<IManagedObject>): boolean {\n    return Boolean(entry.url);\n  }\n\n  /**\n   * Lists all versions (base and patch ones) of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listAllVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const VERSION_FILTER_ORDER = {\n      __filter: {},\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, VERSION_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists base versions of given top level entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param params Additional query params.\n   */\n  listBaseVersions(entry: Partial<IManagedObject>, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return this.getBaseVersionResultListForLegacyEntry(entry);\n    }\n\n    const NO_PATCH_FILTER_ORDER = {\n      __filter: {\n        __not: { __has: 'c8y_Patch' }\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, NO_PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listPatchVersions(entry: IManagedObject, baseVersion: FirmwareBinary | string, params = {}) {\n    const version = isString(baseVersion) ? baseVersion : get(baseVersion, 'c8y_Firmware.version');\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        'c8y_Patch.dependency': version\n      },\n      __orderby: [{ 'creationTime.date': -1 }, { creationTime: -1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  /**\n   * Lists patch versions of given base version under the entry including the base version.\n   * Versions are ordered by creation time (assuming the earlier created, the older the version).\n   * In terms of legacy base version the entry gets transformed to fit the needed data model.\n   * @param entry Top level repository entry.\n   * @param baseVersion Base version.\n   * @param params Additional query params.\n   */\n  listBaseVersionAndPatches(entry: IManagedObject, baseVersion: IManagedObject, params = {}) {\n    if (this.isLegacyEntry(entry)) {\n      return Promise.resolve({\n        data: [\n          Object.assign(\n            {\n              c8y_Firmware: {\n                version: entry.version,\n                url: entry.url\n              }\n            },\n            entry\n          )\n        ]\n      });\n    }\n\n    const PATCH_FILTER_ORDER = {\n      __filter: {\n        __or: {\n          'c8y_Patch.dependency': baseVersion.c8y_Firmware.version,\n          'c8y_Firmware.version': baseVersion.c8y_Firmware.version\n        }\n      },\n      __orderby: [{ 'c8y_Patch.dependency': 1 }, { 'c8y_Firmware.version': 1 }]\n    };\n    return this.listChildren(entry, PATCH_FILTER_ORDER, params);\n  }\n\n  listChildren(entry: Partial<IManagedObject>, filters = {}, params: any = {}) {\n    const childrenFilters = { __bygroupid: entry.id };\n    const query = this.queriesUtil.addAndFilter(filters, childrenFilters);\n    // FIXME: needed because of issue in forOf directive (...)\n    params.withTotalPages = true;\n    return this.inventory.listQuery(query, params);\n  }\n\n  /**\n   * Fetches all items from the list starting with the provided page.\n   * @param firstPage The first page of the list to fetch all items for.\n   */\n  async fetchAllItemsFromList(firstPage) {\n    let allItems;\n\n    if (!firstPage.then) {\n      allItems = [...firstPage];\n    } else {\n      let { paging, data: items } = await firstPage;\n      allItems = [...items];\n\n      while (paging && paging.nextPage) {\n        ({ paging, data: items } = await paging.next());\n        allItems = [...allItems, ...items];\n      }\n    }\n\n    return allItems;\n  }\n\n  /**\n   * Gets top level repository entry managed object for base or patch version.\n   * @param mo Base or patch version managed object with parents.\n   */\n  getRepositoryEntryMO$(mo: IManagedObject): Observable<IManagedObject | undefined> {\n    if (!mo) {\n      return of(undefined);\n    }\n    const [reference] = get(mo, 'additionParents.references');\n    const id = get(reference, 'managedObject.id');\n    return id\n      ? from(this.inventory.detail(id, { withChildren: false })).pipe(map(({ data }) => data))\n      : of(undefined);\n  }\n  /**\n   * Gets base or patch version managed object.\n   * @param deviceRepositoryFragment Device repository fragment.\n   * @param type Top level repository entry type.\n   * @param configuration Configuration object with options:\n   * - **skipLegacy** - `boolean` - Exclude legacy entries.\n   * - **filters** - `object` - Filter object.\n   *\n   * @deprecated as it doesn't support 'missing url' case\n   */\n  getRepositoryBinaryMoByVersion(\n    deviceRepositoryFragment: DeviceFirmware | DeviceSoftware,\n    type: RepositoryType,\n    { skipLegacy = false, filters = {} }: { skipLegacy?: boolean; filters?: object } = {}\n  ): Promise<IManagedObject> {\n    const { version, url, name } = deviceRepositoryFragment;\n    const repositoryBinaryType = REPOSITORY_BINARY_TYPES[type];\n    let query;\n    const newModelBaseVersionQuery = {\n      [`${type}.version`]: version,\n      [`${type}.url`]: url,\n      type: repositoryBinaryType\n    };\n    const legacyVersionQuery = { url, type, name };\n    filters = { withChildren: false, withParents: true, ...filters };\n\n    if (skipLegacy) {\n      query = {\n        __and: {\n          ...newModelBaseVersionQuery\n        }\n      };\n    } else {\n      query = {\n        __or: [{ __and: { ...newModelBaseVersionQuery } }, { __and: { ...legacyVersionQuery } }]\n      };\n    }\n\n    return this.inventory.listQuery(query, filters).then(({ data }) => head(data));\n  }\n\n  getBinaryName$(binaryUrl: string): Observable<string> {\n    if (!binaryUrl) {\n      return of('---');\n    }\n\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId) {\n      return of(binaryUrl);\n    }\n    return defer(() => this.inventory.detail(binaryId).then(result => result.data)).pipe(\n      map(mo => mo.name)\n    );\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries of specified type matching the type of provided device.\n   * @param repositoryType The type of repository entries which will be queried with the generated query.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   */\n\n  getDeviceTypeQuery(repositoryType: RepositoryType, device: IManagedObject): object {\n    let result = { type: repositoryType };\n    if (repositoryType === RepositoryType.CONFIGURATION) {\n      if (device.type) {\n        result = this.queriesUtil.addAndFilter(result, {\n          __or: [{ deviceType: device.type }, { __not: { __has: `deviceType` } }]\n        });\n      }\n    } else {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [\n          { 'c8y_Filter.type': device.type },\n          { 'c8y_Filter.type': '' },\n          { __not: { __has: `c8y_Filter.type` } }\n        ]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find\n   * repository entries matching the predefined software types provided in the device.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param query The query to which the software types filters will be attached. Default value is an object containg repository type software.\n   */\n  getSoftwareTypeQuery(device: IManagedObject, query?: object): object {\n    let result = { ...(query || {}), type: RepositoryType.SOFTWARE };\n\n    if (device.c8y_SupportedSoftwareTypes) {\n      result = this.queriesUtil.addAndFilter(result, {\n        __or: [device.c8y_SupportedSoftwareTypes.map(type => ({ softwareType: type }))]\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an inventory query object which can be used to find configuration repository entries\n   * matching the type of provided device and specified configuration type.\n   * @param device The device for which matching repository entries will be queried with the generated query.\n   * @param configurationType Configuration type for which matching repository entries will be queried with the generated query.\n   */\n  getConfigurationTypeQuery(device: IManagedObject, configurationType: string): object {\n    const query = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION, device);\n    return this.queriesUtil.addAndFilter(query, {\n      __or: [\n        { configurationType },\n        { configurationType: '' },\n        { __not: { __has: `configurationType` } }\n      ]\n    });\n  }\n\n  /**\n   * Gets the list of software installed in the device in the uniform format.\n   * Supports c8y_SoftwareList and c8y_Software fragments.\n   * @param device The device whose software list should be returned.\n   */\n  getDeviceSoftwareList(device: IManagedObject): DeviceSoftware[] {\n    if (device.c8y_SoftwareList) {\n      return cloneDeep(device.c8y_SoftwareList);\n    }\n    if (device.c8y_Software) {\n      return _map(device.c8y_Software, (version, name) => ({ name, version }));\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a software update operation for given device and the list of changes, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param changes The list of software changes which should be applied.\n   */\n  async createSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation = await this.getSoftwareUpdateOperation(device, changes);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a software update operation for given device and changes.\n   * Returned operation type depends on device's supported operations.\n   * Supports c8y_SoftwareUpdate, c8y_SoftwareList, and c8y_Software operations.\n   * @param device The device for which operation should be prepared.\n   * @param changes The list of software changes which should be applied.\n   */\n  async getSoftwareUpdateOperation(\n    device: IManagedObject,\n    changes: DeviceSoftwareChange[]\n  ): Promise<IOperation> {\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Apply software changes: ${changes\n        .map(\n          change =>\n            `${change.action} \"${change.name}\"${\n              change.version ? ` (version: ${change.version})` : ''\n            }`\n        )\n        .join(', ')}`\n    };\n    if (device.c8y_SupportedOperations.includes('c8y_SoftwareUpdate')) {\n      operation.c8y_SoftwareUpdate = (cloneDeep(changes) || []).map(change =>\n        omitBy(change, isNil)\n      );\n    } else if (device.c8y_SupportedOperations.includes('c8y_SoftwareList')) {\n      operation.c8y_SoftwareList = cloneDeep(\n        await this.getCurrentSoftware(device, 'c8y_SoftwareList', [])\n      );\n      changes.forEach(change => {\n        const deviceSoftware: DeviceSoftware = pick(omitBy(change, isNil), [\n          'name',\n          'version',\n          'url',\n          'softwareType'\n        ]);\n        if (change.action === 'delete') {\n          remove(operation.c8y_SoftwareList, deviceSoftware);\n        }\n        if (change.action === 'install') {\n          const softwareItemToUpdateIdx = operation.c8y_SoftwareList.findIndex(\n            item => item.name === change.name\n          );\n          if (softwareItemToUpdateIdx > -1) {\n            // update software\n            operation.c8y_SoftwareList.splice(softwareItemToUpdateIdx, 1, deviceSoftware);\n          } else {\n            // install software\n            operation.c8y_SoftwareList.push(deviceSoftware);\n          }\n        }\n      });\n    } else if (device.c8y_SupportedOperations.includes('c8y_Software')) {\n      operation.c8y_Software = cloneDeep(await this.getCurrentSoftware(device, 'c8y_Software', {}));\n      changes.forEach(change => {\n        if (change.action === 'delete') {\n          delete operation.c8y_Software[change.name];\n        }\n        if (change.action === 'install') {\n          operation.c8y_Software[change.name] = change.version;\n        }\n      });\n    }\n    return operation;\n  }\n\n  /**\n   * Extracts the list of device software changes from given operation in the context of given device.\n   * @param operation The operation from which the list should be extracted.\n   * @param device The target device of the operation.\n   */\n  async getDeviceSoftwareChangesFromOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    if (operation.c8y_SoftwareUpdate) {\n      return cloneDeep(operation.c8y_SoftwareUpdate);\n    }\n    if (operation.c8y_SoftwareList) {\n      return await this.getDeviceSoftwareChangesFromSoftwareListOperation(operation, device);\n    }\n    if (operation.c8y_Software) {\n      return await this.getDeviceSoftwareChangesFromSoftwareOperation(operation, device);\n    }\n    return [];\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and the selected repository binary, and sends it to the device.\n   * @param device The device which the operation should be prepared for and sent to.\n   * @param selectedOption The selected repository binary option.\n   */\n  async createFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): Promise<IOperation> {\n    const operation = this.getFirmwareUpdateOperation(device, selectedOption);\n    return (await this.operation.create(operation)).data;\n  }\n\n  /**\n   * Prepares a firmware update operation for given device and selected version.\n   * Supports c8y_Firmware operation.\n   * @param device The device for which operation should be prepared.\n   * @param selectedOption Selected firmware version.\n   */\n  getFirmwareUpdateOperation(\n    device: IManagedObject,\n    selectedOption: SelectedRepositoryBinary\n  ): IOperation {\n    delete selectedOption.id;\n\n    const operation: IOperation = {\n      deviceId: device.id,\n      description: `Update firmware to: \"${selectedOption.name}\"${\n        selectedOption.version ? ` (version: ${selectedOption.version})` : ''\n      }`,\n      c8y_Firmware: { ...selectedOption }\n    };\n\n    return operation;\n  }\n\n  /**\n   * Prepares a configuration file upload operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param isLegacy  A legacy operation is created without a configurationType.\n   */\n  getUploadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    isLegacy = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Retrieve configuration snapshot from device ${device.name}`,\n        c8y_UploadConfigFile: {}\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Retrieve ${configurationType} configuration snapshot from device ${device.name}`,\n      c8y_UploadConfigFile: {\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Prepares a configuration file download operation for given device and configuration type.\n   * @param device The device for which operation should be prepared.\n   * @param configurationType Selected configuration type.\n   * @param binaryUrl The url of a binary to be downloaded.\n   * @param isLegacy A legacy operation is created without a configurationType.\n   */\n  getDownloadConfigurationFileOperation(\n    device: IManagedObject,\n    configurationType: string,\n    configSnapshot: ConfigurationSnapshot,\n    isLegacy = false\n  ): IOperation {\n    if (isLegacy) {\n      return {\n        deviceId: device.id,\n        description: `Send configuration snapshot ${configSnapshot.name} to device ${device.name}`,\n        c8y_DownloadConfigFile: {\n          url: configSnapshot.binaryUrl,\n          c8y_ConfigurationDump: {\n            id: configSnapshot.id\n          }\n        }\n      };\n    }\n    return {\n      deviceId: device.id,\n      description: `Send configuration snapshot ${configSnapshot.name} of configuration type ${configurationType} to device ${device.name}`,\n      c8y_DownloadConfigFile: {\n        url: configSnapshot.binaryUrl,\n        type: configurationType\n      }\n    };\n  }\n\n  /**\n   * Gets the last firmware update operation for given device.\n   * Looks for c8y_Firmware operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastFirmwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getFirstMatchingOperation([{ ...filters, fragmentType: 'c8y_Firmware' }]);\n  }\n\n  /**\n   * Gets the last software update operation for given device.\n   * Looks for c8y_SoftwareUpdate, c8y_SoftwareList, or c8y_Software operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastSoftwareUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_SoftwareUpdate' },\n      { ...filters, fragmentType: 'c8y_SoftwareList' },\n      { ...filters, fragmentType: 'c8y_Software' }\n    ]);\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * If a query returns at least one operation, the first one will be returned.\n   * Otherwise the next query will be performed.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getFirstMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation = null;\n\n    for (const filters of filtersList) {\n      const operations = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        matchingOperation = operations[0];\n        break;\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Iterates over the list of filters and queries the operations.\n   * It compares the operations retrieved by the queries by 'creationTime'\n   * and return the latest one.\n   * If none of the queries returns any operation, null will be returned.\n   * @param filtersList The list of filters for the queries.\n   */\n  async getLatestMatchingOperation(filtersList: any[]): Promise<IOperation> {\n    let matchingOperation: IOperation = null;\n\n    for (const filters of filtersList) {\n      const operations: IOperation[] = (await this.operation.list(filters)).data;\n      if (operations.length) {\n        if (matchingOperation) {\n          matchingOperation =\n            new Date(matchingOperation.creationTime).getTime() <\n            new Date(operations[0].creationTime).getTime()\n              ? operations[0]\n              : matchingOperation;\n        } else {\n          matchingOperation = operations[0];\n        }\n      }\n    }\n\n    return matchingOperation;\n  }\n\n  /**\n   * Creates the operation and returns an observable to track its progress.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to create and track.\n   */\n  createObservedOperation(operation: IOperation): Observable<IOperation> {\n    return from(this.operation.create(operation)).pipe(\n      map(({ data }) => data),\n      take(1),\n      switchMap(createdOperation => this.observeOperation(createdOperation))\n    );\n  }\n\n  /**\n   * Returns an observable to track progress of given operation.\n   * Fails the observable when the operation returns FAILED status.\n   * Completes the observable when the operation returns SUCCESSFUL status.\n   * @param operation The operation to be observed.\n   */\n  observeOperation(operation: IOperation): Observable<IOperation> {\n    const observedOperation$ = of(operation);\n    const operationUpdates$ = observedOperation$.pipe(\n      switchMap(observedOperation => this.operationRealtime.onAll$(observedOperation.deviceId)),\n      map(({ data }) => data as IOperation),\n      withLatestFrom(observedOperation$),\n      filter(([operationUpdate, observedOperation]) => operationUpdate.id === observedOperation.id),\n      switchMap(([operationUpdate]) => {\n        if (operationUpdate.status === OperationStatus.FAILED) {\n          return throwError(operationUpdate);\n        }\n        return of(operationUpdate);\n      }),\n      takeWhile(operationUpdate => operationUpdate.status !== OperationStatus.SUCCESSFUL, true)\n    );\n    return merge(observedOperation$, operationUpdates$);\n  }\n\n  /**\n   * Gets a single event with latest creationTime for the given device Id and event type.\n   * @param deviceId The device Id for which the events should be queried.\n   * @param type Event type.\n   */\n  async getLatestConfigurationEvent(\n    deviceId: string | number,\n    type: string\n  ): Promise<IEvent | undefined> {\n    const eventFilter: object = {\n      source: deviceId,\n      type,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      pageSize: 1\n    };\n\n    const { data } = await this.event.list(eventFilter);\n    return data[0];\n  }\n\n  /**\n   * Gets a list of operations for the given device Id, and operation type.\n   * @param deviceId The device Id for which the operation should be queried.\n   * @param operationType Operation type fragment.\n   */\n  async getConfigFileOperationList(\n    deviceId: string | number,\n    operationType: string\n  ): Promise<IOperation[]> {\n    const operationFilter: object = {\n      deviceId,\n      fragmentType: operationType,\n      dateFrom: this.dateFrom.toISOString(),\n      dateTo: this.dateTo.toISOString(),\n      revert: true,\n      pageSize: 2000\n    };\n\n    return (await this.operation.list(operationFilter)).data;\n  }\n\n  /**\n   * Gets latest uploaded configuration snapshot for the given device, and configuration type.\n   * @param device The device for which the configuration snapshot was uploaded.\n   * @param configurationType Selected configuration type.\n   */\n  async getConfigSnapshot(\n    device: IManagedObject,\n    configurationType: string\n  ): Promise<ConfigurationSnapshot | undefined> {\n    const event: IEvent = await this.getLatestConfigurationEvent(device.id, configurationType);\n    let configSnapshot: ConfigurationSnapshot;\n    if (event) {\n      configSnapshot = {\n        time: event.time,\n        name: event.text,\n        deviceType: device.type,\n        configurationType\n      };\n      try {\n        configSnapshot.binary = await (await this.eventBinary.download(event)).text();\n        if (event.c8y_IsBinary) {\n          configSnapshot.binaryType = event.c8y_IsBinary.type;\n        }\n      } catch (ex) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return configSnapshot;\n  }\n\n  async getLegacyConfigSnapshot(deviceId) {\n    let configSnapshot: ConfigurationSnapshot;\n    let mo;\n    const device = (await this.inventory.detail(deviceId, { withChildren: false })).data;\n    const snapshotId = device.c8y_ConfigurationDump && device.c8y_ConfigurationDump.id;\n    if (!snapshotId) {\n      return;\n    }\n\n    try {\n      mo = (await this.inventory.detail(snapshotId)).data;\n    } catch (ex) {\n      // do nothing\n    }\n    if (mo) {\n      configSnapshot = {\n        time: mo.creationTime,\n        name: mo.name\n      };\n      configSnapshot.binary = await this.getBinaryText(mo.url, { allowExternal: false });\n    }\n    return configSnapshot;\n  }\n\n  /**\n   * Returns a binary object as text.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  async getBinaryText(\n    binaryUrl: string,\n    options: { allowExternal: boolean; noAlerts?: boolean }\n  ): Promise<string> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    let res;\n    if (!binaryId) {\n      if (options.allowExternal) {\n        res = await this.getExternalBinaryResponse(binaryUrl, options);\n      }\n    } else {\n      res = await this.getInternalBinaryResponse(binaryId, options);\n    }\n    if (!res) {\n      return null;\n    }\n    return res.text();\n  }\n\n  /**\n   * Returns a binary object as File.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **allowExternal** - `boolean` - allows downloading external binary file\n   */\n  async getBinaryFile(binaryUrl: string, options: { allowExternal: boolean }): Promise<File> {\n    const binaryId = this.inventoryBinary.getIdFromUrl(binaryUrl);\n    if (!binaryId && !options.allowExternal) {\n      return null;\n    }\n    // @TODO: note that it doesn't solve issue with external binary here, such url won't have binaryId, so we won't know the name or contentType to use in File constructor, let's add a @FIXME comment for now?\n    const { name, contentType } = (await this.inventory.detail(binaryId)).data;\n    const res = !!binaryId\n      ? await this.getInternalBinaryResponse(binaryId)\n      : await this.getExternalBinaryResponse(binaryUrl);\n    const arrayBuffer = await res.arrayBuffer();\n    return new File([arrayBuffer], name, { type: contentType });\n  }\n\n  /**\n   * Gets the last configuration update operation for given device.\n   * Looks for c8y_Configuration and c8y_SendConfiguration operations.\n   * @param deviceId The ID of the device to find an operation for.\n   */\n  async getLastConfigUpdateOperation(deviceId: string | number): Promise<IOperation> {\n    const filters = {\n      deviceId,\n      dateFrom: new Date(0).toISOString(),\n      dateTo: new Date(Date.now()).toISOString(),\n      revert: true,\n      pageSize: 1\n    };\n    return this.getLatestMatchingOperation([\n      { ...filters, fragmentType: 'c8y_Configuration' },\n      { ...filters, fragmentType: 'c8y_SendConfiguration' }\n    ]);\n  }\n\n  /**\n   * Prepares a configuration download operation for given device and its current configuration.\n   * Supports c8y_SendConfiguration operation.\n   * @param device The device for which operation should be prepared.\n   */\n  createTextBasedConfigurationReloadOperation(device: IManagedObject): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Requested current configuration'),\n      c8y_SendConfiguration: {}\n    };\n  }\n\n  /**\n   * Prepares a configuration update operation for the given device.\n   * Supports c8y_Configuration operation.\n   * @param device The device for which operation should be prepared.\n   * @param config The configuration which will update the existing one.\n   */\n  createTextBasedConfigurationUpdateOperation(device: IManagedObject, config: string): IOperation {\n    return {\n      deviceId: device.id,\n      description: gettext('Configuration update'),\n      c8y_Configuration: {\n        config\n      }\n    };\n  }\n\n  async getBinary(binaryId: IdReference): Promise<IFetchResponse> {\n    try {\n      return await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      const msg = gettext('Could not get the binary.');\n      this.alert.danger(msg);\n    }\n  }\n\n  /**\n   * Gets all available snapshots from the repository for the given device.\n   * @param device The device for which the snapshots should be prepared.\n   * @param configurationType Selected configuration type.\n   */\n  async getSnapshotsFromRepository(device, configurationType) {\n    const searchQuery = this.getConfigurationTypeQuery(device, configurationType);\n    const res = await this.listRepositoryEntries(RepositoryType.CONFIGURATION, {\n      query: searchQuery,\n      params: { pageSize: 100 }\n    });\n    return res.data;\n  }\n\n  /**\n   * Checks if a device already have a given software installed\n   * @param deviceId Id of the device to be checked\n   * @param software The software to be checked\n   */\n  async isSoftwareInstalledOnDevice(\n    deviceId: string | number,\n    software: DeviceSoftware\n  ): Promise<boolean> {\n    if (!(await this.advancedSoftwareService.isASMAvailable())) {\n      return false;\n    }\n\n    const queryFilter = { deviceId };\n    if (software?.name) {\n      set(queryFilter, 'name', software.name);\n    }\n    if (software?.version) {\n      set(queryFilter, 'version', software.version);\n    }\n    return this.advancedSoftwareService.list(queryFilter).then(result => !!result.data?.length);\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryId binary ID\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getInternalBinaryResponse(\n    binaryId: IdReference,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      res = await this.inventoryBinary.download(binaryId);\n    } catch (ex) {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the binary.');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Returns a binary object.\n   * @param binaryUrl The URL to find binary\n   * @param options The object with additional options:\n   * - **noAlerts** - `boolean` - do not display an alert message; defaults to `false`\n   */\n  private async getExternalBinaryResponse(\n    binaryUrl: string,\n    options: { noAlerts?: boolean } = {}\n  ): Promise<IFetchResponse> {\n    let res;\n    try {\n      const fetchRes = await fetch(binaryUrl);\n      if (fetchRes.status >= 400) {\n        throw res;\n      }\n      res = fetchRes;\n    } catch {\n      if (!options.noAlerts) {\n        const msg = gettext('Could not get the external binary');\n        this.alert.danger(msg);\n      }\n    }\n    return res;\n  }\n\n  private async createEntry(mo: Partial<IManagedObject>) {\n    const binaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    const newMo = await this.inventory.create(mo);\n    if (binaryId) {\n      await this.inventory.childAdditionsAdd(binaryId, newMo.data);\n    }\n    return newMo;\n  }\n\n  private async updateEntry(mo: Partial<IManagedObject>, url) {\n    const existingBinaryId = await this.inventoryBinary.getIdFromUrl(url);\n    const newBinaryId = await this.inventoryBinary.getIdFromUrl(mo.url);\n    if (existingBinaryId && existingBinaryId !== newBinaryId) {\n      const id = this.inventoryBinary.getIdFromUrl(url);\n      await this.inventoryBinary.delete(id);\n    }\n    if (newBinaryId) {\n      await this.inventory.childAdditionsAdd(newBinaryId, mo);\n    }\n    return this.inventory.update(mo);\n  }\n\n  private getBaseVersionResultListForLegacyEntry(entry) {\n    return Promise.resolve({\n      res: {} as IFetchResponse,\n      data: [\n        {\n          ...entry,\n          [entry.type]: {\n            version: entry.version,\n            url: entry.url\n          }\n        }\n      ]\n    } as IResultList<IManagedObject>);\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareListOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftwareList = await this.getCurrentSoftware(device, 'c8y_SoftwareList', []);\n    forEach(operation.c8y_SoftwareList, operationSoftware => {\n      const deviceSoftware = find(deviceSoftwareList, { name: operationSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        changes.push({\n          ...operationSoftware,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(deviceSoftwareList, deviceSoftware => {\n      const operationSoftware = find(operation.c8y_SoftwareList, { name: deviceSoftware.name });\n      if (\n        (operationSoftware && operationSoftware.version) !==\n        (deviceSoftware && deviceSoftware.version)\n      ) {\n        const installChange = changes.find(\n          change => deviceSoftware.name === change.name && change.action === 'install'\n        );\n        // check that this software is not an installation software change, otherwise it's an update and not a removal\n        if (!installChange) {\n          changes.push({\n            ...deviceSoftware,\n            action: 'delete'\n          } as DeviceSoftwareChange);\n        }\n      }\n    });\n    return changes;\n  }\n\n  private async getDeviceSoftwareChangesFromSoftwareOperation(\n    operation: IOperation,\n    device: IManagedObject\n  ): Promise<DeviceSoftwareChange[]> {\n    const changes: DeviceSoftwareChange[] = [];\n    const deviceSoftware = await this.getCurrentSoftware(device, 'c8y_Software', {});\n    forEach(deviceSoftware, (deviceSoftwareVersion, deviceSoftwareName) => {\n      if (operation.c8y_Software[deviceSoftwareName] !== deviceSoftwareVersion) {\n        changes.push({\n          name: deviceSoftwareName,\n          version: deviceSoftwareVersion,\n          action: 'delete'\n        } as DeviceSoftwareChange);\n      }\n    });\n    forEach(operation.c8y_Software, (operationSoftwareVersion, operationSoftwareName) => {\n      const deviceSoftwareVersion = deviceSoftware && deviceSoftware[operationSoftwareName];\n      if (deviceSoftwareVersion !== operationSoftwareVersion) {\n        changes.push({\n          name: operationSoftwareName,\n          version: operationSoftwareVersion,\n          action: 'install'\n        } as DeviceSoftwareChange);\n      }\n    });\n    return changes;\n  }\n\n  private async getCurrentSoftware(\n    device: IManagedObject,\n    swFragment: string,\n    defaultValue: object\n  ): Promise<object> {\n    const isASMAvailable = await this.advancedSoftwareService.isASMAvailable();\n    if (isASMAvailable) {\n      let softwareResultList: IResultList<IManagedObject> = await this.advancedSoftwareService.list(\n        { deviceId: device.id, pageSize: 100 }\n      );\n      let list = (softwareResultList?.data || []).map(sw =>\n        pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n      );\n\n      while (softwareResultList.paging?.nextPage) {\n        softwareResultList = await softwareResultList.paging.next();\n        list = [\n          ...list,\n          ...(softwareResultList?.data || []).map(sw =>\n            pick(omitBy(sw, isNil), ['name', 'version', 'url', 'softwareType'])\n          )\n        ];\n      }\n\n      if (!list?.length) {\n        return defaultValue;\n      }\n\n      return Array.isArray(defaultValue) ? list : this.softwareListToLegacy(list);\n    } else {\n      return device[swFragment] || defaultValue;\n    }\n  }\n\n  private softwareListToLegacy(list: IManagedObject[]): object {\n    return (list || []).reduce((prev, curr) => ({ ...prev, [curr.name]: curr.version }), {});\n  }\n}\n","import { AlertService } from '@c8y/ngx-components';\nimport { Component, Input } from '@angular/core';\nimport { RepositoryService } from '../repository.service';\nimport { memoize } from '@c8y/ngx-components';\nimport { saveAs } from 'file-saver';\nimport { InventoryBinaryService } from '@c8y/client';\nimport { LinkRenderType } from './link-render-type.enum';\n\n@Component({\n  selector: 'c8y-file-download',\n  templateUrl: './file-download.component.html'\n})\nexport class FileDownloadComponent {\n  @Input() url: string;\n  linkRenderType = LinkRenderType;\n  isDownloading = false;\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryBinaryService: InventoryBinaryService,\n    private alertService: AlertService\n  ) {}\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize()\n  determineBehavior(): LinkRenderType {\n    let result: LinkRenderType;\n    if (this.inventoryBinaryService.getIdFromUrl(this.url)) {\n      result = LinkRenderType.DOWNLOAD;\n    } else if (this.url.match(/\\/\\//g)) {\n      result = LinkRenderType.LINK;\n    } else {\n      result = LinkRenderType.TEXTONLY;\n    }\n    return result;\n  }\n\n  async downloadFile() {\n    try {\n      this.isDownloading = true;\n      const binary: File = await this.repositoryService.getBinaryFile(this.url, {\n        allowExternal: false\n      });\n      this.isDownloading = false;\n      saveAs(binary);\n    } catch (ex) {\n      this.isDownloading = false;\n      if (ex) {\n        this.alertService.addServerFailure(ex);\n      }\n    }\n  }\n}\n","<a\n  *ngIf=\"determineBehavior() === linkRenderType.LINK\"\n  href=\"{{ url }}\"\n  class=\"pointer\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  {{ getBinaryName$(url) | async }}\n</a>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.TEXTONLY\">{{\n  getBinaryName$(url) | async\n}}</span>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.DOWNLOAD\">\n  <a *ngIf=\"!isDownloading\" class=\"pointer\" (click)=\"downloadFile()\">\n    {{ getBinaryName$(url) | async }}\n  </a>\n\n  <span *ngIf=\"isDownloading\">\n    <i c8yIcon=\"spinner\" class=\"icon-spin\"></i> {{ 'Downloading…' | translate }}\n  </span>\n</span>\n","import { Component, EventEmitter, forwardRef, TemplateRef } from '@angular/core';\nimport { IManagedObject, QueriesUtil } from '@c8y/client';\nimport {\n  gettext,\n  ISelectModalObject,\n  ISelectModalOption,\n  IUpdateItemEvent,\n  ModalLabels,\n  ModalSelectionMode,\n  ProductExperienceEvent,\n  ProductExperienceEventSource,\n  PRODUCT_EXPERIENCE_EVENT_SOURCE\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, has, isEmpty, isEqual, omitBy } from 'lodash-es';\nimport { BehaviorSubject, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mergeMap, switchMap, tap } from 'rxjs/operators';\nimport {\n  FilterCriteria,\n  PRODUCT_EXPERIENCE,\n  RepositoryBinary,\n  RepositoryCategory,\n  RepositoryType,\n  SelectedRepositoryBinary\n} from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n// MODAL STRUCTURE\n// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)\n//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)\n//   -- ISelectModalOption...\n// - selectModalObject...\n\n/**\n * RepositorySelectModalComponent displays repository entries options and allows to select them.\n *\n * @example\n * ```\n * import { take } from 'rxjs/operators';\n * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository/shared';\n *\n * const initialState = {\n *   repositoryType: RepositoryType.FIRMWARE,\n *   title: gettext('Install firmware'),\n *   subTitle: gettext('Available firmwares matching the device type'),\n *   icon: 'c8y-firmware',\n *   mode: ModalSelectionMode.SINGLE,\n *   labels: { ok: gettext('Install') },\n *   disableSelected: false\n * };\n *\n * const modal = this.bsModal.show(RepositorySelectModalComponent, {\n *   ignoreBackdropClick: true,\n *   initialState\n * });\n *\n * modal.content.load.next();\n * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {\n *   ...\n * })\n * ```\n */\n\n@Component({\n  selector: 'c8y-repository-select-modal',\n  templateUrl: './repository-select-modal.component.html',\n  providers: [\n    {\n      provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,\n      useExisting: forwardRef(() => RepositorySelectModalComponent)\n    }\n  ]\n})\nexport class RepositorySelectModalComponent implements ProductExperienceEventSource {\n  PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;\n  /**\n   * Optional\n   * Allows to provide custom data.\n   * @example\n   * ```\n   * import { from } from 'rxjs';\n   *\n   * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };\n   * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];\n   *\n   * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};\n   * ```\n   */\n  repositoryEntriesWithVersions$: Observable<IManagedObject[]> = undefined;\n  /**\n   * Repository entry type.\n   */\n  repositoryType: RepositoryType.FIRMWARE | RepositoryType.SOFTWARE;\n  /**\n   * Optional\n   * Allows to use custom badges templates.\n   * @example\n   * ```\n   * import { gettext } from '@c8y/ngx-components';\n   *\n   * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n   * const initialState = { badgeTemplates };\n   * ```\n   */\n  badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };\n  /**\n   * Optional\n   * Allows to provide custom modal title.\n   */\n  title: string = gettext('Select repository entry');\n  /**\n   * Optional\n   * Allows to provide custom modal subtitle.\n   */\n  subTitle: string;\n  /**\n   * Loads the content of the modal.\n   * Must be invoked by the modal's caller.\n   */\n  load: Subject<void> = new Subject();\n  /**\n   * Triggers an update of the item list emitted.\n   */\n  updateInstallableList$: Subject<IUpdateItemEvent<any>> = new Subject();\n  /**\n   * Optional\n   * Emits a filter criteria object currently entered in the filter input.\n   * Use it to filter the items if you use custom repositoryEntriesWithVersions$.\n   */\n  searchTerm: BehaviorSubject<FilterCriteria> = new BehaviorSubject({});\n  /**\n   * Optional\n   * Allows to provide device type query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  deviceTypeQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide query to restrict search criteria.\n   * Only takes effect when repositoryEntriesWithVersions$ is not provided,\n   * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.\n   */\n  searchQuery: any = {};\n  /**\n   * Optional\n   * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.\n   */\n  labels: ModalLabels = { ok: gettext('Save') };\n  /**\n   * Optional\n   * Allows to hide the name filter input field.\n   * By default, the filter input field is displayed.\n   */\n  showFilter = true;\n  /**\n   * Optional\n   * Allows to show a warning that the search criteria should be narrowed down.\n   * By default, this warning is hidden.\n   */\n  areMoreEntries = false;\n  /**\n   * Optional\n   * Allows to display a more specific than the default message in case there are no items to display.\n   */\n  noItemsMessage: string;\n  /**\n   * Optional\n   * Allows to pass the array of items. Each item from this array will be marked as selected in the modal.\n   */\n  selected: SelectedRepositoryBinary[];\n  /**\n   * Emits whenever a new repository binary have been selected in the modal.\n   */\n  onChoiceUpdated: EventEmitter<ISelectModalObject> = new EventEmitter<ISelectModalObject>();\n  /**\n   * Emits the list of selected options.\n   */\n  resultEmitter: EventEmitter<SelectedRepositoryBinary[]> = new EventEmitter<\n    SelectedRepositoryBinary[]\n  >();\n  /**\n   * Optional\n   * Allows to change selection mode.\n   * Supported options:\n   *   * single: only single option can be selected.\n   *   * multiple: multiple options can be selected.\n   */\n  mode: ModalSelectionMode = ModalSelectionMode.SINGLE;\n  /**\n   * Optional\n   * Allows to use custom icon in the modal header.\n   */\n  icon: string;\n  /**\n   * Allows to block selection of the other versions from the same repository entry.\n   */\n  disableSelected = true;\n\n  filterCriteria: FilterCriteria = {};\n\n  repositoryEntries$: Observable<ISelectModalObject[]> = this.load.pipe(\n    switchMap(() => this.repositoryEntriesWithVersions$),\n    mergeMap(mos => this.aggregate(mos)),\n    tap(items => {\n      this.areMoreEntries = items.length >= this.PAGE_SIZE ? true : false;\n    }),\n    tap(items => (this.repositoryEntries = items))\n  );\n\n  modalEntries: Observable<ISelectModalObject[]> = merge(\n    this.repositoryEntries$,\n    this.updateInstallableList$.pipe(\n      map((updateItemEvent: IUpdateItemEvent<any>) => {\n        const itemToUpdate: ISelectModalObject = (this.repositoryEntries || []).find(\n          item => item.groupId === updateItemEvent.object.groupId\n        );\n        if (itemToUpdate) {\n          const optionToUpdate: ISelectModalOption = (itemToUpdate.options || []).find(\n            option => option.obj.id === (updateItemEvent.object as any).selectedId\n          );\n          if (optionToUpdate) {\n            optionToUpdate.template = updateItemEvent.template;\n            if (updateItemEvent.mapper) {\n              optionToUpdate.obj = updateItemEvent.mapper(optionToUpdate.obj);\n            }\n          }\n        }\n        return this.repositoryEntries;\n      })\n    )\n  );\n\n  /**\n   * Optional\n   * Allows to provide additional template that will be rendered in the\n   * filters block on top of the results list in the select modal.\n   */\n  additionalFilterTemplate: TemplateRef<any>;\n\n  productExperienceEvent: ProductExperienceEvent;\n\n  private PAGE_SIZE = 100;\n  private queriesUtil: QueriesUtil;\n  private repositoryEntries: ISelectModalObject[];\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  ngOnInit() {\n    if (!this.repositoryType) {\n      throw new Error('Repository type must be defined');\n    }\n\n    if (!this.repositoryEntriesWithVersions$) {\n      this.repositoryEntriesWithVersions$ = of(1).pipe(\n        mergeMap(() =>\n          this.repositoryService.listRepositoryEntries(this.repositoryType, {\n            query: this.queriesUtil.addAndFilter(\n              this.deviceTypeQuery,\n              has(this.searchQuery, 'name')\n                ? { ...this.searchQuery, name: `*${this.searchQuery.name}*` }\n                : this.searchQuery\n            ),\n            params: { pageSize: this.PAGE_SIZE }\n          })\n        ),\n        map(({ data }) => data),\n        map(mos => this.getAndAssignRepositoryBinaries(mos))\n      );\n    }\n  }\n\n  getAndAssignRepositoryBinaries(mos: IManagedObject[]) {\n    mos.forEach(mo => {\n      mo.versions = this.repositoryService.listAllVersions(mo);\n    });\n    return mos;\n  }\n\n  search(filterCriteria: FilterCriteria) {\n    this.filterCriteria = omitBy(\n      {\n        ...this.filterCriteria,\n        ...filterCriteria\n      },\n      isEmpty\n    );\n\n    if (!isEqual(this.filterCriteria, this.searchQuery)) {\n      this.searchTerm.next(this.filterCriteria);\n      this.searchQuery = this.filterCriteria;\n      this.load.next();\n    }\n  }\n\n  result(selectedItems: SelectedRepositoryBinary[]) {\n    this.resultEmitter.emit(selectedItems);\n  }\n\n  async aggregate(mos: IManagedObject[]): Promise<ISelectModalObject[]> {\n    const repositoryType = this.repositoryType;\n    const selectedItems: SelectedRepositoryBinary[] = this.selected;\n\n    return Promise.all(\n      mos.map(async repositoryEntry => {\n        const options: ISelectModalOption[] = this.getSelectModalOptions(\n          await this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions),\n          selectedItems,\n          repositoryEntry as RepositoryCategory,\n          repositoryType\n        );\n        const selectModalObject = this.getSelectModalObject(\n          repositoryEntry as RepositoryCategory,\n          options\n        );\n\n        return selectModalObject;\n      })\n    );\n  }\n\n  getSelectModalOptions(\n    versions: RepositoryBinary[],\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryType: RepositoryType\n  ): ISelectModalOption[] {\n    const selectModalOptions: ISelectModalOption[] = [];\n    versions.forEach(repositoryBinary => {\n      const isSelected: boolean = this.isBinaryRepositorySelected(\n        selectedItems,\n        repositoryEntry,\n        repositoryBinary,\n        repositoryType\n      );\n\n      const { version } = repositoryBinary[`${repositoryType}`];\n      const bodyValue =\n        version || `(${this.translateService.instant(gettext('not specified`version`'))})`;\n      const bodyClass = version ? '' : 'text-muted';\n      selectModalOptions.push({\n        body: [\n          {\n            value: bodyValue,\n            class: bodyClass\n          }\n        ],\n        obj: {\n          id: repositoryBinary.id,\n          name: repositoryEntry.name,\n          version,\n          ...(get(repositoryBinary, 'c8y_Patch.dependency') && {\n            dependency: get(repositoryBinary, 'c8y_Patch.dependency')\n          }),\n          ...(get(repositoryBinary, 'c8y_Patch') && { isPatch: true }),\n          url: repositoryBinary[`${repositoryType}`].url,\n          softwareType: repositoryEntry.softwareType\n        },\n        selected: isSelected\n      });\n    });\n    return selectModalOptions;\n  }\n\n  isBinaryRepositorySelected(\n    selectedItems: SelectedRepositoryBinary[],\n    repositoryEntry: RepositoryCategory,\n    repositoryBinary: RepositoryBinary,\n    repositoryType: RepositoryType\n  ): boolean {\n    const isSelected = selectedItems\n      ? selectedItems.filter(\n          repositoryFragment =>\n            repositoryFragment.name === repositoryEntry.name &&\n            repositoryFragment.version === repositoryBinary[`${repositoryType}`].version\n        ).length > 0\n      : false;\n\n    return isSelected;\n  }\n\n  getSelectModalObject(\n    repositoryEntry: RepositoryCategory,\n    options: ISelectModalOption[]\n  ): ISelectModalObject {\n    const label =\n      options.length === 1\n        ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })\n        : this.translateService.instant(this.badgeTemplates.other, { count: options.length });\n\n    const selectModalObject: ISelectModalObject = {\n      groupId: repositoryEntry.id,\n      body: [\n        { value: repositoryEntry.name, class: 'text-truncate' },\n        { value: repositoryEntry.description, class: 'text-truncate text-muted' }\n      ],\n      additionalInformation: { value: label, class: 'label label-info' },\n      options\n    };\n\n    return selectModalObject;\n  }\n}\n","<c8y-select-modal\n  [icon]=\"icon\"\n  [title]=\"title\"\n  [subTitle]=\"subTitle\"\n  [items]=\"modalEntries | async\"\n  [mode]=\"mode\"\n  [disableSelected]=\"disableSelected\"\n  [labels]=\"labels\"\n  [showFilter]=\"showFilter\"\n  [additionalFilterTemplate]=\"additionalFilterTemplate\"\n  [areMoreEntries]=\"areMoreEntries\"\n  [noItemsMessage]=\"noItemsMessage\"\n  (search)=\"search({ name: $event })\"\n  (onChoiceUpdated)=\"onChoiceUpdated.emit($event)\"\n  (result)=\"result($event)\"\n  c8yProductExperience\n  inherit\n  suppressDataOverriding\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.SHARED.COMPONENTS.REPOSITORY_SELECT_MODAL }\"\n></c8y-select-modal>\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport { IManagedObject, IResultList, QueriesUtil } from '@c8y/client';\nimport { ForOfFilterPipe, gettext, TypeaheadComponent } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniqBy } from 'lodash-es';\nimport { BehaviorSubject, Observable, pipe } from 'rxjs';\nimport { debounceTime, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RepositoryType } from '../repository.model';\nimport { RepositoryService } from '../repository.service';\n\n@Component({\n  selector: 'c8y-software-type',\n  templateUrl: 'software-type.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => SoftwareTypeComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => SoftwareTypeComponent),\n      multi: true\n    }\n  ]\n})\nexport class SoftwareTypeComponent implements OnInit, ControlValueAccessor, Validator {\n  @Input() softwareTypeMO: IManagedObject;\n\n  @Input() disabled: boolean;\n\n  @Input() style;\n\n  @Input()\n  required = true;\n\n  @Input()\n  placeholder: string = this.translateService.instant(gettext('e.g. {{ example }}'), {\n    example: 'yum'\n  });\n\n  @Input()\n  emitResultsOnly = false;\n\n  @Input()\n  showBtnInNotFoundMessage = true;\n\n  @Input()\n  allowFreeEntries = true;\n\n  @Input()\n  showClearSelectionOption = false;\n\n  @Input()\n  clearSelectionOptionLabel: string = gettext('All software types');\n\n  @ViewChild('deviceSoftwareTypeModel') deviceSoftwareTypeModel: TypeaheadComponent;\n\n  @ViewChild('notFoundTypeAddNewTemplate', { static: true })\n  notFoundTypeAddNewTemplate: TemplateRef<unknown>;\n\n  @ViewChild('notFoundTypeTemplate', { static: true })\n  notFoundTypeTemplate: TemplateRef<unknown>;\n\n  @Output() onSelectSoftware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  notFoundTemplateToUse: TemplateRef<unknown>;\n\n  filterPipe: ForOfFilterPipe<IManagedObject> = pipe(tap());\n  softwaresResult$: Observable<IResultList<IManagedObject>>;\n  search$: BehaviorSubject<string> = new BehaviorSubject(null);\n  softwaresResult: IResultList<IManagedObject>;\n\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n  private softwareTypes: Set<string> = new Set();\n\n  constructor(\n    private repositoryService: RepositoryService,\n    public changeDetectorRef: ChangeDetectorRef,\n    private translateService: TranslateService\n  ) {\n    this.softwaresResult$ = this.search$.pipe(\n      debounceTime(300),\n      tap(() => this.softwareTypes.clear()),\n      switchMap((searchString: string) => {\n        if (!this.emitResultsOnly || !searchString) {\n          this.onSelectSoftware.emit(this.softwareTypeMO);\n        }\n        return this.getSoftwareByTypeResult(searchString);\n      }),\n      shareReplay(1)\n    );\n\n    this.filterPipe = pipe(map(this.removeDuplicatesBySoftwareType.bind(this)));\n  }\n\n  ngOnInit(): void {\n    this.notFoundTemplateToUse = this.showBtnInNotFoundMessage\n      ? this.notFoundTypeAddNewTemplate\n      : this.notFoundTypeTemplate;\n  }\n\n  getSoftwareByTypeResult(searchString: string) {\n    let query = this.queriesUtil.prependOrderbys({}, [{ softwareType: 1 }]);\n    const filter = !!searchString\n      ? {\n          softwareType: {\n            __eq: `*${searchString}*`\n          }\n        }\n      : {\n          __has: 'softwareType'\n        };\n    query = this.queriesUtil.addAndFilter(query, filter);\n\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, {\n      query,\n      params: {\n        pageSize: 200\n      }\n    });\n  }\n\n  selectSoftware(software) {\n    this.softwareTypeMO = software;\n    this.onSelectSoftware.emit(software);\n    this.deviceSoftwareTypeModel.searchControlModel.control.markAsDirty();\n    (this.deviceSoftwareTypeModel as any).onChange(software);\n  }\n\n  clearSoftware() {\n    this.softwareTypeMO = undefined;\n    this.search$.next('');\n    this.onSelectSoftware.emit();\n  }\n\n  resetInput() {\n    this.deviceSoftwareTypeModel.reset();\n  }\n\n  writeValue(value: any): void {\n    this.deviceSoftwareTypeModel.writeValue(value);\n  }\n\n  registerOnChange(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnChange(fn);\n  }\n\n  registerOnTouched(fn: any): void {\n    this.deviceSoftwareTypeModel.registerOnTouched(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.deviceSoftwareTypeModel.setDisabledState(isDisabled);\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    return this.deviceSoftwareTypeModel.validate(control);\n  }\n\n  private removeDuplicatesBySoftwareType(list: IManagedObject[]): IManagedObject[] {\n    const uniqueBySoftwareType: IManagedObject[] = uniqBy(list, 'softwareType').filter(\n      (sw: IManagedObject) => !this.softwareTypes.has(sw.softwareType)\n    );\n    uniqueBySoftwareType.forEach((sw: IManagedObject) => this.softwareTypes.add(sw.softwareType));\n    return uniqueBySoftwareType;\n  }\n}\n","<c8y-typeahead\n  [(ngModel)]=\"softwareTypeMO\"\n  [required]=\"required\"\n  [disabled]=\"disabled\"\n  name=\"softwareType\"\n  [placeholder]=\"placeholder\"\n  [allowFreeEntries]=\"allowFreeEntries\"\n  #deviceSoftwareTypeModel\n  (onSearch)=\"search$.next($event)\"\n  displayProperty=\"softwareType\"\n  [ngStyle]=\"style\"\n>\n  <c8y-li\n    *ngIf=\"showClearSelectionOption\"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"clearSoftware()\"\n    [active]=\"!softwareTypeMO?.softwareType\"\n  >\n    <span>{{ clearSelectionOptionLabel | translate }}</span>\n  </c8y-li>\n  <c8y-li\n    *c8yFor=\"\n      let software of softwaresResult$;\n      pipe: filterPipe;\n      loadMore: 'auto';\n      notFound: notFoundTemplateToUse\n    \"\n    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n    (click)=\"selectSoftware(software)\"\n    [active]=\"softwareTypeMO?.softwareType === software.softwareType\"\n  >\n    <c8y-highlight\n      [text]=\"software.softwareType || '--'\"\n      [pattern]=\"search$ | async\"\n    ></c8y-highlight>\n  </c8y-li>\n  <ng-template #notFoundTypeAddNewTemplate>\n    <c8y-li class=\"bg-level-2 p-8\" *ngIf=\"(search$ | async)?.length > 0\">\n      <span translate>No match found.</span>\n      <button\n        title=\"{{ 'Add new`software type`' | translate }}\"\n        type=\"button\"\n        class=\"btn btn-primary btn-xs m-l-8\"\n        translate\n      >\n        Add new`software type`\n      </button>\n    </c8y-li>\n  </ng-template>\n  <ng-template #notFoundTypeTemplate>\n    <c8y-li\n      class=\"bg-level-2 p-8\"\n      *ngIf=\"(search$ | async)?.length > 0 && (softwaresResult$ | async)?.data?.length === 0\"\n    >\n      <span translate>No match found. Refine your search terms or check your spelling.</span>\n    </c8y-li>\n  </ng-template>\n</c8y-typeahead>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule, FormsModule, OperationRealtimeService } from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { RepositoryService } from './repository.service';\nimport { RepositorySelectModalComponent } from './select-modal/repository-select-modal.component';\nimport { FileDownloadComponent } from './file-download/file-download.component';\nimport { AdvancedSoftwareService } from './advanced-software.service';\nimport { SoftwareTypeComponent } from './software-type/software-type.component';\n\n@NgModule({\n  imports: [CommonModule, CoreModule, FormsModule, PopoverModule],\n  declarations: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent],\n  entryComponents: [RepositorySelectModalComponent],\n  providers: [AdvancedSoftwareService, RepositoryService, OperationRealtimeService],\n  exports: [RepositorySelectModalComponent, FileDownloadComponent, SoftwareTypeComponent]\n})\nexport class SharedRepositoryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map","i3.AdvancedSoftwareService","i1.RepositoryService","i2","i3","i4"],"mappings":"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"}
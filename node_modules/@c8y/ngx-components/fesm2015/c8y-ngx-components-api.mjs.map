{"version":3,"file":"c8y-ngx-components-api.mjs","sources":["../../api/interceptor.model.ts","../../api/http-handler.model.ts","../../api/api.service.ts","../../api/data.module.ts","../../api/index.ts","../../api/c8y-ngx-components-api.ts"],"sourcesContent":["import { ApiCall } from './api.model';\nimport { Observable } from 'rxjs';\nimport { IFetchResponse } from '@c8y/client';\n\nexport interface HttpInterceptor {\n  intercept(req: ApiCall, next: HttpHandler): Observable<IFetchResponse>;\n}\n\nexport abstract class HttpHandler {\n  abstract handle(req: ApiCall): Observable<IFetchResponse>;\n}\n","import { ApiCall } from './api.model';\nimport { Observable, from } from 'rxjs';\nimport { FetchClient, IFetchResponse } from '@c8y/client';\nimport { HttpHandler, HttpInterceptor } from './interceptor.model';\n\nexport class HttpInterceptHandler extends HttpHandler {\n  constructor(protected interceptor: HttpInterceptor, protected nextHandler: HttpHandler) {\n    super();\n  }\n\n  handle(req: ApiCall): Observable<IFetchResponse> {\n    return this.interceptor.intercept(req, this.nextHandler);\n  }\n}\n\nexport interface RequestStartAndFinish {\n  onStart(req: ApiCall): void;\n  onFinish(res: ApiCall): void;\n}\n\nexport class HttpRequestHandler extends HttpHandler {\n  constructor(protected fetch: FetchClient['fetch'], protected apiService?: RequestStartAndFinish) {\n    super();\n  }\n\n  handle(req: ApiCall): Observable<IFetchResponse> {\n    const { options, url } = req;\n    const { method } = options;\n    this.apiService?.onStart({ method, options, url });\n    let fetchPromise = this.fetch(url, options);\n    if (typeof options.responseInterceptor === 'function') {\n      fetchPromise = fetchPromise.then(options.responseInterceptor);\n    }\n    fetchPromise.then(\n      (response: IFetchResponse) => this.apiService?.onFinish({ method, options, url, response }),\n      (response: IFetchResponse) => this.apiService?.onFinish({ method, options, url, response })\n    );\n    return from(fetchPromise);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { MonoTypeOperatorFunction, Observable, Subject, pipe } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ApiCall, ApiCallOptions } from './api.model';\nimport {\n  HttpInterceptHandler,\n  HttpRequestHandler,\n  RequestStartAndFinish\n} from './http-handler.model';\nimport { HttpHandler, HttpInterceptor } from './interceptor.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService implements RequestStartAndFinish {\n  calls: Observable<ApiCall>;\n  private callsSubject = new Subject<ApiCall>();\n  private interceptors = new Map<string, HttpInterceptor>();\n  private interceptorCounter = 0;\n\n  constructor(private client: FetchClient) {\n    this.calls = this.callsSubject.asObservable();\n    this.hookIntoClientFetch();\n  }\n\n  /**\n   * Allows to hook into the responses received by the FetchClient.\n   * This is meant to be used to react on the responses, not for manipulation of the responses.\n   * @param hookFilter A filter function to filter for specific responses.\n   * @returns An Observable of the filtered responses.\n   */\n  hookResponse(hookFilter: (call: ApiCall) => boolean) {\n    return this.callsSubject.pipe(\n      filter(({ phase }) => phase === 'finish'),\n      filter(hookFilter)\n    );\n  }\n\n  /**\n   * Allows to hook into the requests performed by the FetchClient.\n   * This is meant to be used to react on the requests, not for manipulation of the requests.\n   * @param hookFilter A filter function to filter for specific requests.\n   * @returns An Observable of the filtered requests.\n   */\n  hookRequest(hookFilter: (call: ApiCall) => boolean) {\n    return this.callsSubject.pipe(\n      filter(({ phase }) => phase === 'start'),\n      filter(hookFilter)\n    );\n  }\n\n  onFinish(call: ApiCall) {\n    this.callsSubject.next({ phase: 'finish', ...call });\n  }\n\n  onStart(call: ApiCall) {\n    this.callsSubject.next({ phase: 'start', ...call });\n  }\n\n  resolveData<T = unknown>(call: ApiCall): Promise<{ data: T; method: string; url: string }> {\n    const { response, method, url } = call;\n    if ('data' in response) {\n      return Promise.resolve({ data: response.data, method, url });\n    } else {\n      // No Content success status, for example DELETE request.\n      if ((response as Response)?.status === 204) {\n        return Promise.resolve({ data: null, method, url });\n      }\n      const cb = data => ({ data, method, url });\n      return (response as Response).clone().json().then(cb, cb);\n    }\n  }\n\n  /**\n   * Can be added to a pipe to exclude any permission call. Permission calls are PUT\n   * request with only an id in it, to verify if the user has access to this managed object.\n   * @returns The operator to be added to a pipe.\n   */\n  excludePermissionCall(): MonoTypeOperatorFunction<ApiCall> {\n    return pipe(\n      filter(({ method, options }) => {\n        if (method === 'PUT' && options.body && typeof options.body === 'string') {\n          const parsedBody = JSON.parse(options.body as string);\n          const bodyKeys = Object.keys(parsedBody);\n          return !(bodyKeys.length === 1 && bodyKeys[0] === 'id');\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Allows to intercept requests performed via the FetchClient requests.\n   * @param interceptor The interceptor to be added.\n   * @param id An optional unique identifier for the interceptor. The chain of interceptors is ordered by this id. And it can be used to remove the interceptor later on.\n   * @returns The id of the interceptor (same as provided id if one was provided, otherwise an id will be generated).\n   */\n  addInterceptor(interceptor: HttpInterceptor, id?: string): string {\n    if (!id) {\n      id = `${++this.interceptorCounter}`;\n    }\n    this.interceptors.set(id, interceptor);\n    return id;\n  }\n\n  /**\n   * Allows to remove a previously added interceptor by it's id.\n   * @param id The id of the interceptor that should be removed.\n   * @returns true if an interceptor existed and has been removed, or false if id does not exist.\n   */\n  removeInterceptor(id: string): boolean {\n    return this.interceptors.delete(id);\n  }\n\n  /**\n   * Checks if an interceptor with a given id exists.\n   * @param id The id of the interceptor.\n   * @returns - Returns true if an interceptor with the given id exists, otherwise false.\n   */\n  hasInterceptor(id: string): boolean {\n    return this.interceptors.has(id);\n  }\n\n  private hookIntoClientFetch() {\n    const fetch: FetchClient['fetch'] = this.client.fetch.bind(this.client);\n    const requestHandler = new HttpRequestHandler(fetch, this);\n    this.client.fetch = async (\n      url,\n      options: ApiCallOptions & IFetchOptions = { method: 'GET' }\n    ) => {\n      const { method } = options;\n      return this.createInterceptorChain({ url, options, method }, requestHandler).toPromise();\n    };\n  }\n\n  private createInterceptorChain(\n    call: ApiCall,\n    requestHandler: HttpRequestHandler\n  ): Observable<IFetchResponse> {\n    let handler: HttpHandler = requestHandler;\n    // Do some sorting to always apply the interceptors in the specific order\n    const sortedInterceptorIds = Array.from(this.interceptors.keys()).sort((a, b) =>\n      b.localeCompare(a)\n    );\n    for (const interceptorId of sortedInterceptorIds) {\n      handler = new HttpInterceptHandler(this.interceptors.get(interceptorId), handler);\n    }\n    return handler.handle(call);\n  }\n}\n","import { ModuleWithProviders, NgModule, Provider, Type } from '@angular/core';\nimport { BasicAuth, FetchClient, Realtime, CookieAuth } from '@c8y/client';\nimport { ApiService } from './api.service';\nimport * as services from './services';\n\nfunction toProvider(provide: Type<unknown>): Provider {\n  let deps: Array<Type<FetchClient | Realtime | CookieAuth>> = [FetchClient, Realtime];\n  if (provide === FetchClient) {\n    deps = [CookieAuth];\n  }\n  if (provide === BasicAuth || provide === CookieAuth) {\n    deps = [];\n  }\n  if (provide === Realtime) {\n    deps = [FetchClient];\n  }\n  return { provide, useClass: provide, deps };\n}\n\nconst providers: Provider[] = Object.keys(services)\n  .map(k => toProvider(services[k]))\n  .concat([{ provide: ApiService, useClass: ApiService, deps: [FetchClient] }]);\n// @dynamic\n@NgModule({\n  providers\n})\nexport class DataModule {\n  static providers(): Provider[] {\n    return providers;\n  }\n  static forRoot(): ModuleWithProviders<DataModule> {\n    return {\n      ngModule: DataModule,\n      providers\n    };\n  }\n}\n","export * from './api.service';\nexport * from './api.model';\nexport * from './data.module';\nexport * from './services';\nexport * from './interceptor.model';\n// do not expose as it might confuse people on what to implement\n// export * from './http-handler.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;MAQsB,WAAW,CAAA;AAEhC;;ACLK,MAAO,oBAAqB,SAAQ,WAAW,CAAA;IACnD,WAAsB,CAAA,WAA4B,EAAY,WAAwB,EAAA;AACpF,QAAA,KAAK,EAAE,CAAC;AADY,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAiB;AAAY,QAAA,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;KAErF;AAED,IAAA,MAAM,CAAC,GAAY,EAAA;AACjB,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1D;AACF,CAAA;AAOK,MAAO,kBAAmB,SAAQ,WAAW,CAAA;IACjD,WAAsB,CAAA,KAA2B,EAAY,UAAkC,EAAA;AAC7F,QAAA,KAAK,EAAE,CAAC;AADY,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAsB;AAAY,QAAA,IAAU,CAAA,UAAA,GAAV,UAAU,CAAwB;KAE9F;AAED,IAAA,MAAM,CAAC,GAAY,EAAA;;AACjB,QAAA,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;AAC7B,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;AAC3B,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;QACnD,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC5C,QAAA,IAAI,OAAO,OAAO,CAAC,mBAAmB,KAAK,UAAU,EAAE;YACrD,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC/D,SAAA;QACD,YAAY,CAAC,IAAI,CACf,CAAC,QAAwB,KAAI,EAAA,IAAA,EAAA,CAAA,CAAC,OAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAA,EAAA,EAC3F,CAAC,QAAwB,KAAI,EAAA,IAAA,EAAA,CAAA,CAAC,OAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAA,EAAA,CAC5F,CAAC;AACF,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3B;AACF;;MCxBY,UAAU,CAAA;AAMrB,IAAA,WAAA,CAAoB,MAAmB,EAAA;AAAnB,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAa;AAJ/B,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,OAAO,EAAW,CAAC;AACtC,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,GAAG,EAA2B,CAAC;AAClD,QAAA,IAAkB,CAAA,kBAAA,GAAG,CAAC,CAAC;QAG7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAC9C,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;AAED;;;;;AAKG;AACH,IAAA,YAAY,CAAC,UAAsC,EAAA;QACjD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3B,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,KAAK,QAAQ,CAAC,EACzC,MAAM,CAAC,UAAU,CAAC,CACnB,CAAC;KACH;AAED;;;;;AAKG;AACH,IAAA,WAAW,CAAC,UAAsC,EAAA;QAChD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3B,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,KAAK,KAAK,OAAO,CAAC,EACxC,MAAM,CAAC,UAAU,CAAC,CACnB,CAAC;KACH;AAED,IAAA,QAAQ,CAAC,IAAa,EAAA;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EAAG,KAAK,EAAE,QAAQ,EAAA,EAAK,IAAI,CAAA,CAAG,CAAC;KACtD;AAED,IAAA,OAAO,CAAC,IAAa,EAAA;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EAAG,KAAK,EAAE,OAAO,EAAA,EAAK,IAAI,CAAA,CAAG,CAAC;KACrD;AAED,IAAA,WAAW,CAAc,IAAa,EAAA;QACpC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACvC,IAAI,MAAM,IAAI,QAAQ,EAAE;AACtB,YAAA,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AAC9D,SAAA;AAAM,aAAA;;YAEL,IAAK,CAAA,QAAqB,KAAA,IAAA,IAArB,QAAqB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArB,QAAqB,CAAE,MAAM,MAAK,GAAG,EAAE;AAC1C,gBAAA,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACrD,aAAA;AACD,YAAA,MAAM,EAAE,GAAG,IAAI,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AAC3C,YAAA,OAAQ,QAAqB,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC3D,SAAA;KACF;AAED;;;;AAIG;IACH,qBAAqB,GAAA;QACnB,OAAO,IAAI,CACT,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,KAAI;AAC7B,YAAA,IAAI,MAAM,KAAK,KAAK,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACxE,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAc,CAAC,CAAC;gBACtD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzC,gBAAA,OAAO,EAAE,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;AACzD,aAAA;AACD,YAAA,OAAO,IAAI,CAAC;SACb,CAAC,CACH,CAAC;KACH;AAED;;;;;AAKG;IACH,cAAc,CAAC,WAA4B,EAAE,EAAW,EAAA;QACtD,IAAI,CAAC,EAAE,EAAE;AACP,YAAA,EAAE,GAAG,CAAG,EAAA,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AACrC,SAAA;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;AACvC,QAAA,OAAO,EAAE,CAAC;KACX;AAED;;;;AAIG;AACH,IAAA,iBAAiB,CAAC,EAAU,EAAA;QAC1B,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KACrC;AAED;;;;AAIG;AACH,IAAA,cAAc,CAAC,EAAU,EAAA;QACvB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;KAClC;IAEO,mBAAmB,GAAA;AACzB,QAAA,MAAM,KAAK,GAAyB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxE,MAAM,cAAc,GAAG,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC3D,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAClB,GAAG,EACH,OAAA,GAA0C,EAAE,MAAM,EAAE,KAAK,EAAE,KACzD,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACF,YAAA,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;AAC3B,YAAA,OAAO,IAAI,CAAC,sBAAsB,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,cAAc,CAAC,CAAC,SAAS,EAAE,CAAC;AAC3F,SAAC,CAAA,CAAC;KACH;IAEO,sBAAsB,CAC5B,IAAa,EACb,cAAkC,EAAA;QAElC,IAAI,OAAO,GAAgB,cAAc,CAAC;;AAE1C,QAAA,MAAM,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAC1E,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CACnB,CAAC;AACF,QAAA,KAAK,MAAM,aAAa,IAAI,oBAAoB,EAAE;AAChD,YAAA,OAAO,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,CAAC;AACnF,SAAA;AACD,QAAA,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC7B;;uGAtIU,UAAU,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,WAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAV,UAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAU,cAFT,MAAM,EAAA,CAAA,CAAA;2FAEP,UAAU,EAAA,UAAA,EAAA,CAAA;kBAHtB,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;iBACnB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTD,SAAS,UAAU,CAAC,OAAsB,EAAA;AACxC,IAAA,IAAI,IAAI,GAAqD,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACrF,IAAI,OAAO,KAAK,WAAW,EAAE;AAC3B,QAAA,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC;AACrB,KAAA;AACD,IAAA,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,UAAU,EAAE;QACnD,IAAI,GAAG,EAAE,CAAC;AACX,KAAA;IACD,IAAI,OAAO,KAAK,QAAQ,EAAE;AACxB,QAAA,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;AACtB,KAAA;IACD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC9C,CAAC;AAED,MAAM,SAAS,GAAe,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChD,KAAA,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,KAAA,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;AAChF;MAIa,UAAU,CAAA;AACrB,IAAA,OAAO,SAAS,GAAA;AACd,QAAA,OAAO,SAAS,CAAC;KAClB;AACD,IAAA,OAAO,OAAO,GAAA;QACZ,OAAO;AACL,YAAA,QAAQ,EAAE,UAAU;YACpB,SAAS;SACV,CAAC;KACH;;uGATU,UAAU,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;wGAAV,UAAU,EAAA,CAAA,CAAA;AAAV,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAU,aAFrB,SAAS,EAAA,CAAA,CAAA;2FAEE,UAAU,EAAA,UAAA,EAAA,CAAA;kBAHtB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,SAAS;iBACV,CAAA;;;ACpBD;AACA;;ACNA;;AAEG;;;;"}
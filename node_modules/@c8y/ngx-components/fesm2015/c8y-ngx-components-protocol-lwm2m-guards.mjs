import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';
import { agentName } from '@c8y/ngx-components/protocol-lwm2m/model';
import * as i1 from '@c8y/ngx-components';
import * as i2 from '@c8y/ngx-components/protocol-lwm2m/services';

/**
 * Abstract base class for Lwm2m guards. This abstract class implements
 * a canActivate method ready to use. It will check by default the lwm2m microservice subscription
 * in the current tenant.
 */
class Lwm2mBaseGuard {
    constructor(tenantService) {
        this.tenantService = tenantService;
    }
    /**
     * Checks by default if the microservice `lwm2m-agent` is subscribed
     * to the current tenant.
     * @param route ActivatedRouteSnapshot
     * @returns boolean
     */
    canActivate(route) {
        return (this.tenantService.isMicroserviceSubscribedInCurrentTenant(agentName) &&
            this.additionalChecks(route));
    }
}
Lwm2mBaseGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard, deps: [{ token: i1.TenantUiService }], target: i0.ɵɵFactoryTarget.Injectable });
Lwm2mBaseGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBaseGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TenantUiService }]; } });

class Lwm2mBootstrapParametersGuard extends Lwm2mBaseGuard {
    constructor(tenantService, permissions, lwm2mService) {
        super(tenantService);
        this.tenantService = tenantService;
        this.permissions = permissions;
        this.lwm2mService = lwm2mService;
    }
    additionalChecks(route) {
        const contextData = (route === null || route === void 0 ? void 0 : route.data).contextData ||
            (route === null || route === void 0 ? void 0 : route.parent.data).contextData;
        return (this.lwm2mService.isLwm2mDevice(contextData) &&
            this.permissions.hasRole('ROLE_INVENTORY_READ'));
    }
}
Lwm2mBootstrapParametersGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBootstrapParametersGuard, deps: [{ token: i1.TenantUiService }, { token: i1.Permissions }, { token: i2.Lwm2mClientService }], target: i0.ɵɵFactoryTarget.Injectable });
Lwm2mBootstrapParametersGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBootstrapParametersGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mBootstrapParametersGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TenantUiService }, { type: i1.Permissions }, { type: i2.Lwm2mClientService }]; } });

class Lwm2mMicroserviceSubscribedGuard extends Lwm2mBaseGuard {
    constructor(tenantService) {
        super(tenantService);
        this.tenantService = tenantService;
    }
    additionalChecks(_route) {
        // Lwm2mBaseGuard checks by default for microservice subscription.
        // We don't need additional checks here.
        return true;
    }
}
Lwm2mMicroserviceSubscribedGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mMicroserviceSubscribedGuard, deps: [{ token: i1.TenantUiService }], target: i0.ɵɵFactoryTarget.Injectable });
Lwm2mMicroserviceSubscribedGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mMicroserviceSubscribedGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: Lwm2mMicroserviceSubscribedGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TenantUiService }]; } });

/**
 * Generated bundle index. Do not edit.
 */

export { Lwm2mBaseGuard, Lwm2mBootstrapParametersGuard, Lwm2mMicroserviceSubscribedGuard };
//# sourceMappingURL=c8y-ngx-components-protocol-lwm2m-guards.mjs.map

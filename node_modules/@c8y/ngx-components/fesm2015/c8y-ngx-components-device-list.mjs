import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Component, Injectable, NgModule } from '@angular/core';
import * as i4 from '@c8y/ngx-components';
import { gettext, DATA_GRID_CONFIGURATION_STRATEGY, UserPreferencesConfigurationStrategy, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, NavigatorNode, CoreModule, CommonModule, hookNavigator } from '@c8y/ngx-components';
import { of } from 'rxjs';
import { switchMap, tap, catchError, take } from 'rxjs/operators';
import * as i1 from 'ngx-bootstrap/modal';
import * as i2 from '@c8y/client';
import * as i1$1 from '@c8y/ngx-components/device-grid';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import * as i5 from '@ngx-translate/core';
import * as i6 from '@angular/forms';
import * as i3 from '@c8y/ngx-components/replace-device';
import { ReplaceDeviceDrawerComponent, ReplaceDeviceService } from '@c8y/ngx-components/replace-device';
import * as i5$1 from '@angular/common';
import * as i1$2 from '@angular/router';
import { RouterModule } from '@angular/router';

class AddSmartGroupComponent {
    constructor(modal, smartGroupsService, deviceGridService, alert, translateService) {
        this.modal = modal;
        this.smartGroupsService = smartGroupsService;
        this.deviceGridService = deviceGridService;
        this.alert = alert;
        this.translateService = translateService;
        this.smartGroup = {
            name: '',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: {}
        };
    }
    create() {
        return this.deviceGridService
            .getConfig$(this.configKey)
            .pipe(switchMap(config => {
            return this.smartGroupsService.create({
                smartGroup: this.smartGroup,
                deviceQueryString: this.deviceQuery,
                configurableColumns: config
            });
        }), tap(() => {
            this.alert.success(this.translateService.instant(gettext('Smart group {{ name }} created.'), {
                name: this.smartGroup.name
            }));
            this.modal.hide();
        }), catchError(ex => {
            this.alert.addServerFailure(ex);
            return of([]);
        }), take(1))
            .subscribe();
    }
    close() {
        this.modal.hide();
    }
}
AddSmartGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddSmartGroupComponent, deps: [{ token: i1.BsModalRef }, { token: i2.SmartGroupsService }, { token: i1$1.DeviceGridService }, { token: i4.AlertService }, { token: i5.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
AddSmartGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AddSmartGroupComponent, selector: "c8y-add-smart-group", ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-group-smart'\"></i>\n    <h4 translate id=\"modal-title\">Create smart group</h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"modal-body\">\n      <form #createSmartGroup=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Group name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"smartGroup.name\"\n            placeholder=\"{{ 'e.g. My smart group' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Create' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createSmartGroup.form.invalid\"\n      translate\n    >\n      Create\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i4.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i4.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddSmartGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-add-smart-group', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-group-smart'\"></i>\n    <h4 translate id=\"modal-title\">Create smart group</h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"modal-body\">\n      <form #createSmartGroup=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Group name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"smartGroup.name\"\n            placeholder=\"{{ 'e.g. My smart group' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Create' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createSmartGroup.form.invalid\"\n      translate\n    >\n      Create\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BsModalRef }, { type: i2.SmartGroupsService }, { type: i1$1.DeviceGridService }, { type: i4.AlertService }, { type: i5.TranslateService }]; } });

class DeviceListComponent {
    constructor(deviceGridService, bsModalService, replaceDeviceService, permissions) {
        this.deviceGridService = deviceGridService;
        this.bsModalService = bsModalService;
        this.replaceDeviceService = replaceDeviceService;
        this.permissions = permissions;
        this.GRID_CONFIG_KEY = 'device-grid-all';
        this.count$ = this.deviceGridService.getTotal({});
        this.actionControls = [];
        this.actionControls = [
            {
                type: 'replace',
                icon: 'replace',
                showOnHover: true,
                text: gettext('Replace device'),
                callback: (mo, reload) => {
                    this.replaceDeviceService.openDrawer(mo, reload);
                },
                showIf: () => this.permissions.hasAllRoles([
                    'ROLE_INVENTORY_READ',
                    'ROLE_INVENTORY_ADMIN',
                    'ROLE_IDENTITY_READ',
                    'ROLE_IDENTITY_ADMIN'
                ])
            }
        ];
    }
    getGridConfigContext() {
        return {
            key: this.GRID_CONFIG_KEY,
            defaultColumns: this.deviceGridService.getDefaultColumns(),
            legacyConfigKey: 'all-devices-columns-meta_',
            legacyFilterKey: 'all-devices-columns-config'
        };
    }
    createSmartGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configKey: this.GRID_CONFIG_KEY,
                deviceQuery: this.deviceQueryStringOutput
            };
            this.bsModalService.show(AddSmartGroupComponent, {
                class: 'modal-sm',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState
            });
        });
    }
}
DeviceListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListComponent, deps: [{ token: i1$1.DeviceGridService }, { token: i1.BsModalService }, { token: i3.ReplaceDeviceService }, { token: i4.Permissions }], target: i0.ɵɵFactoryTarget.Component });
DeviceListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceListComponent, selector: "c8y-device-list", providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
            useExisting: DeviceListComponent
        }
    ], ngImport: i0, template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'exchange'\" [label]=\"'Devices' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-management'\"\n    [label]=\"'All devices' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n    [actionControls]=\"actionControls\"\n    c8yProductExperience\n    [actionName]=\"'allDevices'\"\n  ></c8y-device-grid>\n\n  <c8y-replace-device-drawer></c8y-replace-device-drawer>\n</div>\n", dependencies: [{ kind: "component", type: i4.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i4.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i4.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "component", type: i4.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i4.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i4.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "component", type: i1$1.DeviceGridComponent, selector: "c8y-device-grid", inputs: ["dataCallback", "refresh", "title", "loadMoreItemsLabel", "loadingItemsLabel", "legacyConfigKey", "legacyFilterKey", "columns", "pagination", "infiniteScroll", "actionControls", "selectable", "singleSelection", "baseQuery", "bulkActionControls", "headerActionControls", "childDeviceGrid", "parentDeviceId", "withChildren", "showSearch", "activeClassName"], outputs: ["onColumnsChange", "onFilterChange", "onDeviceQueryStringChange", "itemsSelect"] }, { kind: "component", type: i3.ReplaceDeviceDrawerComponent, selector: "c8y-replace-device-drawer" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5$1.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-list', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
                            useExisting: DeviceListComponent
                        }
                    ], template: "<c8y-title>\n  {{ 'All devices' | translate }}\n</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'exchange'\" [label]=\"'Devices' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-management'\"\n    [label]=\"'All devices' | translate\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Create smart group' | translate }}\"\n    (click)=\"createSmartGroup()\"\n  >\n    <i c8yIcon=\"c8y-group-smart\"></i>\n    {{ 'Create smart group' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#viewing-devices\"></c8y-help>\n\n<div class=\"content-fullpage border-top border-bottom\">\n  <c8y-device-grid\n    [infiniteScroll]=\"(count$ | async) === undefined ? 'auto' : undefined\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n    [actionControls]=\"actionControls\"\n    c8yProductExperience\n    [actionName]=\"'allDevices'\"\n  ></c8y-device-grid>\n\n  <c8y-replace-device-drawer></c8y-replace-device-drawer>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.DeviceGridService }, { type: i1.BsModalService }, { type: i3.ReplaceDeviceService }, { type: i4.Permissions }]; } });

class DeviceListNavigationFactory {
    constructor() {
        this.nav = new NavigatorNode({
            label: gettext('All devices'),
            path: 'device',
            icon: 'c8y-device-management',
            parent: {
                label: gettext('Devices'),
                icon: 'exchange'
            },
            priority: 2000
        });
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.nav;
        });
    }
}
DeviceListNavigationFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListNavigationFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DeviceListNavigationFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListNavigationFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListNavigationFactory, decorators: [{
            type: Injectable
        }] });

const routes = [
    {
        path: 'device',
        component: DeviceListComponent
    }
];
class DeviceListModule {
}
DeviceListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, declarations: [DeviceListComponent, AddSmartGroupComponent], imports: [CoreModule,
        CommonModule,
        DeviceGridModule, i1$2.RouterModule, ReplaceDeviceDrawerComponent] });
DeviceListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, providers: [hookNavigator(DeviceListNavigationFactory), ReplaceDeviceService], imports: [CoreModule,
        CommonModule,
        DeviceGridModule,
        RouterModule.forChild(routes),
        ReplaceDeviceDrawerComponent] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        CommonModule,
                        DeviceGridModule,
                        RouterModule.forChild(routes),
                        ReplaceDeviceDrawerComponent
                    ],
                    declarations: [DeviceListComponent, AddSmartGroupComponent],
                    entryComponents: [DeviceListComponent],
                    exports: [],
                    providers: [hookNavigator(DeviceListNavigationFactory), ReplaceDeviceService]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AddSmartGroupComponent, DeviceListComponent, DeviceListModule, DeviceListNavigationFactory };
//# sourceMappingURL=c8y-ngx-components-device-list.mjs.map

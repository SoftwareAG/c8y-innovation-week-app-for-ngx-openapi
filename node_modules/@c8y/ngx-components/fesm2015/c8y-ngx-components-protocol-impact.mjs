import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Injectable, TemplateRef, Component, ViewChild, NgModule } from '@angular/core';
import * as i3 from '@c8y/ngx-components';
import { gettext, CoreModule, hookActionBar } from '@c8y/ngx-components';
import * as i1$1 from '@angular/router';
import * as i1 from '@c8y/client';
import * as i4 from '@angular/common';
import { get } from 'lodash-es';

class ImpactSubscriptionService {
    constructor(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact';
        this.header = { 'Content-Type': 'application/json' };
    }
    refreshDeviceResources(deviceId) {
        const options = {
            method: 'PUT',
            headers: this.header
        };
        return this.client.fetch(`${this.microserviceUrl}/refresh/${deviceId}`, options);
    }
}
ImpactSubscriptionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactSubscriptionService, deps: [{ token: i1.FetchClient }], target: i0.ɵɵFactoryTarget.Injectable });
ImpactSubscriptionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactSubscriptionService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactSubscriptionService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FetchClient }]; } });

class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
}
RefreshActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RefreshActionComponent, deps: [{ token: i0.ViewContainerRef }, { token: i1$1.Router }, { token: ImpactSubscriptionService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Component });
RefreshActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: RefreshActionComponent, selector: "c8y-impact-refresh-action", viewQueries: [{ propertyName: "templateCopy", first: true, predicate: ["templateCopy"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: RefreshActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-impact-refresh-action', template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1$1.Router }, { type: ImpactSubscriptionService }, { type: i3.AlertService }]; }, propDecorators: { templateCopy: [{
                type: ViewChild,
                args: ['templateCopy', { read: TemplateRef, static: true }]
            }] } });

class ImpactActionFactory {
    constructor(appState) {
        this.appState = appState;
    }
    get(activeRoute) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.appState.isApplicationAvailable(ImpactActionFactory.applicationName));
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    component: RefreshActionComponent
                });
            }
            return actions;
        });
    }
}
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory, deps: [{ token: i3.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
ImpactActionFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactActionFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i3.AppStateService }]; } });

class ImpactProtocolModule {
}
ImpactProtocolModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactProtocolModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ImpactProtocolModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ImpactProtocolModule, declarations: [RefreshActionComponent], imports: [CoreModule] });
ImpactProtocolModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactProtocolModule, providers: [ImpactSubscriptionService, hookActionBar(ImpactActionFactory)], imports: [CoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ImpactProtocolModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RefreshActionComponent],
                    imports: [CoreModule],
                    providers: [ImpactSubscriptionService, hookActionBar(ImpactActionFactory)],
                    entryComponents: [RefreshActionComponent]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ImpactActionFactory, ImpactProtocolModule, ImpactSubscriptionService, RefreshActionComponent };
//# sourceMappingURL=c8y-ngx-components-protocol-impact.mjs.map

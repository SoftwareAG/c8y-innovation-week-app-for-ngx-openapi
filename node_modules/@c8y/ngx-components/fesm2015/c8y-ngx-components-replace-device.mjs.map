{"version":3,"file":"c8y-ngx-components-replace-device.mjs","sources":["../../replace-device/replace-device.model.ts","../../replace-device/replace-device.service.ts","../../replace-device/replace-device-wizard/replace-device-wizard.component.ts","../../replace-device/replace-device-wizard/replace-device-wizard.component.html","../../replace-device/replace-device-drawer/replace-device-drawer.component.ts","../../replace-device/replace-device-drawer/replace-device-drawer.component.html","../../replace-device/c8y-ngx-components-replace-device.ts"],"sourcesContent":["import { IExternalIdentity, IManagedObject } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { Observable } from 'rxjs';\n\nexport interface ReplaceDeviceContext {\n  deviceToReplace: IManagedObject;\n  replacementDevice: IManagedObject;\n  replacementDeviceId: string;\n  newExternalIds: IExternalIdentity[];\n  oldExternalIds: IExternalIdentity[];\n  deleteReplacedDeviceOwner: boolean;\n  time: string;\n  skip?: boolean;\n}\n\nexport interface Error {\n  text: string;\n  detailedData?:\n    | string\n    | {\n        status: string;\n        statusText: string;\n      };\n}\n\n/**\n * Declares an execution step in the device replacement flow.\n */\nexport interface ReplaceDeviceStep {\n  /**\n   * Label to be used in the replace device wizard UI.\n   */\n  label: string;\n  /**\n   * Step implementation.\n   */\n  action: (context: ReplaceDeviceContext) => Observable<unknown> | Promise<unknown>;\n  /**\n   * Defines if the result from step execution should be passed to the next step in the flow.\n   */\n  overrideContext?: boolean;\n  info?: StepInfo;\n  /**\n   * Current execution state of the step.\n   */\n  state?: ReplaceDeviceStepState;\n  /**\n   * Error occured during step execution.\n   */\n  error?: Error;\n  /**\n   * !Internal use only! Flag to skip step execution, used to control retrial.\n   */\n  skip?: boolean;\n  /**\n   * !Internal use only! Stores the context the step was initially executed with.\n   */\n  context?: ReplaceDeviceContext;\n  /**\n   * !Internal use only! Context to be used for step re-trial.\n   */\n  seed?: ReplaceDeviceContext;\n}\n\n/**\n * Allows to display an info popover for a particular step.\n */\nexport interface StepInfo {\n  /**\n   * Message that will be displayed as a popover for the given step.\n   */\n  msg?: string | undefined;\n  /**\n   * A function that will be executed\n   */\n  getMessage?: (context: ReplaceDeviceContext, step: ReplaceDeviceStep) => string | undefined;\n}\n\nconst REPLACE_DEVICE_STEP_STATES = <const>[\n  'Pending',\n  'Executing',\n  'Skipped',\n  'Failed',\n  'Successful'\n];\nexport type ReplaceDeviceStepState = (typeof REPLACE_DEVICE_STEP_STATES)[number];\n\nexport function isValidReplaceDeviceStepState(state: unknown): state is ReplaceDeviceStepState {\n  return REPLACE_DEVICE_STEP_STATES.includes(state as ReplaceDeviceStepState);\n}\n\nexport const REPLACE_DEVICE_STEP_STATE: { [key: string]: ReplaceDeviceStepState } = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  SKIPPED: gettext('Skipped'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful')\n};\n\nexport interface State {\n  icon?: string;\n  styleClass?: string;\n}\n\nexport type ReplaceDeviceStepStatesMap = {\n  [key in ReplaceDeviceStepState]?: State;\n};\n\nexport const REPLACE_DEVICE_STEP_STATES_MAP: ReplaceDeviceStepStatesMap = {\n  Pending: {\n    icon: 'clock-o',\n    styleClass: 'text-info'\n  },\n  Executing: {\n    icon: 'refresh',\n    styleClass: 'text-info'\n  },\n  Skipped: {\n    icon: 'skip',\n    styleClass: 'text-info'\n  },\n  Failed: {\n    icon: 'exclamation-circle',\n    styleClass: 'text-danger'\n  },\n  Successful: {\n    icon: 'check-circle',\n    styleClass: 'text-success'\n  }\n};\n","import { Injectable } from '@angular/core';\nimport {\n  AuditRecordType,\n  AuditService,\n  EventService,\n  IdentityService,\n  IExternalIdentity,\n  IManagedObject,\n  InventoryService,\n  IResultList,\n  QueriesUtil,\n  UserService\n} from '@c8y/client';\nimport {\n  AlertService,\n  AppStateService,\n  BreadcrumbService,\n  gettext,\n  toObservable\n} from '@c8y/ngx-components';\nimport { cloneDeep, pick } from 'lodash-es';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  forkJoin,\n  from,\n  Observable,\n  of,\n  pipe,\n  Subject\n} from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  distinctUntilChanged,\n  map,\n  scan,\n  share,\n  shareReplay,\n  switchMap,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport {\n  Error,\n  isValidReplaceDeviceStepState,\n  ReplaceDeviceContext,\n  ReplaceDeviceStep,\n  ReplaceDeviceStepState,\n  REPLACE_DEVICE_STEP_STATE\n} from './replace-device.model';\n@Injectable()\nexport class ReplaceDeviceService {\n  private static readonly NON_REENTRANT_STATES: ReplaceDeviceStepState[] = [\n    'Executing',\n    'Successful'\n  ];\n\n  get drawerOpen$(): Observable<boolean> {\n    return this.drawerOpenedObs$;\n  }\n  get deviceToReplace$(): Observable<IManagedObject> {\n    return this.deviceToReplaceObs$;\n  }\n  get replacementDeviceId$(): Observable<string> {\n    return this.replacementDeviceIdObs$;\n  }\n\n  externalIds$: Observable<IResultList<IExternalIdentity>>;\n  externalIdsLoading$: Observable<boolean>;\n  externalIdsWithSelection$: Observable<Array<{ id: IExternalIdentity; selected: boolean }>>;\n  selectedExternalIds$: Observable<IExternalIdentity[]>;\n  deviceReplaced$: Observable<boolean>;\n  deviceReplacementInProgress$: Observable<boolean>;\n\n  steps: ReplaceDeviceStep[] = [];\n\n  private drawerOpenSubject$: Subject<boolean> = new BehaviorSubject(false);\n  private drawerOpenedObs$: Observable<boolean> = this.drawerOpenSubject$\n    .asObservable()\n    .pipe(shareReplay());\n  private deviceToReplaceSubject$: BehaviorSubject<IManagedObject> = new BehaviorSubject(null);\n  private deviceToReplaceObs$: Observable<IManagedObject> = this.deviceToReplaceSubject$\n    .asObservable()\n    .pipe(shareReplay());\n  private replacementDeviceIdSubject$: Subject<string> = new Subject();\n  private replacementDeviceIdObs$: Observable<string> = this.replacementDeviceIdSubject$\n    .asObservable()\n    .pipe(shareReplay());\n  private checkExternalId$: Subject<{ id: IExternalIdentity; checked: boolean }> = new Subject();\n  private externalIdsLoadingSubject$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  private triggerDeviceReplacementSubject$: Subject<void> = new Subject();\n  private deviceReplacementInProgressSubject$: Subject<boolean> = new Subject();\n\n  private queriesUtil: QueriesUtil = new QueriesUtil();\n\n  private closeCallback: () => void;\n\n  constructor(\n    private inventory: InventoryService,\n    private identity: IdentityService,\n    private audit: AuditService,\n    private event: EventService,\n    private user: UserService,\n    private appState: AppStateService,\n    private breadcrumbService: BreadcrumbService,\n    private alert: AlertService\n  ) {\n    this.externalIdsLoading$ = this.externalIdsLoadingSubject$.asObservable().pipe(shareReplay());\n    this.externalIds$ = this.replacementDeviceIdSubject$.pipe(\n      distinctUntilChanged(),\n      tap(() => this.externalIdsLoadingSubject$.next(true)),\n      switchMap(deviceId => this.identity.list(deviceId)),\n      tap(() => this.externalIdsLoadingSubject$.next(false)),\n      tap(() => this.checkExternalId(null, false)),\n      catchError(err => {\n        this.alert.addServerFailure(err);\n        return of(null);\n      }),\n      shareReplay()\n    );\n\n    this.externalIdsWithSelection$ = combineLatest([\n      this.externalIds$.pipe(\n        map(result => result?.data),\n        map(externalIds => externalIds?.map(id => ({ id, selected: true })))\n      ),\n      this.checkExternalId$\n    ]).pipe(\n      scan((acc, val) => {\n        const [selectedIds, lastAction] = acc;\n        const [_, checkAction] = val;\n        if (\n          !(\n            lastAction?.checked === checkAction?.checked &&\n            this.areExtIdsEqual(lastAction?.id, checkAction?.id)\n          )\n        ) {\n          selectedIds.forEach(\n            id =>\n              (id.selected = this.areExtIdsEqual(id.id, checkAction.id)\n                ? checkAction.checked\n                : id.selected)\n          );\n        }\n        return val;\n      }),\n      map(([externalIds]) => externalIds),\n      shareReplay()\n    );\n\n    this.selectedExternalIds$ = this.externalIdsWithSelection$.pipe(\n      map(ids => ids.filter(id => id.selected).map(id => id.id)),\n      shareReplay()\n    );\n\n    this.defineSteps();\n\n    const toContext = ([_, deviceToReplace, replacementDeviceId, newExternalIds]) => ({\n      deviceToReplace,\n      replacementDeviceId,\n      newExternalIds\n    });\n\n    this.deviceReplaced$ = this.triggerDeviceReplacementSubject$.pipe(\n      tap(() => this.deviceReplacementInProgressSubject$.next(true)),\n      withLatestFrom(this.deviceToReplace$, this.replacementDeviceId$, this.selectedExternalIds$),\n      map(toContext),\n      concatMap(context =>\n        this.steps\n          .map(step => this.executeStep(step))\n          .reduce((ctx, step) => ctx.pipe(step), of(context))\n      ),\n      tap(() => this.deviceReplacementInProgressSubject$.next(false)),\n      map(() => !this.steps.some(step => step.state === 'Failed')),\n      share()\n    );\n\n    this.deviceReplacementInProgress$ = this.deviceReplacementInProgressSubject$\n      .asObservable()\n      .pipe(shareReplay());\n  }\n\n  openDrawer(deviceToReplace: IManagedObject, closeCallback?: () => void) {\n    this.deviceToReplaceSubject$.next(deviceToReplace);\n    this.drawerOpenSubject$.next(true);\n    this.appendBreadcrumbs();\n    this.closeCallback = closeCallback;\n  }\n\n  closeDrawer() {\n    this.drawerOpenSubject$.next(false);\n    this.removeBreadcrumbs();\n    if (this.closeCallback && typeof this.closeCallback === 'function') {\n      this.closeCallback();\n    }\n  }\n\n  changeReplacementDeviceId(replacementDeviceId: string) {\n    this.replacementDeviceIdSubject$.next(replacementDeviceId);\n  }\n\n  checkExternalId(id: IExternalIdentity, checked: boolean) {\n    this.checkExternalId$.next({ id, checked });\n  }\n\n  replaceDevice() {\n    this.triggerDeviceReplacementSubject$.next();\n  }\n\n  retryStep(step?: ReplaceDeviceStep) {\n    this.steps.forEach(s => {\n      if (\n        (s.label === step?.label || !step) &&\n        !ReplaceDeviceService.NON_REENTRANT_STATES.includes(s.state)\n      ) {\n        s.skip = false;\n        s.seed = s.context;\n        s.state = 'Pending';\n        delete s.error;\n      } else {\n        s.skip = true;\n      }\n    });\n    this.replaceDevice();\n  }\n\n  resetSteps() {\n    this.steps.forEach(s => {\n      delete s.skip;\n      delete s.error;\n      delete s.state;\n      delete s.context;\n      delete s.seed;\n    });\n  }\n\n  private defineSteps() {\n    this.steps = [\n      {\n        label: gettext('Gather required data'),\n        overrideContext: true,\n        action: (context: ReplaceDeviceContext) => {\n          const { deviceToReplace, replacementDeviceId, newExternalIds } = context;\n          if (deviceToReplace.id === replacementDeviceId) {\n            throw new Error(\n              gettext(\n                'The device to replace and the replacement device cannot be one and the same device.'\n              )\n            );\n          }\n          return forkJoin([\n            from(\n              this.inventory.list({\n                query: this.queriesUtil.buildQuery({ owner: deviceToReplace.owner })\n              })\n            ).pipe(map(result => result?.data?.length === 1)),\n            from(this.inventory.detail(replacementDeviceId)).pipe(map(result => result?.data)),\n            from(this.identity.list(deviceToReplace.id)).pipe(map(result => result?.data))\n          ]).pipe(\n            map(([deleteReplacedDeviceOwner, replacementDevice, oldExternalIds]) => ({\n              deviceToReplace,\n              replacementDevice,\n              newExternalIds,\n              oldExternalIds,\n              deleteReplacedDeviceOwner,\n              time: new Date().toISOString()\n            }))\n          );\n        }\n      },\n      {\n        label: gettext('Delete external IDs of replacement device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { newExternalIds } = context;\n          return forkJoin(newExternalIds.map(id => this.identity.delete(id)));\n        }\n      },\n      {\n        label: gettext('Create new external IDs for the original device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { newExternalIds, deviceToReplace } = context;\n          return forkJoin(\n            newExternalIds\n              .map(extId => ({\n                ...pick(extId, ['type', 'externalId']),\n                managedObject: { ...pick(deviceToReplace, ['id']) }\n              }))\n              .map(id => this.identity.create(id))\n          );\n        }\n      },\n      {\n        label: gettext('Delete old external IDs of original device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { oldExternalIds } = context;\n          return oldExternalIds?.length\n            ? forkJoin(oldExternalIds.map(id => this.identity.delete(id)))\n            : of(REPLACE_DEVICE_STEP_STATE.SKIPPED);\n        },\n        info: {\n          getMessage: (_, step) =>\n            step.state === 'Skipped'\n              ? gettext('No existing external IDs were determined.')\n              : undefined\n        }\n      },\n      {\n        label: gettext('Change owner of original device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { deviceToReplace, replacementDevice, oldExternalIds, time } = context;\n          return this.inventory.update({\n            id: deviceToReplace.id,\n            owner: replacementDevice.owner,\n            c8y_LastReplacement: {\n              time,\n              user: this.appState.currentUser.value.id,\n              previousExternalIds: oldExternalIds.map(id => pick(id, ['externalId', 'type']))\n            }\n          });\n        }\n      },\n      {\n        label: gettext('Delete old owner of original device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { deleteReplacedDeviceOwner, deviceToReplace } = context;\n          return deleteReplacedDeviceOwner\n            ? this.user.delete(deviceToReplace.owner)\n            : of(REPLACE_DEVICE_STEP_STATE.SKIPPED);\n        },\n        info: {\n          getMessage: (_, step) =>\n            step.state === 'Skipped'\n              ? gettext('User was not deleted because it is assigned as an owner of other devices.')\n              : undefined\n        }\n      },\n      {\n        label: gettext('Delete replacement device'),\n        action: (context: ReplaceDeviceContext) => {\n          const { replacementDevice } = context;\n          return this.inventory.delete(replacementDevice.id);\n        }\n      },\n      {\n        label: gettext('Create event'),\n        action: (context: ReplaceDeviceContext) => {\n          const { deviceToReplace, oldExternalIds, newExternalIds, time } = context;\n          return this.event.create({\n            source: { id: deviceToReplace.id },\n            text: `Device with external ID(s) ${this.extIdsToString(\n              oldExternalIds\n            )} was replaced by device with external ID(s) ${this.extIdsToString(newExternalIds)}`,\n            time,\n            type: 'c8y_DeviceReplaced'\n          });\n        }\n      },\n      {\n        label: gettext('Create audit log'),\n        action: (context: ReplaceDeviceContext) => {\n          const { deviceToReplace, oldExternalIds, newExternalIds, time } = context;\n          return this.audit.create({\n            activity: gettext('Device replaced'),\n            source: { id: deviceToReplace.id },\n            text: `Device with external ID(s) ${this.extIdsToString(\n              oldExternalIds\n            )} was replaced by device with external ID(s) ${this.extIdsToString(newExternalIds)}`,\n            time,\n            type: AuditRecordType.INVENTORY,\n            user: this.appState.currentUser.value.id\n          });\n        }\n      }\n    ];\n  }\n\n  private executeStep(step: ReplaceDeviceStep) {\n    return pipe(\n      tap(\n        (ctx: ReplaceDeviceContext) =>\n          (step.state = step?.skip || ctx.skip ? step.state : REPLACE_DEVICE_STEP_STATE.EXECUTING)\n      ),\n      concatMap((ctx: ReplaceDeviceContext) => {\n        if (!step.context && !ctx.skip) {\n          step.context = cloneDeep(ctx);\n        }\n        const context = cloneDeep(step.seed ?? ctx);\n        return step?.skip || ctx.skip\n          ? of(context)\n          : toObservable(this.unwrapStepAction(context, step.action)).pipe(\n              tap(\n                result =>\n                  (step.state = isValidReplaceDeviceStepState(result)\n                    ? result\n                    : REPLACE_DEVICE_STEP_STATE.SUCCESSFUL)\n              ),\n              catchError(err => {\n                step.state = REPLACE_DEVICE_STEP_STATE.FAILED;\n                step.error = this.toError(err);\n                context.skip = step.overrideContext;\n                return of(context);\n              }),\n              tap(() => {\n                if (typeof step.info?.getMessage === 'function') {\n                  step.info.msg = step.info.getMessage(context, step);\n                }\n              }),\n              map(result => (step.overrideContext ? result : context))\n            );\n      })\n    );\n  }\n\n  private unwrapStepAction(\n    context: ReplaceDeviceContext,\n    action: (context: ReplaceDeviceContext) => Observable<unknown> | Promise<unknown>\n  ) {\n    try {\n      return action(context);\n    } catch (err) {\n      // bubble up any runtime errors\n      return of({}).pipe(\n        tap(() => {\n          throw err;\n        })\n      );\n    }\n  }\n\n  private appendBreadcrumbs(): void {\n    this.breadcrumbService.state.forEach(\n      bc => (bc.items = [...bc.items, { label: gettext('Replace device'), path: undefined }])\n    );\n    this.breadcrumbService.refresh();\n  }\n\n  private removeBreadcrumbs(): void {\n    this.breadcrumbService.state.forEach(bc => bc.items?.pop());\n    this.breadcrumbService.refresh();\n  }\n\n  private areExtIdsEqual(idA: IExternalIdentity, idB: IExternalIdentity): boolean {\n    return idA?.type === idB?.type && idA?.externalId === idB?.externalId;\n  }\n\n  private extIdsToString(extnernalIds: IExternalIdentity[]) {\n    return extnernalIds?.map(id => `${id.externalId} [${id.type}]`).join(', ');\n  }\n\n  private toError(err): Error {\n    const { data, res, message } = err;\n    let text = data?.message || message;\n    let detailedData;\n    if (data) {\n      if (typeof data === 'object') {\n        detailedData = data.exceptionMessage;\n      } else if (typeof data === 'string') {\n        detailedData = data;\n      }\n    }\n    const hasRelevantMessage = !!(text || detailedData);\n    if (!text) {\n      text = gettext('A server error occurred.');\n    }\n    if (res && !hasRelevantMessage) {\n      detailedData = pick(res, ['status', 'statusText']);\n    }\n\n    return { text, detailedData };\n  }\n}\n","import { Component, EventEmitter, OnDestroy, Output, ViewChild } from '@angular/core';\nimport {\n  C8yStepper,\n  Column,\n  CoreModule,\n  DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,\n  DATA_GRID_CONFIGURATION_STRATEGY,\n  gettext,\n  GridConfigContextProvider,\n  ModalService,\n  Status,\n  UserPreferencesConfigurationStrategy,\n  UserPreferencesGridConfigContext\n} from '@c8y/ngx-components';\nimport { DeviceGridModule, DeviceGridService } from '@c8y/ngx-components/device-grid';\nimport { DeviceSelectorModule } from '@c8y/ngx-components/operations/device-selector';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { REPLACE_DEVICE_STEP_STATES_MAP } from '../replace-device.model';\nimport { ReplaceDeviceService } from '../replace-device.service';\n\n@Component({\n  standalone: true,\n  selector: 'c8y-replace-device-wizard',\n  imports: [\n    CoreModule,\n    DeviceGridModule,\n    DeviceSelectorModule,\n    TooltipModule,\n    CollapseModule,\n    PopoverModule\n  ],\n  providers: [\n    DeviceGridService,\n    {\n      provide: DATA_GRID_CONFIGURATION_STRATEGY,\n      useClass: UserPreferencesConfigurationStrategy\n    },\n    {\n      provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,\n      useExisting: ReplaceDeviceWizardComponent\n    }\n  ],\n  templateUrl: './replace-device-wizard.component.html'\n})\nexport class ReplaceDeviceWizardComponent implements GridConfigContextProvider, OnDestroy {\n  private static readonly DEFAULT_VISIBLE_COLUMNS = [\n    'status',\n    'name',\n    'serialNumber',\n    'registrationDate',\n    'systemId',\n    'imei'\n  ];\n\n  REPLACE_DEVICE_STEP_STATES_MAP = REPLACE_DEVICE_STEP_STATES_MAP;\n\n  @Output()\n  onClose: EventEmitter<void> = new EventEmitter();\n  @ViewChild(C8yStepper, { static: true })\n  stepper: C8yStepper;\n\n  replacementDeviceId: string;\n\n  baseQuery$: Observable<object> = this.replaceDeviceService.deviceToReplace$.pipe(\n    map(device => ({\n      __not: {\n        id: {\n          __eq: device?.id\n        }\n      }\n    }))\n  );\n  columns: Column[];\n\n  constructor(\n    public replaceDeviceService: ReplaceDeviceService,\n    private deviceGridService: DeviceGridService,\n    private modal: ModalService\n  ) {\n    this.columns = this.deviceGridService.getDefaultColumns().map(column => {\n      column.visible = ReplaceDeviceWizardComponent.DEFAULT_VISIBLE_COLUMNS.includes(column.name);\n      return column;\n    });\n  }\n\n  getGridConfigContext(): UserPreferencesGridConfigContext {\n    return {\n      key: 'replace-device-wizard-grid',\n      configFilter: {\n        filter: false\n      }\n    };\n  }\n\n  async replace() {\n    try {\n      await this.modal.confirm(\n        gettext('Replace device'),\n        gettext(\n          'You are about to replace a device. When the process is finished, the replacement device and its data will be deleted. Do you want to proceed?'\n        ),\n        Status.DANGER,\n        { ok: gettext('Replace'), cancel: gettext('Cancel') }\n      );\n      this.replaceDeviceService.replaceDevice();\n      this.continue();\n    } catch (ex) {\n      // Intentionally empty\n    }\n  }\n\n  continue() {\n    this.stepper.selected.completed = true;\n    this.stepper.next();\n  }\n\n  cancel() {\n    this.close();\n  }\n\n  close() {\n    this.onClose.emit();\n  }\n\n  ngOnDestroy(): void {\n    this.replaceDeviceService.resetSteps();\n  }\n}\n","<c8y-stepper\n  class=\"d-contents c8y-stepper--no-btns\"\n  [disableDefaultIcons]=\"{ edit: true, done: false }\"\n  id=\"modal-body\"\n  [customClasses]=\"[\n    'col-xs-10',\n    'col-xs-offset-1',\n    'col-sm-8',\n    'col-sm-offset-2',\n    'm-t-24',\n    'm-b-40',\n    'p-0',\n    'flex-no-shrink'\n  ]\"\n  linear\n>\n  <cdk-step [label]=\"'Replacement device' | translate\">\n    <div class=\"p-16 p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"h4 text-center text-medium\">\n            {{ 'Replacement device' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <c8y-device-grid\n      class=\"flex-grow col-xs-12 no-gutter\"\n      [title]=\"'Select replacement device' | translate\"\n      [infiniteScroll]=\"'auto'\"\n      [actionControls]=\"[]\"\n      [columns]=\"columns\"\n      [selectable]=\"true\"\n      [singleSelection]=\"true\"\n      [baseQuery]=\"baseQuery$ | async\"\n      (itemsSelect)=\"replacementDeviceId = $event[0]\"\n    ></c8y-device-grid>\n    <c8y-stepper-buttons\n      class=\"d-block card-footer p-24 separator\"\n      [disabled]=\"!replacementDeviceId\"\n      (onCancel)=\"cancel()\"\n      (onNext)=\"replaceDeviceService.changeReplacementDeviceId(replacementDeviceId); continue()\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n\n  <cdk-step [label]=\"'Select external IDs' | translate\">\n    <div class=\"p-16 p-t-0 flex-no-shrink col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"h4 text-center text-medium\">\n            {{ 'Select external IDs' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <c8y-li class=\"page-sticky-header hidden-sm hidden-xs\">\n      <c8y-li-icon><i class=\"p-l-24\"></i></c8y-li-icon>\n      <c8y-li-body class=\"content-flex-40\">\n        <div class=\"col-4\">\n          <span\n            class=\"text-medium text-truncate\"\n            title=\" {{ 'Type' | translate }} \"\n          >\n            {{ 'Type' | translate }}\n          </span>\n        </div>\n        <div class=\"col-6\">\n          <span\n            class=\"text-medium text-truncate\"\n            title=\"{{ 'External ID' | translate }}\"\n          >\n            {{ 'External ID' | translate }}\n          </span>\n        </div>\n      </c8y-li-body>\n    </c8y-li>\n    <div\n      class=\"col-xs-12 flex-grow no-gutter\"\n      *ngIf=\"!(replaceDeviceService.externalIdsLoading$ | async); else loading\"\n    >\n      <div\n        class=\"card-inner-scroll fit-h\"\n        *ngIf=\"(replaceDeviceService.externalIdsWithSelection$ | async)?.length > 0; else noIds\"\n      >\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let extId of replaceDeviceService.externalIdsWithSelection$ | async\">\n              <c8y-li-checkbox\n                [selected]=\"extId.selected\"\n                (onSelect)=\"replaceDeviceService.checkExternalId(extId.id, $event)\"\n              ></c8y-li-checkbox>\n              <c8y-li-body class=\"content-flex-40\">\n                <div class=\"col-4 m-b-xs-8\">\n                  <div\n                    class=\"text-truncate\"\n                    title=\"{{ 'Type' | translate }}\"\n                  >\n                    <span\n                      class=\"text-label-small m-r-8 visible-xs visible-sm\"\n                      translate\n                    >\n                      Type\n                    </span>\n                    {{ extId.id.type }}\n                  </div>\n                </div>\n                <div class=\"col-6 m-b-xs-8\">\n                  <div\n                    class=\"text-truncate\"\n                    title=\"{{ 'External ID' | translate }}\"\n                  >\n                    <span\n                      class=\"text-label-small m-r-8 visible-xs visible-sm\"\n                      translate\n                    >\n                      External ID\n                    </span>\n                    {{ extId.id.externalId }}\n                  </div>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <ng-template #noIds>\n        <c8y-ui-empty-state\n          [icon]=\"'barcode'\"\n          [title]=\"'No external IDs assigned.'\"\n          [subtitle]=\"\n            'The selected replacement device does not have external IDs assigned. Go back to &quot;Replacement device&quot; and select a different device.'\n              | translate\n          \"\n          *ngIf=\"true\"\n        ></c8y-ui-empty-state>\n      </ng-template>\n    </div>\n    <ng-template #loading>\n      <div class=\"d-flex d-col a-i-center j-c-center fit-h\">\n        <c8y-loading></c8y-loading>\n      </div>\n    </ng-template>\n    <c8y-stepper-buttons\n      class=\"d-block card-footer p-24 separator\"\n      [disabled]=\"\n        (replaceDeviceService.externalIdsLoading$ | async) ||\n        !(replaceDeviceService.selectedExternalIds$ | async)?.length\n      \"\n      (onCancel)=\"cancel()\"\n      (onNext)=\"replace()\"\n      [labels]=\"{ next: ('Replace' | translate) }\"\n    ></c8y-stepper-buttons>\n  </cdk-step>\n\n  <cdk-step [label]=\"'Replace' | translate\">\n    <div class=\"p-16 p-t-0 flex-no-shrink col-xs-12 separator-bottom\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"h4 text-center text-medium\">\n            {{ 'Replace' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"d-flex d-col a-i-center j-c-center inner-scroll\">\n      <c8y-list-group class=\"col-sm-8 col-md-6\">\n        <c8y-li\n          *ngFor=\"let step of replaceDeviceService.steps\"\n          [attr.data-cy]=\"'c8y-replace-device-wizard--step-' + step.label\"\n        >\n          <c8y-li-icon>\n            <i\n              [c8yIcon]=\"REPLACE_DEVICE_STEP_STATES_MAP[step.state || 'Pending']?.icon\"\n              [tooltip]=\"(step.state || 'Pending').toString() | translate\"\n              [ngClass]=\"REPLACE_DEVICE_STEP_STATES_MAP[step.state || 'Pending']?.styleClass\"\n            ></i>\n          </c8y-li-icon>\n          <c8y-li-body>\n            <span [ngClass]=\"{ 'text-bold': !!step.error }\">{{ step.label | translate }}</span>\n            <button\n              class=\"btn-help btn-help--sm pull-right\"\n              [attr.aria-label]=\"'Help' | translate\"\n              [attr.aria-label]=\"step.info.msg | translate\"\n              [popover]=\"step.info.msg | translate\"\n              placement=\"right\"\n              triggers=\"focus\"\n              type=\"button\"\n              *ngIf=\"!!step.info?.msg\"\n            >\n              <i c8yIcon=\"question-circle-o\"></i>\n            </button>\n          </c8y-li-body>\n          <c8y-li-collapse\n            #alert\n            *ngIf=\"step.error\"\n          >\n            <span class=\"message\">{{ step.error?.text | translate }}</span>\n            <p\n              class=\"text-muted m-t-8\"\n              *ngIf=\"step?.error?.detailedData\"\n            >\n              <button\n                class=\"btn btn-clean\"\n                (click)=\"alert.expanded = !alert.expanded\"\n              >\n                <i c8yIcon=\"chevron-down\"></i>\n                <span *ngIf=\"!alert.expanded\">Show details</span>\n                <span *ngIf=\"alert.expanded\">Hide details</span>\n              </button>\n            </p>\n            <div\n              [collapse]=\"!alert.expanded\"\n              [isAnimated]=\"true\"\n            >\n              {{ step.error.detailedData | json }}\n            </div>\n          </c8y-li-collapse>\n          <c8y-li-action\n            icon=\"play\"\n            label=\"{{ 'Retry this step`button`' | translate }}\"\n            *ngIf=\"step.state === 'Failed' && !step.overrideContext\"\n            (click)=\"replaceDeviceService.retryStep(step)\"\n            data-cy=\"c8y-replace-device-wizard--retry-step\"\n          ></c8y-li-action>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n\n    <c8y-stepper-buttons\n      class=\"d-block card-footer p-24 separator\"\n      [pending]=\"replaceDeviceService.deviceReplacementInProgress$ | async\"\n      (onBack)=\"close()\"\n      [labels]=\"{ back: 'Close' | translate }\"\n    >\n      <button\n        class=\"btn btn-primary\"\n        [title]=\"'Retry' | translate\"\n        type=\"button\"\n        *ngIf=\"(replaceDeviceService.deviceReplaced$ | async) === false\"\n        (click)=\"replaceDeviceService.retryStep()\"\n        [ngClass]=\"{ 'btn-pending': replaceDeviceService.deviceReplacementInProgress$ | async }\"\n        [disabled]=\"replaceDeviceService.deviceReplacementInProgress$ | async\"\n        data-cy=\"c8y-replace-device-wizard--btn-retry\"\n      >\n        {{ 'Retry' | translate }}\n      </button>\n    </c8y-stepper-buttons>\n  </cdk-step>\n</c8y-stepper>\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { interval, Observable } from 'rxjs';\nimport { delayWhen } from 'rxjs/operators';\nimport { ReplaceDeviceWizardComponent } from '../replace-device-wizard/replace-device-wizard.component';\nimport { ReplaceDeviceService } from '../replace-device.service';\n\n@Component({\n  standalone: true,\n  selector: 'c8y-replace-device-drawer',\n  imports: [CoreModule, ReplaceDeviceWizardComponent],\n  templateUrl: './replace-device-drawer.component.html'\n})\nexport class ReplaceDeviceDrawerComponent implements OnDestroy {\n  @ViewChild(ReplaceDeviceWizardComponent, { static: true })\n  wizard: ReplaceDeviceWizardComponent;\n\n  showWizard$: Observable<boolean> = this.replaceDeviceService.drawerOpen$.pipe(\n    // when closing wait for drawer animation to end\n    delayWhen(open => interval(open ? 0 : 400))\n  );\n\n  constructor(public replaceDeviceService: ReplaceDeviceService) {}\n\n  ngOnDestroy(): void {\n    this.replaceDeviceService.closeDrawer();\n  }\n}\n","<div [ngClass]=\"{ drawerOpen: replaceDeviceService.drawerOpen$ | async }\">\n  <div class=\"bottom-drawer\">\n    <div class=\"d-flex d-col no-align-items fit-h\">\n      <c8y-replace-device-wizard\n        class=\"d-contents\"\n        *ngIf=\"showWizard$ | async\"\n        (onClose)=\"replaceDeviceService.closeDrawer()\"\n      ></c8y-replace-device-wizard>\n    </div>\n  </div>\n</div>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1.ReplaceDeviceService"],"mappings":"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"}
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, EventEmitter, Component, Input, Output, Inject, ViewChild, Optional, HostBinding, TemplateRef, NgModule } from '@angular/core';
import { __awaiter, __rest } from 'tslib';
import * as i5 from '@c8y/ngx-components';
import { gettext, NavigatorNode, Status, getActivatedRoute, ViewContext, ICON_LIST, DashboardChildChange, hookRoute, hookTab, HookProviderTypes, hookActionBar, CoreModule, hookNavigator, FilterInputComponent } from '@c8y/ngx-components';
import { assign, pick, some, keys, keyBy, has, cloneDeep, set, reduce, forEach, get, clone, omit, sortBy, escapeRegExp, findIndex, values, kebabCase, every } from 'lodash-es';
import * as i1 from '@c8y/client';
import { QueriesUtil } from '@c8y/client';
import * as i3$1 from 'ngx-bootstrap/modal';
import { of, from, combineLatest, Subject, iif, timer, BehaviorSubject } from 'rxjs';
import { tap, map, catchError, throwIfEmpty, filter, mergeMap, toArray, mergeAll, switchMap, debounceTime, distinctUntilChanged, shareReplay } from 'rxjs/operators';
import * as i3 from '@ngx-translate/core';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i5$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@angular/forms';
import { ControlContainer, NgForm } from '@angular/forms';
import * as i4 from 'ngx-bootstrap/popover';
import { PopoverModule } from 'ngx-bootstrap/popover';
import * as i8 from 'ngx-bootstrap/dropdown';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import * as i3$2 from 'ngx-bootstrap/tooltip';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import * as i8$1 from '@c8y/ngx-components/assets-navigator';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';

const CONTEXT_DASHBOARD_CONFIG = new InjectionToken('ContextDashboardConfig');
var ContextDashboardType;
(function (ContextDashboardType) {
    ContextDashboardType["Device"] = "device";
    ContextDashboardType["DeviceType"] = "type";
    ContextDashboardType["Group"] = "group";
    ContextDashboardType["Named"] = "name";
    ContextDashboardType["Report"] = "report";
})(ContextDashboardType || (ContextDashboardType = {}));
const WIDGET_HEADER_CLASSES = [
    {
        label: gettext('Regular`style`'),
        class: 'panel-title-regular',
        description: gettext('The widget has no border between header and content.')
    },
    {
        label: gettext('Border`style`'),
        class: 'panel-title-border',
        description: gettext('The widget has a small separation border between header and content.')
    },
    {
        label: gettext('Overlay`style`'),
        class: 'panel-title-overlay',
        description: gettext('The widget content overlays the header.')
    },
    {
        label: gettext('Hidden`style`'),
        class: 'panel-title-hidden',
        description: gettext('The widget header is not shown.')
    }
];
const WIDGET_CONTENT_CLASSES = [
    {
        label: gettext('Match dashboard`style`'),
        class: 'panel-content-light',
        description: gettext('The widget appearance matches the dashboard appearance.')
    },
    {
        label: gettext('Light`style`'),
        class: 'panel-content-white',
        description: gettext('The widget has light appearance, that is, dark text on light background.')
    },
    {
        label: gettext('Dark`style`'),
        class: 'panel-content-dark',
        description: gettext('The widget has dark appearance, that is, light text on dark background.')
    },
    {
        label: gettext('Transparent`style`'),
        class: 'panel-content-transparent',
        description: gettext('The widget has no background.')
    },
    {
        label: gettext('Branded`style`'),
        class: 'panel-content-branded',
        description: gettext('The widget is styled with the main brand color.')
    }
];
const DASHBOARD_THEME_CLASSES = [
    {
        label: gettext('Match UI`theme`'),
        class: 'dashboard-theme-light',
        description: gettext('The dashboard appearance matches the UI appearance.')
    },
    {
        label: gettext('Light`theme`'),
        class: 'dashboard-theme-white',
        description: gettext('The dashboard has light appearance, that is, dark text on light background.')
    },
    {
        label: gettext('Dark`theme`'),
        class: 'dashboard-theme-dark',
        description: gettext('The dashboard has dark appearance, that is, light text on dark background.')
    },
    // {
    //   label: gettext('Transparent`theme`'),
    //   class: 'dashboard-theme-transparent',
    //   description: gettext(
    //     'The dashboard is styled with a transparent background and therefore is border-less.'
    //   )
    // },
    {
        label: gettext('Branded`theme`'),
        class: 'dashboard-theme-branded',
        description: gettext('The dashboard is styled using the brand palette.')
    }
];
const STYLING_CLASS_PREFIXES = ['dashboard-theme-', 'panel-title-', 'panel-content-'];
const ALL_GLOBAL_ROLES_SELECTED = 'all';
const PRODUCT_EXPERIENCE = {
    DASHBOARD: {
        EVENTS: {
            DASHBOARD_AVAILABILITY: 'dashboardAvailability'
        },
        COMPONENTS: {
            DASHBOARD_AVAILABILITY: 'dashboard-availability'
        },
        ACTIONS: {
            APPLY_GLOBAL_ROLES_CHANGES: 'applyGlobalRolesChanges'
        }
    }
};

class ReportDashboardService {
    constructor(inventoryService, navigatorService) {
        this.inventoryService = inventoryService;
        this.navigatorService = navigatorService;
        this.queriesUtil = new QueriesUtil();
    }
    listReports(options = {}) {
        let query = { __has: 'c8y_Report' };
        if (options.filter) {
            query = this.queriesUtil.addAndFilter(query, options.filter);
        }
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            pageSize: options.pageSize || 50,
            withTotalPages: true
        };
        return this.inventoryService.list(filters);
    }
    createReport(reportCfg) {
        const report = {};
        Object.assign(report, reportCfg);
        Object.assign(report, { c8y_Report: {} });
        return this.inventoryService.create(report);
    }
    addReportNavigatorNode(report) {
        const node = new NavigatorNode({
            label: report.name,
            path: `reports/${report.id}`,
            icon: report.icon,
            priority: report.priority
        });
        this.navigatorService.add(node);
    }
    removeNavigatorNode(report) {
        this.navigatorService.state.forEach(node => {
            if (node.path === `reports/${report.id}`) {
                this.navigatorService.remove(node);
                return;
            }
        });
    }
}
ReportDashboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardService, deps: [{ token: i1.InventoryService }, { token: i5.NavigatorService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportDashboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i5.NavigatorService }]; } });

const REPORTS_NAVIGATOR_NODE_PRIORITY = 40;
const REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY = 30;
class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    featureId: 'reports',
                    priority: REPORTS_NAVIGATOR_NODE_PRIORITY
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority,
                        routerLinkExact: false
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
}
ReportDashboardNavigationFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardNavigationFactory, deps: [{ token: i5.NavigatorService }, { token: i1.InventoryService }, { token: ReportDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportDashboardNavigationFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardNavigationFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardNavigationFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i5.NavigatorService }, { type: i1.InventoryService }, { type: ReportDashboardService }]; } });

class ContextDashboardService {
    get formDisabled() {
        return this._formDisabled;
    }
    set formDisabled(value) {
        this._formDisabled = value;
    }
    constructor(inventory, tabs, modal, translateService, router, navigator, permissions, alert, dynamicComponent) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.navigator = navigator;
        this.permissions = permissions;
        this.alert = alert;
        this.dynamicComponent = dynamicComponent;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.INVENTORY_ROLES = ['ROLE_INVENTORY_ADMIN'];
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    create(dashboardCfg, context, name = '') {
        return __awaiter(this, void 0, void 0, function* () {
            let id = '';
            let dashboardType;
            if (context) {
                id = context.contextData.id;
                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, context);
            }
            if (name) {
                dashboardType = ContextDashboardType.Named;
            }
            const dashboard = {};
            assign(dashboard, { c8y_Dashboard: dashboardCfg });
            const value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : name || id;
            const fragmentKey = this.createFragmentKey(dashboardType, value);
            dashboard[fragmentKey] = {};
            if (this.shouldSetGlobal(dashboard, context)) {
                assign(dashboard, { c8y_Global: {} });
            }
            dashboard.name = dashboard.c8y_Dashboard.name;
            const { data } = dashboardType === ContextDashboardType.Group ||
                dashboardType === ContextDashboardType.Device ||
                (context && dashboardType === ContextDashboardType.Named)
                ? yield this.inventory.childAdditionsCreate(dashboard, id)
                : yield this.inventory.create(dashboard);
            return data;
        });
    }
    detail(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.detail(dashboardMO);
            this.cache.set(dashboardMO.id, data);
            return data;
        });
    }
    update(dashboard) {
        return __awaiter(this, void 0, void 0, function* () {
            dashboard.name = dashboard.c8y_Dashboard.name;
            const keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
            yield this.serializeWidgetConfigs(keepFragments);
            const { data } = yield this.inventory.update(keepFragments);
            this.cache.set(dashboard.id, data);
            return data;
        });
    }
    delete(dashboard, withConfirmation = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (withConfirmation) {
                    let msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}". Do you want to proceed?`);
                    if (this.isDeviceType(dashboard)) {
                        msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}" from all devices of the type "{{ deviceType }}".
           Do you want to proceed?`);
                    }
                    yield this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                        dashboardName: dashboard.c8y_Dashboard.name,
                        deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                    }), Status.DANGER, {
                        ok: gettext('Delete'),
                        cancel: gettext('Cancel')
                    });
                }
                yield this.inventory.delete(dashboard);
                const tabToRemove = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboard.id}`));
                this.tabs.remove(tabToRemove);
                this.tabs.refresh();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    activateDashboards(route, types) {
        const { dashboardId } = route.params;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(dashboard => {
                route.data = { dashboard };
            }), map(() => true), catchError(() => {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    }
    getNamedDashboardOrCreate(name, defaultWidgets, context) {
        const children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(() => from(this.create({
            children,
            widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
        }, context, name))));
    }
    refreshTabs(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isNamed(dashboardMO)) {
                const tabToUpdate = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboardMO.id}`));
                const data = yield this.detail(dashboardMO);
                if (tabToUpdate) {
                    const { icon, priority, name } = data.c8y_Dashboard;
                    tabToUpdate.icon = icon;
                    tabToUpdate.priority = priority;
                    tabToUpdate.label = name;
                }
                this.tabs.refresh();
            }
        });
    }
    updateNavigatorItem(mo) {
        this.navigator.state.forEach(node => {
            if (node.path === `reports/${mo.id}`) {
                this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            const nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: `reports/${mo.id}`,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    }
    navigateToDashboard(dashboardMO) {
        return __awaiter(this, void 0, void 0, function* () {
            if (/dashboard/.test(this.router.url)) {
                this.router.navigate(['..', dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
            else {
                this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
        });
    }
    canEditDashboard(mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    }
    isNamed(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}`).test(prop));
    }
    isReport(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${this.REPORT_PARTIAL_NAME}`).test(prop));
    }
    isDeviceType(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.DeviceType}${this.INDEX_SPLIT}`).test(prop));
    }
    isDeviceDashboard(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Device}${this.INDEX_SPLIT}`).test(prop));
    }
    isGroupDashboard(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Group}${this.INDEX_SPLIT}`).test(prop));
    }
    getFilteredDashboardStyles(styleList) {
        return styleList.filter(c => STYLING_CLASS_PREFIXES.some(classPrefix => c.startsWith(classPrefix)));
    }
    getStyling(styleList, styleName, defaultValue) {
        const styling = styleList.find(style => style && new RegExp(`-${styleName}$`, 'i').test(style.class));
        return styling ? styling.class : defaultValue;
    }
    mapWidgets(widgets) {
        return keyBy(widgets.map(widget => {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    }
    getDashboard$(dashboardIdOrName, dashboardType, mo) {
        const cache = this.cache.get(dashboardIdOrName);
        const dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        const cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(dashboard => this.cacheDashboard(dashboard)), filter(dashboard => dashboard.id === dashboardIdOrName ||
            has(dashboard, `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${dashboardIdOrName}`)));
        return cache ? of(cache) : cacheRefresh;
    }
    pasteDashboard(newContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.copyClipboard) {
                if (this.canPasteDashboard(this.copyClipboard, newContext.context)) {
                    const dashboardToPaste = this.createContextDashboardCopy(this.copyClipboard.dashboard, newContext.contextData, this.copyClipboard.context.contextData);
                    const dashboard = yield this.create(this.clean(dashboardToPaste), newContext);
                    this.copyClipboard = undefined;
                    this.navigateToDashboard(dashboard);
                }
            }
        });
    }
    serializeWidgetConfigs(dashboard) {
        return __awaiter(this, void 0, void 0, function* () {
            const children = cloneDeep(dashboard.c8y_Dashboard.children);
            if (!children) {
                return;
            }
            const configs = Object.values(children);
            const details = configs.map(({ componentId, config }) => ({ componentId, config }));
            const results = yield this.dynamicComponent.serializeConfigs(details);
            results.forEach((result, index) => {
                Object.entries(result).forEach(([key, value]) => {
                    set(details[index].config, key, value);
                });
            });
            dashboard.c8y_Dashboard.children = children;
        });
    }
    canPasteDashboard(copyClipboard, currentContext) {
        const clipboardViewContext = copyClipboard.context.context;
        if (currentContext !== clipboardViewContext) {
            if (clipboardViewContext === ViewContext.Device) {
                this.alert.warning(gettext('Device dashboards can only be copied into a device.'));
            }
            else if (clipboardViewContext === ViewContext.Group) {
                this.alert.warning(gettext('Group dashboards can only be copied into a group.'));
            }
            return false;
        }
        return true;
    }
    createContextDashboardCopy(dash, newContext, oldContext) {
        const children = reduce(dash.children, (_children, child) => {
            const { id } = child;
            const cfg = child.config;
            const propertiesToCopy = {
                device: device => this.replaceContextInObj(device, newContext, oldContext),
                datapoints: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                dataPoints: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                datapointsGauge: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext),
                datapointsLabels: dataPoints => this.replaceContextInDataPoints(dataPoints, newContext, oldContext)
            };
            if (cfg) {
                this.copyProperties(cfg, propertiesToCopy);
                if (cfg.options) {
                    this.copyProperties(cfg.options, propertiesToCopy);
                }
            }
            _children[id] = cloneDeep(child);
            return _children;
        }, {});
        dash.children = children;
        return dash;
    }
    copyProperties(obj, propertiesToCopy) {
        forEach(propertiesToCopy, (copyFn, property) => {
            if (obj[property]) {
                obj[property] = copyFn(obj[property]);
            }
        });
    }
    replaceContextInDataPoints(dataPoints, newContext, oldContext) {
        dataPoints.forEach(dp => {
            dp.__target = this.replaceContextInObj(dp.__target, newContext, oldContext);
        });
        return dataPoints;
    }
    replaceContextInObj(obj, newContext, oldContext) {
        if (obj && obj.id === oldContext.id) {
            Object.assign(obj, pick(newContext, ['id', 'name']));
        }
        return obj;
    }
    getTabs$(mo, dashboardType) {
        const dashboards = this.getContextDashboards(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(mergeMap(dashboard => this.verifyDashboardAvailability$(dashboard)), mergeMap(([dashboard]) => this.removeDashboardMoProperty(dashboard)), tap(dashboard => this.cacheDashboard(dashboard)), map(dashboard => this.createDashboardTab(dashboard)), toArray());
    }
    verifyDashboardAvailability$(dashboard) {
        var _a;
        const globalRolesIds = (_a = dashboard === null || dashboard === void 0 ? void 0 : dashboard.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.globalRolesIds;
        const canEdit = from(this.permissions.canEdit(this.INVENTORY_ROLES, dashboard, { skipRequestCheck: true }));
        const hasAnyGlobalRole = !globalRolesIds || globalRolesIds === ALL_GLOBAL_ROLES_SELECTED
            ? of(true)
            : of(this.permissions.hasAnyGlobalRole(globalRolesIds));
        return combineLatest([of(dashboard), canEdit, hasAnyGlobalRole]).pipe(filter(([, canEdit, hasAnyGlobalRole]) => canEdit || hasAnyGlobalRole));
    }
    getContextDashboards$(requests) {
        return from(requests).pipe(mergeAll(), mergeMap(response => response.data));
    }
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    removeDashboardMoProperty(dashboard) {
        return __awaiter(this, void 0, void 0, function* () {
            const dashboardCopy = cloneDeep(dashboard);
            const children = get(dashboardCopy, 'c8y_Dashboard.children');
            let updateDashboard = false;
            forEach(children, child => {
                if (get(child, 'componentTransformConfigWithContext')) {
                    delete child.componentTransformConfigWithContext;
                    updateDashboard = true;
                }
                if (get(child, 'config.dashboardMo')) {
                    delete child.config.dashboardMo;
                    updateDashboard = true;
                }
            });
            if (updateDashboard) {
                yield this.update(dashboardCopy);
            }
            return dashboardCopy;
        });
    }
    cacheDashboard(dashboard) {
        this.cache.set(dashboard.id, dashboard);
    }
    createDashboardTab(dashboard) {
        const { c8y_Dashboard: _dashboard, id } = dashboard;
        return {
            icon: _dashboard.icon,
            path: `${this.DASHBOARD_ROUTE_PATH}/${id}`,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    }
    clean(dashboard) {
        const jsonString = JSON.stringify(dashboard, (key, value) => {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    }
    getNamedDashboard(name) {
        return this.inventory.list({
            fragmentType: `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${name}`,
            pageSize: 1
        });
    }
    getContextDashboards(mo, dashboardType) {
        return dashboardType.map((type) => this.inventory.list({
            fragmentType: this.createDashboardFragment(mo, type),
            pageSize: this.DEFAULT_PAGESIZE
        }));
    }
    createDashboardFragment(mo, type) {
        let value;
        if (mo.c8y_Report) {
            value = `${this.REPORT_PARTIAL_NAME}${mo.id}`;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${type}${this.INDEX_SPLIT}${value}`;
    }
    getDashboardTypeFromViewContext(dashboardCfg, context) {
        let dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    }
    createFragmentKey(contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    }
    shouldSetGlobal(dashboard, context) {
        if ((!context && this.isNamed(dashboard) && !this.isReport(dashboard)) ||
            this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    }
}
ContextDashboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, deps: [{ token: i1.InventoryService }, { token: i5.TabsService }, { token: i5.ModalService }, { token: i3.TranslateService }, { token: i1$1.Router }, { token: i5.NavigatorService }, { token: i5.Permissions }, { token: i5.AlertService }, { token: i5.DynamicComponentService }], target: i0.ɵɵFactoryTarget.Injectable });
ContextDashboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i5.TabsService }, { type: i5.ModalService }, { type: i3.TranslateService }, { type: i1$1.Router }, { type: i5.NavigatorService }, { type: i5.Permissions }, { type: i5.AlertService }, { type: i5.DynamicComponentService }]; } });

class AppearanceSettingsComponent {
    constructor() {
        this.themeClass = 'dashboard-theme-light';
        this.headerClass = 'panel-title-regular';
        this.themeClassChange = new EventEmitter();
        this.headerClassChange = new EventEmitter();
        this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
        this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
    }
    themeClassClick(value) {
        value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
        this.themeClass = value;
        this.themeClassChange.emit(value);
    }
    headerClassClick(value) {
        value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
        this.headerClass = value;
        this.headerClassChange.emit(value);
    }
    resetToDefault(value, compareTo, defaultValue) {
        if (defaultValue && value === compareTo) {
            value = defaultValue;
        }
        return value;
    }
}
AppearanceSettingsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppearanceSettingsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AppearanceSettingsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AppearanceSettingsComponent, selector: "c8y-appearance-settings", inputs: { themeClass: "themeClass", headerClass: "headerClass", defaultThemeClass: "defaultThemeClass", defaultHeaderClass: "defaultHeaderClass", possibleStylingTheme: "possibleStylingTheme", possibleStylingHeader: "possibleStylingHeader" }, outputs: { themeClassChange: "themeClassChange", headerClassChange: "headerClassChange" }, ngImport: i0, template: "<div class=\"legend form-block\">\n  <span translate>Layout</span>\n</div>\n<div class=\"row\">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\">\n      <li\n        class=\"list-group-item d-flex a-i-center p-l-0 p-r-0 fit-w\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\" style=\"max-width: calc(100% - 24px)\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n            <span\n              class=\"text-truncate\"\n              title=\"{{ themeClassItem.label | translate }}{{\n                themeClassItem.class === defaultThemeClass\n                  ? ' | ' + ('Dashboard default' | translate)\n                  : ''\n              }}\"\n            >\n              <span>{{ themeClassItem.label | translate }}</span>\n              <br />\n              <small\n                *ngIf=\"themeClassItem.class === defaultThemeClass\"\n                class=\"text-muted\"\n                translate\n              >\n                Dashboard default\n              </small>\n            </span>\n          </label>\n        </div>\n\n        <button\n          class=\"btn-help btn-help--sm m-l-auto\"\n          type=\"button\"\n          [attr.aria-label]=\"'Help' | translate\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          placement=\"top\"\n          triggers=\"focus\"\n          container=\"body\"\n        ></button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\">\n      <li\n        class=\"list-group-item d-flex a-i-center p-l-0 p-r-0\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\" style=\"max-width: calc(100% - 24px)\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n            <span\n              class=\"text-truncate\"\n              title=\"{{ headerClassItem.label | translate }}{{\n                headerClassItem.class === defaultHeaderClass\n                  ? ' | ' + ('Dashboard default' | translate)\n                  : ''\n              }}\"\n            >\n              <span>{{ headerClassItem.label | translate }}</span>\n              <br />\n              <small\n                *ngIf=\"headerClassItem.class === defaultHeaderClass\"\n                class=\"text-muted\"\n                translate\n              >\n                Dashboard default\n              </small>\n            </span>\n          </label>\n        </div>\n        <button\n          class=\"btn-help btn-help--sm m-l-auto\"\n          type=\"button\"\n          [attr.aria-label]=\"'Help' | translate\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          placement=\"top\"\n          triggers=\"focus\"\n          container=\"body\"\n        ></button>\n      </li>\n    </ul>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppearanceSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-appearance-settings', viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], template: "<div class=\"legend form-block\">\n  <span translate>Layout</span>\n</div>\n<div class=\"row\">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\">\n      <li\n        class=\"list-group-item d-flex a-i-center p-l-0 p-r-0 fit-w\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\" style=\"max-width: calc(100% - 24px)\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n            <span\n              class=\"text-truncate\"\n              title=\"{{ themeClassItem.label | translate }}{{\n                themeClassItem.class === defaultThemeClass\n                  ? ' | ' + ('Dashboard default' | translate)\n                  : ''\n              }}\"\n            >\n              <span>{{ themeClassItem.label | translate }}</span>\n              <br />\n              <small\n                *ngIf=\"themeClassItem.class === defaultThemeClass\"\n                class=\"text-muted\"\n                translate\n              >\n                Dashboard default\n              </small>\n            </span>\n          </label>\n        </div>\n\n        <button\n          class=\"btn-help btn-help--sm m-l-auto\"\n          type=\"button\"\n          [attr.aria-label]=\"'Help' | translate\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          placement=\"top\"\n          triggers=\"focus\"\n          container=\"body\"\n        ></button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\">\n      <li\n        class=\"list-group-item d-flex a-i-center p-l-0 p-r-0\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\" style=\"max-width: calc(100% - 24px)\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n            <span\n              class=\"text-truncate\"\n              title=\"{{ headerClassItem.label | translate }}{{\n                headerClassItem.class === defaultHeaderClass\n                  ? ' | ' + ('Dashboard default' | translate)\n                  : ''\n              }}\"\n            >\n              <span>{{ headerClassItem.label | translate }}</span>\n              <br />\n              <small\n                *ngIf=\"headerClassItem.class === defaultHeaderClass\"\n                class=\"text-muted\"\n                translate\n              >\n                Dashboard default\n              </small>\n            </span>\n          </label>\n        </div>\n        <button\n          class=\"btn-help btn-help--sm m-l-auto\"\n          type=\"button\"\n          [attr.aria-label]=\"'Help' | translate\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          placement=\"top\"\n          triggers=\"focus\"\n          container=\"body\"\n        ></button>\n      </li>\n    </ul>\n  </div>\n</div>\n" }]
        }], propDecorators: { themeClass: [{
                type: Input
            }], headerClass: [{
                type: Input
            }], defaultThemeClass: [{
                type: Input
            }], defaultHeaderClass: [{
                type: Input
            }], themeClassChange: [{
                type: Output
            }], headerClassChange: [{
                type: Output
            }], possibleStylingTheme: [{
                type: Input
            }], possibleStylingHeader: [{
                type: Input
            }] } });

class WidgetPreviewComponent {
    constructor() {
        this.previewClasses = {
            'dashboard-theme-light': true,
            'panel-title-regular': true
        };
    }
}
WidgetPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetPreviewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
WidgetPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: WidgetPreviewComponent, selector: "c8y-widget-preview", inputs: { previewClasses: "previewClasses", tab: "tab" }, ngImport: i0, template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul role=\"menu\" class=\"nav nav-tabs nav-tabsc8y\">\n        <li role=\"menuitem\" class=\"active\" style=\"left: 16px\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 300px\">\n      <div class=\"card-header-actions\" style=\"z-index: 8\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <button\n              type=\"button\"\n              title=\"{{ 'Settings' | translate }}\"\n              (click)=\"(false)\"\n              class=\"btn btn-dot dropdown-toggle c8y-dropdown\"\n              aria-haspopup=\"true\"\n            >\n              <i c8yIcon=\"cog\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-widget-preview', template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open p-absolute overflow-hidden\"\n    style=\"left: 0; margin: 0 15px\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul role=\"menu\" class=\"nav nav-tabs nav-tabsc8y\">\n        <li role=\"menuitem\" class=\"active\" style=\"left: 16px\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 300px\">\n      <div class=\"card-header-actions\" style=\"z-index: 8\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <button\n              type=\"button\"\n              title=\"{{ 'Settings' | translate }}\"\n              (click)=\"(false)\"\n              class=\"btn btn-dot dropdown-toggle c8y-dropdown\"\n              aria-haspopup=\"true\"\n            >\n              <i c8yIcon=\"cog\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], propDecorators: { previewClasses: [{
                type: Input
            }], tab: [{
                type: Input
            }] } });

class DashboardAvailabilityComponent {
    /**
     * Ids of global roles assigned to the dashboard or a string "all" indicating the selection of all global roles.
     * The value undefined is treated as equivalent to 'all'.
     */
    get globalRolesIds() {
        return this._globalRolesIds;
    }
    set globalRolesIds(ids) {
        if (!ids || ids === ALL_GLOBAL_ROLES_SELECTED) {
            this._globalRolesIds = ALL_GLOBAL_ROLES_SELECTED;
            return;
        }
        this._globalRolesIds = [...ids];
    }
    constructor(userGroupService, gainsightService) {
        this.userGroupService = userGroupService;
        this.gainsightService = gainsightService;
        this.globalRolesIdsChange = new EventEmitter();
        this.globalRolesItems = [];
        this.globalRolesItemsSelected = [];
        this.globalRoles = [];
        this.PAGE_SIZE = 100;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.globalRoles = yield this.getGlobalRoles();
            this.globalRolesItems = this.mapGlobalRolesToItems();
            this.globalRolesItemsSelected = this.getSelectedGlobalRolesItems();
        });
    }
    onSelected(items) {
        var _a;
        if (!items || !Array.isArray(items)) {
            return;
        }
        const allItemsSelected = items.length === this.globalRolesItems.length;
        this.globalRolesItemsSelected = items;
        if (allItemsSelected) {
            this.globalRolesIdsChange.emit(ALL_GLOBAL_ROLES_SELECTED);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.DASHBOARD.EVENTS.DASHBOARD_AVAILABILITY, {
                component: PRODUCT_EXPERIENCE.DASHBOARD.COMPONENTS.DASHBOARD_AVAILABILITY,
                action: PRODUCT_EXPERIENCE.DASHBOARD.ACTIONS.APPLY_GLOBAL_ROLES_CHANGES,
                globalRoles: ALL_GLOBAL_ROLES_SELECTED
            });
        }
        else {
            const selectedGlobalRolesIds = items.map(i => i.id);
            this.globalRolesIdsChange.emit([...selectedGlobalRolesIds]);
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.DASHBOARD.EVENTS.DASHBOARD_AVAILABILITY, {
                component: PRODUCT_EXPERIENCE.DASHBOARD.COMPONENTS.DASHBOARD_AVAILABILITY,
                action: PRODUCT_EXPERIENCE.DASHBOARD.ACTIONS.APPLY_GLOBAL_ROLES_CHANGES,
                globalRoles: (_a = selectedGlobalRolesIds === null || selectedGlobalRolesIds === void 0 ? void 0 : selectedGlobalRolesIds.sort()) === null || _a === void 0 ? void 0 : _a.join()
            });
        }
    }
    getGlobalRoles() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.userGroupService.list({ pageSize: this.PAGE_SIZE })).data;
        });
    }
    mapGlobalRolesToItems() {
        return this.globalRoles.map(({ name, id }) => ({
            name,
            id
        }));
    }
    getSelectedGlobalRolesItems() {
        if (!this.globalRolesIds || this.globalRolesIds === ALL_GLOBAL_ROLES_SELECTED) {
            return this.globalRolesItems;
        }
        return this.globalRolesIds
            .map(globalRoleId => this.globalRolesItems.find(gR => gR.id === globalRoleId))
            .filter(Boolean);
    }
}
DashboardAvailabilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardAvailabilityComponent, deps: [{ token: i1.UserGroupService }, { token: i5.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
DashboardAvailabilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DashboardAvailabilityComponent, selector: "c8y-dashboard-availability", inputs: { globalRolesIds: "globalRolesIds" }, outputs: { globalRolesIdsChange: "globalRolesIdsChange" }, ngImport: i0, template: "<c8y-form-group class=\"p-b-24 m-b-0\">\n  <div class=\"legend form-block\">\n    <span>{{ 'Availability' | translate }}</span>\n  </div>\n  <label for=\"availability\">\n    <span class=\"m-r-4\" id=\"availability\">\n      {{ 'Global roles' | translate }}\n    </span>\n    <button\n      class=\"btn-help btn-help--sm\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Select the global roles for which the dashboard will be available' | translate\n      }}\"\n      triggers=\"focus\"\n      placement=\"right\"\n      container=\"body\"\n    >\n    </button>\n  </label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"globalRolesItems\"\n    [selected]=\"globalRolesItemsSelected\"\n    (onChange)=\"onSelected($event)\"\n  ></c8y-select>\n</c8y-form-group>\n", dependencies: [{ kind: "component", type: i5.SelectComponent, selector: "c8y-select", inputs: ["placeholder", "selectedLabel", "applyLabel", "items", "selected", "updateItems", "disableApplyOnNoSelection"], outputs: ["onChange"] }, { kind: "component", type: i5.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i4.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardAvailabilityComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-dashboard-availability', template: "<c8y-form-group class=\"p-b-24 m-b-0\">\n  <div class=\"legend form-block\">\n    <span>{{ 'Availability' | translate }}</span>\n  </div>\n  <label for=\"availability\">\n    <span class=\"m-r-4\" id=\"availability\">\n      {{ 'Global roles' | translate }}\n    </span>\n    <button\n      class=\"btn-help btn-help--sm\"\n      type=\"button\"\n      [attr.aria-label]=\"'Help' | translate\"\n      popover=\"{{\n        'Select the global roles for which the dashboard will be available' | translate\n      }}\"\n      triggers=\"focus\"\n      placement=\"right\"\n      container=\"body\"\n    >\n    </button>\n  </label>\n  <c8y-select\n    style=\"width: 180px\"\n    [items]=\"globalRolesItems\"\n    [selected]=\"globalRolesItemsSelected\"\n    (onChange)=\"onSelected($event)\"\n  ></c8y-select>\n</c8y-form-group>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserGroupService }, { type: i5.GainsightService }]; }, propDecorators: { globalRolesIds: [{
                type: Input
            }], globalRolesIdsChange: [{
                type: Output
            }] } });

class DashboardDetailComponent {
    get applyToDevicesOfTypeTitle() {
        const text = this.applyToDevicesOfTypePermitted
            ? gettext('Apply dashboard to all devices of type {{ type }}')
            : gettext('Apply dashboard to all devices of type {{ type }} (permission required)');
        return this.translateService.instant(text, { type: this.dashboard.deviceTypeValue });
    }
    constructor(modal, iconList, contextDashboardService, navigatorService, permissionsService, translateService) {
        this.modal = modal;
        this.contextDashboardService = contextDashboardService;
        this.navigatorService = navigatorService;
        this.permissionsService = permissionsService;
        this.translateService = translateService;
        this.styling = {
            themeClass: 'dashboard-theme-light',
            headerClass: 'panel-title-regular'
        };
        this.possibleStyling = { DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
        this.DEFAULT_DASHBOARD_MARGIN = 12;
        this.DEFAULT_DASHBOARD_ICON = 'th';
        this.DEFAULT_DASHBOARD_PRIORITY = 10000;
        this.icons = iconList;
        this.filteredIcons = iconList;
    }
    ngAfterContentInit() {
        const defaultDashboardCfg = {
            name: this.translateService.instant(this.isReport ? gettext('Report') : gettext('Dashboard')),
            priority: this.isReport
                ? REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY
                : this.DEFAULT_DASHBOARD_PRIORITY,
            icon: this.DEFAULT_DASHBOARD_ICON,
            deviceTypeValue: this.deviceType
        };
        if (this.dashboard) {
            this.currentDashboard = clone(this.dashboard);
            this.dashboardName = this.currentDashboard.name;
            this.setDashboardStyle();
        }
        else {
            this.dashboard = defaultDashboardCfg;
            this.dashboardName = this.dashboard.name;
            this.dashboardDetailForm.form.markAsDirty();
        }
        this.setTitle();
        this.setupApplyToDevicesOfTypeCheckbox();
        this.navigatorNodes$ = this.navigatorService.items$;
        this.namePlaceholder = this.isReport ? gettext('e.g. My report') : gettext('e.g. My dashboard');
        this.globalRolesIds = this.dashboard.globalRolesIds;
    }
    setTitle() {
        if (!this.currentDashboard) {
            this.title = this.isReport ? gettext('Add report') : gettext('Add dashboard');
        }
        else {
            this.title = this.isReport ? gettext('Edit report') : gettext('Edit dashboard');
        }
    }
    setupApplyToDevicesOfTypeCheckbox() {
        const rolesToCheck = ['ROLE_INVENTORY_CREATE', 'ROLE_INVENTORY_ADMIN'];
        this.applyToDevicesOfTypePermitted = this.permissionsService.hasAnyRole(rolesToCheck);
    }
    save() {
        this.dashboard.globalRolesIds = this.globalRolesIds;
        this.dashboard.name = this.dashboardName;
        this.dashboard.classes = { [this.styling.themeClass]: true };
        this.dashboard.widgetClasses = { [this.styling.headerClass]: true };
        this.dashboard.c8y_IsNavigatorNode = this.dashboard.c8y_IsNavigatorNode
            ? {}
            : this.currentDashboard
                ? null
                : undefined;
        this._save(this.dashboard);
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getDashboardPreviewStyle() {
        const cssClasses = {};
        cssClasses[this.styling.headerClass] = true;
        cssClasses[this.styling.themeClass] = true;
        return cssClasses;
    }
    selectIcon(icon) {
        this.dashboard.icon = icon;
        this.dashboardDetailForm.form.markAsDirty();
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredIcons = this.icons.filter(val => search.test(val));
        }
        else {
            this.filteredIcons = this.icons;
        }
    }
    setDashboardStyle() {
        const allClasses = Object.assign(Object.assign({}, this.dashboard.classes), this.dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(c => c.split('-').pop());
        styles.forEach(styleName => {
            this.styling.themeClass = this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, this.styling.themeClass);
            this.styling.headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, this.styling.headerClass);
        });
    }
}
DashboardDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardDetailComponent, deps: [{ token: i3$1.BsModalRef }, { token: ICON_LIST }, { token: ContextDashboardService }, { token: i5.NavigatorService }, { token: i5.Permissions }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
DashboardDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DashboardDetailComponent, selector: "c8y-dashboard-detail", viewQueries: [{ propertyName: "dashboardDetailForm", first: true, predicate: ["dashboardDetailForm"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3 id=\"modal-title\">{{ title | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\" id=\"modal-body\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <div class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </div>\n              <div class=\"d-flex\">\n                <c8y-form-group class=\"m-r-16\">\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      type=\"button\"\n                      class=\"btn-default btn btn-gray\"\n                      aria-haspopup=\"true\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\" id=\"menuLabel\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn-help btn-help--sm\"\n                      type=\"button\"\n                      [attr.aria-label]=\"'Help' | translate\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      placement=\"right\"\n                      triggers=\"focus\"\n                      container=\"body\"\n                    ></button>\n                  </label>\n                  <input\n                    id=\"menuLabel\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboardName\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label id=\"description\">{{ 'Description ' | translate }}</label>\n                <textarea\n                  aria-labelledby=\"description\"\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label for=\"positionNav\">\n                      <span class=\"m-r-4\" id=\"positionNav\">\n                        {{ 'Position in navigation' | translate }}\n                      </span>\n                      <button\n                        class=\"btn-help btn-help--sm\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        placement=\"right\"\n                        triggers=\"focus\"\n                        container=\"body\"\n                      ></button>\n                    </label>\n                    <input\n                      id=\"positionNav\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      />\n                      <span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label for=\"position\">\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\">{{ node.priority }}</span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn-help btn-help--sm\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      ></button>\n                    </label>\n                    <input\n                      type=\"number\"\n                      for=\"position\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!currentDashboard && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span\n                      class=\"m-r-4\"\n                      [translateParams]=\"{ type: dashboard.deviceTypeValue }\"\n                      ngNonBindable\n                      translate\n                    >\n                      Apply dashboard to all devices of type\n                      <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span\n                    translate\n                    [translateParams]=\"{ type: dashboard.deviceTypeValue }\"\n                    ngNonBindable\n                  >\n                    This dashboard is shared between all devices of the type\n                    <i>{{ type }}</i>\n                    .\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-dashboard-availability\n              *ngIf=\"!!isReport === false\"\n              [(globalRolesIds)]=\"globalRolesIds\"\n              (globalRolesIdsChange)=\"dashboardDetailForm?.form?.markAsDirty()\"\n            ></c8y-dashboard-availability>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            ></c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label for=\"margin\">{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    />\n                    <span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      type=\"button\"\n      data-cy=\"dashboard-detail--cancel-dashboard\"\n      title=\"{{ 'Cancel' | translate }}\"\n      (click)=\"close()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      data-cy=\"dashboard-detail--save-dashboard\"\n      title=\"{{ 'Save' | translate }}\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.MinValidationDirective, selector: "[min]", inputs: ["min"] }, { kind: "directive", type: i5.MaxValidationDirective, selector: "[max]", inputs: ["max"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i6.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i6.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i5.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i5.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "directive", type: i4.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "directive", type: i8.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i8.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i8.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "component", type: AppearanceSettingsComponent, selector: "c8y-appearance-settings", inputs: ["themeClass", "headerClass", "defaultThemeClass", "defaultHeaderClass", "possibleStylingTheme", "possibleStylingHeader"], outputs: ["themeClassChange", "headerClassChange"] }, { kind: "component", type: WidgetPreviewComponent, selector: "c8y-widget-preview", inputs: ["previewClasses", "tab"] }, { kind: "component", type: DashboardAvailabilityComponent, selector: "c8y-dashboard-availability", inputs: ["globalRolesIds"], outputs: ["globalRolesIdsChange"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i5$1.SlicePipe, name: "slice" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-dashboard-detail', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header separator-bottom\">\n    <h3 id=\"modal-title\">{{ title | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\" id=\"modal-body\">\n    <div class=\"p-l-24 p-r-24\">\n      <form #dashboardDetailForm=\"ngForm\" class=\"d-contents\">\n        <div class=\"row\">\n          <div class=\"col-sm-6\">\n            <div *ngIf=\"!isNamedDashboard || isReport\">\n              <div class=\"legend form-block\">\n                <span>{{ 'General' | translate }}</span>\n              </div>\n              <div class=\"d-flex\">\n                <c8y-form-group class=\"m-r-16\">\n                  <label class=\"d-block\">{{ 'Icon' | translate }}</label>\n                  <div dropdown class=\"dropdown\">\n                    <button\n                      title=\"{{ 'Icon' | translate }}\"\n                      type=\"button\"\n                      class=\"btn-default btn btn-gray\"\n                      aria-haspopup=\"true\"\n                      dropdownToggle\n                    >\n                      <i c8yIcon=\"{{ dashboard.icon }}\"></i>\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul\n                      *dropdownMenu\n                      class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4 m-l-0\"\n                      style=\"max-height: 250px\"\n                    >\n                      <ng-container *ngFor=\"let icon of filteredIcons\">\n                        <li (click)=\"selectIcon(icon)\">\n                          <a\n                            class=\"interact\"\n                            title=\"{{ icon }}\"\n                            [ngClass]=\"{ active: dashboard.icon === icon }\"\n                          >\n                            <i class=\"icon\" [c8yIcon]=\"icon\"></i>\n                          </a>\n                        </li>\n                      </ng-container>\n                    </ul>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group class=\"flex-grow\">\n                  <label>\n                    <span class=\"m-r-4\" id=\"menuLabel\">{{ 'Menu label' | translate }}</span>\n                    <button\n                      class=\"btn-help btn-help--sm\"\n                      type=\"button\"\n                      [attr.aria-label]=\"'Help' | translate\"\n                      popover=\"{{\n                        'Menu label to display in submenu when dashboard is attached' | translate\n                      }}\"\n                      placement=\"right\"\n                      triggers=\"focus\"\n                      container=\"body\"\n                    ></button>\n                  </label>\n                  <input\n                    id=\"menuLabel\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    name=\"name\"\n                    [(ngModel)]=\"dashboardName\"\n                    placeholder=\"{{ namePlaceholder | translate }}\"\n                    maxlength=\"512\"\n                    required\n                  />\n                </c8y-form-group>\n              </div>\n              <c8y-form-group *ngIf=\"isReport\">\n                <label id=\"description\">{{ 'Description ' | translate }}</label>\n                <textarea\n                  aria-labelledby=\"description\"\n                  class=\"form-control\"\n                  rows=\"2\"\n                  name=\"description\"\n                  [(ngModel)]=\"dashboard.description\"\n                ></textarea>\n              </c8y-form-group>\n              <div class=\"row\">\n                <div class=\"col-sm-6\" *ngIf=\"!isReport\">\n                  <c8y-form-group>\n                    <label for=\"positionNav\">\n                      <span class=\"m-r-4\" id=\"positionNav\">\n                        {{ 'Position in navigation' | translate }}\n                      </span>\n                      <button\n                        class=\"btn-help btn-help--sm\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        popover=\"{{\n                          'Position in navigation menu (10000 first, -10000 last)' | translate\n                        }}\"\n                        placement=\"right\"\n                        triggers=\"focus\"\n                        container=\"body\"\n                      ></button>\n                    </label>\n                    <input\n                      id=\"positionNav\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"10000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                      required\n                    />\n                  </c8y-form-group>\n                </div>\n\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <label translate>Navigator menu item</label>\n                  <c8y-form-group>\n                    <label title=\"{{ 'Show in navigator' | translate }}\" class=\"c8y-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"isNavigatorNode\"\n                        [(ngModel)]=\"!!dashboard.c8y_IsNavigatorNode\"\n                      />\n                      <span></span>\n                      <span>{{ 'Show in navigator' | translate }}</span>\n                    </label>\n                  </c8y-form-group>\n                </div>\n                <div class=\"col-sm-6\" *ngIf=\"isReport\">\n                  <c8y-form-group>\n                    <label for=\"position\">\n                      <span class=\"m-r-4\">{{ 'Position in navigator' | translate }}</span>\n                      <ng-template #positionInNavPop>\n                        <span>\n                          {{\n                            'Position in navigator (10001 first, -10000 last).' | translate\n                          }}&nbsp;\n                          {{ 'Existing nodes:' | translate }}\n                        </span>\n                        <ul class=\"list-unstyled m-t-16\">\n                          <li *ngFor=\"let node of navigatorNodes$ | async\">\n                            <i [c8yIcon]=\"node.icon\"></i>\n                            <span class=\"word-break m-l-4 m-r-16\">\n                              {{\n                                node.label.length > 15\n                                  ? (node.label | slice: 0:15) + '...'\n                                  : node.label\n                              }}\n                            </span>\n                            <span class=\"pull-right\">{{ node.priority }}</span>\n                          </li>\n                        </ul>\n                      </ng-template>\n                      <button\n                        class=\"btn-help btn-help--sm\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        [popover]=\"positionInNavPop\"\n                        triggers=\"focus\"\n                        placement=\"right\"\n                        container=\"body\"\n                      ></button>\n                    </label>\n                    <input\n                      type=\"number\"\n                      for=\"position\"\n                      class=\"form-control\"\n                      name=\"priority\"\n                      [(ngModel)]=\"dashboard.priority\"\n                      min=\"-10000\"\n                      max=\"20000\"\n                      placeholder=\"{{ 'e.g.' | translate }} 500\"\n                    />\n                  </c8y-form-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"!currentDashboard && deviceType\">\n                <div class=\"form-group\">\n                  <label title=\"{{ applyToDevicesOfTypeTitle }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"deviceType\"\n                      [(ngModel)]=\"dashboard.deviceType\"\n                      [disabled]=\"!applyToDevicesOfTypePermitted\"\n                    />\n                    <span></span>\n                    <span\n                      class=\"m-r-4\"\n                      [translateParams]=\"{ type: dashboard.deviceTypeValue }\"\n                      ngNonBindable\n                      translate\n                    >\n                      Apply dashboard to all devices of type\n                      <i>{{ type }}</i>\n                    </span>\n                  </label>\n                </div>\n\n                <div class=\"alert alert-info m-b-24\" *ngIf=\"isDeviceType\">\n                  <i c8y-icon=\"info\"></i>\n                  <span\n                    translate\n                    [translateParams]=\"{ type: dashboard.deviceTypeValue }\"\n                    ngNonBindable\n                  >\n                    This dashboard is shared between all devices of the type\n                    <i>{{ type }}</i>\n                    .\n                  </span>\n                </div>\n              </div>\n            </div>\n            <c8y-dashboard-availability\n              *ngIf=\"!!isReport === false\"\n              [(globalRolesIds)]=\"globalRolesIds\"\n              (globalRolesIdsChange)=\"dashboardDetailForm?.form?.markAsDirty()\"\n            ></c8y-dashboard-availability>\n            <c8y-appearance-settings\n              [(themeClass)]=\"styling.themeClass\"\n              [(headerClass)]=\"styling.headerClass\"\n            ></c8y-appearance-settings>\n            <div class=\"row\">\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label for=\"margin\">{{ 'Widget margin' | translate }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      id=\"margin\"\n                      name=\"margin\"\n                      type=\"number\"\n                      class=\"form-control\"\n                      [(ngModel)]=\"dashboard.widgetMargin\"\n                      min=\"0\"\n                      max=\"50\"\n                      placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                    />\n                    <span class=\"input-group-addon\">px</span>\n                  </div>\n                </c8y-form-group>\n              </div>\n              <div class=\"col-sm-6\">\n                <c8y-form-group class=\"p-b-24 m-b-0\">\n                  <label translate>Widget titles</label>\n                  <label title=\"{{ 'Translate if possible' | translate }}\" class=\"c8y-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"translateWidgetTitle\"\n                      [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                    />\n                    <span></span>\n                    <span>{{ 'Translate if possible' | translate }}</span>\n                  </label>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-sm-6\">\n            <c8y-widget-preview\n              [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n              [previewClasses]=\"getDashboardPreviewStyle()\"\n            ></c8y-widget-preview>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      type=\"button\"\n      data-cy=\"dashboard-detail--cancel-dashboard\"\n      title=\"{{ 'Cancel' | translate }}\"\n      (click)=\"close()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      data-cy=\"dashboard-detail--save-dashboard\"\n      title=\"{{ 'Save' | translate }}\"\n      (click)=\"save()\"\n      [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () {
        return [{ type: i3$1.BsModalRef }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [ICON_LIST]
                    }] }, { type: ContextDashboardService }, { type: i5.NavigatorService }, { type: i5.Permissions }, { type: i3.TranslateService }];
    }, propDecorators: { dashboardDetailForm: [{
                type: ViewChild,
                args: ['dashboardDetailForm', { static: true }]
            }] } });

class AddDashboardFactory {
    constructor(permissions, contextDashboardService, bsModal, contextRoute) {
        this.permissions = permissions;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.contextRoute = contextRoute;
    }
    get(activatedRoute) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.currentContext = this.contextRoute.getContextData(activatedRoute);
            if ([ViewContext.Device, ViewContext.Group].includes((_a = this.currentContext) === null || _a === void 0 ? void 0 : _a.context) &&
                (yield this.hasPermission(this.currentContext.contextData))) {
                return [
                    {
                        component: AddDashboardComponent,
                        priority: -Infinity
                    }
                ];
            }
            return [];
        });
    }
    addDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let initialState;
            if (this.currentContext.context === ViewContext.Device) {
                initialState = {
                    deviceType: this.currentContext.contextData.type
                };
            }
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardCfg = yield modal.result;
                const dashboardMO = yield this.contextDashboardService.create(dashboardCfg, this.currentContext);
                yield this.contextDashboardService.navigateToDashboard(dashboardMO);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    hasPermission(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context === null || context === void 0 ? void 0 : context.id) {
                return yield this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], context);
            }
            return this.permissions.hasAnyRole(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE']);
        });
    }
}
AddDashboardFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDashboardFactory, deps: [{ token: i5.Permissions }, { token: ContextDashboardService }, { token: i3$1.BsModalService }, { token: i5.ContextRouteService }], target: i0.ɵɵFactoryTarget.Injectable });
AddDashboardFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDashboardFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDashboardFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i5.Permissions }, { type: ContextDashboardService }, { type: i3$1.BsModalService }, { type: i5.ContextRouteService }]; } });

class AddDashboardComponent {
    constructor(addDashboardFactory) {
        this.addDashboardFactory = addDashboardFactory;
    }
    addDashboard() {
        this.addDashboardFactory.addDashboard();
    }
}
AddDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDashboardComponent, deps: [{ token: AddDashboardFactory }], target: i0.ɵɵFactoryTarget.Component });
AddDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AddDashboardComponent, selector: "li[c8y-add-dashboard]", host: { classAttribute: "d-flex a-i-stretch" }, ngImport: i0, template: "<button\n  class=\"btn btn-dot p-l-sm-8 p-r-sm-8 p-l-xs-16 p-r-xs-16\"\n  [attr.aria-label]=\"'Add dashboard' | translate\"\n  tooltip=\"{{ 'Add dashboard' | translate }}\"\n  placement=\"right\"\n  container=\"body\"\n  type=\"button\"\n  [delay]=\"500\"\n  (click)=\"addDashboard()\"\n>\n  <i\n    class=\"icon-20 m-l-4 m-r-4\"\n    c8yIcon=\"plus-circle\"\n  ></i>\n</button>\n<div class=\"p-r-sm-32\"></div>\n", dependencies: [{ kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3$2.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'li[c8y-add-dashboard]', host: { class: 'd-flex a-i-stretch' }, template: "<button\n  class=\"btn btn-dot p-l-sm-8 p-r-sm-8 p-l-xs-16 p-r-xs-16\"\n  [attr.aria-label]=\"'Add dashboard' | translate\"\n  tooltip=\"{{ 'Add dashboard' | translate }}\"\n  placement=\"right\"\n  container=\"body\"\n  type=\"button\"\n  [delay]=\"500\"\n  (click)=\"addDashboard()\"\n>\n  <i\n    class=\"icon-20 m-l-4 m-r-4\"\n    c8yIcon=\"plus-circle\"\n  ></i>\n</button>\n<div class=\"p-r-sm-32\"></div>\n" }]
        }], ctorParameters: function () { return [{ type: AddDashboardFactory }]; } });

/**
 * A hook to define the default widgets of the home dashboard in the cockpit app.
 */
const COCKPIT_HOME_DASHBOARD_CONFIG = new InjectionToken('CockpitHomeDashboardConfig');
/**
 * An array of widgets that is per default placed on the home dashboard of the cockpit app.
 */
const DEFAULT_COCKPIT_HOME_WIDGETS = [
    {
        name: 'cockpit.welcome.widget',
        title: gettext('Welcome to Cockpit'),
        _x: 0,
        _y: 0,
        _height: 5,
        _width: 12,
        classes: { 'panel-title-hidden': true }
    },
    {
        name: 'Asset Alarms',
        title: gettext('Active, critical alarms'),
        _x: 0,
        _y: 5,
        _height: 4,
        _width: 6
    },
    {
        name: 'Recent Alarms',
        title: gettext('Recent alarms'),
        _x: 0,
        _y: 9,
        _height: 4,
        _width: 6
    },
    {
        name: 'Map',
        title: gettext('Map'),
        _x: 6,
        _y: 5,
        _height: 8,
        _width: 6
    }
];

class WidgetService {
    constructor(dynamicComponentService, translateService, moduleConfig) {
        this.dynamicComponentService = dynamicComponentService;
        this.translateService = translateService;
        this.moduleConfig = moduleConfig;
        this.dynamicComponentService.items$.subscribe(widgets => {
            this.widgets = widgets;
        });
    }
    getWidgetDefinition(componentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dynamicComponentService.getById(componentId);
        });
    }
    getWidgetDefinitions() {
        const translatedComponents = this.widgets.map(cmp => (Object.assign(Object.assign({}, cmp), { label: this.translateService.instant(cmp.label) })));
        // cloneDeep and injector lead to a performance issue. We removing the injectors here,
        // as they are not needed, to avoid use of a lot of CPU for cloning.
        const translatedComponentsWithoutInjector = translatedComponents.map(cmp => omit(cmp, 'injector'));
        return cloneDeep(sortBy(translatedComponentsWithoutInjector, 'label').filter(this.moduleConfig.widgetFilter));
    }
    mapLegacy(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.getWidgetDefinition(widget.componentId || widget.name);
            widget = this.mapDisplaySettings(widget, cmp);
            if (get(cmp, 'data.settings.upgrade')) {
                widget.widgetComponent = cmp.data.settings.widgetComponent;
                widget.configComponent = cmp.data.settings.configComponent;
                widget.templateUrl = cmp.data.settings.templateUrl;
                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                widget.transformConfigWithContext =
                    cmp.data.settings.componentTransformConfigWithContext ||
                        cmp.data.settings.transformConfigWithContext ||
                        widget.transformConfigWithContext;
            }
            else {
                delete widget.templateUrl;
                delete widget.configTemplateUrl;
            }
            return widget;
        });
    }
    mapDisplaySettings(widget, cmp) {
        var _a;
        if ((_a = cmp === null || cmp === void 0 ? void 0 : cmp.data) === null || _a === void 0 ? void 0 : _a.displaySettings) {
            widget.config = Object.assign({ displaySettings: cmp.data.displaySettings }, (widget.config || {}));
        }
        return widget;
    }
}
WidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, deps: [{ token: i5.DynamicComponentService }, { token: i3.TranslateService }, { token: CONTEXT_DASHBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () {
        return [{ type: i5.DynamicComponentService }, { type: i3.TranslateService }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [CONTEXT_DASHBOARD_CONFIG]
                    }] }];
    } });

class WidgetConfigComponent {
    get isEdit() {
        return !!this.current;
    }
    get isDeviceTypeDashboard() {
        var _a, _b;
        return !!((_a = this.mo.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.deviceType) && !!((_b = this.mo.c8y_Dashboard) === null || _b === void 0 ? void 0 : _b.deviceTypeValue);
    }
    constructor(widgetService, modal, inventory, contextDashboardService) {
        this.widgetService = widgetService;
        this.modal = modal;
        this.inventory = inventory;
        this.contextDashboardService = contextDashboardService;
        this.mode = 'select';
        this.searchChange$ = new Subject();
        this.searchTerm = '';
        this.styling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.defaultStyling = {
            headerClass: 'panel-title-regular',
            contentClass: 'panel-content-light'
        };
        this.possibleStyling = { WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES };
        this.isUpgrade = false;
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    ngAfterContentInit() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.components = this.widgetService.getWidgetDefinitions();
            if (this.selected) {
                this.current = clone(this.selected);
                this.select(this.selected, this.isEdit ? 'config' : 'select');
            }
            this.searchSub = this.searchChange$
                .pipe(switchMap((event) => iif(() => event.which !== 13, timer(200), timer(10))))
                .subscribe(() => {
                this.search();
            });
            this.setStylings();
            if ((_a = this.widgetConfig) === null || _a === void 0 ? void 0 : _a.device) {
                const { data } = yield this.inventory.detail(this.widgetConfig.device.id);
                this.selectedDevice = data;
            }
        });
    }
    checkIfDeviceRequired() {
        return (!this.widgetConfig ||
            (!this.widgetConfig.settings.deviceTargetNotRequired &&
                !this.widgetConfig.device &&
                !this.widgetConfig.settings.noDeviceTarget));
    }
    selectionChanged(selection) {
        var _a;
        this.widgetConfig.device = (_a = selection === null || selection === void 0 ? void 0 : selection.change) === null || _a === void 0 ? void 0 : _a.item;
        this.dynamicComponent.emitConfigChange({
            device: this.widgetConfig.device
        });
    }
    save() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const hookSuccess = yield this.dynamicComponent.callLifeCycleHooks().toPromise();
            if (!hookSuccess) {
                return;
            }
            const { _x, _y, _width, _height } = this.selected.data;
            if (this.widgetConfig &&
                this.widgetConfig.device &&
                // serializing will be handled by resolver
                !((_b = (_a = this.selected) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.device)) {
                const { id, name } = this.widgetConfig.device;
                this.widgetConfig.device = { id, name };
            }
            const widget = Object.assign({ _x,
                _y,
                _width,
                _height, config: omit(this.widgetConfig, ['settings', 'displaySettings']), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
            this._save(widget);
        });
    }
    select(cmp, mode = 'config') {
        cmp.data = cmp.data || {};
        this.selected = cmp;
        this.isUpgrade = !!get(cmp, 'data.settings.upgrade');
        this.contextDashboardService.formDisabled = this.isUpgrade;
        if (this.isEdit) {
            const { _x, _y, _width, _height, classes, title } = this.current.data;
            this.selected.data = Object.assign(Object.assign({}, this.selected.data), { _x, _y, _width, _height, classes, title });
        }
        this.widgetConfig = cloneDeep(this.composeWidgetConfig(this.selected, this.context));
        this.selected.data.title = this.selected.data.title || cmp.label;
        this.componentLabel = cmp.label;
        this.mode = mode;
    }
    search() {
        if (this.searchTerm.length > 0) {
            this.searchResult = this.components.filter(cmp => new RegExp(escapeRegExp(this.searchTerm.trim()), 'i').test(cmp.label));
        }
        else {
            this.resetSearch();
        }
    }
    resetSearch() {
        this.searchTerm = '';
        this.searchResult = undefined;
    }
    changeMode(mode) {
        this.mode = mode;
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
    getStyle(isPreview = false) {
        const cssClasses = {};
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
            cssClasses[this.styling.headerClass] = true;
        }
        if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
            cssClasses[this.styling.contentClass] = true;
        }
        if (isPreview) {
            cssClasses[`dashboard-theme-${this.defaultStyling.contentClass.split('-').pop()}`] = true;
        }
        return cssClasses;
    }
    ngOnDestroy() {
        this.contextDashboardService.formDisabled = true;
        if (this.searchSub) {
            this.searchSub.unsubscribe();
        }
    }
    hasConfig() {
        var _a, _b, _c, _d;
        if ((_a = this.widgetConfig.settings) === null || _a === void 0 ? void 0 : _a.upgrade) {
            return (((_b = this.widgetConfig.settings) === null || _b === void 0 ? void 0 : _b.configComponent) || ((_c = this.widgetConfig.settings) === null || _c === void 0 ? void 0 : _c.configTemplateUrl));
        }
        return !((_d = this.dynamicComponent) === null || _d === void 0 ? void 0 : _d.error);
    }
    setStylings() {
        var _a, _b;
        const dashboardClasses = (((_a = this.mo.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.classes) && Object.keys(this.mo.c8y_Dashboard.classes)) || [];
        const dashboardWidgetClasses = (((_b = this.mo.c8y_Dashboard) === null || _b === void 0 ? void 0 : _b.widgetClasses) && Object.keys(this.mo.c8y_Dashboard.widgetClasses)) ||
            [];
        const widgetClasses = this.isEdit ? Object.keys(this.current.data.classes) : [];
        this.styling = this.setDefaultStyle([
            ...dashboardClasses,
            ...dashboardWidgetClasses,
            ...widgetClasses
        ]);
        this.defaultStyling = this.setDefaultStyle([...dashboardClasses, ...dashboardWidgetClasses]);
    }
    isDashboardDefaultStyle(className) {
        const allClasses = Object.assign(Object.assign({}, this.mo.c8y_Dashboard.classes), this.mo.c8y_Dashboard.widgetClasses);
        const styles = Object.keys(allClasses).map(cssClass => ({ class: cssClass }));
        const style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
        return !!style;
    }
    setDefaultStyle(setClasses) {
        let contentClass = this.styling.contentClass;
        let headerClass = this.styling.headerClass;
        const styles = this.contextDashboardService
            .getFilteredDashboardStyles(setClasses)
            .map(c => c.split('-').pop());
        styles.forEach(styleName => {
            contentClass = this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
            headerClass = this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
        });
        return { headerClass, contentClass };
    }
    composeWidgetConfig(selectedComponent, context = {}) {
        const setting = Object.assign({ settings: Object.assign(Object.assign(Object.assign(Object.assign({}, selectedComponent.data.settings), get(selectedComponent.data.settings, 'ng1.options')), get(selectedComponent.data, 'ng1.options')), { context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
        return this.applyTargetIfDeviceDashboard(setting);
    }
    applyTargetIfDeviceDashboard(widgetConfig) {
        const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
        if (isDeviceType) {
            widgetConfig.settings.hideTarget = isDeviceType;
            const noDeviceTarget = widgetConfig.settings.ng1
                ? widgetConfig.settings.ng1.options.noDeviceTarget
                : widgetConfig.settings.noDeviceTarget;
            if (!noDeviceTarget) {
                widgetConfig.device = {
                    id: this.context.id,
                    name: this.context.name
                };
            }
        }
        return widgetConfig;
    }
}
WidgetConfigComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetConfigComponent, deps: [{ token: WidgetService }, { token: i3$1.BsModalRef }, { token: i1.InventoryService }, { token: ContextDashboardService }], target: i0.ɵɵFactoryTarget.Component });
WidgetConfigComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: WidgetConfigComponent, selector: "c8y-widget-config", viewQueries: [{ propertyName: "dynamicComponent", first: true, predicate: ["config"], descendants: true }], ngImport: i0, template: "<div class=\"modal-header separator\">\n  <div\n    class=\"h3\"\n    title=\"{{ 'Add widget' | translate }}\"\n    id=\"modal-title\"\n    *ngIf=\"!current\"\n    translate\n  >\n    Add widget\n  </div>\n  <div\n    class=\"h3\"\n    title=\"{{ 'Edit widget' | translate }}\"\n    id=\"modal-title\"\n    *ngIf=\"current\"\n    translate\n  >\n    Edit widget\n  </div>\n</div>\n<form\n  name=\"form\"\n  #configForm=\"ngForm\"\n>\n  <div\n    class=\"c8y-modal-tabs\"\n    id=\"modal-body\"\n  >\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Select widget' | translate }}\"\n            type=\"button\"\n            (click)=\"changeMode('select'); (false)\"\n          >\n            <i c8yIcon=\"th-large\"></i>\n            <span translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Configuration' | translate }}\"\n            type=\"button\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i>\n            <span translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Appearance' | translate }}\"\n            type=\"button\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i>\n            <span translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll modal-inner-scroll--fixed\">\n    <div\n      class=\"bg-level-0 p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2\"\n      *ngIf=\"mode === 'select'\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              [attr.aria-label]=\"'Search' | translate\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              data-cy=\"widget-config--Search\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button\n                class=\"btn btn-dot\"\n                title=\"{{ 'Search' | translate }}\"\n                type=\"button\"\n                (click)=\"resetSearch()\"\n              >\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal-body bg-level-2\"\n      *ngIf=\"mode === 'select'\"\n    >\n      <div class=\"card-group card-select m-b-0\">\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          data-cy=\"widget-config--widget-list\"\n          title=\"{{ cmp.description | translate }}\"\n          *ngFor=\"let cmp of searchResult || components\"\n        >\n          <button\n            class=\"btn-clean d-col card p-8\"\n            [class.active]=\"selected === cmp\"\n            type=\"button\"\n            (click)=\"select(cmp)\"\n          >\n            <div\n              class=\"text-center p-8 m-b-8 d-col flex-center flex-grow bg-level-2\"\n              role=\"presentation\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <div class=\"h1\"><i c8yIcon=\"file-image-o\"></i></div>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img\n                  class=\"widget-thumbnail\"\n                  alt\n                  [src]=\"cmp.previewImage\"\n                />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </button>\n        </div>\n\n        <div\n          class=\"c8y-empty-state text-center\"\n          *ngIf=\"searchResult && searchResult.length === 0\"\n        >\n          <div\n            class=\"h1\"\n            c8yIcon=\"search\"\n          ></div>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p\n              class=\"m-r-8\"\n              translate\n            >\n              Rephrase your search term.\n            </p>\n            <button\n              class=\"btn btn-primary\"\n              title=\"{{ 'Reset search' | translate }}\"\n              type=\"button\"\n              (click)=\"resetSearch()\"\n            >\n              {{ 'Reset search' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div\n      class=\"d-flex d-col fit-h\"\n      *ngIf=\"selected\"\n      [ngClass]=\"{ hidden: mode !== 'config' }\"\n    >\n      <div class=\"p-t-16 flex-no-shrink separator-bottom p-b-16\">\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <div class=\"p-l-24\">\n              <div class=\"text-left text-medium h4\">\n                {{ selected.label | translate }}\n              </div>\n              <p>\n                {{ selected.description | translate }}\n              </p>\n            </div>\n          </div>\n          <div class=\"col-sm-8\">\n            <div class=\"p-r-24\">\n              <c8y-form-group>\n                <label\n                  for=\"widgetTitle\"\n                  translate\n                >\n                  Title\n                </label>\n                <input\n                  class=\"form-control\"\n                  id=\"widgetTitle\"\n                  placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n                  name=\"title\"\n                  type=\"text\"\n                  required\n                  [(ngModel)]=\"selected.data.title\"\n                />\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"row flex-grow\"\n        [ngClass]=\"{ 'd-flex': widgetConfig.options || hasConfig() }\"\n      >\n        <div\n          class=\"a-s-stretch\"\n          *ngIf=\"!widgetConfig.settings?.noDeviceTarget\"\n          [ngClass]=\"{\n            'bg-level-1 col-sm-4 p-r-0': hasConfig(),\n            'bg-level-0 col-sm-12': !hasConfig()\n          }\"\n        >\n          <div\n            class=\"fit-h bg-inherit p-l-16\"\n            [ngClass]=\"{ 'p-r-24': !hasConfig() }\"\n          >\n            <div class=\"p-relative bg-inherit\">\n              <c8y-asset-selector-miller\n                class=\"d-block bg-inherit p-relative\"\n                style=\"height: calc(100vh - 422px)\"\n                (onSelected)=\"selectionChanged($event)\"\n                (onClearSelected)=\"selectionChanged()\"\n                [config]=\"{\n                  view: 'miller',\n                  groupsSelectable: this.widgetConfig.settings?.groupsSelectable,\n                  showChildDevices: true,\n                  columnHeaders: true,\n                  showUnassignedDevices: true,\n                  search: !this.widgetConfig.settings.context?.additionParents,\n                  showFilter: true,\n                  singleColumn: !!this.hasConfig()\n                }\"\n                [asset]=\"widgetConfig.settings?.context\"\n                [selectedDevice]=\"selectedDevice\"\n              ></c8y-asset-selector-miller>\n            </div>\n          </div>\n        </div>\n        <div\n          [ngClass]=\"{\n            'col-sm-8': !widgetConfig.settings?.noDeviceTarget,\n            'col-sm-12': widgetConfig.settings?.noDeviceTarget,\n            'sr-only': !hasConfig()\n          }\"\n        >\n          <c8y-dynamic-component\n            class=\"d-block\"\n            style=\"height: {{ hasConfig() ? 'calc(100vh - 422px)' : '0' }}\"\n            [ngClass]=\"{ 'inner-scroll p-r-24': !widgetConfig.settings?.noDeviceTarget }\"\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"modal-body p-t-0\"\n      style=\"height: calc(100vh - 310px)\"\n      *ngIf=\"mode === 'style'\"\n    >\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          ></c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview\n            style=\"height: calc(100vh - 382px)\"\n            [previewClasses]=\"getStyle(true)\"\n          ></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      data-cy=\"widget-config--cancel-widget\"\n      type=\"button\"\n      (click)=\"close()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      type=\"submit\"\n      data-cy=\"widget-config--save-widget\"\n      (click)=\"save()\"\n      [disabled]=\"\n        contextDashboardService.formDisabled || configForm.invalid || checkIfDeviceRequired()\n      \"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.HighlightComponent, selector: "c8y-highlight", inputs: ["pattern", "text", "elementClass", "shouldTrimPattern"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i5.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i5.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "component", type: i5.DynamicComponentComponent, selector: "c8y-dynamic-component", inputs: ["componentId", "config", "mode", "notFoundError", "executeResolvers"], outputs: ["updateWidgetClasses"] }, { kind: "directive", type: i5.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i8$1.MillerViewComponent, selector: "c8y-asset-selector-miller", inputs: ["config", "asset", "selectedDevice", "rootNode", "container"], outputs: ["onSelected", "onClearSelected"] }, { kind: "component", type: AppearanceSettingsComponent, selector: "c8y-appearance-settings", inputs: ["themeClass", "headerClass", "defaultThemeClass", "defaultHeaderClass", "possibleStylingTheme", "possibleStylingHeader"], outputs: ["themeClassChange", "headerClassChange"] }, { kind: "component", type: WidgetPreviewComponent, selector: "c8y-widget-preview", inputs: ["previewClasses", "tab"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: WidgetConfigComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-widget-config', template: "<div class=\"modal-header separator\">\n  <div\n    class=\"h3\"\n    title=\"{{ 'Add widget' | translate }}\"\n    id=\"modal-title\"\n    *ngIf=\"!current\"\n    translate\n  >\n    Add widget\n  </div>\n  <div\n    class=\"h3\"\n    title=\"{{ 'Edit widget' | translate }}\"\n    id=\"modal-title\"\n    *ngIf=\"current\"\n    translate\n  >\n    Edit widget\n  </div>\n</div>\n<form\n  name=\"form\"\n  #configForm=\"ngForm\"\n>\n  <div\n    class=\"c8y-modal-tabs\"\n    id=\"modal-body\"\n  >\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Select widget' | translate }}\"\n            type=\"button\"\n            (click)=\"changeMode('select'); (false)\"\n          >\n            <i c8yIcon=\"th-large\"></i>\n            <span translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Configuration' | translate }}\"\n            type=\"button\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i>\n            <span translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            class=\"btn\"\n            title=\"{{ 'Appearance' | translate }}\"\n            type=\"button\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i>\n            <span translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll modal-inner-scroll--fixed\">\n    <div\n      class=\"bg-level-0 p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2\"\n      *ngIf=\"mode === 'select'\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              [attr.aria-label]=\"'Search' | translate\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              data-cy=\"widget-config--Search\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button\n                class=\"btn btn-dot\"\n                title=\"{{ 'Search' | translate }}\"\n                type=\"button\"\n                (click)=\"resetSearch()\"\n              >\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"modal-body bg-level-2\"\n      *ngIf=\"mode === 'select'\"\n    >\n      <div class=\"card-group card-select m-b-0\">\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          data-cy=\"widget-config--widget-list\"\n          title=\"{{ cmp.description | translate }}\"\n          *ngFor=\"let cmp of searchResult || components\"\n        >\n          <button\n            class=\"btn-clean d-col card p-8\"\n            [class.active]=\"selected === cmp\"\n            type=\"button\"\n            (click)=\"select(cmp)\"\n          >\n            <div\n              class=\"text-center p-8 m-b-8 d-col flex-center flex-grow bg-level-2\"\n              role=\"presentation\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <div class=\"h1\"><i c8yIcon=\"file-image-o\"></i></div>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img\n                  class=\"widget-thumbnail\"\n                  alt\n                  [src]=\"cmp.previewImage\"\n                />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </button>\n        </div>\n\n        <div\n          class=\"c8y-empty-state text-center\"\n          *ngIf=\"searchResult && searchResult.length === 0\"\n        >\n          <div\n            class=\"h1\"\n            c8yIcon=\"search\"\n          ></div>\n          <h3 translate>No widgets found.</h3>\n          <div class=\"d-flex\">\n            <p\n              class=\"m-r-8\"\n              translate\n            >\n              Rephrase your search term.\n            </p>\n            <button\n              class=\"btn btn-primary\"\n              title=\"{{ 'Reset search' | translate }}\"\n              type=\"button\"\n              (click)=\"resetSearch()\"\n            >\n              {{ 'Reset search' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- The following is intentional set to hidden to allow the ViewChild ref in the controller -->\n    <div\n      class=\"d-flex d-col fit-h\"\n      *ngIf=\"selected\"\n      [ngClass]=\"{ hidden: mode !== 'config' }\"\n    >\n      <div class=\"p-t-16 flex-no-shrink separator-bottom p-b-16\">\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <div class=\"p-l-24\">\n              <div class=\"text-left text-medium h4\">\n                {{ selected.label | translate }}\n              </div>\n              <p>\n                {{ selected.description | translate }}\n              </p>\n            </div>\n          </div>\n          <div class=\"col-sm-8\">\n            <div class=\"p-r-24\">\n              <c8y-form-group>\n                <label\n                  for=\"widgetTitle\"\n                  translate\n                >\n                  Title\n                </label>\n                <input\n                  class=\"form-control\"\n                  id=\"widgetTitle\"\n                  placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n                  name=\"title\"\n                  type=\"text\"\n                  required\n                  [(ngModel)]=\"selected.data.title\"\n                />\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"row flex-grow\"\n        [ngClass]=\"{ 'd-flex': widgetConfig.options || hasConfig() }\"\n      >\n        <div\n          class=\"a-s-stretch\"\n          *ngIf=\"!widgetConfig.settings?.noDeviceTarget\"\n          [ngClass]=\"{\n            'bg-level-1 col-sm-4 p-r-0': hasConfig(),\n            'bg-level-0 col-sm-12': !hasConfig()\n          }\"\n        >\n          <div\n            class=\"fit-h bg-inherit p-l-16\"\n            [ngClass]=\"{ 'p-r-24': !hasConfig() }\"\n          >\n            <div class=\"p-relative bg-inherit\">\n              <c8y-asset-selector-miller\n                class=\"d-block bg-inherit p-relative\"\n                style=\"height: calc(100vh - 422px)\"\n                (onSelected)=\"selectionChanged($event)\"\n                (onClearSelected)=\"selectionChanged()\"\n                [config]=\"{\n                  view: 'miller',\n                  groupsSelectable: this.widgetConfig.settings?.groupsSelectable,\n                  showChildDevices: true,\n                  columnHeaders: true,\n                  showUnassignedDevices: true,\n                  search: !this.widgetConfig.settings.context?.additionParents,\n                  showFilter: true,\n                  singleColumn: !!this.hasConfig()\n                }\"\n                [asset]=\"widgetConfig.settings?.context\"\n                [selectedDevice]=\"selectedDevice\"\n              ></c8y-asset-selector-miller>\n            </div>\n          </div>\n        </div>\n        <div\n          [ngClass]=\"{\n            'col-sm-8': !widgetConfig.settings?.noDeviceTarget,\n            'col-sm-12': widgetConfig.settings?.noDeviceTarget,\n            'sr-only': !hasConfig()\n          }\"\n        >\n          <c8y-dynamic-component\n            class=\"d-block\"\n            style=\"height: {{ hasConfig() ? 'calc(100vh - 422px)' : '0' }}\"\n            [ngClass]=\"{ 'inner-scroll p-r-24': !widgetConfig.settings?.noDeviceTarget }\"\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            #config\n          ></c8y-dynamic-component>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"modal-body p-t-0\"\n      style=\"height: calc(100vh - 310px)\"\n      *ngIf=\"mode === 'style'\"\n    >\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          ></c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview\n            style=\"height: calc(100vh - 382px)\"\n            [previewClasses]=\"getStyle(true)\"\n          ></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      data-cy=\"widget-config--cancel-widget\"\n      type=\"button\"\n      (click)=\"close()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      type=\"submit\"\n      data-cy=\"widget-config--save-widget\"\n      (click)=\"save()\"\n      [disabled]=\"\n        contextDashboardService.formDisabled || configForm.invalid || checkIfDeviceRequired()\n      \"\n      c8yProductExperience\n      [actionName]=\"current ? 'editWidget' : 'createWidget'\"\n      [actionData]=\"{ widgetName: selected && selected.id }\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: WidgetService }, { type: i3$1.BsModalRef }, { type: i1.InventoryService }, { type: ContextDashboardService }]; }, propDecorators: { dynamicComponent: [{
                type: ViewChild,
                args: ['config', { static: false }]
            }] } });

/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal, inventory, gainsightService, actionBarService, translateService, modal) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.inventory = inventory;
        this.gainsightService = gainsightService;
        this.actionBarService = actionBarService;
        this.translateService = translateService;
        this.modal = modal;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canCopy = true;
        this.canDelete = true;
        this.isLoading = true;
        this.showContextHelpButton = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            const mesg = gettext('You are about to reset this dashboard. All changes to the dashboard will get lost and cannot be recovered. Do you want to proceed?');
            try {
                yield this.modal.confirm(gettext('Reset dashboard'), mesg, Status.WARNING, {
                    ok: gettext('Reset`dashboard`'),
                    cancel: gettext('Cancel')
                });
                this.isLoading = true;
                this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
                yield this.contextDashboardService.update(this.mo);
                yield this.onLoad();
            }
            catch (error) {
                if (error) {
                    this.alert.addServerFailure(error);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child) {
        return __awaiter(this, void 0, void 0, function* () {
            const { children } = child;
            const dashboardMO = this.mo;
            const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
            dashboardMO.c8y_Dashboard.children = mappedChildren;
            return this.contextDashboardService.update(dashboardMO);
        });
    }
    /**
     * Copies the dashboard and current context to a clipboard.
     */
    copyDashboard() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const viewContext = (_a = this.route.parent.snapshot.data) === null || _a === void 0 ? void 0 : _a.context;
            if (this.canCopyDashboard(viewContext)) {
                this.contextDashboardService.copyClipboard = {
                    dashboard: cloneDeep(this.mo.c8y_Dashboard),
                    context: cloneDeep({
                        context: viewContext,
                        contextData: this.context
                    })
                };
                if (viewContext) {
                    const ctx = viewContext.split('/').shift();
                    const msg = this.translateService.instant('Dashboard copied. Navigate to the desired {{ ctx }} and select "Paste dashboard"', { ctx });
                    this.alert.success(msg);
                }
                this.actionBarService.refresh();
            }
        });
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.contextDashboardService.delete(this.mo);
            if (this.route.parent) {
                const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
                this.router.navigateByUrl(route);
            }
        });
    }
    /**
     * Edits the current dashboard
     */
    editDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            const isReport = this.contextDashboardService.isReport(this.mo);
            if (isReport) {
                const { name, icon, priority, c8y_IsNavigatorNode, description } = this.context;
                Object.assign(this.dashboard, { name, icon, priority, c8y_IsNavigatorNode, description });
            }
            const initialState = {
                dashboard: this.dashboard,
                deviceType: this.context.type,
                isDeviceType: this.contextDashboardService.isDeviceType(this.mo),
                isNamedDashboard: this.contextDashboardService.isNamed(this.mo),
                isReport
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardMO = cloneDeep(this.mo);
                const cfg = yield modal.result;
                if (isReport) {
                    const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                    dashboardMO.c8y_Dashboard = dashboardCfg;
                    this.updateReport({
                        id: this.context.id,
                        name,
                        icon,
                        c8y_IsNavigatorNode,
                        priority,
                        description
                    });
                }
                else {
                    dashboardMO.c8y_Dashboard = cfg;
                }
                yield this.contextDashboardService.update(dashboardMO);
                yield this.contextDashboardService.refreshTabs(dashboardMO);
                this.onLoad();
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    get isDeviceTypeDashboard() {
        var _a;
        return !!((_a = this.dashboard) === null || _a === void 0 ? void 0 : _a.deviceType) && !!this.dashboard.deviceTypeValue;
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const { x, y, width, height } = change.source;
            const component = yield this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
            if (!component) {
                this.addWidget();
                return;
            }
            yield this.addWidget(Object.assign(Object.assign({}, component), { data: Object.assign(Object.assign(Object.assign({}, component.data), change.widget), { _x: x, _y: y, _width: width, _height: height }) }));
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected) {
        return __awaiter(this, void 0, void 0, function* () {
            const partialCloneSelected = selected
                ? Object.assign(Object.assign({}, selected), { data: cloneDeep(selected.data) }) : selected;
            const activeContext = this.context.contextData ? this.context.contextData : this.context;
            const initialState = {
                mo: this.mo,
                context: this.context.c8y_Report ? {} : activeContext,
                selected: partialCloneSelected
            };
            const modal = this.bsModal.show(WidgetConfigComponent, {
                class: 'modal-lg',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const newWidget = yield modal.result;
                if (!this.mo.c8y_Dashboard.children) {
                    this.mo.c8y_Dashboard.children = {};
                }
                this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                this.contextDashboardService.update(this.mo);
                newWidget.classes = this.mergeWidgetClasses(newWidget);
                yield this.updateWidget(newWidget);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = findIndex(this.widgets, { id: widget.id });
            const isNew = index === -1;
            const mappedWidget = yield this.widgetService.mapLegacy(widget);
            if (isNew) {
                this.widgets.push(mappedWidget);
            }
            else {
                this.widgets.splice(index, 1, mappedWidget);
            }
        });
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change) {
        return __awaiter(this, void 0, void 0, function* () {
            const widgetTitle = change.widget.title;
            try {
                yield this.modal.confirm(gettext('Remove widget'), this.translateService.instant(gettext('You are about to remove widget "{{ widgetTitle }}" from your dashboard. Do you want to proceed?'), { widgetTitle }), Status.DANGER, {
                    ok: gettext('Remove'),
                    cancel: gettext('Cancel')
                });
            }
            catch (e) {
                // on cancel: do nothing
                return;
            }
            try {
                const { widget, source } = change;
                delete this.mo.c8y_Dashboard.children[widget.id];
                const removed = this.widgets.find(({ id }) => id === widget.id);
                this.widgets.splice(this.widgets.indexOf(removed), 1);
                const { dashboard } = source;
                dashboard.children = dashboard.children.filter(c => c.data.id !== widget.id);
                // using setTimeout to give the component the chance to remove it.
                const sleep = timeout => new Promise(resolve => setTimeout(resolve, timeout));
                yield sleep(0);
                const child = new DashboardChildChange(source);
                child.collapseUpAll();
                yield this.updateDashboardChildren(child);
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleIsFrozenFlag(settings);
            try {
                yield this.contextDashboardService.update(this.mo);
                if (this.dashboard.isFrozen) {
                    this.alert.success(gettext('Your dashboard is locked now.'));
                }
                else {
                    this.alert.success(gettext('Your dashboard is unlocked now.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.toggleIsFrozenFlag(settings);
            }
        });
    }
    updateReport(mo) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.inventory.update(mo);
            this.context = res.data;
            if (this.route.parent) {
                this.route.parent.snapshot.data.contextData = this.context;
            }
            this.contextDashboardService.updateNavigatorItem(res.data);
        });
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            var _a, _b;
            this.context = this.route.parent.snapshot.data.contextData;
            this.title = (_a = this.context) === null || _a === void 0 ? void 0 : _a.name;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.patchSensorPhoneDashboard(this.dashboard, this.mo.owner, (_b = this.context) === null || _b === void 0 ? void 0 : _b.type);
            this.onLoad(true);
        });
    }
    /**
     * To enable translation for widgets within the dashboard, the "translateWidgetTitle" flag must be enabled.
     * The property needs to be patched, as the "Sensor App" does not provide this setting.
     */
    patchSensorPhoneDashboard(dashboard, owner, type) {
        if (type === 'c8y_SensorPhone' && owner.includes('device_phone')) {
            dashboard.translateWidgetTitle = true;
        }
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets, this.context)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad(true);
        });
    }
    onLoad(trackExperience) {
        return __awaiter(this, void 0, void 0, function* () {
            const canEditDashboard = yield this.contextDashboardService.canEditDashboard(this.mo);
            this.disabled = !canEditDashboard;
            this.canCopy =
                this.contextDashboardService.isDeviceDashboard(this.mo) ||
                    this.contextDashboardService.isDeviceType(this.mo) ||
                    this.contextDashboardService.isGroupDashboard(this.mo);
            const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
            const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            const isReport = this.contextDashboardService.isReport(this.mo);
            const dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
            this.widgets = yield Promise.all(values(dashboardChildren).map(widget => {
                widget.classes = this.mergeWidgetClasses(widget);
                if (isDeviceType) {
                    this.applyDeviceTarget(widget);
                }
                if (trackExperience) {
                    this.gainsightService.triggerEvent('loadWidget', {
                        widgetName: widget.componentId || widget.name
                    });
                }
                return this.widgetService.mapLegacy(widget);
            }));
            this.class = Object.keys(dashboardClasses).join(' ');
            if (isReport) {
                this.addReportDashboardSettings();
            }
            this.isLoading = false;
        });
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? Object.assign({}, widget.classes) : Object.assign(Object.assign({}, this.dashboard.widgetClasses), widget.classes);
        return Object.assign({ card: true, 'card-dashboard': true, [kebabCase(widget.componentId || widget.name)]: true }, widgetClasses);
    }
    componentToWidget(child) {
        return Object.assign(Object.assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext'])), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    }
    addReportDashboardSettings() {
        this.setTitle = true;
        this.title = this.context.name;
        this.breadcrumbSettings = {
            icon: 'th',
            label: 'Reports',
            path: 'reports'
        };
        this.canDelete = false;
    }
    canCopyDashboard(viewContext) {
        if (!this.validDashboardChildren() && viewContext) {
            const ctx = viewContext.split('/').shift();
            const msg = this.translateService.instant('Only dashboards with widgets referencing the current {{ ctx }} can be copied.', { ctx });
            this.alert.warning(msg);
            return false;
        }
        return true;
    }
    validDashboardChildren() {
        return every(this.mo.c8y_Dashboard.children, child => {
            const config = child.config || {};
            const dataPoints = config.datapoints || [];
            return !((config.device && config.device.id !== this.context.id) ||
                some(dataPoints, dataPoint => dataPoint.__target.id !== this.context.id));
        });
    }
}
ContextDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1$1.Router }, { token: ContextDashboardService }, { token: i5.AlertService }, { token: i0.Renderer2 }, { token: CONTEXT_DASHBOARD_CONFIG }, { token: WidgetService }, { token: i3$1.BsModalService }, { token: i1.InventoryService }, { token: i5.GainsightService }, { token: i5.ActionBarService }, { token: i3.TranslateService }, { token: i5.ModalService }], target: i0.ɵɵFactoryTarget.Component });
ContextDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: { name: "name", childrenClasses: "childrenClasses", context: "context", setTitle: "setTitle", disabled: "disabled", defaultWidgets: "defaultWidgets", canCopy: "canCopy", canDelete: "canDelete", isLoading: "isLoading", breadcrumbSettings: "breadcrumbSettings", showContextHelpButton: "showContextHelpButton", translateWidgetTitle: "translateWidgetTitle" }, host: { properties: { "class": "this.class" }, styleAttribute: "\n      display: block;\n    ", classAttribute: "dashboard c8y-grid-dashboard" }, ngImport: i0, template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"-1\"\n  *ngIf=\"defaultWidgets.length > 0\"\n>\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reset dashboard' | translate }}\"\n    type=\"button\"\n    px-event=\"Reset dashboard\"\n    (click)=\"restore()\"\n    [disabled]=\"dashboard?.isFrozen || disabled\"\n    data-cy=\"context-dashboard--button-reset-dashboard\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"reset\"\n    ></i>\n    {{ 'Reset dashboard' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help\n  src=\"/users-guide/cockpit/#dashboards\"\n  *ngIf=\"showContextHelpButton\"\n></c8y-help>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle ?? translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n></c8y-widgets-dashboard>\n", dependencies: [{ kind: "component", type: i5.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: i5.WidgetsDashboardComponent, selector: "c8y-widgets-dashboard", inputs: ["widgets", "context", "contextDashboard", "settings", "breadcrumb"], outputs: ["onAddWidget", "onEditWidget", "onDeleteWidget", "onChangeDashboard", "onEditDashboard", "onCopyDashboard", "onDeleteDashboard", "onFreeze", "onChangeStart", "onChangeEnd"] }, { kind: "component", type: i5.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-context-dashboard', host: {
                        style: `
      display: block;
    `,
                        class: 'dashboard c8y-grid-dashboard'
                    }, template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  [priority]=\"-1\"\n  *ngIf=\"defaultWidgets.length > 0\"\n>\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reset dashboard' | translate }}\"\n    type=\"button\"\n    px-event=\"Reset dashboard\"\n    (click)=\"restore()\"\n    [disabled]=\"dashboard?.isFrozen || disabled\"\n    data-cy=\"context-dashboard--button-reset-dashboard\"\n  >\n    <i\n      class=\"m-r-4\"\n      c8yIcon=\"reset\"\n    ></i>\n    {{ 'Reset dashboard' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help\n  src=\"/users-guide/cockpit/#dashboards\"\n  *ngIf=\"showContextHelpButton\"\n></c8y-help>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle ?? translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name || title : undefined,\n    widgetMargin: dashboard?.widgetMargin,\n    canCopy: canCopy\n  }\"\n  [breadcrumb]=\"breadcrumbSettings\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onCopyDashboard)=\"copyDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n></c8y-widgets-dashboard>\n" }]
        }], ctorParameters: function () {
        return [{ type: i1$1.ActivatedRoute }, { type: i1$1.Router }, { type: ContextDashboardService }, { type: i5.AlertService }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [CONTEXT_DASHBOARD_CONFIG]
                    }] }, { type: WidgetService }, { type: i3$1.BsModalService }, { type: i1.InventoryService }, { type: i5.GainsightService }, { type: i5.ActionBarService }, { type: i3.TranslateService }, { type: i5.ModalService }];
    }, propDecorators: { name: [{
                type: Input
            }], childrenClasses: [{
                type: Input
            }], context: [{
                type: Input
            }], setTitle: [{
                type: Input
            }], disabled: [{
                type: Input
            }], defaultWidgets: [{
                type: Input
            }], canCopy: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], breadcrumbSettings: [{
                type: Input
            }], showContextHelpButton: [{
                type: Input
            }], translateWidgetTitle: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class CockpitDashboardComponent {
    constructor(appState, homeDashboardConfig) {
        var _a, _b, _c, _d;
        this.appState = appState;
        this.homeDashboardConfig = homeDashboardConfig;
        this.defaultWidgets = DEFAULT_COCKPIT_HOME_WIDGETS;
        this.dashboardName = 'home-cockpit1';
        this.pageTitle = gettext('Home');
        const config = Object.assign(Object.assign({}, this.homeDashboardConfig), { dashboardName: (_b = (_a = appState.currentApplication.value) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.homeDashboardName, userSpecific: (_d = (_c = appState.currentApplication.value) === null || _c === void 0 ? void 0 : _c.config) === null || _d === void 0 ? void 0 : _d.userSpecificHomeDashboard });
        this.applyDashboardConfig(config);
    }
    applyDashboardConfig(config) {
        if (!config) {
            return;
        }
        if (config.dashboardName) {
            this.dashboardName = config.dashboardName;
        }
        if (config.defaultWidgets) {
            this.defaultWidgets = config.defaultWidgets;
        }
        if (config.userSpecific && this.appState.currentUser.value) {
            this.dashboardName = `${this.appState.currentUser.value.userName.replace(/\./g, '__')}_${this.dashboardName}`;
        }
        if (config.pageTitle) {
            this.pageTitle = config.pageTitle;
        }
    }
}
CockpitDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardComponent, deps: [{ token: i5.AppStateService }, { token: COCKPIT_HOME_DASHBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CockpitDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: CockpitDashboardComponent, selector: "c8y-cockpit-dashboard", ngImport: i0, template: "<c8y-title>\n  {{ pageTitle | translate }}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n", dependencies: [{ kind: "component", type: i5.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: ["name", "childrenClasses", "context", "setTitle", "disabled", "defaultWidgets", "canCopy", "canDelete", "isLoading", "breadcrumbSettings", "showContextHelpButton", "translateWidgetTitle"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-cockpit-dashboard', template: "<c8y-title>\n  {{ pageTitle | translate }}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n" }]
        }], ctorParameters: function () {
        return [{ type: i5.AppStateService }, { type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [COCKPIT_HOME_DASHBOARD_CONFIG]
                    }] }];
    } });

class PasteDashboardActionComponent {
    constructor(vcRef, router, contextDashboardService, inventoryService) {
        this.vcRef = vcRef;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.inventoryService = inventoryService;
        this.dashboardName = '';
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templatePaste);
        const clipboard = this.contextDashboardService.copyClipboard;
        if (clipboard) {
            this.dashboardName = clipboard.dashboard.name;
        }
    }
    pasteDashboard() {
        return __awaiter(this, void 0, void 0, function* () {
            let context;
            const currentUrl = this.router.url;
            const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
            const isGroup = new RegExp(/group\/\d+/).test(currentUrl);
            const id = currentUrl.match(/\d+/)[0];
            if (isDevice) {
                context = {
                    context: ViewContext.Device,
                    contextData: yield this.getContextMo(id)
                };
            }
            else if (isGroup) {
                context = {
                    context: ViewContext.Group,
                    contextData: yield this.getContextMo(id)
                };
            }
            this.contextDashboardService.pasteDashboard(context);
        });
    }
    getContextMo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.inventoryService.detail(id)).data;
        });
    }
}
PasteDashboardActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasteDashboardActionComponent, deps: [{ token: i0.ViewContainerRef }, { token: i1$1.Router }, { token: ContextDashboardService }, { token: i1.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
PasteDashboardActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PasteDashboardActionComponent, selector: "c8y-paste-dashboard-action", viewQueries: [{ propertyName: "templatePaste", first: true, predicate: ["templatePaste"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: `
    <ng-template #templatePaste>
      <li>
        <button
          class="btn btn-link"
          type="button"
          title="{{ 'Paste dashboard' | translate }}"
          (click)="pasteDashboard()"
        >
          <i class="m-r-4" c8yIcon="clipboard"></i>
          <span ngNonBindable translate [translateParams]="{ dashboardName: dashboardName }">
            Paste dashboard "{{ dashboardName }}"
          </span>
        </button>
      </li>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PasteDashboardActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c8y-paste-dashboard-action',
                    template: `
    <ng-template #templatePaste>
      <li>
        <button
          class="btn btn-link"
          type="button"
          title="{{ 'Paste dashboard' | translate }}"
          (click)="pasteDashboard()"
        >
          <i class="m-r-4" c8yIcon="clipboard"></i>
          <span ngNonBindable translate [translateParams]="{ dashboardName: dashboardName }">
            Paste dashboard "{{ dashboardName }}"
          </span>
        </button>
      </li>
    </ng-template>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1$1.Router }, { type: ContextDashboardService }, { type: i1.InventoryService }]; }, propDecorators: { templatePaste: [{
                type: ViewChild,
                args: ['templatePaste', { read: TemplateRef, static: true }]
            }] } });

class DashboardActionBarFactory {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.contextDashboardService.copyClipboard;
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteDashboardActionComponent
            });
        }
        return actions;
    }
}
DashboardActionBarFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardActionBarFactory, deps: [{ token: ContextDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
DashboardActionBarFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardActionBarFactory, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DashboardActionBarFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: ContextDashboardService }]; } });

class DeviceDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [
            ContextDashboardType.Device,
            ContextDashboardType.DeviceType
        ]);
    }
}
DeviceDashboardGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceDashboardGuard, deps: [{ token: ContextDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceDashboardGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceDashboardGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceDashboardGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ContextDashboardService }]; } });

class GroupDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        return this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Group]);
    }
}
GroupDashboardGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupDashboardGuard, deps: [{ token: ContextDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
GroupDashboardGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupDashboardGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: GroupDashboardGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ContextDashboardService }]; } });

const defaultConfig = {
    allowFullscreen: true,
    widgetFilter({ data }) {
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
class ContextDashboardModule {
    static config(config = {}) {
        return {
            ngModule: ContextDashboardModule,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: Object.assign(Object.assign({}, defaultConfig), config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                hookRoute(Object.assign(Object.assign({}, defaultConfig), config).routes),
                hookTab(AddDashboardFactory, { providerType: HookProviderTypes.ExistingProvider }),
                hookActionBar(DashboardActionBarFactory)
            ]
        };
    }
}
ContextDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ContextDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, declarations: [AppearanceSettingsComponent,
        ContextDashboardComponent,
        WidgetConfigComponent,
        WidgetPreviewComponent,
        DashboardDetailComponent,
        AddDashboardComponent,
        PasteDashboardActionComponent,
        DashboardAvailabilityComponent], imports: [CoreModule,
        TooltipModule,
        PopoverModule,
        AssetSelectorModule, i8.BsDropdownModule], exports: [ContextDashboardComponent, WidgetConfigComponent] });
ContextDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, providers: [
        WidgetService,
        {
            provide: CONTEXT_DASHBOARD_CONFIG,
            useValue: defaultConfig
        }
    ], imports: [CoreModule,
        TooltipModule,
        PopoverModule,
        AssetSelectorModule,
        BsDropdownModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ContextDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        AppearanceSettingsComponent,
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        WidgetPreviewComponent,
                        DashboardDetailComponent,
                        AddDashboardComponent,
                        PasteDashboardActionComponent,
                        DashboardAvailabilityComponent
                    ],
                    imports: [
                        CoreModule,
                        TooltipModule,
                        PopoverModule,
                        AssetSelectorModule,
                        BsDropdownModule.forRoot()
                    ],
                    exports: [ContextDashboardComponent, WidgetConfigComponent],
                    entryComponents: [
                        ContextDashboardComponent,
                        WidgetConfigComponent,
                        DashboardDetailComponent,
                        PasteDashboardActionComponent
                    ],
                    providers: [
                        WidgetService,
                        {
                            provide: CONTEXT_DASHBOARD_CONFIG,
                            useValue: defaultConfig
                        }
                    ]
                }]
        }] });

class CockpitDashboardModule {
    static config(config = {}) {
        return {
            ngModule: CockpitDashboardModule,
            providers: [
                {
                    provide: COCKPIT_HOME_DASHBOARD_CONFIG,
                    useValue: config
                }
            ]
        };
    }
}
CockpitDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CockpitDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, declarations: [CockpitDashboardComponent], imports: [CoreModule, ContextDashboardModule] });
CockpitDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, providers: [hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })], imports: [CoreModule,
        ContextDashboardModule.config({
            routes: [
                {
                    path: 'dashboard/:dashboardId',
                    component: ContextDashboardComponent,
                    canActivate: [DeviceDashboardGuard],
                    context: ViewContext.Device
                },
                {
                    path: 'dashboard/:dashboardId',
                    component: ContextDashboardComponent,
                    canActivate: [GroupDashboardGuard],
                    context: ViewContext.Group
                },
                {
                    path: '',
                    component: CockpitDashboardComponent
                }
            ]
        })] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: CockpitDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CoreModule,
                        ContextDashboardModule.config({
                            routes: [
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [DeviceDashboardGuard],
                                    context: ViewContext.Device
                                },
                                {
                                    path: 'dashboard/:dashboardId',
                                    component: ContextDashboardComponent,
                                    canActivate: [GroupDashboardGuard],
                                    context: ViewContext.Group
                                },
                                {
                                    path: '',
                                    component: CockpitDashboardComponent
                                }
                            ]
                        })
                    ],
                    declarations: [CockpitDashboardComponent],
                    providers: [hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })]
                }]
        }] });

class DeviceInfoDashboardComponent {
    constructor(router, widgetService, translateService, inventoryService) {
        this.router = router;
        this.widgetService = widgetService;
        this.translateService = translateService;
        this.inventoryService = inventoryService;
        this.isLoading = true;
        this.dashboardName = '';
        this.DEVICE_INFO_WIDGETS = [
            {
                name: 'deviceStatusWidget',
                title: gettext('Device status'),
                _x: 0,
                _y: 0,
                _height: 5,
                _width: 4
            },
            {
                name: 'Data points graph',
                title: gettext('Device and communication'),
                _x: 4,
                _y: 0,
                _height: 5,
                _width: 8,
                config: {
                    interval: 'hours',
                    aggregation: 'NONE',
                    realtime: true,
                    datapointsInitialDisplayLimit: 3,
                    datapoints: [
                        {
                            fragment: 'c8y_Battery',
                            series: 'level',
                            label: this.translateService.instant('Battery: level'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e07b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'rssi',
                            label: this.translateService.instant('Signal: RSSI'),
                            unit: 'dBm',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#a7d0f1',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Used',
                            label: this.translateService.instant('Memory: used'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f75229',
                            __active: true
                        },
                        {
                            fragment: 'c8y_CPUMeasurement',
                            series: 'Workload',
                            label: this.translateService.instant('CPU: workload'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#b24f3e',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Upload',
                            label: this.translateService.instant('Network: upload'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#88c039',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RCSP',
                            label: this.translateService.instant('Signal: RCSP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSCP',
                            label: this.translateService.instant('Signal: RSCP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#5e2f19',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRP',
                            label: this.translateService.instant('Signal: RSRP'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#43ba3b',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'RSRQ',
                            label: this.translateService.instant('Signal: RSRQ'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#14b0b3',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ber',
                            label: this.translateService.instant('Signal: BER'),
                            unit: '%',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#44ff33',
                            __active: true
                        },
                        {
                            fragment: 'c8y_SignalStrength',
                            series: 'ECN0',
                            label: this.translateService.instant('Signal: ECN0'),
                            renderType: 'min',
                            lineType: 'line',
                            color: '#873efa',
                            __active: true
                        },
                        {
                            fragment: 'c8y_NetworkStatistics',
                            series: 'Download',
                            label: this.translateService.instant('Network: download'),
                            unit: 'KB/s',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#f27a45',
                            __active: true
                        },
                        {
                            fragment: 'c8y_MemoryMeasurement',
                            series: 'Total',
                            label: this.translateService.instant('Memory: total'),
                            unit: 'MB',
                            renderType: 'min',
                            lineType: 'line',
                            color: '#dadd8c',
                            __active: true
                        }
                    ],
                    alarmsEventsConfigs: [
                        {
                            label: 'c8y_LocationUpdate',
                            timelineType: 'EVENT',
                            color: '#6f6cd0',
                            filters: {
                                type: 'c8y_LocationUpdate'
                            },
                            __active: true
                        },
                        {
                            label: 'c8y_UnavailabilityAlarm',
                            timelineType: 'ALARM',
                            color: '#375bf2',
                            filters: {
                                type: 'c8y_UnavailabilityAlarm'
                            },
                            __active: true
                        }
                    ]
                }
            },
            {
                name: 'Asset Properties',
                title: gettext('Device data'),
                config: {
                    options: {
                        properties: [],
                        allowDisplayAndEditKnownProperties: true,
                        hiddenPropertiesKeyPaths: ['owner']
                    }
                },
                _x: 0,
                _y: 5,
                _height: 8,
                _width: 4
            },
            {
                name: 'Alarm list',
                title: gettext('Active, critical alarms'),
                _x: 4,
                _y: 5,
                _height: 4,
                _width: 4,
                config: {
                    options: {
                        orderMode: 'ACTIVE_FIRST',
                        severity: { CRITICAL: true },
                        status: {
                            ACTIVE: true,
                            ACKNOWLEDGED: false,
                            CLEARED: false
                        },
                        types: []
                    }
                }
            },
            {
                name: 'deviceGroupAssignmentWidget',
                title: gettext('Group assignment'),
                _x: 8,
                _y: 5,
                _height: 4,
                _width: 4
            },
            {
                componentId: 'Map',
                title: gettext('Location'),
                _x: 4,
                _y: 9,
                _height: 4,
                _width: 8
            }
        ];
    }
    ngOnInit() {
        this.contextSubscription = this.router.parent.data
            .pipe(tap(({ contextData }) => {
            this.title = contextData.name;
            this.dashboardName = `${contextData.id}-device-info`;
        }))
            .subscribe((data) => __awaiter(this, void 0, void 0, function* () {
            this.currentContext = data;
            this.addDeviceTargetForDP(data.contextData.id, data.contextData.name);
        }));
        this.widgetsSubscription = from(this.DEVICE_INFO_WIDGETS)
            .pipe(mergeMap(widget => this.widgetService.mapLegacy(widget)), map(widget => (Object.assign(Object.assign({}, widget), { config: Object.assign(Object.assign({}, widget.config), { device: this.router.parent.snapshot.data.contextData }) }))), toArray())
            .subscribe((data) => __awaiter(this, void 0, void 0, function* () {
            yield this.filterSupportedSeriesForDP(this.currentContext.contextData.id, data);
            this.widgetsList = data;
            this.isLoading = false;
        }));
    }
    addDeviceTargetForDP(id, name) {
        const dpWidget = this.DEVICE_INFO_WIDGETS.filter(item => item.name == 'Data points graph')[0];
        // Add target to dataPoint config
        dpWidget.config.datapoints.map(item => (item['__target'] = { id, name }));
        // Add target to alarmEvents Config
        dpWidget.config.alarmsEventsConfigs.map(item => (item['__target'] = { id, name }));
    }
    filterSupportedSeriesForDP(id, widgets) {
        return __awaiter(this, void 0, void 0, function* () {
            const supportedMeasurements = yield this.inventoryService.getMeasurementsAndSeries(id);
            const isDataPointSupported = dp => supportedMeasurements.some(({ fragment, series }) => dp.fragment === fragment && dp.series === series);
            const dpWidget = widgets.find(({ name }) => name === 'Data points graph');
            dpWidget.config.datapoints = dpWidget.config.datapoints.filter(isDataPointSupported);
        });
    }
    ngOnDestroy() {
        this.widgetsSubscription.unsubscribe();
        this.contextSubscription.unsubscribe();
    }
}
DeviceInfoDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: WidgetService }, { token: i3.TranslateService }, { token: i1.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
DeviceInfoDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceInfoDashboardComponent, selector: "c8y-device-info-dashboard-dashboard", ngImport: i0, template: "<div *ngIf=\"!isLoading\">\n  <c8y-title>\n    {{ title }}\n  </c8y-title>\n  <c8y-context-dashboard\n    [translateWidgetTitle]=\"true\"\n    [name]=\"dashboardName\"\n    [context]=\"currentContext\"\n    [defaultWidgets]=\"widgetsList\"\n    [canDelete]=\"false\"\n  ></c8y-context-dashboard>\n</div>\n", dependencies: [{ kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: ["name", "childrenClasses", "context", "setTitle", "disabled", "defaultWidgets", "canCopy", "canDelete", "isLoading", "breadcrumbSettings", "showContextHelpButton", "translateWidgetTitle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-info-dashboard-dashboard', template: "<div *ngIf=\"!isLoading\">\n  <c8y-title>\n    {{ title }}\n  </c8y-title>\n  <c8y-context-dashboard\n    [translateWidgetTitle]=\"true\"\n    [name]=\"dashboardName\"\n    [context]=\"currentContext\"\n    [defaultWidgets]=\"widgetsList\"\n    [canDelete]=\"false\"\n  ></c8y-context-dashboard>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.ActivatedRoute }, { type: WidgetService }, { type: i3.TranslateService }, { type: i1.InventoryService }]; } });

class DeviceInfoDashboardModule {
}
DeviceInfoDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceInfoDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardModule, declarations: [DeviceInfoDashboardComponent], imports: [CommonModule, CoreModule, ContextDashboardModule] });
DeviceInfoDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardModule, providers: [
        hookRoute({
            context: ViewContext.Device,
            path: 'device-info',
            component: DeviceInfoDashboardComponent,
            label: gettext('Info'),
            priority: 10000,
            icon: 'asterisk'
        })
    ], imports: [CommonModule, CoreModule, ContextDashboardModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceInfoDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DeviceInfoDashboardComponent],
                    imports: [CommonModule, CoreModule, ContextDashboardModule],
                    exports: [],
                    entryComponents: [DeviceInfoDashboardComponent],
                    providers: [
                        hookRoute({
                            context: ViewContext.Device,
                            path: 'device-info',
                            component: DeviceInfoDashboardComponent,
                            label: gettext('Info'),
                            priority: 10000,
                            icon: 'asterisk'
                        })
                    ]
                }]
        }] });

class DeviceManagementHomeDashboardComponent {
    constructor(widgetService) {
        this.widgetService = widgetService;
        this.widgets = [];
        this.dashboardName = 'home-dm1';
        this.defaultWidgets = [
            {
                name: 'devicemanagement.welcome.widget',
                title: gettext('Quick links'),
                _x: 0,
                _y: 0,
                _height: 4,
                _width: 6
            },
            {
                name: 'Recent Alarms',
                title: gettext('Recent alarms'),
                _x: 6,
                _y: 0,
                _height: 4,
                _width: 6
            }
        ];
    }
    ngOnInit() {
        this.defaultWidgets.map((widget) => __awaiter(this, void 0, void 0, function* () {
            yield this.widgetService
                .mapLegacy(widget)
                .then(transformedWidget => this.widgets.push(transformedWidget));
        }));
    }
}
DeviceManagementHomeDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardComponent, deps: [{ token: WidgetService }], target: i0.ɵɵFactoryTarget.Component });
DeviceManagementHomeDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceManagementHomeDashboardComponent, selector: "c8y-device-management-home-dashboard", ngImport: i0, template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n", dependencies: [{ kind: "component", type: i5.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: ContextDashboardComponent, selector: "c8y-context-dashboard", inputs: ["name", "childrenClasses", "context", "setTitle", "disabled", "defaultWidgets", "canCopy", "canDelete", "isLoading", "breadcrumbSettings", "showContextHelpButton", "translateWidgetTitle"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-management-home-dashboard', template: "<c8y-title>\n  {{ 'Home' | translate }}\n</c8y-title>\n\n<c8y-context-dashboard\n  [name]=\"dashboardName\"\n  [defaultWidgets]=\"defaultWidgets\"\n  [canDelete]=\"false\"\n></c8y-context-dashboard>\n" }]
        }], ctorParameters: function () { return [{ type: WidgetService }]; } });

class DeviceManagementHomeDashboardModule {
}
DeviceManagementHomeDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceManagementHomeDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardModule, declarations: [DeviceManagementHomeDashboardComponent], imports: [CommonModule, CoreModule, ContextDashboardModule] });
DeviceManagementHomeDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardModule, providers: [
        hookRoute({
            path: '',
            component: DeviceManagementHomeDashboardComponent
        }),
        hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })
    ], imports: [CommonModule, CoreModule, ContextDashboardModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceManagementHomeDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DeviceManagementHomeDashboardComponent],
                    imports: [CommonModule, CoreModule, ContextDashboardModule],
                    exports: [],
                    providers: [
                        hookRoute({
                            path: '',
                            component: DeviceManagementHomeDashboardComponent
                        }),
                        hookNavigator({ label: gettext('Home'), icon: 'home', priority: 10000, path: '/' })
                    ]
                }]
        }] });

class ReportDashboardListComponent {
    constructor(inventoryService, contextDashboardService, bsModal, translateService, modal, alertService, reportDashboardService, permissions) {
        this.inventoryService = inventoryService;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
        this.translateService = translateService;
        this.modal = modal;
        this.alertService = alertService;
        this.reportDashboardService = reportDashboardService;
        this.permissions = permissions;
        this.textFilter$ = new BehaviorSubject('');
        this.reload$ = new BehaviorSubject(null);
        this.reloading = false;
        this.reports$ = combineLatest(this.textFilter$.pipe(debounceTime(400), distinctUntilChanged()), this.reload$).pipe(tap(() => {
            this.reloading = true;
        }), switchMap(([text]) => this.loadReports(text)), tap(() => {
            this.reloading = false;
        }), shareReplay(1));
        this.canAddReport = false;
        this.DELETED_SUCCESS_MSG = gettext('Report deleted.');
    }
    ngOnInit() {
        this.canAddReport = this.permissions.hasAnyRole([
            'ROLE_INVENTORY_CREATE',
            'ROLE_INVENTORY_ADMIN'
        ]);
    }
    loadReports(partialName) {
        return __awaiter(this, void 0, void 0, function* () {
            return partialName
                ? this.reportDashboardService.listReports({ filter: { name: `*${partialName}*` } })
                : this.reportDashboardService.listReports();
        });
    }
    add() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                isReport: true,
                isNamedDashboard: true
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                ignoreBackdropClick: true,
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState
            }).content;
            try {
                const cfg = yield modal.result;
                const { name, icon, c8y_IsNavigatorNode, priority, description } = cfg, dashboardCfg = __rest(cfg, ["name", "icon", "c8y_IsNavigatorNode", "priority", "description"]);
                const report = (yield this.reportDashboardService.createReport({
                    name,
                    icon,
                    c8y_IsNavigatorNode,
                    priority,
                    description
                })).data;
                yield this.contextDashboardService.create(dashboardCfg, undefined, `${this.contextDashboardService.REPORT_PARTIAL_NAME}${report.id}`);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.addReportNavigatorNode(report);
                }
                this.reload$.next();
                modal.close();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    delete(report) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const dashboard = yield this.contextDashboardService
                    .getDashboard$(`report_${report.id}`, [ContextDashboardType.Named])
                    .toPromise();
                const isDashboardFrozen = !!((_a = dashboard === null || dashboard === void 0 ? void 0 : dashboard.c8y_Dashboard) === null || _a === void 0 ? void 0 : _a.isFrozen);
                const msg = isDashboardFrozen
                    ? gettext(`You are about to delete the report "{{ reportName }}". Be aware that the report has a locked dashboard assigned. Do you want to proceed?`)
                    : gettext(`You are about to delete the report "{{ reportName }}". Do you want to proceed?`);
                yield this.modal.confirm(gettext('Delete report'), this.translateService.instant(msg, {
                    reportName: report.name
                }), Status.DANGER, {
                    ok: gettext('Delete'),
                    cancel: gettext('Cancel')
                });
                yield this.contextDashboardService.delete(dashboard, false);
                yield this.inventoryService.delete(report.id);
                this.alertService.success(this.DELETED_SUCCESS_MSG);
                if (report.c8y_IsNavigatorNode) {
                    this.reportDashboardService.removeNavigatorNode(report);
                }
                this.reload$.next();
            }
            catch (ex) {
                if (ex) {
                    throw new Error(`Something went wrong: ${ex}`);
                }
            }
        });
    }
    update(report) {
        return __awaiter(this, void 0, void 0, function* () {
            report.c8y_IsNavigatorNode = report.c8y_IsNavigatorNode ? {} : null;
            yield this.inventoryService.update(report);
            report.c8y_IsNavigatorNode
                ? this.reportDashboardService.addReportNavigatorNode(report)
                : this.reportDashboardService.removeNavigatorNode(report);
        });
    }
}
ReportDashboardListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardListComponent, deps: [{ token: i1.InventoryService }, { token: ContextDashboardService }, { token: i3$1.BsModalService }, { token: i3.TranslateService }, { token: i5.ModalService }, { token: i5.AlertService }, { token: ReportDashboardService }, { token: i5.Permissions }], target: i0.ɵɵFactoryTarget.Component });
ReportDashboardListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ReportDashboardListComponent, selector: "c8y-report-dashboard-list", viewQueries: [{ propertyName: "filter", first: true, predicate: FilterInputComponent, descendants: true }], ngImport: i0, template: "<c8y-title>\n  {{ 'Reports' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      type=\"search\"\n      [attr.aria-label]=\"'Filter' | translate\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n        px-event=\"Clear filtering reports\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    type=\"button\"\n    title=\"{{ 'Add report' | translate }}\"\n    [attr.data-cy]=\"'reports-add-report-action-bar-button'\"\n    (click)=\"add()\"\n    [disabled]=\"!canAddReport\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n  <button\n    class=\"btn btn-dot m-r-16\"\n    type=\"button\"\n    aria-label=\"{{ 'Info' | translate}}\"\n    popover=\"{{ 'You don\\'t have permission to add reports' | translate }}\"\n    triggers=\"focus\"\n    placement=\"top\"\n    container=\"body\"\n    *ngIf=\"!canAddReport\"\n  >\n    <i [c8yIcon]=\"'info-circle'\" class=\"text-primary\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-link\"\n    (click)=\"loadReports()\"\n  >\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n\n<c8y-list-group>\n  <c8y-li\n    class=\"page-sticky-header hidden-xs hidden-sm\"\n    *ngIf=\"(reports$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        {{ 'Report' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Description' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Show in navigator' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n\n  <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        <button\n          class=\"btn-clean\"\n          type=\"button\"\n          title=\"{{ report.name }}\"\n          routerLink=\"/reports/{{ report.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ report.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\">\n        <p class=\"small text-truncate-wrap\">\n          <em class=\"text-muted\" *ngIf=\"!report.description; else showDescription\">\n            {{ 'No description available' | translate }}\n          </em>\n          <ng-template #showDescription>\n            {{ report.description }}\n          </ng-template>\n        </p>\n      </div>\n      <div class=\"col-2 fit-h-20 m-t-xs-8\">\n        <label class=\"c8y-switch c8y-switch--inline\" title=\"{{ 'Show in navigator' | translate }}\">\n          <input\n            [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n            type=\"checkbox\"\n            (change)=\"update(report)\"\n          />\n          <span></span>\n          <span class=\"visible-xs\">\n            {{ 'Show in navigator' | translate }}\n          </span>\n        </label>\n      </div>\n      <div class=\"col-1 hidden-xs\">\n        <button\n          class=\"btn btn-dot btn-dot--danger showOnHover m-l-auto d-flex\"\n          type=\"button\"\n          [attr.aria-label]=\"'Remove report' | translate\"\n          tooltip=\"{{ 'Remove report' | translate }}\"\n          [delay]=\"500\"\n          (click)=\"delete(report)\"\n        >\n          <i c8yIcon=\"minus-circle\"></i>\n        </button>\n      </div>\n      <div class=\"visible-xs p-t-8 text-right\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          title=\"{{ 'Remove report' | translate }}\"\n          (click)=\"delete(report)\"\n        >\n          <i c8yIcon=\"delete\"></i>\n          {{ 'Remove report' | translate }}\n        </button>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n</c8y-list-group>\n\n<c8y-ui-empty-state\n  *ngIf=\"(reports$ | async)?.data.length === 0\"\n  [icon]=\"'c8y-reports'\"\n  [title]=\"'There are no reports defined.' | translate\"\n  [subtitle]=\"'Add a report first.' | translate\"\n>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      title=\"{{ 'Add report' | translate }}\"\n      [attr.data-cy]=\"'reports-add-report-empty-state-button'\"\n      (click)=\"add()\"\n    >\n      {{ 'Add report' | translate }}\n    </button>\n  </p>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable>\n      Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\">User guide`KEEP_ORIGINAL`</a>\n      .\n    </small>\n  </p>\n</c8y-ui-empty-state>\n", dependencies: [{ kind: "component", type: i5.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i5.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i5.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i5.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i5.GuideHrefDirective, selector: "[c8y-guide-href]", inputs: ["c8y-guide-href"] }, { kind: "component", type: i5.GuideDocsComponent, selector: "[c8y-guide-docs]" }, { kind: "component", type: i5.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i5.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i5.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i5.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "component", type: i5.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "directive", type: i3$2.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "directive", type: i1$1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i4.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5$1.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-report-dashboard-list', template: "<c8y-title>\n  {{ 'Reports' | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      type=\"search\"\n      [attr.aria-label]=\"'Filter' | translate\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      [ngModel]=\"textFilter$ | async\"\n      (ngModelChange)=\"textFilter$.next($event)\"\n    />\n    <span class=\"input-group-addon\">\n      <i c8yIcon=\"search\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n      <i\n        class=\"text-muted\"\n        c8yIcon=\"times\"\n        *ngIf=\"(textFilter$ | async).length > 0\"\n        (click)=\"textFilter$.next('')\"\n        px-event=\"Clear filtering reports\"\n      ></i>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    type=\"button\"\n    title=\"{{ 'Add report' | translate }}\"\n    [attr.data-cy]=\"'reports-add-report-action-bar-button'\"\n    (click)=\"add()\"\n    [disabled]=\"!canAddReport\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add report' | translate }}\n  </button>\n  <button\n    class=\"btn btn-dot m-r-16\"\n    type=\"button\"\n    aria-label=\"{{ 'Info' | translate}}\"\n    popover=\"{{ 'You don\\'t have permission to add reports' | translate }}\"\n    triggers=\"focus\"\n    placement=\"top\"\n    container=\"body\"\n    *ngIf=\"!canAddReport\"\n  >\n    <i [c8yIcon]=\"'info-circle'\" class=\"text-primary\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-link\"\n    (click)=\"loadReports()\"\n  >\n    <i [ngClass]=\"{ 'icon-spin': reloading }\" c8yIcon=\"refresh\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/cockpit/#reports\"></c8y-help>\n\n<c8y-list-group>\n  <c8y-li\n    class=\"page-sticky-header hidden-xs hidden-sm\"\n    *ngIf=\"(reports$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        {{ 'Report' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Description' | translate }}\n      </div>\n      <div class=\"col-2\">\n        {{ 'Show in navigator' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n\n  <c8y-li *c8yFor=\"let report of reports$; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon [icon]=\"report.icon\"></c8y-li-icon>\n    <c8y-li-body class=\"content-flex-60\">\n      <div class=\"col-3\">\n        <button\n          class=\"btn-clean\"\n          type=\"button\"\n          title=\"{{ report.name }}\"\n          routerLink=\"/reports/{{ report.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ report.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\">\n        <p class=\"small text-truncate-wrap\">\n          <em class=\"text-muted\" *ngIf=\"!report.description; else showDescription\">\n            {{ 'No description available' | translate }}\n          </em>\n          <ng-template #showDescription>\n            {{ report.description }}\n          </ng-template>\n        </p>\n      </div>\n      <div class=\"col-2 fit-h-20 m-t-xs-8\">\n        <label class=\"c8y-switch c8y-switch--inline\" title=\"{{ 'Show in navigator' | translate }}\">\n          <input\n            [(ngModel)]=\"!!report.c8y_IsNavigatorNode\"\n            type=\"checkbox\"\n            (change)=\"update(report)\"\n          />\n          <span></span>\n          <span class=\"visible-xs\">\n            {{ 'Show in navigator' | translate }}\n          </span>\n        </label>\n      </div>\n      <div class=\"col-1 hidden-xs\">\n        <button\n          class=\"btn btn-dot btn-dot--danger showOnHover m-l-auto d-flex\"\n          type=\"button\"\n          [attr.aria-label]=\"'Remove report' | translate\"\n          tooltip=\"{{ 'Remove report' | translate }}\"\n          [delay]=\"500\"\n          (click)=\"delete(report)\"\n        >\n          <i c8yIcon=\"minus-circle\"></i>\n        </button>\n      </div>\n      <div class=\"visible-xs p-t-8 text-right\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          title=\"{{ 'Remove report' | translate }}\"\n          (click)=\"delete(report)\"\n        >\n          <i c8yIcon=\"delete\"></i>\n          {{ 'Remove report' | translate }}\n        </button>\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n</c8y-list-group>\n\n<c8y-ui-empty-state\n  *ngIf=\"(reports$ | async)?.data.length === 0\"\n  [icon]=\"'c8y-reports'\"\n  [title]=\"'There are no reports defined.' | translate\"\n  [subtitle]=\"'Add a report first.' | translate\"\n>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      title=\"{{ 'Add report' | translate }}\"\n      [attr.data-cy]=\"'reports-add-report-empty-state-button'\"\n      (click)=\"add()\"\n    >\n      {{ 'Add report' | translate }}\n    </button>\n  </p>\n  <p c8y-guide-docs>\n    <small translate ngNonBindable>\n      Find out more in the\n      <a c8y-guide-href=\"users-guide/cockpit/#reports\">User guide`KEEP_ORIGINAL`</a>\n      .\n    </small>\n  </p>\n</c8y-ui-empty-state>\n" }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: ContextDashboardService }, { type: i3$1.BsModalService }, { type: i3.TranslateService }, { type: i5.ModalService }, { type: i5.AlertService }, { type: ReportDashboardService }, { type: i5.Permissions }]; }, propDecorators: { filter: [{
                type: ViewChild,
                args: [FilterInputComponent, { static: false }]
            }] } });

class ReportDashboardGuard {
    constructor(contextDashboardService) {
        this.contextDashboardService = contextDashboardService;
    }
    canActivate(route) {
        const reportId = route.data.contextData && route.data.contextData.id;
        return from(this.contextDashboardService.activateDashboards(route, [ContextDashboardType.Named])).pipe(tap(res => {
            return Array.isArray(res) && res.length === 0
                ? this.createDashboardIfNotExist(reportId)
                : of(true);
        }));
    }
    createDashboardIfNotExist(reportId) {
        const dashboardCfg = {};
        return this.contextDashboardService
            .create(dashboardCfg, undefined, `report_${reportId}`)
            .then(() => true);
    }
}
ReportDashboardGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard, deps: [{ token: ContextDashboardService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportDashboardGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ContextDashboardService }]; } });

class ReportDashboardModule {
}
ReportDashboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ReportDashboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardModule, declarations: [ReportDashboardListComponent], imports: [CoreModule,
        ContextDashboardModule, i3$2.TooltipModule, i1$1.RouterModule, PopoverModule] });
ReportDashboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardModule, providers: [
        ReportDashboardGuard,
        ReportDashboardService,
        hookRoute({
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [ReportDashboardGuard],
            context: ViewContext.Report
        }),
        hookNavigator(ReportDashboardNavigationFactory)
    ], imports: [CoreModule,
        ContextDashboardModule,
        TooltipModule.forRoot(),
        RouterModule.forChild([
            {
                path: 'reports',
                component: ReportDashboardListComponent
            }
        ]),
        PopoverModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ReportDashboardModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ReportDashboardListComponent],
                    entryComponents: [],
                    imports: [
                        CoreModule,
                        ContextDashboardModule,
                        TooltipModule.forRoot(),
                        RouterModule.forChild([
                            {
                                path: 'reports',
                                component: ReportDashboardListComponent
                            }
                        ]),
                        PopoverModule
                    ],
                    providers: [
                        ReportDashboardGuard,
                        ReportDashboardService,
                        hookRoute({
                            path: 'dashboard/:dashboardId',
                            component: ContextDashboardComponent,
                            canActivate: [ReportDashboardGuard],
                            context: ViewContext.Report
                        }),
                        hookNavigator(ReportDashboardNavigationFactory)
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ALL_GLOBAL_ROLES_SELECTED, AddDashboardComponent, AddDashboardFactory, AppearanceSettingsComponent, COCKPIT_HOME_DASHBOARD_CONFIG, CONTEXT_DASHBOARD_CONFIG, CockpitDashboardComponent, CockpitDashboardModule, ContextDashboardComponent, ContextDashboardModule, ContextDashboardService, ContextDashboardType, DASHBOARD_THEME_CLASSES, DEFAULT_COCKPIT_HOME_WIDGETS, DashboardActionBarFactory, DashboardDetailComponent, DeviceDashboardGuard, DeviceInfoDashboardComponent, DeviceInfoDashboardModule, DeviceManagementHomeDashboardComponent, DeviceManagementHomeDashboardModule, GroupDashboardGuard, PRODUCT_EXPERIENCE, PasteDashboardActionComponent, REPORT_DEFAULT_NAVIGATION_NODE_PRIORITY, ReportDashboardGuard, ReportDashboardListComponent, ReportDashboardModule, ReportDashboardNavigationFactory, ReportDashboardService, STYLING_CLASS_PREFIXES, WIDGET_CONTENT_CLASSES, WIDGET_HEADER_CLASSES, WidgetConfigComponent, WidgetPreviewComponent, WidgetService };
//# sourceMappingURL=c8y-ngx-components-context-dashboard.mjs.map

import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, forwardRef, Component, Input, NgModule } from '@angular/core';
import * as i3 from '@c8y/ngx-components';
import { NavigatorNode, gettext, PRODUCT_EXPERIENCE_EVENT_SOURCE, ModalSelectionMode, Status, ManagedObjectRealtimeService, ViewContext, CoreModule, CommonModule, hookNavigator, hookRoute } from '@c8y/ngx-components';
import * as i1 from '@c8y/client';
import { QueriesUtil, OperationStatus } from '@c8y/client';
import { get, sortBy, toArray, assign, concat, uniqWith, isEqual, has, isEmpty, cloneDeep } from 'lodash-es';
import * as i1$1 from '@c8y/ngx-components/repository/shared';
import { PRODUCT_EXPERIENCE as PRODUCT_EXPERIENCE$1, RepositoryType, RepositorySelectModalComponent, SharedRepositoryModule } from '@c8y/ngx-components/repository/shared';
import { Subject, BehaviorSubject, pipe } from 'rxjs';
import { switchMap, map, take, distinctUntilChanged, shareReplay, tap, filter } from 'rxjs/operators';
import * as i2 from '@angular/common';
import * as i5 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i2$2 from 'ngx-bootstrap/dropdown';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import * as i9 from 'ngx-bootstrap/popover';
import { PopoverModule } from 'ngx-bootstrap/popover';
import * as i8 from 'ngx-bootstrap/tooltip';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import * as i7 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i4 from 'ngx-bootstrap/modal';
import * as i2$1 from '@ngx-translate/core';
import * as i6 from '@c8y/ngx-components/operations/operation-details';
import { OperationDetailsModule } from '@c8y/ngx-components/operations/operation-details';

class DeviceProfileNavigationFactory {
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.nodeItem) {
                this.nodeItem = new NavigatorNode({
                    label: gettext('Device profiles'),
                    path: '/device-profiles',
                    icon: 'c8y-device-profile',
                    parent: gettext('Management')
                });
            }
            return this.nodeItem;
        });
    }
}
DeviceProfileNavigationFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileNavigationFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DeviceProfileNavigationFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileNavigationFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileNavigationFactory, decorators: [{
            type: Injectable
        }] });

class DeviceProfileService {
    constructor(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.NOT_INSTALLED_WARNING = gettext('Not installed on the device');
        this.VERSION_MISSMATCH_WARNING = gettext('Version mismatch');
        this.SAME_URL_WARNING = gettext('Installed configuration has the same URL but different name or type than the one in the profile');
        this.queriesUtil = new QueriesUtil();
    }
    createDeviceProfile(deviceProfile) {
        if (get(deviceProfile, 'c8y_Filter.type') === '') {
            delete deviceProfile.c8y_Filter.type;
        }
        return this.inventoryService.create(deviceProfile);
    }
    getDeviceProfilesByDeviceType(deviceType) {
        const deviceTypeFilter = {
            __or: [
                { 'c8y_Filter.type': deviceType },
                { 'c8y_Filter.type': '' },
                { __not: { __has: 'c8y_Filter.type' } }
            ]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    }
    getDeviceProfiles(andQuery) {
        let query = {
            type: 'c8y_Profile'
        };
        const filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    }
    getProfileOperation(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: 'c8y_DeviceProfile',
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 1
            };
            const operation = (yield this.operationService.list(filter)).data[0];
            return operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined;
        });
    }
    createProfileOperation(device, deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationCfg = {
                deviceId: device.id,
                profileId: deviceProfile.id,
                profileName: deviceProfile.name,
                c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                description: `Assign device profile ${deviceProfile.name} to device ${device.name}`
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getFirmwareItems(device, selectedProfile) {
        const deviceFirmware = device.c8y_Firmware;
        const profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        const deviceItems = [];
        const profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
    }
    getSoftwareItems(device, selectedProfile) {
        const deviceSoftware = device.c8y_SoftwareList;
        const profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
    }
    getConfigurationItems(device, selectedProfile) {
        const deviceConfiguration = [];
        Object.keys(device).forEach(key => {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        const profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
    }
    getAlert(itemType) {
        const notInstalled = (comparisionResult) => {
            return !comparisionResult.device ? this.NOT_INSTALLED_WARNING : '';
        };
        switch (itemType) {
            case 'firmware':
            case 'software':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails
                        ? this.VERSION_MISSMATCH_WARNING
                        : notInstalled(comparisionResult);
                };
            case 'configuration':
                return (comparisionResult) => {
                    return comparisionResult.device &&
                        comparisionResult.profile &&
                        (comparisionResult.device.itemName !== comparisionResult.profile.itemName ||
                            comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)
                        ? this.SAME_URL_WARNING
                        : notInstalled(comparisionResult);
                };
            default:
                return notInstalled;
        }
    }
    createProfileComparison(deviceItems = [], profileItems = [], mergeByProperty, propertyNameWithDetails, getAlert) {
        const comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
        const extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
        return sortBy(toArray(extendedComparisonObj), 'name');
    }
    createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails) {
        return deviceItems.reduce((comapritionItem, deviceItem) => Object.assign(comapritionItem, {
            [deviceItem[mergeByProperty]]: {
                device: {
                    itemName: deviceItem.name,
                    itemDetails: deviceItem[propertyNameWithDetails],
                    itemUrl: deviceItem.url
                },
                profile: undefined
            }
        }), {});
    }
    extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
        profileItems.forEach(profileItem => {
            const comparisionResult = {
                profile: {
                    itemName: profileItem.name,
                    itemDetails: profileItem[propertyNameWithDetails],
                    itemUrl: profileItem.url
                },
                device: comparisonObj[profileItem[mergeByProperty]]
                    ? comparisonObj[profileItem[mergeByProperty]].device
                    : undefined
            };
            comparisionResult.comparisonAlert = getAlert(comparisionResult);
            comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
        });
        return comparisonObj;
    }
}
DeviceProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileService, deps: [{ token: i1.InventoryService }, { token: i1.OperationService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i1.OperationService }, { type: i3.AlertService }]; } });

class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE$1;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
}
SelectConfigurationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectConfigurationModalComponent, deps: [{ token: i1$1.RepositoryService }], target: i0.ɵɵFactoryTarget.Component });
SelectConfigurationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: SelectConfigurationModalComponent, selector: "c8y-select-configuration-modal", providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => SelectConfigurationModalComponent)
        }
    ], ngImport: i0, template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n  c8yProductExperience\n  inherit\n  suppressDataOverriding\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.SHARED.COMPONENTS.SELECT_CONFIGURATION_MODAL }\"\n></c8y-select-modal>\n", dependencies: [{ kind: "component", type: i3.SelectModalComponent, selector: "c8y-select-modal", inputs: ["icon", "title", "subTitle", "items", "mode", "disableSelected", "showFilter", "additionalFilterTemplate", "areMoreEntries", "labels", "noItemsMessage"], outputs: ["result", "search", "onChoiceUpdated"] }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: SelectConfigurationModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-select-configuration-modal', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => SelectConfigurationModalComponent)
                        }
                    ], template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n  c8yProductExperience\n  inherit\n  suppressDataOverriding\n  [actionData]=\"{ component: PRODUCT_EXPERIENCE.SHARED.COMPONENTS.SELECT_CONFIGURATION_MODAL }\"\n></c8y-select-modal>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.RepositoryService }]; } });

var DeviceProfileOperation;
(function (DeviceProfileOperation) {
    DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
})(DeviceProfileOperation || (DeviceProfileOperation = {}));
const PRODUCT_EXPERIENCE = {
    EVENTS: {
        REPOSITORY: 'deviceProfileRepository',
        DEVICE_TAB: 'deviceProfileTab'
    },
    COMPONENTS: {
        DEVICE_PROFILE_LIST: 'device-profile-list',
        ADD_DEVICE_PROFILE: 'add-device-profile',
        DEVICE_PROFILE: 'device-profile',
        DEVICE_TAB_PROFILE: 'device-tab-profile'
    },
    ACTIONS: {
        CANCEL: 'cancel',
        CREATE: 'create',
        REMOVE: 'remove',
        ADD: 'add',
        SAVE: 'save',
        ASSIGN_DEVICE_PROFILE: 'assignDeviceProfile'
    },
    RESULTS: {
        ADD_SOFTWARE: 'addSoftware'
    },
    FRAGMENTS: {
        FIRMWARE: 'firmware',
        SOFTWARE: 'software',
        CONFGIURATION: 'configuration'
    }
};

class DeviceProfileComponent {
    constructor(route, alertService, inventoryService, bsModal, repositoryService) {
        this.route = route;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.bsModal = bsModal;
        this.repositoryService = repositoryService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.DEVICE_TYPE_DISABLED_POPOVER = gettext('Device type cannot be changed on profiles with already defined firmware, software or configuration since they may not be applicable to devices of the new device type.');
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.productExperienceEvent = {
            eventName: PRODUCT_EXPERIENCE.EVENTS.REPOSITORY,
            data: {
                component: PRODUCT_EXPERIENCE.COMPONENTS.DEVICE_PROFILE
            }
        };
        this.queriesUtil = new QueriesUtil();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const profileId = this.route.snapshot.paramMap.get('id');
            this.deviceProfile = (yield this.getDeviceProfile(profileId));
            if (this.deviceProfile) {
                this.profileName = this.deviceProfile.name;
                if (!this.deviceProfile.c8y_DeviceProfile.software) {
                    this.deviceProfile.c8y_DeviceProfile.software = [];
                }
                if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                    this.deviceProfile.c8y_DeviceProfile.configuration = [];
                }
            }
        });
    }
    addFirmware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.FIRMWARE),
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.FIRMWARE),
            icon: 'c8y-firmware',
            title: gettext('Select firmware'),
            mode: ModalSelectionMode.SINGLE,
            productExperienceEvent: this.productExperienceEvent
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            ariaLabelledBy: 'modal-title',
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ =
                initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(firmwareList => {
            const [firmware] = firmwareList;
            if (!firmware) {
                return;
            }
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, {
                firmware: {
                    name: firmware.name,
                    version: firmware.version,
                    url: firmware.url,
                    isPatch: firmware.isPatch,
                    patchDependency: firmware.patchDependency
                }
            });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    getRepositoryEntriesWithVersions$(searchTerm$, repoType) {
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(searchTerm => this.repositoryService.listRepositoryEntries(repoType, {
            query: this.getDeviceTypeQuery(repoType),
            partialName: searchTerm.name,
            params: { pageSize: 100 },
            skipLegacy: true
        })), map(({ data }) => data), map(mos => this.getAndAssignRepositoryBinaries(mos)), shareReplay(1));
    }
    getAndAssignRepositoryBinaries(mos) {
        mos.forEach(mo => {
            mo.versions = this.repositoryService.listBaseVersions(mo);
        });
        return mos;
    }
    addConfiguration() {
        const modal = this.bsModal.show(SelectConfigurationModalComponent, {
            ignoreBackdropClick: true,
            ariaLabelledBy: 'modal-title',
            initialState: {
                productExperienceEvent: this.productExperienceEvent
            }
        });
        modal.content.deviceTypeQuery = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION);
        modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedConfigurations => {
            const selectedMapped = selectedConfigurations.map(selectedItem => {
                return assign({
                    url: selectedItem.url,
                    name: selectedItem.name
                }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.configuration || []);
            const configuration = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.type && othVal.type && arrVal.type === othVal.type;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { configuration });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    addSoftware() {
        const initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.SOFTWARE),
            repositoryType: RepositoryType.SOFTWARE,
            repositoryEntriesWithVersionsFn$: modalDialog => this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.SOFTWARE),
            selected: this.deviceProfile.c8y_DeviceProfile.software,
            icon: 'c8y-tools',
            title: gettext('Select software'),
            mode: ModalSelectionMode.MULTI,
            productExperienceEvent: this.productExperienceEvent
        };
        const modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            ariaLabelledBy: 'modal-title',
            initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ =
                initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(selectedSoftware => {
            const selectedMapped = selectedSoftware.map(selectedItem => {
                return {
                    name: selectedItem.name,
                    version: selectedItem.version,
                    url: selectedItem.url,
                    action: 'install'
                };
            });
            const merged = concat(selectedMapped, this.deviceProfile.c8y_DeviceProfile.software || []);
            const software = uniqWith(merged, (arrVal, othVal) => {
                return arrVal.name && othVal.name && arrVal.name === othVal.name;
            });
            const deviceProfilePartial = {
                c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { software });
            this.updateDeviceProfile(deviceProfilePartial);
        });
    }
    get isDeviceProfileEmpty() {
        const isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
            this.deviceProfile.c8y_DeviceProfile.software.length > 0;
        const isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
        const isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
            this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
        return isSoftware || isFirmware || isConfiguration;
    }
    removeItem(removedItem, category) {
        const deviceProfilePartial = {
            c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
        };
        const filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(item => !isEqual(removedItem, item));
        deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
        this.updateDeviceProfile(deviceProfilePartial);
    }
    removeFirmware() {
        delete this.deviceProfile.c8y_DeviceProfile.firmware;
        this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
    }
    updateDeviceProfile(partialDeviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                delete partialDeviceProfile.c8y_Filter.type;
            }
            Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
            try {
                const { data } = yield this.inventoryService.update(partialDeviceProfile);
                this.deviceProfile = data;
                this.profileName = this.deviceProfile.name;
                this.alertService.success(gettext('Device profile changed.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceProfile(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.inventoryService.detail(profileId);
                return data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    getDeviceTypeQuery(repositoryType) {
        if (has(this.deviceProfile, 'c8y_Filter.type') &&
            !isEmpty(this.deviceProfile.c8y_Filter.type)) {
            if (repositoryType === RepositoryType.CONFIGURATION) {
                return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: `deviceType` } });
            }
            else {
                return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, {
                    __or: [{ 'c8y_Filter.type': '' }, { __not: { __has: `c8y_Filter.type` } }]
                });
            }
        }
        return {};
    }
}
DeviceProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileComponent, deps: [{ token: i5.ActivatedRoute }, { token: i3.AlertService }, { token: i1.InventoryService }, { token: i4.BsModalService }, { token: i1$1.RepositoryService }], target: i0.ɵɵFactoryTarget.Component });
DeviceProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceProfileComponent, selector: "c8y-device-profile", providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => DeviceProfileComponent)
        }
    ], ngImport: i0, template: "<c8y-title>{{ profileName }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Management' | translate }}\"\n    icon=\"c8y-management\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item label=\"{{ profileName }}\" icon=\"c8y-device-profile\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\" class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card card--fullpage\" *ngIf=\"deviceProfile\">\n      <div class=\"card-block bg-level-1 flex-no-shrink p-t-24 p-b-24 overflow-visible\">\n        <div class=\"content-flex-70\">\n          <div class=\"text-center\">\n            <i class=\"c8y-icon-duocolor icon-48 c8y-icon c8y-icon-device-profile\"></i>\n            <p>\n              <small class=\"label label-info\">{{ 'Device profile' | translate }}</small>\n            </p>\n          </div>\n          <div class=\"flex-grow col-10\">\n            <div class=\"row\">\n              <div class=\"col-md-4\">\n                <form #editNameForm=\"ngForm\">\n                  <c8y-form-group>\n                    <label class=\"control-label\" translate>Name</label>\n                    <div class=\"input-group input-group-editable\">\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        [(ngModel)]=\"deviceProfile.name\"\n                        name=\"name\"\n                        placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n                        data-cy=\"device-profile--add-device-profile-name\"\n                        size=\"{{ deviceProfile.name?.length || 1 }}\"\n                        required\n                      />\n                      <span></span>\n                      <div class=\"input-group-btn\">\n                        <button\n                          class=\"btn btn-primary\"\n                          type=\"button\"\n                          title=\"{{ 'Save' | translate }}\"\n                          data-cy=\"device-profile--save\"\n                          (click)=\"\n                            updateDeviceProfile({ name: deviceProfile.name });\n                            editNameForm.form.markAsPristine()\n                          \"\n                          [disabled]=\"editNameForm.form.invalid\"\n                          c8yProductExperience\n                          inherit\n                          [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.SAVE }\"\n                        >\n                          {{ 'Save' | translate }}\n                        </button>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </form>\n              </div>\n              <div class=\"col-md-4\">\n                <form #editTypeForm=\"ngForm\">\n                  <c8y-form-group>\n                    <label class=\"control-label\">\n                      {{ 'Device type' | translate }}\n                      <button\n                        class=\"btn-help\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        [popover]=\"\n                          (DEVICE_TYPE_POPOVER | translate) +\n                          (isDeviceProfileEmpty\n                            ? ' ' + (DEVICE_TYPE_DISABLED_POPOVER | translate)\n                            : '')\n                        \"\n                        triggers=\"focus\"\n                        container=\"body\"\n                        placement=\"right\"\n                      ></button>\n                    </label>\n                    <div class=\"input-group input-group-editable\">\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                        data-cy=\"device-profile--device-type\"\n                        name=\"type\"\n                        placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                        size=\"{{ deviceProfile.c8y_Filter.type?.length || 14 }}\"\n                        [disabled]=\"isDeviceProfileEmpty\"\n                      />\n                      <span></span>\n                      <div class=\"input-group-btn\">\n                        <button\n                          class=\"btn btn-primary\"\n                          type=\"button\"\n                          title=\"{{ 'Save' | translate }}\"\n                          (click)=\"\n                            updateDeviceProfile({\n                              c8y_Filter: { type: deviceProfile.c8y_Filter.type }\n                            });\n                            editTypeForm.form.markAsPristine()\n                          \"\n                          [disabled]=\"isDeviceProfileEmpty\"\n                          c8yProductExperience\n                          inherit\n                          [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.SAVE }\"\n                        >\n                          {{ 'Save' | translate }}\n                        </button>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-header separator-top-bottom bg-content sticky-top\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Firmware</div>\n        </div>\n        <div class=\"card-block p-t-0\" *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'c8y-firmware'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50 m-l-4\">\n                <div class=\"col-6\">\n                  <span\n                    class=\"text-truncate\"\n                    title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n                  >\n                    {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span\n                    class=\"text-truncate\"\n                    title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n                  >\n                    <span class=\"text-label-small m-r-4\" translate>Version</span>\n                    {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`firmware`' | translate }}\"\n                    (click)=\"removeFirmware()\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`firmware`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`firmware`' | translate\"\n                    tooltip=\"{{ 'Remove`firmware`' | translate }}\"\n                    [delay]=\"500\"\n                    placement=\"right\"\n                    (click)=\"removeFirmware()\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-block p-t-16\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n          <c8y-ui-empty-state\n            icon=\"c8y-firmware\"\n            [horizontal]=\"true\"\n            [title]=\"'No firmware defined.' | translate\"\n            class=\"p-t-16 d-block\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n          <button\n            class=\"btn btn-default\"\n            type=\"button\"\n            title=\"{{ 'Add firmware' | translate }}\"\n            (click)=\"addFirmware()\"\n            c8yProductExperience\n            inherit\n            [actionData]=\"{\n              action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n              fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n            }\"\n          >\n            <i c8yIcon=\"plus-circle\"></i>\n            {{ 'Add firmware' | translate }}\n          </button>\n        </div>\n\n        <div class=\"card-header separator-top-bottom sticky-top bg-component\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Software</div>\n        </div>\n        <div class=\"card-block p-t-0\" *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length > 0\">\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software\">\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'c8y-tools'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50 m-l-4\">\n                <div class=\"col-6\">\n                  <span class=\"text-truncate-wrap\" title=\"{{ software.name }}\">\n                    {{ software.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span class=\"text-truncate-wrap\" title=\"{{ software.version }}\">\n                    <span class=\"text-label-small m-r-8\" translate>Version</span>\n                    {{ software.version }}\n                  </span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`software`' | translate }}\"\n                    ((click)=\"removeItem(software, 'software')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`software`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`software`' | translate\"\n                    tooltip=\"{{ 'Remove`software`' | translate }}\"\n                    [delay]=\"500\"\n                    placement=\"right\"\n                    (click)=\"removeItem(software, 'software')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div\n          class=\"card-block p-t-16\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\"\n        >\n          <c8y-ui-empty-state\n            icon=\"c8y-tools\"\n            [horizontal]=\"true\"\n            [title]=\"'No software defined.' | translate\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\">\n          <button\n            class=\"btn btn-default m-b-0\"\n            type=\"button\"\n            title=\"{{ 'Add software' | translate }}\"\n            (click)=\"addSoftware()\"\n            c8yProductExperience\n            inherit\n            [actionData]=\"{\n              action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n              fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n            }\"\n          >\n            <i c8yIcon=\"plus-circle\"></i>\n            {{ 'Add software' | translate }}\n          </button>\n        </div>\n\n        <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Configuration</div>\n        </div>\n        <div\n          class=\"card-block p-t-0\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length > 0\"\n        >\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration\">\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'gears'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50\">\n                <div class=\"col-6\">\n                  <span class=\"text-truncate\" title=\"{{ configuration.name }}\">\n                    {{ configuration.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span class=\"label label-info\">{{ configuration.type }}</span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`configuration`' | translate }}\"\n                    (click)=\"removeItem(configuration, 'configuration')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`configuration`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`configuration`' | translate\"\n                    tooltip=\"{{ 'Remove`configuration`' | translate }}\"\n                    (click)=\"removeItem(configuration, 'configuration')\"\n                    [delay]=\"500\"\n                    placement=\"top\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div\n          class=\"card-block p-t-16\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\"\n        >\n          <c8y-ui-empty-state\n            icon=\"gears\"\n            [horizontal]=\"true\"\n            [title]=\"'No configuration defined.' | translate\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\">\n          <div class=\"p-t-8\">\n            <button\n              title=\"{{ 'Add configuration' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-default m-b-0\"\n              (click)=\"addConfiguration()\"\n              c8yProductExperience\n              inherit\n              [actionData]=\"{\n                action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n                fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n              }\"\n            >\n              <i c8yIcon=\"plus-circle\"></i>\n              {{ 'Add configuration' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i3.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i3.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "component", type: i3.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i3.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "component", type: i3.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i3.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i3.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "directive", type: i8.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "directive", type: i9.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-profile', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => DeviceProfileComponent)
                        }
                    ], template: "<c8y-title>{{ profileName }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Management' | translate }}\"\n    icon=\"c8y-management\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item label=\"{{ profileName }}\" icon=\"c8y-device-profile\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\" class=\"row\">\n  <div class=\"col-lg-12 col-lg-max\">\n    <div class=\"card card--fullpage\" *ngIf=\"deviceProfile\">\n      <div class=\"card-block bg-level-1 flex-no-shrink p-t-24 p-b-24 overflow-visible\">\n        <div class=\"content-flex-70\">\n          <div class=\"text-center\">\n            <i class=\"c8y-icon-duocolor icon-48 c8y-icon c8y-icon-device-profile\"></i>\n            <p>\n              <small class=\"label label-info\">{{ 'Device profile' | translate }}</small>\n            </p>\n          </div>\n          <div class=\"flex-grow col-10\">\n            <div class=\"row\">\n              <div class=\"col-md-4\">\n                <form #editNameForm=\"ngForm\">\n                  <c8y-form-group>\n                    <label class=\"control-label\" translate>Name</label>\n                    <div class=\"input-group input-group-editable\">\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        [(ngModel)]=\"deviceProfile.name\"\n                        name=\"name\"\n                        placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n                        data-cy=\"device-profile--add-device-profile-name\"\n                        size=\"{{ deviceProfile.name?.length || 1 }}\"\n                        required\n                      />\n                      <span></span>\n                      <div class=\"input-group-btn\">\n                        <button\n                          class=\"btn btn-primary\"\n                          type=\"button\"\n                          title=\"{{ 'Save' | translate }}\"\n                          data-cy=\"device-profile--save\"\n                          (click)=\"\n                            updateDeviceProfile({ name: deviceProfile.name });\n                            editNameForm.form.markAsPristine()\n                          \"\n                          [disabled]=\"editNameForm.form.invalid\"\n                          c8yProductExperience\n                          inherit\n                          [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.SAVE }\"\n                        >\n                          {{ 'Save' | translate }}\n                        </button>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </form>\n              </div>\n              <div class=\"col-md-4\">\n                <form #editTypeForm=\"ngForm\">\n                  <c8y-form-group>\n                    <label class=\"control-label\">\n                      {{ 'Device type' | translate }}\n                      <button\n                        class=\"btn-help\"\n                        type=\"button\"\n                        [attr.aria-label]=\"'Help' | translate\"\n                        [popover]=\"\n                          (DEVICE_TYPE_POPOVER | translate) +\n                          (isDeviceProfileEmpty\n                            ? ' ' + (DEVICE_TYPE_DISABLED_POPOVER | translate)\n                            : '')\n                        \"\n                        triggers=\"focus\"\n                        container=\"body\"\n                        placement=\"right\"\n                      ></button>\n                    </label>\n                    <div class=\"input-group input-group-editable\">\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                        data-cy=\"device-profile--device-type\"\n                        name=\"type\"\n                        placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                        size=\"{{ deviceProfile.c8y_Filter.type?.length || 14 }}\"\n                        [disabled]=\"isDeviceProfileEmpty\"\n                      />\n                      <span></span>\n                      <div class=\"input-group-btn\">\n                        <button\n                          class=\"btn btn-primary\"\n                          type=\"button\"\n                          title=\"{{ 'Save' | translate }}\"\n                          (click)=\"\n                            updateDeviceProfile({\n                              c8y_Filter: { type: deviceProfile.c8y_Filter.type }\n                            });\n                            editTypeForm.form.markAsPristine()\n                          \"\n                          [disabled]=\"isDeviceProfileEmpty\"\n                          c8yProductExperience\n                          inherit\n                          [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.SAVE }\"\n                        >\n                          {{ 'Save' | translate }}\n                        </button>\n                      </div>\n                    </div>\n                  </c8y-form-group>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-header separator-top-bottom bg-content sticky-top\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Firmware</div>\n        </div>\n        <div class=\"card-block p-t-0\" *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'c8y-firmware'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50 m-l-4\">\n                <div class=\"col-6\">\n                  <span\n                    class=\"text-truncate\"\n                    title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n                  >\n                    {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span\n                    class=\"text-truncate\"\n                    title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n                  >\n                    <span class=\"text-label-small m-r-4\" translate>Version</span>\n                    {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`firmware`' | translate }}\"\n                    (click)=\"removeFirmware()\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`firmware`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`firmware`' | translate\"\n                    tooltip=\"{{ 'Remove`firmware`' | translate }}\"\n                    [delay]=\"500\"\n                    placement=\"right\"\n                    (click)=\"removeFirmware()\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div class=\"card-block p-t-16\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n          <c8y-ui-empty-state\n            icon=\"c8y-firmware\"\n            [horizontal]=\"true\"\n            [title]=\"'No firmware defined.' | translate\"\n            class=\"p-t-16 d-block\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n          <button\n            class=\"btn btn-default\"\n            type=\"button\"\n            title=\"{{ 'Add firmware' | translate }}\"\n            (click)=\"addFirmware()\"\n            c8yProductExperience\n            inherit\n            [actionData]=\"{\n              action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n              fragment: PRODUCT_EXPERIENCE.FRAGMENTS.FIRMWARE\n            }\"\n          >\n            <i c8yIcon=\"plus-circle\"></i>\n            {{ 'Add firmware' | translate }}\n          </button>\n        </div>\n\n        <div class=\"card-header separator-top-bottom sticky-top bg-component\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Software</div>\n        </div>\n        <div class=\"card-block p-t-0\" *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length > 0\">\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software\">\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'c8y-tools'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50 m-l-4\">\n                <div class=\"col-6\">\n                  <span class=\"text-truncate-wrap\" title=\"{{ software.name }}\">\n                    {{ software.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span class=\"text-truncate-wrap\" title=\"{{ software.version }}\">\n                    <span class=\"text-label-small m-r-8\" translate>Version</span>\n                    {{ software.version }}\n                  </span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`software`' | translate }}\"\n                    ((click)=\"removeItem(software, 'software')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`software`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`software`' | translate\"\n                    tooltip=\"{{ 'Remove`software`' | translate }}\"\n                    [delay]=\"500\"\n                    placement=\"right\"\n                    (click)=\"removeItem(software, 'software')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div\n          class=\"card-block p-t-16\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\"\n        >\n          <c8y-ui-empty-state\n            icon=\"c8y-tools\"\n            [horizontal]=\"true\"\n            [title]=\"'No software defined.' | translate\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\">\n          <button\n            class=\"btn btn-default m-b-0\"\n            type=\"button\"\n            title=\"{{ 'Add software' | translate }}\"\n            (click)=\"addSoftware()\"\n            c8yProductExperience\n            inherit\n            [actionData]=\"{\n              action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n              fragment: PRODUCT_EXPERIENCE.FRAGMENTS.SOFTWARE\n            }\"\n          >\n            <i c8yIcon=\"plus-circle\"></i>\n            {{ 'Add software' | translate }}\n          </button>\n        </div>\n\n        <div class=\"card-header separator-top-bottom bg-component sticky-top\">\n          <div class=\"card-icon\">\n            <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"card-title\" translate>Configuration</div>\n        </div>\n        <div\n          class=\"card-block p-t-0\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length > 0\"\n        >\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration\">\n              <c8y-li-icon>\n                <i [c8yIcon]=\"'gears'\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-50\">\n                <div class=\"col-6\">\n                  <span class=\"text-truncate\" title=\"{{ configuration.name }}\">\n                    {{ configuration.name }}\n                  </span>\n                </div>\n                <div class=\"col-5 d-flex a-i-center\">\n                  <span class=\"label label-info\">{{ configuration.type }}</span>\n                  <button\n                    class=\"btn btn-danger btn-xs visible-xs m-l-auto m-r-8 m-t-8\"\n                    type=\"button\"\n                    title=\"{{ 'Remove`configuration`' | translate }}\"\n                    (click)=\"removeItem(configuration, 'configuration')\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                    {{ 'Remove`configuration`' | translate }}\n                  </button>\n                </div>\n                <div class=\"m-l-auto p-r-8 hidden-xs\">\n                  <button\n                    class=\"btn btn-dot showOnHover text-danger\"\n                    type=\"button\"\n                    [attr.aria-label]=\"'Remove`configuration`' | translate\"\n                    tooltip=\"{{ 'Remove`configuration`' | translate }}\"\n                    (click)=\"removeItem(configuration, 'configuration')\"\n                    [delay]=\"500\"\n                    placement=\"top\"\n                    c8yProductExperience\n                    inherit\n                    [actionData]=\"{\n                      action: PRODUCT_EXPERIENCE.ACTIONS.REMOVE,\n                      fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n                    }\"\n                  >\n                    <i c8yIcon=\"minus-circle\"></i>\n                  </button>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n        <div\n          class=\"card-block p-t-16\"\n          *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\"\n        >\n          <c8y-ui-empty-state\n            icon=\"gears\"\n            [horizontal]=\"true\"\n            [title]=\"'No configuration defined.' | translate\"\n          ></c8y-ui-empty-state>\n        </div>\n        <div class=\"card-footer p-t-0\">\n          <div class=\"p-t-8\">\n            <button\n              title=\"{{ 'Add configuration' | translate }}\"\n              type=\"button\"\n              class=\"btn btn-default m-b-0\"\n              (click)=\"addConfiguration()\"\n              c8yProductExperience\n              inherit\n              [actionData]=\"{\n                action: PRODUCT_EXPERIENCE.ACTIONS.ADD,\n                fragment: PRODUCT_EXPERIENCE.FRAGMENTS.CONFGIURATION\n              }\"\n            >\n              <i c8yIcon=\"plus-circle\"></i>\n              {{ 'Add configuration' | translate }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i5.ActivatedRoute }, { type: i3.AlertService }, { type: i1.InventoryService }, { type: i4.BsModalService }, { type: i1$1.RepositoryService }]; } });

class AddDeviceProfileComponent {
    constructor(modal, deviceProfileService) {
        this.modal = modal;
        this.deviceProfileService = deviceProfileService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.deviceProfile = {
            name: '',
            type: 'c8y_Profile',
            c8y_Filter: {},
            c8y_DeviceProfile: {}
        };
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            const mo = (yield this.deviceProfileService.createDeviceProfile(this.deviceProfile)).data;
            this._save(mo.id);
        });
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
}
AddDeviceProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDeviceProfileComponent, deps: [{ token: i4.BsModalRef }, { token: DeviceProfileService }], target: i0.ɵɵFactoryTarget.Component });
AddDeviceProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AddDeviceProfileComponent, selector: "c8y-add-device-profile", providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => AddDeviceProfileComponent)
        }
    ], ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <div class=\"modal-title\" id=\"addDeviceProfileModalTitle\" translate>Add device profile</div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"addDeviceProfileModalDescription\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            data-cy=\"add-device-profile--device-profile-name\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn-help btn-help--sm\"\n              type=\"button\"\n              [attr.aria-label]=\"'Help' | translate\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              placement=\"right\"\n              triggers=\"focus\"\n            ></button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            data-cy=\"add-device-profile--device-type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      (click)=\"close()\"\n      c8yProductExperience\n      inherit\n      suppressDataOverriding\n      [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.CANCEL }\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      title=\"{{ 'Continue' | translate }}\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      c8yProductExperience\n      inherit\n      suppressDataOverriding\n      [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.CREATE }\"\n    >\n      {{ 'Continue' | translate }}\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3.FormGroupComponent, selector: "c8y-form-group", inputs: ["hasError", "hasWarning", "hasSuccess", "novalidation", "status"] }, { kind: "directive", type: i3.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "directive", type: i9.PopoverDirective, selector: "[popover]", inputs: ["adaptivePosition", "boundariesElement", "popover", "popoverContext", "popoverTitle", "placement", "outsideClick", "triggers", "container", "containerClass", "isOpen", "delay"], outputs: ["onShown", "onHidden"], exportAs: ["bs-popover"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AddDeviceProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-add-device-profile', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => AddDeviceProfileComponent)
                        }
                    ], template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <div class=\"modal-title\" id=\"addDeviceProfileModalTitle\" translate>Add device profile</div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"addDeviceProfileModalDescription\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            data-cy=\"add-device-profile--device-profile-name\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn-help btn-help--sm\"\n              type=\"button\"\n              [attr.aria-label]=\"'Help' | translate\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              placement=\"right\"\n              triggers=\"focus\"\n            ></button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            data-cy=\"add-device-profile--device-type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      type=\"button\"\n      title=\"{{ 'Cancel' | translate }}\"\n      (click)=\"close()\"\n      c8yProductExperience\n      inherit\n      suppressDataOverriding\n      [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.CANCEL }\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n\n    <button\n      class=\"btn btn-primary\"\n      type=\"button\"\n      title=\"{{ 'Continue' | translate }}\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      c8yProductExperience\n      inherit\n      suppressDataOverriding\n      [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.CREATE }\"\n    >\n      {{ 'Continue' | translate }}\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i4.BsModalRef }, { type: DeviceProfileService }]; } });

class DeviceProfileListComponent {
    constructor(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.alertService = alertService;
        this.bsModalService = bsModalService;
        this.router = router;
        this.deviceProfileService = deviceProfileService;
        this.reloading = false;
        this.reload = new BehaviorSubject(null);
        this.deviceProfiles$ = this.reload.pipe(tap(() => (this.reloading = true)), switchMap(() => this.deviceProfileService.getDeviceProfiles()), tap(() => (this.reloading = false)));
        this.productExperienceEvent = {
            eventName: PRODUCT_EXPERIENCE.EVENTS.REPOSITORY,
            data: {
                component: PRODUCT_EXPERIENCE.COMPONENTS.DEVICE_PROFILE_LIST
            }
        };
    }
    ngOnInit() {
        this.loadDeviceProfiles();
    }
    loadDeviceProfiles() {
        this.reload.next();
    }
    createDeviceProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const modal = this.bsModalService.show(AddDeviceProfileComponent, {
                class: 'modal-sm',
                ariaDescribedby: 'addDeviceProfileModalDescription',
                ariaLabelledBy: 'addDeviceProfileModalTitle',
                initialState: {
                    productExperienceEvent: Object.assign(Object.assign({}, this.productExperienceEvent), { data: Object.assign(Object.assign({}, this.productExperienceEvent.data), { component: PRODUCT_EXPERIENCE.COMPONENTS.ADD_DEVICE_PROFILE }) })
                }
            }).content;
            try {
                const profileId = yield modal.result;
                modal.close();
                this.router.navigateByUrl(`/device-profiles/${profileId}`);
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    duplicateDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const copy = cloneDeep(deviceProfile);
            copy.id = null;
            copy.name = 'Duplicate of ' + deviceProfile.name;
            const mo = (yield this.deviceProfileService.createDeviceProfile(copy)).data;
            this.router.navigateByUrl(`/device-profiles/${mo.id}`);
        });
    }
    deleteDeviceProfile(deviceProfile) {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceProfileName = deviceProfile.name;
            const title = gettext('Delete device profile');
            const confirmationText = this.translateService.instant(gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName });
            const finalQuestion = this.translateService.instant(gettext('Do you want to proceed?'));
            try {
                yield this.modalService.confirm(title, `${confirmationText} ${finalQuestion}`, Status.DANGER, {
                    ok: gettext('Delete')
                }, {}, this.productExperienceEvent);
                yield this.delete(deviceProfile.id);
                this.reload.next();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    delete(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.inventoryService.delete(profileId);
                this.alertService.success(gettext('Device profile deleted.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
}
DeviceProfileListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileListComponent, deps: [{ token: i1.InventoryService }, { token: i2$1.TranslateService }, { token: i3.ModalService }, { token: i3.AlertService }, { token: i4.BsModalService }, { token: i5.Router }, { token: DeviceProfileService }], target: i0.ɵɵFactoryTarget.Component });
DeviceProfileListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceProfileListComponent, selector: "c8y-device-profile-list", providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => DeviceProfileListComponent)
        }
    ], ngImport: i0, template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Management' | translate }}\"\n    icon=\"c8y-management\"\n    >\n  </c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Device profiles' | translate }}\"\n    icon=\"c8y-device-profile\"\n    >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'icon-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#device-profiles\"></c8y-help>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state m-t-40\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n    >\n      {{ 'Add device profile' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li\n    [emptyActions]=\"true\"\n    class=\"page-sticky-header hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{ 'Device profile' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Device type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button\n          class=\"btn-clean max-width-inherit\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n          Device type\n        </span>\n        <span class=\"text-truncate\" *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\">\n          {{ deviceProfile.c8y_Filter?.type }}\n        </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n      data-cy=\"device-profile-list--edit\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      data-cy=\"device-profile-list--duplicate\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      data-cy=\"device-profile-list--delete\"\n      icon=\"delete\"\n      label=\"{{ 'Delete' | translate }}\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n", dependencies: [{ kind: "component", type: i3.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i3.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i3.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i3.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "component", type: i3.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i3.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i3.ListItemBodyComponent, selector: "c8y-list-item-body, c8y-li-body", inputs: ["body"] }, { kind: "component", type: i3.ListItemActionComponent, selector: "c8y-list-item-action, c8y-li-action", inputs: ["label", "icon"], outputs: ["click"] }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i3.HelpComponent, selector: "c8y-help", inputs: ["src", "isCollapsed", "priority", "icon"] }, { kind: "directive", type: i5.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-profile-list', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => DeviceProfileListComponent)
                        }
                    ], template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Management' | translate }}\"\n    icon=\"c8y-management\"\n    >\n  </c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    label=\"{{ 'Device profiles' | translate }}\"\n    icon=\"c8y-device-profile\"\n    >\n  </c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'icon-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-help src=\"/users-guide/device-management/#device-profiles\"></c8y-help>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state m-t-40\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n    >\n      {{ 'Add device profile' | translate }}\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li\n    [emptyActions]=\"true\"\n    class=\"page-sticky-header hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"p-l-24\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{ 'Device profile' | translate }}\n      </div>\n      <div class=\"col-6\">\n        {{ 'Device type' | translate }}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" title=\"{{ deviceProfile.name }}\">\n        <button\n          class=\"btn-clean max-width-inherit\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\" title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\">\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n          Device type\n        </span>\n        <span class=\"text-truncate\" *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\">\n          {{ deviceProfile.c8y_Filter?.type }}\n        </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n      data-cy=\"device-profile-list--edit\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      data-cy=\"device-profile-list--duplicate\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      data-cy=\"device-profile-list--delete\"\n      icon=\"delete\"\n      label=\"{{ 'Delete' | translate }}\"\n      c8yProductExperience\n      inherit\n    ></c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n" }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2$1.TranslateService }, { type: i3.ModalService }, { type: i3.AlertService }, { type: i4.BsModalService }, { type: i5.Router }, { type: DeviceProfileService }]; } });

class DeviceProfileGuard {
    canActivate(route) {
        const contextData = route.data.contextData || route.parent.data.contextData;
        if (!contextData) {
            return false;
        }
        return this.hasSupportedOperation(contextData, DeviceProfileOperation.APPLY_PROFILE);
    }
    hasSupportedOperation(mo, operation) {
        const supported = mo.c8y_SupportedOperations || [];
        if (!supported) {
            return false;
        }
        return !!supported.find(supportedOperation => supportedOperation === operation);
    }
}
DeviceProfileGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DeviceProfileGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileGuard, decorators: [{
            type: Injectable
        }] });

class DeviceProfileItemListComponent {
}
DeviceProfileItemListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileItemListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceProfileItemListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceProfileItemListComponent, selector: "c8y-device-profile-item-list", inputs: { icon: "icon", comparisonResults: "comparisonResults", showProfileItems: "showProfileItems", showTextLabel: "showTextLabel" }, ngImport: i0, template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item fit-h\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-level-1\">\n    <div\n      class=\"c8y-list__item bg-level-1\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-level-0 hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.MessageDirective, selector: "c8y-message", inputs: ["name", "text"] }, { kind: "component", type: i3.MessagesComponent, selector: "c8y-messages", inputs: ["show", "defaults"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileItemListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-profile-item-list', template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item fit-h\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-level-1\">\n    <div\n      class=\"c8y-list__item bg-level-1\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-level-0 hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], propDecorators: { icon: [{
                type: Input
            }], comparisonResults: [{
                type: Input
            }], showProfileItems: [{
                type: Input
            }], showTextLabel: [{
                type: Input
            }] } });

class DeviceTabProfileDetailComponent {
    constructor() {
        this.emptyStateText = '';
        this.emptyStateDetails = '';
        this.showTextLabel = true;
    }
}
DeviceTabProfileDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceTabProfileDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeviceTabProfileDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceTabProfileDetailComponent, selector: "c8y-device-tab-profile-detail", inputs: { sectionTitle: "sectionTitle", sectionIcon: "sectionIcon", emptyStateText: "emptyStateText", emptyStateDetails: "emptyStateDetails", isProfileSelected: "isProfileSelected", isEmpty: "isEmpty", items: "items", showTextLabel: "showTextLabel" }, ngImport: i0, template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-level-0 card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-level-1  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-level-0 p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-level-1 p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-level-1\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-level-0 p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-level-1 p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: DeviceProfileItemListComponent, selector: "c8y-device-profile-item-list", inputs: ["icon", "comparisonResults", "showProfileItems", "showTextLabel"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceTabProfileDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-tab-profile-detail', template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-level-0 card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-level-1  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-level-0 p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-level-1 p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-level-1\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-level-0 p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-level-1 p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n" }]
        }], propDecorators: { sectionTitle: [{
                type: Input
            }], sectionIcon: [{
                type: Input
            }], emptyStateText: [{
                type: Input
            }], emptyStateDetails: [{
                type: Input
            }], isProfileSelected: [{
                type: Input
            }], isEmpty: [{
                type: Input
            }], items: [{
                type: Input
            }], showTextLabel: [{
                type: Input
            }] } });

class DeviceTabProfileComponent {
    constructor(deviceRealtime, deviceProfileService, route, operationRealtime, alertService) {
        this.deviceRealtime = deviceRealtime;
        this.deviceProfileService = deviceProfileService;
        this.route = route;
        this.operationRealtime = operationRealtime;
        this.alertService = alertService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.firmwareItems = [];
        this.softwareItems = [];
        this.configurationItems = [];
        this.pattern = '';
        this.reloading = false;
        this.productExperienceEvent = {
            eventName: PRODUCT_EXPERIENCE.EVENTS.DEVICE_TAB,
            data: {
                component: PRODUCT_EXPERIENCE.COMPONENTS.DEVICE_TAB_PROFILE
            }
        };
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.device = this.route.snapshot.parent.data.contextData;
            this.getDeviceProfilesAndUpdateProfileItems();
            this.subscribeToManagedObjects();
        });
    }
    getDeviceProfilesAndUpdateProfileItems() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reloading = true;
            this.deviceProfiles = yield this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type);
            if (this.device.c8y_Profile) {
                const profileId = this.device.c8y_Profile.profileId;
                this.selectedProfile = this.deviceProfiles.data.find(mo => mo.id === profileId);
            }
            this.updateProfileItems(this.device, this.selectedProfile);
            this.operation = yield this.deviceProfileService.getProfileOperation(this.device.id);
            this.subscribeToOperations();
            this.reloading = false;
        });
    }
    selectProfile(mo) {
        this.selectedProfile = mo;
        this.updateProfileItems(this.device, this.selectedProfile);
    }
    createOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            this.operation = yield this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile);
        });
    }
    setPipe(filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map(data => {
            return data.filter(mo => mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1);
        }));
    }
    ngOnDestroy() {
        this.operationsSubscription.unsubscribe();
        this.moOnUpdateSubscription.unsubscribe();
        this.moOnDeleteSubscription.unsubscribe();
    }
    updateProfileItems(device, profile) {
        this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
        this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
        this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
    }
    subscribeToManagedObjects() {
        this.moOnUpdateSubscription = this.deviceRealtime
            .onUpdate$(this.device.id)
            .subscribe((managedObject) => {
            this.updateProfileItems(managedObject, this.selectedProfile);
        });
        this.moOnDeleteSubscription = this.deviceRealtime.onDelete$(this.device.id).subscribe(() => {
            this.alertService.danger(gettext('This device has just been deleted. You will be redirected to "All devices" page now.'));
            window.location.href = '#/device';
        });
    }
    subscribeToOperations() {
        this.operationsSubscription = this.operationRealtime
            .onAll$(this.device.id)
            .pipe(map(({ data }) => data), filter(operation => operation.c8y_DeviceProfile))
            .subscribe(operation => {
            this.operation = operation;
        });
    }
}
DeviceTabProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceTabProfileComponent, deps: [{ token: i3.ManagedObjectRealtimeService }, { token: DeviceProfileService }, { token: i5.ActivatedRoute }, { token: i3.OperationRealtimeService }, { token: i3.AlertService }], target: i0.ɵɵFactoryTarget.Component });
DeviceTabProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: DeviceTabProfileComponent, selector: "c8y-device-tab-profile", providers: [
        ManagedObjectRealtimeService,
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => DeviceTabProfileComponent)
        }
    ], ngImport: i0, template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reload' | translate }}\"\n    type=\"button\"\n    (click)=\"getDeviceProfilesAndUpdateProfileItems()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-level-0\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Device profile</div>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              data-cy=\"device-tab-profile--select-device-profile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                type=\"button\"\n                [disabled]=\"!selectedProfile?.id\"\n                c8yProductExperience\n                inherit\n                [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.ASSIGN_DEVICE_PROFILE }\"\n              >\n                <span>{{ 'Assign device profile' | translate }}</span>\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-level-1\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Currently installed</div>\n      </div>\n      <div class=\"card-block\">\n        <c8y-operation-details\n          [operation]=\"operation\"\n          c8yProductExperience\n          inherit\n          suppressDataOverriding\n        ></c8y-operation-details>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll d-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-level-0\"></div>\n      <div class=\"bg-level-1\"></div>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i3.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.ForOfDirective, selector: "[c8yFor]", inputs: ["c8yForOf", "c8yForLoadMore", "c8yForPipe", "c8yForNotFound", "c8yForMaxIterations", "c8yForLoadingTemplate", "c8yForLoadNextLabel", "c8yForRealtime", "c8yForRealtimeOptions", "c8yForComparator", "c8yForEnableVirtualScroll", "c8yForVirtualScrollElementSize", "c8yForVirtualScrollStrategy", "c8yForVirtualScrollContainerHeight"], outputs: ["c8yForCount"] }, { kind: "component", type: i3.HighlightComponent, selector: "c8y-highlight", inputs: ["pattern", "text", "elementClass", "shouldTrimPattern"] }, { kind: "component", type: i3.TypeaheadComponent, selector: "c8y-typeahead", inputs: ["required", "maxlength", "disabled", "allowFreeEntries", "placeholder", "displayProperty", "icon", "name", "autoClose", "hideNew", "container", "selected"], outputs: ["onSearch", "onIconClick"] }, { kind: "directive", type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "component", type: i3.RealtimeButtonComponent, selector: "c8y-realtime-btn", inputs: ["service", "label", "title"] }, { kind: "component", type: i6.OperationDetailsComponent, selector: "c8y-operation-details", inputs: ["operation"] }, { kind: "component", type: DeviceTabProfileDetailComponent, selector: "c8y-device-tab-profile-detail", inputs: ["sectionTitle", "sectionIcon", "emptyStateText", "emptyStateDetails", "isProfileSelected", "isEmpty", "items", "showTextLabel"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceTabProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-tab-profile', providers: [
                        ManagedObjectRealtimeService,
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => DeviceTabProfileComponent)
                        }
                    ], template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Reload' | translate }}\"\n    type=\"button\"\n    (click)=\"getDeviceProfilesAndUpdateProfileItems()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-level-0\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Device profile</div>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              data-cy=\"device-tab-profile--select-device-profile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                type=\"button\"\n                [disabled]=\"!selectedProfile?.id\"\n                c8yProductExperience\n                inherit\n                [actionData]=\"{ action: PRODUCT_EXPERIENCE.ACTIONS.ASSIGN_DEVICE_PROFILE }\"\n              >\n                <span>{{ 'Assign device profile' | translate }}</span>\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-level-1\">\n      <div class=\"card-header separator\">\n        <div class=\"card-title\" translate>Currently installed</div>\n      </div>\n      <div class=\"card-block\">\n        <c8y-operation-details\n          [operation]=\"operation\"\n          c8yProductExperience\n          inherit\n          suppressDataOverriding\n        ></c8y-operation-details>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll d-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-level-0\"></div>\n      <div class=\"bg-level-1\"></div>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i3.ManagedObjectRealtimeService }, { type: DeviceProfileService }, { type: i5.ActivatedRoute }, { type: i3.OperationRealtimeService }, { type: i3.AlertService }]; } });

const deviceProfilesRoutes = [
    {
        path: 'device-profiles/:id',
        component: DeviceProfileComponent
    },
    {
        path: 'device-profiles',
        component: DeviceProfileListComponent
    }
];
const deviceTabProfileRoutes = [
    {
        context: ViewContext.Device,
        path: 'device-profile',
        component: DeviceTabProfileComponent,
        label: gettext('Device profile'),
        icon: 'c8y-device-profile',
        canActivate: [DeviceProfileGuard]
    }
];
class DeviceProfileModule {
}
DeviceProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileModule, declarations: [DeviceProfileComponent,
        DeviceProfileListComponent,
        AddDeviceProfileComponent,
        SelectConfigurationModalComponent,
        DeviceTabProfileComponent,
        DeviceTabProfileDetailComponent,
        DeviceProfileItemListComponent], imports: [CoreModule,
        CommonModule,
        SharedRepositoryModule, i5.RouterModule, i2$2.BsDropdownModule, TooltipModule,
        ReactiveFormsModule,
        ButtonsModule,
        PopoverModule,
        OperationDetailsModule] });
DeviceProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileModule, providers: [
        hookNavigator(DeviceProfileNavigationFactory),
        hookRoute(deviceTabProfileRoutes),
        DeviceProfileService,
        DeviceProfileGuard
    ], imports: [CoreModule,
        CommonModule,
        SharedRepositoryModule,
        RouterModule.forChild(deviceProfilesRoutes),
        BsDropdownModule.forRoot(),
        TooltipModule,
        ReactiveFormsModule,
        ButtonsModule,
        PopoverModule,
        OperationDetailsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: DeviceProfileModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        DeviceProfileComponent,
                        DeviceProfileListComponent,
                        AddDeviceProfileComponent,
                        SelectConfigurationModalComponent,
                        DeviceTabProfileComponent,
                        DeviceTabProfileDetailComponent,
                        DeviceProfileItemListComponent
                    ],
                    exports: [],
                    imports: [
                        CoreModule,
                        CommonModule,
                        SharedRepositoryModule,
                        RouterModule.forChild(deviceProfilesRoutes),
                        BsDropdownModule.forRoot(),
                        TooltipModule,
                        ReactiveFormsModule,
                        ButtonsModule,
                        PopoverModule,
                        OperationDetailsModule
                    ],
                    entryComponents: [
                        AddDeviceProfileComponent,
                        SelectConfigurationModalComponent,
                        DeviceTabProfileComponent
                    ],
                    providers: [
                        hookNavigator(DeviceProfileNavigationFactory),
                        hookRoute(deviceTabProfileRoutes),
                        DeviceProfileService,
                        DeviceProfileGuard
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AddDeviceProfileComponent, DeviceProfileComponent, DeviceProfileGuard, DeviceProfileItemListComponent, DeviceProfileListComponent, DeviceProfileModule, DeviceProfileNavigationFactory, DeviceProfileOperation, DeviceProfileService, DeviceTabProfileComponent, DeviceTabProfileDetailComponent, PRODUCT_EXPERIENCE, SelectConfigurationModalComponent };
//# sourceMappingURL=c8y-ngx-components-device-profile.mjs.map

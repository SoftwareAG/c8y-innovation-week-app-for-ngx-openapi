import * as i0 from '@angular/core';
import { Pipe, Component, Input, EventEmitter, Output, ViewChild, Injectable, NgModule } from '@angular/core';
import * as i3 from '@c8y/ngx-components';
import { gettext, ApplicationPluginStatus, DataGridComponent, CoreModule, hookRoute, ViewContext } from '@c8y/ngx-components';
import * as i1 from '@c8y/ngx-components/ecosystem/shared';
import { PRODUCT_EXPERIENCE, SharedEcosystemModule } from '@c8y/ngx-components/ecosystem/shared';
import { __awaiter } from 'tslib';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import * as i1$1 from 'ngx-bootstrap/modal';
import * as i5 from '@angular/common';
import * as i5$1 from '@angular/forms';
import { ApplicationType } from '@c8y/client';
import * as i4 from '@ngx-translate/core';
import { uniq } from 'lodash-es';
import * as i1$2 from '@angular/router';

class AppStatePipe {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
    }
    transform(app, arg) {
        const appState = this.ecosystemService.getAppState(app);
        return appState[arg];
    }
}
AppStatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppStatePipe, deps: [{ token: i1.EcosystemService }], target: i0.ɵɵFactoryTarget.Pipe });
AppStatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: AppStatePipe, name: "appState" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppStatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'appState',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: i1.EcosystemService }]; } });

class AppsToUpdateRemotesSelectComponent {
    constructor(bsModalRef, ecosystemService) {
        this.bsModalRef = bsModalRef;
        this.ecosystemService = ecosystemService;
        this.filterTerm$ = new BehaviorSubject('');
        this.filteredApps$ = new BehaviorSubject([]);
        this.appsToUpdateRemotes = [];
        this.result = new Promise((resolve, reject) => {
            this._update = resolve;
            this._cancel = reject;
        });
    }
    ngOnInit() {
        this.filteredApps$ = combineLatest([of(this.apps), this.filterTerm$]).pipe(map(([apps, filterTerm]) => filterTerm.trim().length === 0
            ? apps
            : apps.filter((application) => this.ecosystemService.filterContainString(application.name, filterTerm))));
        this.textConfig =
            this.updateType === 'install'
                ? {
                    header: gettext('Select applications to install the plugin to'),
                    applyButton: gettext('Install')
                }
                : {
                    header: gettext('Select applications to uninstall the plugin from'),
                    applyButton: gettext('Uninstall')
                };
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
    setSelectedApps(selected, app) {
        selected
            ? this.appsToUpdateRemotes.push(app)
            : (this.appsToUpdateRemotes = this.appsToUpdateRemotes.filter(application => app.key !== application.key));
    }
    apply() {
        return __awaiter(this, void 0, void 0, function* () {
            this._update(this.appsToUpdateRemotes);
            this.bsModalRef.hide();
        });
    }
}
AppsToUpdateRemotesSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppsToUpdateRemotesSelectComponent, deps: [{ token: i1$1.BsModalRef }, { token: i1.EcosystemService }], target: i0.ɵɵFactoryTarget.Component });
AppsToUpdateRemotesSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: AppsToUpdateRemotesSelectComponent, selector: "ng-component", inputs: { apps: "apps", updateType: "updateType", pluginName: "pluginName", appsDisabled: "appsDisabled" }, ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <div\n      class=\"modal-title h4\"\n      id=\"modal-title\"\n      translate\n    >\n      Custom applications\n    </div>\n  </div>\n  <div\n    class=\"inner-scroll\"\n    id=\"modal-body\"\n  >\n    <div class=\"p-16 text-center separator-bottom sticky-top bg-component\">\n      <p class=\"text-medium\">\n        {{ textConfig.header | translate }}\n      </p>\n      <c8y-filter (onSearch)=\"filterTerm$.next($event)\"></c8y-filter>\n    </div>\n    <c8y-list-group *ngIf=\"apps.length; else emptyList\">\n      <c8y-li\n        [ngClass]=\"{ disabled: updateType === 'install' && appsDisabled.has(app.id) }\"\n        *ngFor=\"let app of filteredApps$ | async\"\n      >\n        <c8y-li-checkbox (onSelect)=\"setSelectedApps($event, app)\"></c8y-li-checkbox>\n        <c8y-li-icon class=\"p-l-0 icon-32\">\n          <c8y-app-icon\n            class=\"list-group-icon\"\n            [app]=\"app\"\n            [contextPath]=\"app.contextPath\"\n            [name]=\"app.name\"\n          ></c8y-app-icon>\n        </c8y-li-icon>\n        <div class=\"d-flex\">\n          <div class=\"p-r-8\">\n            <p\n              class=\"text-medium\"\n              [innerText]=\"app | humanizeAppName | async\"\n            ></p>\n            <p class=\"small text-muted\">{{ app.description }}</p>\n          </div>\n          <span\n            class=\"label m-l-auto a-s-start\"\n            [ngClass]=\"app | appState: 'class'\"\n          >\n            {{ app | appState: 'label' | translate }}\n          </span>\n        </div>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ textConfig.applyButton | translate }}\"\n      [disabled]=\"appsToUpdateRemotes.length === 0\"\n      (click)=\"apply()\"\n    >\n      {{ textConfig.applyButton | translate }}\n    </button>\n  </div>\n</div>\n<ng-template #emptyList>\n  <c8y-ui-empty-state\n    [icon]=\"'c8y-modules'\"\n    [title]=\"'No custom applications available.' | translate\"\n    [subtitle]=\"'No custom applications available.' | translate\"\n    [horizontal]=\"true\"\n  ></c8y-ui-empty-state>\n</ng-template>\n", dependencies: [{ kind: "component", type: i3.AppIconComponent, selector: "c8y-app-icon", inputs: ["contextPath", "name", "app"] }, { kind: "component", type: i3.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.FilterInputComponent, selector: "c8y-filter", inputs: ["icon"], outputs: ["onSearch"] }, { kind: "component", type: i3.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i3.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i3.ListItemCheckboxComponent, selector: "c8y-list-item-checkbox, c8y-li-checkbox", inputs: ["selected", "disabled", "displayAsSwitch"], outputs: ["onSelect"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.HumanizeAppNamePipe, name: "humanizeAppName" }, { kind: "pipe", type: AppStatePipe, name: "appState" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: AppsToUpdateRemotesSelectComponent, decorators: [{
            type: Component,
            args: [{ template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <div\n      class=\"modal-title h4\"\n      id=\"modal-title\"\n      translate\n    >\n      Custom applications\n    </div>\n  </div>\n  <div\n    class=\"inner-scroll\"\n    id=\"modal-body\"\n  >\n    <div class=\"p-16 text-center separator-bottom sticky-top bg-component\">\n      <p class=\"text-medium\">\n        {{ textConfig.header | translate }}\n      </p>\n      <c8y-filter (onSearch)=\"filterTerm$.next($event)\"></c8y-filter>\n    </div>\n    <c8y-list-group *ngIf=\"apps.length; else emptyList\">\n      <c8y-li\n        [ngClass]=\"{ disabled: updateType === 'install' && appsDisabled.has(app.id) }\"\n        *ngFor=\"let app of filteredApps$ | async\"\n      >\n        <c8y-li-checkbox (onSelect)=\"setSelectedApps($event, app)\"></c8y-li-checkbox>\n        <c8y-li-icon class=\"p-l-0 icon-32\">\n          <c8y-app-icon\n            class=\"list-group-icon\"\n            [app]=\"app\"\n            [contextPath]=\"app.contextPath\"\n            [name]=\"app.name\"\n          ></c8y-app-icon>\n        </c8y-li-icon>\n        <div class=\"d-flex\">\n          <div class=\"p-r-8\">\n            <p\n              class=\"text-medium\"\n              [innerText]=\"app | humanizeAppName | async\"\n            ></p>\n            <p class=\"small text-muted\">{{ app.description }}</p>\n          </div>\n          <span\n            class=\"label m-l-auto a-s-start\"\n            [ngClass]=\"app | appState: 'class'\"\n          >\n            {{ app | appState: 'label' | translate }}\n          </span>\n        </div>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ textConfig.applyButton | translate }}\"\n      [disabled]=\"appsToUpdateRemotes.length === 0\"\n      (click)=\"apply()\"\n    >\n      {{ textConfig.applyButton | translate }}\n    </button>\n  </div>\n</div>\n<ng-template #emptyList>\n  <c8y-ui-empty-state\n    [icon]=\"'c8y-modules'\"\n    [title]=\"'No custom applications available.' | translate\"\n    [subtitle]=\"'No custom applications available.' | translate\"\n    [horizontal]=\"true\"\n  ></c8y-ui-empty-state>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.BsModalRef }, { type: i1.EcosystemService }]; }, propDecorators: { apps: [{
                type: Input
            }], updateType: [{
                type: Input
            }], pluginName: [{
                type: Input
            }], appsDisabled: [{
                type: Input
            }] } });

class PluginListItemComponent {
    constructor() {
        this.isItemSelected = new EventEmitter();
    }
    onChange(event) {
        this.isItemSelected.next(event);
    }
}
PluginListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PluginListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PluginListItemComponent, selector: "c8y-plugin-list-item", inputs: { plugin: "plugin", selectable: "selectable" }, outputs: { isItemSelected: "isItemSelected" }, ngImport: i0, template: "\n  <c8y-li-checkbox\n    (change)=\"onChange($event.target.checked)\"\n    *ngIf=\"selectable\"\n    [disabled]=\"plugin.installed\"\n    class=\"p-r-16 p-l-0\"\n  ></c8y-li-checkbox>\n  <c8y-li-icon class=\"p-l-0\">\n    <i class=\"c8y-plugin-icon\">\n      <span>{{ plugin.name?.substr(0, 2) }}</span>\n    </i>\n  </c8y-li-icon>\n  <div class=\"d-flex\">\n    <div [ngClass]=\"{'p-r-8' : selectable}\">\n      <p>\n        <span class=\"text-medium\">{{ plugin.name }}</span>\n        <em class=\"text-muted small m-l-8\">{{ plugin.version }}</em>\n        <span *ngIf=\"plugin.installed\">\n          <i [c8yIcon]=\"'check-circle'\" class=\"text-success\"></i>\n          <em class=\"text-muted small\" translate>Installed`plugins`</em>\n        </span>\n      </p>\n      <p class=\"small l-h-tight\">{{ plugin.description }}</p>\n    </div>\n    <span *ngIf=\"selectable\" class=\"label label-info m-l-auto a-s-start\">{{\n      plugin.contextPath\n    }}</span>\n  </div>\n     \n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ListItemIconComponent, selector: "c8y-list-item-icon, c8y-li-icon", inputs: ["icon", "status"] }, { kind: "component", type: i3.ListItemCheckboxComponent, selector: "c8y-list-item-checkbox, c8y-li-checkbox", inputs: ["selected", "disabled", "displayAsSwitch"], outputs: ["onSelect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginListItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-plugin-list-item', template: "\n  <c8y-li-checkbox\n    (change)=\"onChange($event.target.checked)\"\n    *ngIf=\"selectable\"\n    [disabled]=\"plugin.installed\"\n    class=\"p-r-16 p-l-0\"\n  ></c8y-li-checkbox>\n  <c8y-li-icon class=\"p-l-0\">\n    <i class=\"c8y-plugin-icon\">\n      <span>{{ plugin.name?.substr(0, 2) }}</span>\n    </i>\n  </c8y-li-icon>\n  <div class=\"d-flex\">\n    <div [ngClass]=\"{'p-r-8' : selectable}\">\n      <p>\n        <span class=\"text-medium\">{{ plugin.name }}</span>\n        <em class=\"text-muted small m-l-8\">{{ plugin.version }}</em>\n        <span *ngIf=\"plugin.installed\">\n          <i [c8yIcon]=\"'check-circle'\" class=\"text-success\"></i>\n          <em class=\"text-muted small\" translate>Installed`plugins`</em>\n        </span>\n      </p>\n      <p class=\"small l-h-tight\">{{ plugin.description }}</p>\n    </div>\n    <span *ngIf=\"selectable\" class=\"label label-info m-l-auto a-s-start\">{{\n      plugin.contextPath\n    }}</span>\n  </div>\n     \n" }]
        }], propDecorators: { plugin: [{
                type: Input
            }], selectable: [{
                type: Input
            }], isItemSelected: [{
                type: Output
            }] } });

class PluginListComponent {
    constructor(ecosystemService, bsModalService, pluginsService, alertService, translateService, gainsightService) {
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.emptyListText = '';
        /**
         * Shows the install button for each plugin separately. Currently used in package-details view.
         */
        this.installable = false;
        this.selectedItems = new EventEmitter();
        this.remotePlugins$ = new BehaviorSubject({});
        this.selectedPlugins = {};
        this.updatingPluginId = { install: '', uninstall: '' };
        this.appsDisabled = new Set();
    }
    updateSelectedItems(selected, plugin) {
        this.selectedPlugins[plugin.id] = selected ? plugin : undefined;
        const onlyInstalledPlugins = Object.values(this.selectedPlugins).filter(Boolean);
        this.selectedItems.emit(onlyInstalledPlugins);
    }
    installPlugin(plugin) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateAppRemotes(plugin, 'install');
        });
    }
    uninstallPlugin(plugin) {
        return __awaiter(this, void 0, void 0, function* () {
            this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
                component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
                action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGIN,
                url: this.CURRENT_LOCATION
            });
            yield this.updateAppRemotes(plugin, 'uninstall');
        });
    }
    updateAppRemotes(plugin, updateType) {
        return __awaiter(this, void 0, void 0, function* () {
            this.updatingPluginId[updateType] = plugin === null || plugin === void 0 ? void 0 : plugin.id;
            let initialState;
            try {
                const apps = yield this.getAppsForUpdate(plugin, updateType);
                initialState = {
                    apps,
                    updateType,
                    pluginName: plugin.name,
                    appsDisabled: this.appsDisabled
                };
            }
            catch (e) {
                this.alertService.addServerFailure(e);
                this.updatingPluginId[updateType] = '';
                return;
            }
            let selectedApps;
            try {
                selectedApps = yield this.selectApps(initialState);
                if (!selectedApps) {
                    this.updatingPluginId[updateType] = '';
                    return;
                }
            }
            catch (_a) {
                // unreached
            }
            if (updateType === 'install') {
                const licensesVerifiedByUser = yield this.ecosystemService.verifyLicenses([plugin]);
                if (!licensesVerifiedByUser) {
                    this.updatingPluginId[updateType] = '';
                    return;
                }
            }
            for (const app of selectedApps) {
                try {
                    yield this.handleRemotesUpdate(app, plugin, updateType);
                    const successText = updateType === 'install'
                        ? this.translateService.instant(gettext('Plugin installed to application "{{ appName }}".'), {
                            appName: app.name
                        })
                        : this.translateService.instant(gettext('Plugin uninstalled from application "{{ appName }}".'), { appName: app.name });
                    this.alertService.success(successText);
                    this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
                        component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
                        result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_INSTALLED,
                        url: this.CURRENT_LOCATION
                    });
                }
                catch (_b) {
                    this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
                        component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
                        result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                        url: this.CURRENT_LOCATION
                    });
                }
            }
            this.updatingPluginId[updateType] = '';
        });
    }
    getAppsForUpdate(plugin, updateType) {
        return __awaiter(this, void 0, void 0, function* () {
            let apps = (yield this.ecosystemService.getWebApplications()).filter(app => this.ecosystemService.isOwner(app) && app.type !== ApplicationType.EXTERNAL);
            if (updateType === 'install') {
                this.appsDisabled.clear();
                for (const app of apps) {
                    if (yield this.isPluginInstalledInApp(plugin, app)) {
                        this.appsDisabled.add(app.id);
                    }
                }
            }
            if (updateType === 'uninstall') {
                const installedApps = [];
                for (const app of apps) {
                    if (yield this.isPluginInstalledInApp(plugin, app)) {
                        installedApps.push(app);
                    }
                }
                apps = installedApps;
            }
            return apps;
        });
    }
    isPluginInstalledInApp(plugin, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const appRemotes = this.pluginsService.getMFRemotes(app) || {};
            return Object.keys(appRemotes).some(remote => this.getInstalledPluginContextPathWithoutVersion(remote) === plugin.contextPath);
        });
    }
    getInstalledPluginContextPathWithoutVersion(remote) {
        return remote.split('@')[0];
    }
    handleRemotesUpdate(application, plugin, updateType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // When remotes object is not set in the configuration object of an application.
                // Fallback to setInitialRemotes is triggered.
                let updatedRemotes = yield (updateType === 'install'
                    ? this.pluginsService.addRemotes(application, plugin)
                    : this.pluginsService.removeRemotes(application, this.getAllPluginsToRemove(plugin)));
                if (!updatedRemotes) {
                    // TODO discuss if we need to handle it like that.
                    // Right now remotes from the cumulocity.json are taken into account when remotes object is missing in the configuration.
                    updatedRemotes = yield this.pluginsService.setInitialRemotes(application);
                    // Fresh application MO is needed, after initial state was set.
                    const app = yield this.ecosystemService.getApplication(application.id);
                    updatedRemotes = yield this.pluginsService.addRemotes(app, plugin);
                }
                return this.emitRemotes(updatedRemotes);
            }
            catch (er) {
                if (er) {
                    this.alertService.addServerFailure(er);
                }
                throw er;
            }
        });
    }
    getAllPluginsToRemove(plugin) {
        return this.package.applicationVersions.map(av => ({
            id: `${plugin.contextPath}@${av.version}/${plugin.module}`,
            module: plugin.module,
            path: plugin.path
        }));
    }
    emitRemotes(remotes) {
        this.remotePlugins$.next(remotes);
        return Object.assign({}, this.remotePlugins$.value);
    }
    selectApps(initialState) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.bsModalService.show(AppsToUpdateRemotesSelectComponent, {
                    class: 'modal-sm',
                    ariaDescribedby: 'modal-body',
                    ariaLabelledBy: 'modal-title',
                    initialState,
                    ignoreBackdropClick: true
                }).content.result;
            }
            catch (er) {
                return;
            }
        });
    }
}
PluginListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginListComponent, deps: [{ token: i1.EcosystemService }, { token: i1$1.BsModalService }, { token: i3.PluginsService }, { token: i3.AlertService }, { token: i4.TranslateService }, { token: i3.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
PluginListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: PluginListComponent, selector: "c8y-plugin-list", inputs: { plugins$: "plugins$", emptyListText: "emptyListText", selectable: "selectable", installable: "installable", package: "package" }, outputs: { selectedItems: "selectedItems" }, ngImport: i0, template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n        <c8y-plugin-list-item\n          (isItemSelected)=\"updateSelectedItems($event, plugin)\"\n          [plugin]=\"plugin\"\n          [selectable]=\"selectable\"\n          class=\"d-flex\"\n        ></c8y-plugin-list-item>\n        <div class=\"p-l-40 m-t-4\">\n          <button\n            *ngIf=\"installable\"\n            (click)=\"uninstallPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.uninstall }\"\n            [disabled]=\"updatingPluginId.uninstall && plugin.id !== updatingPluginId.uninstall\"\n            class=\"btn btn-danger btn-sm m-l-4\"\n            title=\"{{ 'Uninstall plugin' | translate }}\"\n            translate\n          >\n            Uninstall plugin\n          </button>\n          <button\n            *ngIf=\"installable\"\n            (click)=\"installPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.install }\"\n            [disabled]=\"updatingPluginId.install && plugin.id !== updatingPluginId.install\"\n            class=\"btn btn-default btn-sm m-l-8\"\n            title=\"{{ 'Install plugin' | translate }}\"\n            translate\n          >\n            Install plugin\n          </button>\n        </div>\n      </c8y-li>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"emptyListText\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: PluginListItemComponent, selector: "c8y-plugin-list-item", inputs: ["plugin", "selectable"], outputs: ["isItemSelected"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: PluginListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-plugin-list', template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n        <c8y-plugin-list-item\n          (isItemSelected)=\"updateSelectedItems($event, plugin)\"\n          [plugin]=\"plugin\"\n          [selectable]=\"selectable\"\n          class=\"d-flex\"\n        ></c8y-plugin-list-item>\n        <div class=\"p-l-40 m-t-4\">\n          <button\n            *ngIf=\"installable\"\n            (click)=\"uninstallPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.uninstall }\"\n            [disabled]=\"updatingPluginId.uninstall && plugin.id !== updatingPluginId.uninstall\"\n            class=\"btn btn-danger btn-sm m-l-4\"\n            title=\"{{ 'Uninstall plugin' | translate }}\"\n            translate\n          >\n            Uninstall plugin\n          </button>\n          <button\n            *ngIf=\"installable\"\n            (click)=\"installPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.install }\"\n            [disabled]=\"updatingPluginId.install && plugin.id !== updatingPluginId.install\"\n            class=\"btn btn-default btn-sm m-l-8\"\n            title=\"{{ 'Install plugin' | translate }}\"\n            translate\n          >\n            Install plugin\n          </button>\n        </div>\n      </c8y-li>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"emptyListText\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.EcosystemService }, { type: i1$1.BsModalService }, { type: i3.PluginsService }, { type: i3.AlertService }, { type: i4.TranslateService }, { type: i3.GainsightService }]; }, propDecorators: { plugins$: [{
                type: Input
            }], emptyListText: [{
                type: Input
            }], selectable: [{
                type: Input
            }], installable: [{
                type: Input
            }], package: [{
                type: Input
            }], selectedItems: [{
                type: Output
            }] } });

class OnlyLatestPluginVersionPipe {
    transform(value, disabled) {
        if (disabled) {
            return value;
        }
        return value.pipe(map(list => list.filter(plugin => { var _a; return !!((_a = plugin.tags) === null || _a === void 0 ? void 0 : _a.includes('latest')); })));
    }
}
OnlyLatestPluginVersionPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OnlyLatestPluginVersionPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
OnlyLatestPluginVersionPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: OnlyLatestPluginVersionPipe, name: "onlyLatestPluginVersion" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OnlyLatestPluginVersionPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'onlyLatestPluginVersion'
                }]
        }] });

class InstallPluginComponent {
    constructor(bsModalRef, modal, ecosystemService) {
        this.bsModalRef = bsModalRef;
        this.modal = modal;
        this.ecosystemService = ecosystemService;
        this.filterTerm$ = new BehaviorSubject('');
        this.filteredPlugins$ = new BehaviorSubject([]);
        this.selectedPlugins = [];
        this.result = new Promise((resolve, reject) => {
            this._install = resolve;
            this._cancel = reject;
        });
        this.onlyLatestPluginVersion = true;
    }
    ngOnInit() {
        this.filteredPlugins$ = combineLatest([this.plugins$, this.filterTerm$]).pipe(map(([plugins, filterTerm]) => filterTerm.trim().length === 0
            ? plugins
            : plugins.filter((plugin) => this.ecosystemService.filterContainString(plugin.name, filterTerm))));
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
    install() {
        this._install(this.selectedPlugins);
        this.bsModalRef.hide();
    }
}
InstallPluginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: InstallPluginComponent, deps: [{ token: i1$1.BsModalRef }, { token: i3.ModalService }, { token: i1.EcosystemService }], target: i0.ɵɵFactoryTarget.Component });
InstallPluginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: InstallPluginComponent, selector: "c8y-install-plugin", inputs: { plugins$: "plugins$" }, ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'plugin'\"></i>\n    <div id=\"modal-title\" class=\"modal-title h4\" translate>Available plugins</div>\n  </div>\n  <div class=\"p-t-8 p-16 text-center separator-bottom flex-no-shrink\">\n    <p class=\"text-medium m-b-8\" translate>Select the compatible plugins to install</p>\n    <label class=\"c8y-switch\">\n      <input type=\"checkbox\" [(ngModel)]=\"onlyLatestPluginVersion\" />\n      <span></span>\n      <span translate>Only latest version of plugins</span>\n    </label>\n    <c8y-filter (onSearch)=\"this.filterTerm$.next($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\" id=\"modal-body\">\n    <c8y-plugin-list\n      (selectedItems)=\"selectedPlugins = $event\"\n      [emptyListText]=\"'No plugins available' | translate\"\n      [plugins$]=\"filteredPlugins$ | onlyLatestPluginVersion: !onlyLatestPluginVersion\"\n      [selectable]=\"true\"\n      class=\"m-t-16\"\n    ></c8y-plugin-list>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      (click)=\"install()\"\n      [disabled]=\"selectedPlugins.length === 0\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Install' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Install' | translate }}\n      <span class=\"badge\" *ngIf=\"selectedPlugins.length as length\">{{ length }}</span>\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.FilterInputComponent, selector: "c8y-filter", inputs: ["icon"], outputs: ["onSearch"] }, { kind: "component", type: PluginListComponent, selector: "c8y-plugin-list", inputs: ["plugins$", "emptyListText", "selectable", "installable", "package"], outputs: ["selectedItems"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: OnlyLatestPluginVersionPipe, name: "onlyLatestPluginVersion" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: InstallPluginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-install-plugin', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'plugin'\"></i>\n    <div id=\"modal-title\" class=\"modal-title h4\" translate>Available plugins</div>\n  </div>\n  <div class=\"p-t-8 p-16 text-center separator-bottom flex-no-shrink\">\n    <p class=\"text-medium m-b-8\" translate>Select the compatible plugins to install</p>\n    <label class=\"c8y-switch\">\n      <input type=\"checkbox\" [(ngModel)]=\"onlyLatestPluginVersion\" />\n      <span></span>\n      <span translate>Only latest version of plugins</span>\n    </label>\n    <c8y-filter (onSearch)=\"this.filterTerm$.next($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\" id=\"modal-body\">\n    <c8y-plugin-list\n      (selectedItems)=\"selectedPlugins = $event\"\n      [emptyListText]=\"'No plugins available' | translate\"\n      [plugins$]=\"filteredPlugins$ | onlyLatestPluginVersion: !onlyLatestPluginVersion\"\n      [selectable]=\"true\"\n      class=\"m-t-16\"\n    ></c8y-plugin-list>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"cancel()\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      (click)=\"install()\"\n      [disabled]=\"selectedPlugins.length === 0\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Install' | translate }}\"\n      type=\"button\"\n    >\n      {{ 'Install' | translate }}\n      <span class=\"badge\" *ngIf=\"selectedPlugins.length as length\">{{ length }}</span>\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.BsModalRef }, { type: i3.ModalService }, { type: i1.EcosystemService }]; }, propDecorators: { plugins$: [{
                type: Input
            }] } });

class LabelCellRendererComponent {
    constructor(context) {
        this.context = context;
    }
}
LabelCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LabelCellRendererComponent, deps: [{ token: i3.CellRendererContext }], target: i0.ɵɵFactoryTarget.Component });
LabelCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: LabelCellRendererComponent, selector: "c8y-label-cell-renderer", ngImport: i0, template: "<span class=\"label label-info\">{{ context.value }}</span>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: LabelCellRendererComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-label-cell-renderer', template: "<span class=\"label label-info\">{{ context.value }}</span>\n" }]
        }], ctorParameters: function () { return [{ type: i3.CellRendererContext }]; } });

class OrphanedStatusCellRendererComponent {
    constructor(context) {
        this.context = context;
        this.label = this.getLabel(context.value);
    }
    getLabel(statusValue) {
        switch (statusValue) {
            case ApplicationPluginStatus.OUTDATED:
                return {
                    value: statusValue,
                    text: gettext('OUTDATED`plugin status`'),
                    class: 'label-warning'
                };
            case ApplicationPluginStatus.ORPHANED:
                return {
                    value: statusValue,
                    text: gettext('ORPHANED`plugin status`'),
                    class: 'label-danger'
                };
            case ApplicationPluginStatus.REVOKED:
                return {
                    value: statusValue,
                    text: gettext('REVOKED`plugin status`'),
                    class: 'label-danger'
                };
            case ApplicationPluginStatus.LATEST:
                return {
                    value: statusValue,
                    text: gettext('LATEST`plugin status`'),
                    class: 'label-success'
                };
            default:
                return null;
        }
    }
}
OrphanedStatusCellRendererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OrphanedStatusCellRendererComponent, deps: [{ token: i3.CellRendererContext }], target: i0.ɵɵFactoryTarget.Component });
OrphanedStatusCellRendererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: OrphanedStatusCellRendererComponent, selector: "c8y-orphaned-status-cell-renderer", ngImport: i0, template: "<span\n  *ngIf=\"label\"\n  class=\"label\"\n  [ngClass]=\"label.class\"\n  [title]=\"label.text | translate\"\n>\n  {{ label.text | translate }}\n</span>\n", dependencies: [{ kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: OrphanedStatusCellRendererComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-orphaned-status-cell-renderer', template: "<span\n  *ngIf=\"label\"\n  class=\"label\"\n  [ngClass]=\"label.class\"\n  [title]=\"label.text | translate\"\n>\n  {{ label.text | translate }}\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i3.CellRendererContext }]; } });

class UpdatePluginOfAppComponent {
    constructor(bsModalRef, pluginsService, alert, ecosystemService, gainsightService) {
        this.bsModalRef = bsModalRef;
        this.pluginsService = pluginsService;
        this.alert = alert;
        this.ecosystemService = ecosystemService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.result = new Promise((resolve, reject) => {
            this._install = resolve;
            this._cancel = reject;
        });
        this.updateAll = true;
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            const remotes = this.pluginsService.getMFRemotes(this.app);
            const oldRemotePath = `${this.plugin.contextPath}@${this.plugin.version}`;
            const newRemotePath = `${this.plugin.contextPath}@${this.applicationVersion.version}`;
            let oldRemoteModules = [...(remotes[oldRemotePath] || [])];
            if (!oldRemoteModules.length) {
                this.alert.warning(gettext('Could not change the version of plugin.'));
                this.cancel();
                return;
            }
            const result = yield this.ecosystemService.verifyLicenses([this.plugin]);
            if (!result) {
                this.alert.warning(gettext('Plugin update aborted by user.'));
                this.cancel();
                return;
            }
            let remoteModulesOfNewVersion = [...(remotes[newRemotePath] || [])];
            let olderVersions = {};
            if (this.updateAll) {
                olderVersions = Object.keys(remotes)
                    .filter(key => key.startsWith(`${this.plugin.contextPath}@`))
                    .reduceRight((prev, curr) => {
                    prev[curr] = undefined;
                    return prev;
                }, {});
                oldRemoteModules = Object.keys(olderVersions)
                    .map(version => remotes[version])
                    .reduceRight((prev, curr) => {
                    prev.push(...curr);
                    return prev;
                }, []);
                remoteModulesOfNewVersion.push(...oldRemoteModules);
            }
            else {
                remoteModulesOfNewVersion.push(this.plugin.module);
                olderVersions[oldRemotePath] = oldRemoteModules.filter(module => module !== this.plugin.module);
                if (!olderVersions[oldRemotePath].length) {
                    olderVersions[oldRemotePath] = undefined;
                }
            }
            remoteModulesOfNewVersion = uniq(remoteModulesOfNewVersion);
            const newRemotes = Object.assign(Object.assign(Object.assign({}, remotes), olderVersions), { [newRemotePath]: remoteModulesOfNewVersion });
            try {
                yield this.pluginsService.updateRemotesInAppConfig(this.app, newRemotes);
                this.alert.success(gettext(`Switched the version of plugin.`));
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.UPDATE_PLUGIN_OF_APP,
                    action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.CHANGE_PLUGIN_VERSION,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_VERSION_CHANGED,
                    url: this.CURRENT_LOCATION
                });
            }
            catch (e) {
                this.alert.addServerFailure(e);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.UPDATE_PLUGIN_OF_APP,
                    action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.CHANGE_PLUGIN_VERSION,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                    url: this.CURRENT_LOCATION
                });
            }
            this.bsModalRef.hide();
            this._install();
        });
    }
    cancel() {
        this.bsModalRef.hide();
        this._cancel();
    }
}
UpdatePluginOfAppComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdatePluginOfAppComponent, deps: [{ token: i1$1.BsModalRef }, { token: i3.PluginsService }, { token: i3.AlertService }, { token: i1.EcosystemService }, { token: i3.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
UpdatePluginOfAppComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: UpdatePluginOfAppComponent, selector: "c8y-update-plugin-of-app", ngImport: i0, template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <h4 *ngIf=\"!downgrade\" id=\"modal-title\" translate>Update plugin</h4>\n    <h4 *ngIf=\"downgrade\" id=\"modal-title\" translate>Downgrade plugin</h4>\n  </div>\n  <div class=\"inner-scroll\" id=\"modal-body\">\n    <div class=\"p-16\">\n      <div class=\"d-block fit-w bg-gray-white\">\n        <c8y-package-version-select\n          [packageContextPath]=\"plugin?.contextPath\"\n          [(ngModel)]=\"applicationVersion\"\n        ></c8y-package-version-select>\n        <div\n          *ngIf=\"plugin?.version && plugin.version === applicationVersion?.version\"\n          class=\"alert alert-info\"\n          role=\"alert\"\n        >\n          <span translate ngNonBindable [translateParams]=\"applicationVersion\">\n            Select another version, as {{ version }} is currently used.\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"c8y-checkbox\">\n          <input [(ngModel)]=\"updateAll\" type=\"checkbox\" />\n          <span></span>\n          <span translate ngNonBindable [translateParams]=\"plugin\">\n            Set version for all plugins using the same context path \"{{ contextPath }}\".\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Set version' | translate }}\"\n      [disabled]=\"!applicationVersion || plugin?.version === applicationVersion?.version\"\n      (click)=\"update()\"\n    >\n      {{ 'Set version' | translate }}\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.PackageVersionSelectComponent, selector: "c8y-package-version-select", inputs: ["label", "packageContextPath", "packageId"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: UpdatePluginOfAppComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-update-plugin-of-app', template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-modules'\"></i>\n    <h4 *ngIf=\"!downgrade\" id=\"modal-title\" translate>Update plugin</h4>\n    <h4 *ngIf=\"downgrade\" id=\"modal-title\" translate>Downgrade plugin</h4>\n  </div>\n  <div class=\"inner-scroll\" id=\"modal-body\">\n    <div class=\"p-16\">\n      <div class=\"d-block fit-w bg-gray-white\">\n        <c8y-package-version-select\n          [packageContextPath]=\"plugin?.contextPath\"\n          [(ngModel)]=\"applicationVersion\"\n        ></c8y-package-version-select>\n        <div\n          *ngIf=\"plugin?.version && plugin.version === applicationVersion?.version\"\n          class=\"alert alert-info\"\n          role=\"alert\"\n        >\n          <span translate ngNonBindable [translateParams]=\"applicationVersion\">\n            Select another version, as {{ version }} is currently used.\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"c8y-checkbox\">\n          <input [(ngModel)]=\"updateAll\" type=\"checkbox\" />\n          <span></span>\n          <span translate ngNonBindable [translateParams]=\"plugin\">\n            Set version for all plugins using the same context path \"{{ contextPath }}\".\n          </span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      title=\"{{ 'Set version' | translate }}\"\n      [disabled]=\"!applicationVersion || plugin?.version === applicationVersion?.version\"\n      (click)=\"update()\"\n    >\n      {{ 'Set version' | translate }}\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$1.BsModalRef }, { type: i3.PluginsService }, { type: i3.AlertService }, { type: i1.EcosystemService }, { type: i3.GainsightService }]; } });

class ApplicationPluginsComponent {
    constructor(activatedRoute, ecosystemService, bsModalService, pluginsService, alertService, gainsightService) {
        this.activatedRoute = activatedRoute;
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.gainsightService = gainsightService;
        this.PRODUCT_EXPERIENCE = PRODUCT_EXPERIENCE;
        this.CURRENT_LOCATION = location.href;
        this.exportedPlugins$ = new BehaviorSubject([]);
        this.remotePlugins$ = new BehaviorSubject({});
        this.allAvailablePlugins$ = new BehaviorSubject([]);
        this.installedPlugins$ = combineLatest([
            this.remotePlugins$.pipe(map(remotes => this.convertInstalledRemotesToIds(remotes))),
            this.allAvailablePlugins$
        ]).pipe(map(([remotePlugins, allPlugins]) => this.getInstalledPlugins(allPlugins, remotePlugins)), shareReplay(1));
        this.orphanedPlugins$ = this.installedPlugins$.pipe(map(plugins => plugins.filter(p => p.status === ApplicationPluginStatus.ORPHANED)));
        this.title = gettext('Installed plugins');
        this.loadMoreItemsLabel = gettext('Load more packages');
        this.loadingItemsLabel = gettext('Loading packages…');
        this.actionControls = this.getActionControls();
        this.bulkActionControls = this.getBulkActionControls();
        this.headerActionControls = [];
        this.pagination = {
            pageSize: 10,
            currentPage: 1
        };
        this.displayOptions = {
            bordered: false,
            striped: true,
            filter: true,
            gridHeader: true
        };
        this.columns = [
            {
                name: 'name',
                header: gettext('Plugin name'),
                path: 'name',
                filterable: true
            },
            {
                name: 'Version',
                header: gettext('Version'),
                path: 'displayVersion',
                filterable: false
            },
            {
                name: 'description',
                header: gettext('Description'),
                path: 'description',
                filterable: false,
                cellCSSClassName: 'small'
            },
            {
                name: 'contextPath',
                header: gettext('Source'),
                path: 'contextPath',
                filterable: false,
                cellRendererComponent: LabelCellRendererComponent
            },
            {
                name: 'status',
                header: gettext('Status'),
                path: 'status',
                filterable: false,
                cellRendererComponent: OrphanedStatusCellRendererComponent
            }
        ];
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.addInstallButtonToHeaderActionControls();
        this.loadData();
    }
    loadData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            yield this.getApplicationMO();
            yield this.getApplicationMFExports(this.app);
            yield this.getApplicationMFRemotes(this.app);
            yield this.getAllApplicationsMFExports();
            this.isLoading = false;
        });
    }
    installPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const pluginsToAdd = yield this.bsModalService.show(InstallPluginComponent, {
                    class: 'modal-sm',
                    ariaDescribedby: 'modal-body',
                    ariaLabelledBy: 'modal-title',
                    initialState: this.getInstallModalInitState(),
                    ignoreBackdropClick: true
                }).content.result;
                const licensesVerifiedByUser = yield this.ecosystemService.verifyLicenses(pluginsToAdd);
                if (!licensesVerifiedByUser) {
                    return;
                }
                const verifyVersionCompatibility = yield this.ecosystemService.verifyPluginVersionsCompatibility(pluginsToAdd, this.app);
                if (!verifyVersionCompatibility) {
                    return;
                }
                this.isLoading = true;
                yield this.handleRemotesInstallation(pluginsToAdd);
                this.alertService.success(gettext('Plugins installed.'));
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_INSTALLED,
                    url: this.CURRENT_LOCATION
                });
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                    this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                        component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                        result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                        url: this.CURRENT_LOCATION
                    });
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    removePlugins(plugins) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                const updatedRemotes = yield this.pluginsService.removeRemotes(this.app, plugins.map(id => ({ id })));
                this.emitRemotes(updatedRemotes);
                this.isLoading = false;
                this.dataGrid.cancel();
                this.alertService.success(gettext('Plugins removed.'));
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_REMOVED,
                    url: this.CURRENT_LOCATION
                });
            }
            catch (ex) {
                if (ex) {
                    this.alertService.addServerFailure(ex);
                    this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS, {
                        component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,
                        result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                        url: this.CURRENT_LOCATION
                    });
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    cleanupOrphanedPlugins(plugins) {
        return __awaiter(this, void 0, void 0, function* () {
            const pluginIds = plugins.map(p => p.id);
            yield this.removePlugins(pluginIds);
        });
    }
    getActionControls() {
        return [
            {
                type: 'customUpdate',
                text: gettext('Update'),
                icon: 'caret-square-o-up',
                showIf: plugin => {
                    return (plugin.status === ApplicationPluginStatus.OUTDATED ||
                        plugin.status === ApplicationPluginStatus.REVOKED);
                },
                callback: plugin => this.updatePlugin(this.app, plugin)
            },
            {
                type: 'customDowngrade',
                text: gettext('Downgrade'),
                icon: 'caret-square-o-down',
                showIf: plugin => {
                    return plugin.status === ApplicationPluginStatus.LATEST;
                },
                callback: plugin => this.updatePlugin(this.app, plugin, true)
            }
        ];
    }
    getBulkActionControls() {
        return [
            {
                type: 'customDelete',
                text: gettext('Remove'),
                icon: 'trash',
                callback: plugins => this.removePlugins(plugins)
            }
        ];
    }
    updatePlugin(app, plugin, downgrade = false) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.bsModalService.show(UpdatePluginOfAppComponent, {
                    class: 'modal-sm',
                    ariaDescribedby: 'modal-body',
                    ariaLabelledBy: 'modal-title',
                    initialState: {
                        app,
                        plugin,
                        downgrade
                    },
                    ignoreBackdropClick: true
                }).content.result;
                this.refresh();
            }
            catch (er) {
                return;
            }
        });
    }
    refresh() {
        this.loadData();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    addInstallButtonToHeaderActionControls() {
        if (this.appId) {
            this.headerActionControls = [
                {
                    text: gettext('Install plugins'),
                    callback: () => {
                        this.installPlugins();
                    },
                    icon: 'plus-circle',
                    type: 'custom'
                }
            ];
        }
    }
    handleRemotesInstallation(plugins) {
        return __awaiter(this, void 0, void 0, function* () {
            // When remotes object is not set in the configuration object of an application.
            // Fallback to setInitialRemotes is triggered.
            let updatedRemotes = yield this.pluginsService.addRemotes(this.app, plugins);
            if (!updatedRemotes) {
                // TODO discuss if we need to handle it like that.
                // Right now remotes from the cumulocity.json are taken into account when remotes object is missing in the configuration.
                updatedRemotes = yield this.pluginsService.setInitialRemotes(this.app);
                // Fresh application MO is needed, after initial state was set.
                yield this.getApplicationMO();
                updatedRemotes = yield this.pluginsService.addRemotes(this.app, plugins);
            }
            return this.emitRemotes(updatedRemotes);
        });
    }
    emitRemotes(updatedRemotes) {
        this.remotePlugins$.next(updatedRemotes);
        this.app.config.remotes = updatedRemotes;
        return Object.assign({}, this.remotePlugins$.value);
    }
    getApplicationMO() {
        return __awaiter(this, void 0, void 0, function* () {
            let id = this.appId;
            if (!id) {
                const { id: routeId } = this.activatedRoute.snapshot.parent.data.contextData;
                id = routeId;
            }
            try {
                this.app = yield this.ecosystemService.getApplication(id);
            }
            catch (er) {
                if (er) {
                    this.alertService.addServerFailure(er);
                }
            }
            return this.app;
        });
    }
    getApplicationMFExports(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const exports = this.pluginsService.getMFExports(app);
            this.exportedPlugins$.next(exports);
        });
    }
    getApplicationMFRemotes(app) {
        return __awaiter(this, void 0, void 0, function* () {
            let appConfigRemotes = this.pluginsService.getMFRemotes(app);
            if (!appConfigRemotes) {
                appConfigRemotes = yield this.pluginsService.setInitialRemotes(app);
                this.app = yield this.getApplicationMO();
            }
            this.remotePlugins$.next(appConfigRemotes || {});
        });
    }
    getAllApplicationsMFExports() {
        return __awaiter(this, void 0, void 0, function* () {
            const allAppsMFExports = yield this.pluginsService.getAllMFExports(true);
            this.allAvailablePlugins$.next(allAppsMFExports);
        });
    }
    getInstallModalInitState() {
        return {
            plugins$: combineLatest([
                this.allAvailablePlugins$,
                this.installedPlugins$.pipe(map(plugins => plugins.map(p => p.id))),
                this.exportedPlugins$.pipe(map(plugins => plugins.map(p => p.id)))
            ]).pipe(map(([allPlugins, installedPlugins, exportedPluginNames]) => {
                const plugins = [];
                allPlugins
                    .filter(p => !exportedPluginNames.includes(p.id))
                    .map(p => plugins.push(Object.assign(Object.assign({}, p), { installed: !!installedPlugins.includes(p.id) })));
                return plugins;
            }), shareReplay(1))
        };
    }
    convertInstalledRemotesToIds(remotes) {
        if (!remotes) {
            return;
        }
        const importContextPaths = Object.keys(remotes);
        const plugins = [];
        importContextPaths.forEach(contextPath => {
            const moduleNames = remotes[contextPath];
            plugins.push(...moduleNames.map(module => this.createId(contextPath, module)));
        });
        return plugins;
    }
    createId(contextPath, pluginModuleName) {
        return `${contextPath}/${pluginModuleName}`;
    }
    getOrphanedPlugins(orphanedPluginIds, allPlugins) {
        const orphanedPlugins = orphanedPluginIds.map(p => this.extractDetails(p));
        const orphanedPluginsUpdated = orphanedPlugins.map(p => {
            const pluginInDifferentVersion = allPlugins.find(tmp => tmp.contextPath === p.contextPath && tmp.module === p.module);
            if (pluginInDifferentVersion) {
                return Object.assign(Object.assign({}, pluginInDifferentVersion), { version: p.version || pluginInDifferentVersion.version, id: p.id, status: p.version ? ApplicationPluginStatus.OUTDATED : ApplicationPluginStatus.LATEST });
            }
            return p;
        });
        return orphanedPluginsUpdated;
    }
    splitOrphanedPluginsIntoOrphanedAndRevokedPlugins(allPlugins, orphanedPlugins) {
        const revokedPlugins = new Array();
        const actuallyOrphanedPlugins = new Array();
        for (const plugin of orphanedPlugins) {
            const foundFamiliarPlugin = allPlugins.find(plugin1 => plugin.contextPath === plugin1.contextPath && plugin.module === plugin1.module);
            if (foundFamiliarPlugin) {
                revokedPlugins.push(Object.assign({}, foundFamiliarPlugin, plugin, {
                    status: ApplicationPluginStatus.REVOKED
                }));
            }
            else {
                actuallyOrphanedPlugins.push(plugin);
            }
        }
        return { revokedPlugins, actuallyOrphanedPlugins };
    }
    getInstalledPlugins(allPlugins, remotePlugins) {
        const availablePlugins = allPlugins
            .filter(plugin => remotePlugins.includes(plugin.id))
            .map(plugin => {
            var _a;
            return Object.assign(plugin, {
                status: ((_a = plugin.tags) === null || _a === void 0 ? void 0 : _a.includes('latest'))
                    ? ApplicationPluginStatus.LATEST
                    : ApplicationPluginStatus.OUTDATED
            });
        });
        const orphanedPluginIds = remotePlugins.filter(r => !availablePlugins.find(plugin => plugin.id === r));
        const orphanedPlugins = this.getOrphanedPlugins(orphanedPluginIds, allPlugins);
        const { actuallyOrphanedPlugins, revokedPlugins } = this.splitOrphanedPluginsIntoOrphanedAndRevokedPlugins(allPlugins, orphanedPlugins);
        return [...availablePlugins, ...revokedPlugins, ...actuallyOrphanedPlugins].map(plugin => (Object.assign(Object.assign({}, plugin), { 
            // adding 'v' prefix so version string is not treated as date in data grid
            displayVersion: 'v' + plugin.version })));
    }
    extractDetails(pluginId) {
        const contextPath = this.getStringMatchingRegex(pluginId, /^[^@]*(@|\/)/);
        const version = this.getStringMatchingRegex(pluginId, /@.*\//);
        const module = this.getStringMatchingRegex(pluginId, /\/.*$/);
        const unavailable = gettext('unavailable`plugin`');
        return {
            id: pluginId,
            path: '',
            module,
            name: module,
            status: ApplicationPluginStatus.ORPHANED,
            contextPath: contextPath,
            description: unavailable,
            version: version
        };
    }
    getStringMatchingRegex(str, regex) {
        const matches = str.match(regex);
        const value = matches ? matches[0] : '';
        return value.replace(/(@|\/)/g, '');
    }
}
ApplicationPluginsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsComponent, deps: [{ token: i1$2.ActivatedRoute }, { token: i1.EcosystemService }, { token: i1$1.BsModalService }, { token: i3.PluginsService }, { token: i3.AlertService }, { token: i3.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
ApplicationPluginsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.7", type: ApplicationPluginsComponent, selector: "c8y-app-plugins", inputs: { appId: "appId" }, viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true }], ngImport: i0, template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications/application'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"installPlugins()\"\n    [ngClass]=\"{ 'btn-pending': isLoading }\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Install plugins' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Install plugins' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<ng-container *ngIf=\"orphanedPlugins$ | async as orphanedPlugins\">\n  <c8y-action-bar-item *ngIf=\"orphanedPlugins?.length\" [placement]=\"'right'\">\n    <button\n      (click)=\"cleanupOrphanedPlugins(orphanedPlugins)\"\n      [ngClass]=\"{ 'btn-pending': isLoading }\"\n      class=\"btn btn-link\"\n      title=\"{{ 'Clean up orphaned plugins' | translate }}\"\n    >\n      <i c8yIcon=\"erase\"></i>\n      {{ 'Clean up orphaned plugins' | translate }}\n    </button>\n  </c8y-action-bar-item>\n</ng-container>\n\n<div class=\"content-fullpage d-flex d-col border-top\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [rows]=\"installedPlugins$ | async\"\n    [pagination]=\"pagination\"\n    [selectable]=\"true\"\n    [actionControls]=\"actionControls\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [headerActionControls]=\"headerActionControls\"\n    (onReload)=\"refresh()\"\n    class=\"d-contents\"\n  >\n    <!-- No search/filtered results empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"(installedPlugins$ | async)?.length\"\n      [icon]=\"'search'\"\n      [title]=\"'No plugins to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    >\n    </c8y-ui-empty-state>\n    <!-- No installed plugins empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"!(installedPlugins$ | async)?.length && !isLoading\"\n      [icon]=\"'plugin'\"\n      [title]=\"'No plugins installed.' | translate\"\n      [subtitle]=\"'This application doesn\\'t have any plugin. Click below to install.' | translate\"\n      [horizontal]=\"true\"\n    >\n      <div class=\"fit-w p-t-16\">\n        <button\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,\n            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGINS,\n            url: CURRENT_LOCATION\n          }\"\n          (click)=\"installPlugins()\"\n          [ngClass]=\"{ 'btn-pending': isLoading }\"\n          class=\"btn btn-primary btn-sm\"\n          title=\"{{ 'Install plugins' | translate }}\"\n          translate\n        >\n          Install plugins\n        </button>\n      </div>\n    </c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n", dependencies: [{ kind: "component", type: i3.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "component", type: i3.BreadcrumbComponent, selector: "c8y-breadcrumb" }, { kind: "component", type: i3.BreadcrumbItemComponent, selector: "c8y-breadcrumb-item", inputs: ["icon", "translate", "label", "path", "injector"] }, { kind: "component", type: i3.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "singleSelection", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning", "activeClassName"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "component", type: i3.TitleComponent, selector: "c8y-title", inputs: ["pageTitleUpdate"] }, { kind: "directive", type: i3.ProductExperienceDirective, selector: "[c8yProductExperience]", inputs: ["actionName", "actionData", "inherit", "suppressDataOverriding"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.HumanizeAppNamePipe, name: "humanizeAppName" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-app-plugins', template: "<c8y-title>{{ app | humanizeAppName | async }}</c8y-title>\n\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item [icon]=\"'c8y-atom'\" [label]=\"'Ecosystem' | translate\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-modules'\"\n    [label]=\"'Applications' | translate\"\n    [path]=\"'ecosystem/applications/application'\"\n  ></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"app | humanizeAppName | async\"></c8y-breadcrumb-item>\n  <c8y-breadcrumb-item [label]=\"'Plugins' | translate\"></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    (click)=\"installPlugins()\"\n    [ngClass]=\"{ 'btn-pending': isLoading }\"\n    class=\"btn btn-link\"\n    title=\"{{ 'Install plugins' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Install plugins' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<ng-container *ngIf=\"orphanedPlugins$ | async as orphanedPlugins\">\n  <c8y-action-bar-item *ngIf=\"orphanedPlugins?.length\" [placement]=\"'right'\">\n    <button\n      (click)=\"cleanupOrphanedPlugins(orphanedPlugins)\"\n      [ngClass]=\"{ 'btn-pending': isLoading }\"\n      class=\"btn btn-link\"\n      title=\"{{ 'Clean up orphaned plugins' | translate }}\"\n    >\n      <i c8yIcon=\"erase\"></i>\n      {{ 'Clean up orphaned plugins' | translate }}\n    </button>\n  </c8y-action-bar-item>\n</ng-container>\n\n<div class=\"content-fullpage d-flex d-col border-top\">\n  <c8y-data-grid\n    [title]=\"title\"\n    [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [displayOptions]=\"displayOptions\"\n    [columns]=\"columns\"\n    [rows]=\"installedPlugins$ | async\"\n    [pagination]=\"pagination\"\n    [selectable]=\"true\"\n    [actionControls]=\"actionControls\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [headerActionControls]=\"headerActionControls\"\n    (onReload)=\"refresh()\"\n    class=\"d-contents\"\n  >\n    <!-- No search/filtered results empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"(installedPlugins$ | async)?.length\"\n      [icon]=\"'search'\"\n      [title]=\"'No plugins to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    >\n    </c8y-ui-empty-state>\n    <!-- No installed plugins empty state -->\n    <c8y-ui-empty-state\n      *ngIf=\"!(installedPlugins$ | async)?.length && !isLoading\"\n      [icon]=\"'plugin'\"\n      [title]=\"'No plugins installed.' | translate\"\n      [subtitle]=\"'This application doesn\\'t have any plugin. Click below to install.' | translate\"\n      [horizontal]=\"true\"\n    >\n      <div class=\"fit-w p-t-16\">\n        <button\n          c8yProductExperience\n          [actionName]=\"PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.INSTALLED_PLUGINS\"\n          [actionData]=\"{\n            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.APPLICATION_PLUGINS,\n            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGINS,\n            url: CURRENT_LOCATION\n          }\"\n          (click)=\"installPlugins()\"\n          [ngClass]=\"{ 'btn-pending': isLoading }\"\n          class=\"btn btn-primary btn-sm\"\n          title=\"{{ 'Install plugins' | translate }}\"\n          translate\n        >\n          Install plugins\n        </button>\n      </div>\n    </c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1$2.ActivatedRoute }, { type: i1.EcosystemService }, { type: i1$1.BsModalService }, { type: i3.PluginsService }, { type: i3.AlertService }, { type: i3.GainsightService }]; }, propDecorators: { appId: [{
                type: Input
            }], dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: false }]
            }] } });

class ApplicationPluginsGuard {
    constructor(ecosystemService) {
        this.ecosystemService = ecosystemService;
    }
    canActivate(route) {
        const app = route.data.contextData || route.parent.data.contextData;
        if (!app) {
            return false;
        }
        return (app.type === ApplicationType.HOSTED &&
            this.ecosystemService.isOwner(app) &&
            !this.ecosystemService.isPackage(app));
    }
}
ApplicationPluginsGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsGuard, deps: [{ token: i1.EcosystemService }], target: i0.ɵɵFactoryTarget.Injectable });
ApplicationPluginsGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EcosystemService }]; } });

class ApplicationPluginsModule {
}
ApplicationPluginsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ApplicationPluginsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsModule, declarations: [ApplicationPluginsComponent,
        PluginListItemComponent,
        InstallPluginComponent,
        PluginListComponent,
        AppsToUpdateRemotesSelectComponent,
        AppStatePipe,
        LabelCellRendererComponent,
        OrphanedStatusCellRendererComponent,
        UpdatePluginOfAppComponent,
        OnlyLatestPluginVersionPipe], imports: [CoreModule, SharedEcosystemModule], exports: [ApplicationPluginsComponent,
        PluginListItemComponent,
        InstallPluginComponent,
        PluginListComponent,
        AppsToUpdateRemotesSelectComponent,
        AppStatePipe,
        LabelCellRendererComponent,
        OrphanedStatusCellRendererComponent,
        UpdatePluginOfAppComponent] });
ApplicationPluginsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsModule, providers: [
        ApplicationPluginsGuard,
        hookRoute([
            {
                path: 'plugins',
                component: ApplicationPluginsComponent,
                icon: 'plugin',
                label: gettext('Plugins'),
                context: ViewContext.Application,
                priority: 3,
                canActivate: [ApplicationPluginsGuard]
            }
        ])
    ], imports: [CoreModule, SharedEcosystemModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.7", ngImport: i0, type: ApplicationPluginsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CoreModule, SharedEcosystemModule],
                    declarations: [
                        ApplicationPluginsComponent,
                        PluginListItemComponent,
                        InstallPluginComponent,
                        PluginListComponent,
                        AppsToUpdateRemotesSelectComponent,
                        AppStatePipe,
                        LabelCellRendererComponent,
                        OrphanedStatusCellRendererComponent,
                        UpdatePluginOfAppComponent,
                        OnlyLatestPluginVersionPipe
                    ],
                    exports: [
                        ApplicationPluginsComponent,
                        PluginListItemComponent,
                        InstallPluginComponent,
                        PluginListComponent,
                        AppsToUpdateRemotesSelectComponent,
                        AppStatePipe,
                        LabelCellRendererComponent,
                        OrphanedStatusCellRendererComponent,
                        UpdatePluginOfAppComponent
                    ],
                    providers: [
                        ApplicationPluginsGuard,
                        hookRoute([
                            {
                                path: 'plugins',
                                component: ApplicationPluginsComponent,
                                icon: 'plugin',
                                label: gettext('Plugins'),
                                context: ViewContext.Application,
                                priority: 3,
                                canActivate: [ApplicationPluginsGuard]
                            }
                        ])
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AppStatePipe, ApplicationPluginsComponent, ApplicationPluginsGuard, ApplicationPluginsModule, AppsToUpdateRemotesSelectComponent, InstallPluginComponent, LabelCellRendererComponent, OrphanedStatusCellRendererComponent, PluginListComponent, PluginListItemComponent, UpdatePluginOfAppComponent };
//# sourceMappingURL=c8y-ngx-components-ecosystem-application-plugins.mjs.map

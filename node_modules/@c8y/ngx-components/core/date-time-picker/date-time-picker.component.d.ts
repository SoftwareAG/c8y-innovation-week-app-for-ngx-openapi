import { OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormGroup, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class DateTimePickerComponent implements ControlValueAccessor, Validator, OnDestroy {
    minDate: Date;
    set _minDate(value: string);
    maxDate: Date;
    set _maxDate(value: string);
    placeholder: string;
    date: Date;
    form: FormGroup;
    defaultPlaceholder: "Select a date…";
    private previousValue;
    private destroy$;
    constructor();
    onChange: (value: string) => void;
    onTouched: () => void;
    ngOnDestroy(): void;
    /**
     * Control Value Accessor - If form value changes by external factor, update date property and internal form with new value.
     */
    writeValue(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(onTouched: any): void;
    setDisabledState(disabled: boolean): void;
    validate(_control: AbstractControl): ValidationErrors | null;
    previousDay(): void;
    nextDay(): void;
    /**
     * If internal form changes its value, then combine date and time into one Date and pass its ISO string value to onChange method
     * @param dateTime
     * @private
     */
    private setDatetime;
    static ɵfac: i0.ɵɵFactoryDeclaration<DateTimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DateTimePickerComponent, "c8y-date-time-picker", never, { "_minDate": "minDate"; "_maxDate": "maxDate"; "placeholder": "placeholder"; }, {}, never, never, false, never>;
}

import { AfterViewInit, EventEmitter, Injector, OnDestroy, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { WizardEntry } from '../wizard.model';
import { WizardService } from '../wizard.service';
import * as i0 from "@angular/core";
export declare class WizardOutletComponent implements AfterViewInit, OnDestroy {
    private router;
    private c8yWizardService;
    private viewContainerRef;
    private injector;
    container: ViewContainerRef;
    /**
     * The initial state to be assigned to the created component.
     */
    initialState: any;
    /**
     * The id parameter identifies the particular wizard and can be used to refer to it when hooking wizard entries.
     * Example: "wizardId".
     */
    id: string;
    /**
     * The event that is emitted when the wizard entry is clicked.
     */
    onSelect: EventEmitter<WizardEntry>;
    /**
     * The event that is emitted when the URL path is provided.
     */
    onPath: EventEmitter<string>;
    /**
     * List of wizard entries.
     */
    entries: WizardEntry[];
    /**
     * @ignore
     */
    showList: boolean;
    /**
     * @ignore
     */
    private destroy$;
    /**
     * @ignore
     */
    private componentInstance;
    constructor(router: Router, c8yWizardService: WizardService, viewContainerRef: ViewContainerRef, injector: Injector);
    ngAfterViewInit(): void;
    /**
     * Handles the wizard entry, if the entry contains a path, the user will be redirected to it.
     * Otherwise, an attempt will be made to create a dynamic component provided in the entry.
     * @param entry Wizard menu entry.
     */
    handleEntry(entry?: WizardEntry): void;
    /**
     * Resets the wizard to its initial state.
     */
    reset(): void;
    ngOnDestroy(): void;
    private onEntriesLoaded;
    private handlePath;
    private handleComponent;
    static ɵfac: i0.ɵɵFactoryDeclaration<WizardOutletComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WizardOutletComponent, "c8y-wizard-outlet", never, { "initialState": "initialState"; "id": "id"; }, { "onSelect": "onSelect"; "onPath": "onPath"; }, never, never, false, never>;
}

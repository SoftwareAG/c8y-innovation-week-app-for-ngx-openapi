import { Injector } from '@angular/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionFactory, ExtensionPoint, StateService } from '../common';
import { CleanedVersion, Version } from './version.model';
import * as i0 from "@angular/core";
export declare class VersionService extends StateService implements ExtensionPoint<Version> {
    private rootInjector;
    items$: Observable<Version[]>;
    nonHiddenItems$: Observable<Version[]>;
    readonly refreshTrigger: Subject<void>;
    readonly state$: BehaviorSubject<Set<Version>>;
    factories: ExtensionFactory<Version>[];
    injectors: Injector[];
    constructor(rootInjector: Injector);
    get state(): Set<Version>;
    refresh(): void;
    add(version: Version): void;
    remove(version: Version): void;
    cleanUpVersions(versions: Version[]): CleanedVersion[];
    static ɵfac: i0.ɵɵFactoryDeclaration<VersionService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<VersionService>;
}

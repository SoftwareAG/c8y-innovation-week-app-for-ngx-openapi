import { EventEmitter } from '@angular/core';
import { BreadcrumbItem } from '../breadcrumb/breadcrumb.model';
import { DashboardComponent } from './dashboard.component';
import { DashboardChange, DashboardSettings, Widget, WidgetChange } from './dashboard.model';
import { DynamicComponentService } from '../dynamic-component/dynamic-component.service';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class WidgetsDashboardComponent {
    private dynamic;
    set widgets(value: Widget[]);
    get widgets(): Widget[];
    context: any;
    contextDashboard: any;
    set _settings(settings: Partial<DashboardSettings>);
    breadcrumb: BreadcrumbItem;
    settings: DashboardSettings;
    onAddWidget: EventEmitter<DashboardComponent>;
    onEditWidget: EventEmitter<WidgetChange>;
    onDeleteWidget: EventEmitter<WidgetChange>;
    onChangeDashboard: EventEmitter<DashboardChange>;
    onEditDashboard: EventEmitter<DashboardComponent>;
    onCopyDashboard: EventEmitter<DashboardComponent>;
    onDeleteDashboard: EventEmitter<DashboardComponent>;
    onFreeze: EventEmitter<DashboardSettings>;
    onChangeStart: EventEmitter<WidgetChange>;
    onChangeEnd: EventEmitter<WidgetChange>;
    resolvedWidgets$: Observable<Widget[]>;
    isLoadingWidgets$: Observable<boolean>;
    private _widgets;
    private isLoading$;
    private isExecutingResolvers$;
    constructor(dynamic: DynamicComponentService);
    toggleFullscreen(): void;
    fullScreen(): boolean;
    updateWidgetClasses(widget: Widget, classes: {
        [key: string]: boolean;
    }): void;
    updateWidgetConfig(data: any, widget: Widget): void;
    private executeResolversOfWidgets;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetsDashboardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetsDashboardComponent, "c8y-widgets-dashboard", never, { "widgets": "widgets"; "context": "context"; "contextDashboard": "contextDashboard"; "_settings": "settings"; "breadcrumb": "breadcrumb"; }, { "onAddWidget": "onAddWidget"; "onEditWidget": "onEditWidget"; "onDeleteWidget": "onDeleteWidget"; "onChangeDashboard": "onChangeDashboard"; "onEditDashboard": "onEditDashboard"; "onCopyDashboard": "onCopyDashboard"; "onDeleteDashboard": "onDeleteDashboard"; "onFreeze": "onFreeze"; "onChangeStart": "onChangeStart"; "onChangeEnd": "onChangeEnd"; }, never, never, false, never>;
}

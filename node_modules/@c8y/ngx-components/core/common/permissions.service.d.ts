import { AppStateService } from './ui-state.service';
import { IIdentified, IManagedObject, InventoryService } from '@c8y/client';
import { UserService } from '@c8y/client';
import * as i0 from "@angular/core";
export type CanEditConfig = {
    /**
     * Skips roles check.
     */
    skipRolesCheck?: boolean;
    /**
     * Skips managed object ownership check.
     */
    skipOwnerCheck?: boolean;
    /**
     * Skips checks with a query to the inventory API.
     */
    skipRequestCheck?: boolean;
};
export declare class Permissions {
    private appState;
    private inventory;
    private user;
    constructor(appState: AppStateService, inventory: InventoryService, user: UserService);
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {IManagedObject | IIdentified} mo The managed object for which we are checking whether the user has access.
     * @param {CanEditConfig} config A configuration object that can take the following values:
     * - `skipRolesCheck`: `boolean` - skips roles check,
     * - `skipOwnerCheck`: `boolean` - skips ownership check,
     * - `skipRequestCheck`: `boolean` - skips checks with a query to the inventory API.
     *   UI will make a query to backend whether the user can edit the managed object.
     *   A rejection from BE indicates a lack of permission.
     */
    canEdit(roleIds: any, mo: IManagedObject | IIdentified, config?: CanEditConfig): Promise<boolean>;
    hasRole(roleId: string): boolean;
    hasAllRoles(roleIds: string[]): boolean;
    hasAnyRole(roleIds: string[]): boolean;
    hasAnyGlobalRole(globalRolesIds: number[]): boolean;
    protected checkIfOwner(mo: any): Promise<boolean>;
    protected checkWithRequest(mo: any): Promise<boolean>;
    private checkIfCanEdit;
    static ɵfac: i0.ɵɵFactoryDeclaration<Permissions, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<Permissions>;
}

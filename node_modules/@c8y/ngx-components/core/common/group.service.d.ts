import { IManagedObject } from '@c8y/client';
import { AssetTypesService } from '../asset-types/asset-types.service';
import * as i0 from "@angular/core";
declare const MO_TYPES: readonly ["asset", "dynamicGroup", "brokerSource", "brokerSourceInactive", "group", "other"];
type MoTypes = (typeof MO_TYPES)[number];
type Icon = Partial<{
    icon: string;
    iconOpen?: string;
    iconClass?: string;
}>;
type Icons = Partial<Record<MoTypes, Icon>>;
export declare class GroupService {
    private assetTypesService;
    readonly icons: Icons;
    dataBrokerSourceFragmentInactive: string;
    constructor(assetTypesService: AssetTypesService);
    /**
     * Finds an icon based on the contents of a managed object.
     * It takes into account factors such as type, and specific fragments.
     * @param mo Managed object to be checked.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * @param fallbackIcon If no icon is found, this icon is returned.
     * @returns Returns an icon.
     */
    getIcon(mo: IManagedObject, open?: boolean, fallbackIcon?: string): Promise<string>;
    /**
     * Checks whether a given managed object is a group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a group.
     */
    isGroup(mo: IManagedObject): boolean;
    /**
     * Checks whether a given managed object is a dynamic group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a dynamic group.
     */
    isDynamicGroup(mo: IManagedObject): boolean;
    /**
     * Checks whether a given managed object is a data broker.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker.
     */
    isDataBroker(mo: IManagedObject): boolean;
    /**
     * Checks whether a given managed object is a data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker active.
     */
    isDataBrokerActive(mo: IManagedObject): boolean;
    /**
     * Checks whether a given managed object is an asset.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is an asset.
     */
    isAsset(mo: IManagedObject): boolean;
    /**
     * Checks whether the object belongs to any type of group.
     * Types of groups: group, dynamic group, data broker, data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object belongs to the group category.
     */
    isAnyGroup(mo: IManagedObject): boolean;
    /**
     * Checks whether a given managed object is a device.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a device.
     */
    isDevice(mo: IManagedObject): boolean;
    private getAssetCustomIcon;
    private getDefaultIcon;
    private determineMoType;
    static ɵfac: i0.ɵɵFactoryDeclaration<GroupService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GroupService>;
}
export {};

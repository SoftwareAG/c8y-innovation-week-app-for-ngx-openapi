import { ICustomProperties } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { PxEventData } from './product-experience.model';
import * as i0 from "@angular/core";
interface UserRole {
    id: string;
    name: string;
}
interface Role {
    role: UserRole;
}
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
export declare class GainsightService {
    private document;
    private appState;
    private options;
    private cookieBannerService;
    private userPreferencesService;
    private translateService;
    /**
     * A subject that emits the tag function as soon as a new tag is set.
     */
    tagFunction$: BehaviorSubject<any>;
    readonly USER_PREFERENCES_GAINSIGHT_KEY = "gainsightEnabled";
    /**
     * The name of the key remained unchanged, but applies to all engagements.
     */
    readonly USER_PREFERENCES_GAINSIGHT_ENGAGEMENTS_KEY = "gainsightBotEnabled";
    readonly HIDE_GAINSIGHT_BOT_STYLE_ID = "hide-gs-bot";
    private readonly GAINSIGHT_URL;
    private readonly GAINSIGHT_GLOBAL_SCOPE;
    private readonly SCRIPT_EXECUTION_WAIT_TIME;
    private readonly OPTIONS_KEY_CATEGORY;
    private readonly OPTIONS_KEY_NAME;
    private readonly ENGAGEMENTS;
    private isScriptLoaded;
    private gainsightKey;
    private cachedRevertedTranslations;
    private cachedLanguage;
    constructor(document: Document, appState: AppStateService, options: OptionsService, cookieBannerService: CookieBannerService, userPreferencesService: UserPreferencesService, translateService: TranslateService);
    isGainsightPreferenceDisabledInUserPreferences(preferenceName: string): Promise<boolean>;
    setFunctionalCookie(value: boolean): void;
    getGainsightKey(): Promise<string>;
    /**
     * Returns the tag global function which can be used to identify user
     * or add special events.
     */
    get tagFunction(): any;
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param currentTenant The current tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    loadTag(currentTenant: any, identify?: boolean): Promise<void>;
    /**
     * Identifies the user/account at Gainsight.
     * @param user The user which is given to Gainsight.
     * @param tenant The tenant which is given to Gainsight.
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    identify(user: any, tenant: any, instanceId: any, versionUI?: any, versionBE?: any): void;
    triggerEvent(eventName: string, props?: PxEventData): void;
    translateToEnglish(textToTranslate: string): string;
    /**
     * Checks if the Gainsight's tag should be loaded.
     * The decision to load Gainsight will depend on custom properties and functional cookies.
     * @param customProperties Tenant's customProperties.
     */
    shouldLoadGainsightTag(customProperties: ICustomProperties): boolean;
    updateUserAttribute(name: string, value: string | Date | number | boolean): void;
    canEditProductExperienceSettings(): Promise<boolean>;
    switchGainsightEngagementsVisibility(showGainsightEngagements: boolean): void;
    setGlobalContext(): void;
    transformUserRolesToStr(userRoles?: Role[]): string;
    private addHidingStyle;
    private removeHidingStyle;
    private prepareEventName;
    private isGainsightDisabled;
    private isCustomBranding;
    private loadScriptTag;
    private getInstanceIdFromUrl;
    /**
     * Reverses the translation object.
     *
     * **Example**
     * { Add widget: "Widget hinzufügen" }
     *
     * will be changed to:
     *
     * { Widget hinzufügen: "Add widget" }
     *
     * @param currentLang Language whose translated values are to be placed in the object key.
     * @returns Returns an inverted object where the keys have been swapped with the values.
     */
    private getRevertedTranslations;
    /**Translates string back into English.
     * If the current application language is set to English, the string passed as an argument is returned.
     * @param textToTranslate string to translate.
     * @returns Returns the string translated into English.
     */
    private getEnTranslation;
    static ɵfac: i0.ɵɵFactoryDeclaration<GainsightService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GainsightService>;
}
export {};

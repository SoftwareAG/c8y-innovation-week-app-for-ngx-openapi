import { AfterViewInit, ElementRef, EventEmitter, QueryList } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { IIdentified } from '@c8y/client';
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { ListItemComponent } from '../list-group/list-item.component';
import * as i0 from "@angular/core";
export declare class TypeaheadComponent implements ControlValueAccessor, Validator, AfterViewInit {
    searchControl: ElementRef;
    searchControlModel: any;
    dropdown: BsDropdownDirective;
    list: QueryList<ListItemComponent>;
    required: boolean;
    maxlength: string | number;
    disabled: boolean;
    allowFreeEntries: boolean;
    placeholder: string;
    displayProperty: string;
    icon: string;
    name: string;
    autoClose: boolean;
    hideNew: boolean;
    container: '' | 'body';
    selected: IIdentified;
    onSearch: EventEmitter<string>;
    onIconClick: EventEmitter<{
        icon: string;
        $event: MouseEvent;
    }>;
    private onChange;
    private onTouched;
    private readonly KEYCODE_UP;
    private readonly KEYCODE_DOWN;
    private readonly KEYCODE_TAB;
    private readonly KEYCODE_ENTER;
    private readonly KEYCODE_ESC;
    private readonly destroyed$;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    doBlur(): void;
    getDisplayProperty(): any;
    onShown(): void;
    /**
     * Resets the input field - clear value and clean field to be pristine and untouched.
     */
    reset(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    handleKeyboard(event: any): void;
    validate(_ctrl: AbstractControl): {
        [key: string]: any;
    };
    private selectNextItemOnKeyboardMove;
    static ɵfac: i0.ɵɵFactoryDeclaration<TypeaheadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TypeaheadComponent, "c8y-typeahead", never, { "required": "required"; "maxlength": "maxlength"; "disabled": "disabled"; "allowFreeEntries": "allowFreeEntries"; "placeholder": "placeholder"; "displayProperty": "displayProperty"; "icon": "icon"; "name": "name"; "autoClose": "autoClose"; "hideNew": "hideNew"; "container": "container"; "selected": "selected"; }, { "onSearch": "onSearch"; "onIconClick": "onIconClick"; }, ["list"], ["div, c8y-li, c8y-list-item, button, a"], false, never>;
}

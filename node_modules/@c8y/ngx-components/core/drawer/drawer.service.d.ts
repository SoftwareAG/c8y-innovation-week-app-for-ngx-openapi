import { Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { ExtensionFactory, ExtensionPoint, StateService } from '../common';
import { DrawerItem } from './drawer.model';
import { GenericHookType, HookOptions } from '../common';
import * as i0 from "@angular/core";
/**
 * You can either provide a single `DrawerItem` as parameter:
 * ```typescript
 *  hookDrawer(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDrawer([...])
 * ```
 *
 * Or you provide a Service that implements `ExtensionFactory<DrawerItem>`
 * ```typescript
 *  export class MyDrawerFactory implements ExtensionFactory<DrawerItem> {...}
 *  ...
 *  hookDrawer(MyDrawerFactory)
 * ```
 * A typed alternative to `HOOK_DRAWER`.
 * @param drawer The `DrawerItem`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export declare function hookDrawer(drawer: GenericHookType<DrawerItem>, options?: Partial<HookOptions>): import("@angular/core").ValueProvider | import("@angular/core").ClassProvider | import("@angular/core").ExistingProvider;
export declare class DrawerService extends StateService implements ExtensionPoint<DrawerItem> {
    private rootInjector;
    private router;
    items$: Observable<DrawerItem[]>;
    /**
     * Refresh the extension factories subject.
     * @readonly
     */
    private readonly refreshTrigger;
    readonly state$: BehaviorSubject<Set<DrawerItem>>;
    /**
     * Additional factories that can be added by plugins.
     */
    factories: ExtensionFactory<DrawerItem>[];
    injectors: Injector[];
    constructor(rootInjector: Injector, router: Router);
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    get state(): Set<DrawerItem>;
    getDrawersForPosition$(position: 'right' | 'left'): Observable<DrawerItem[]>;
    /**
     * Refresh the extension factories.
     */
    refresh(): void;
    /**
     * Adds a new node to the navigator.
     * @param {DrawerItem} node Navigator node to add.
     */
    add(node: DrawerItem): void;
    /**
     * Removes a node from the navigator.
     * @param {DrawerItem} node Navigator node to remove.
     */
    remove(node: DrawerItem): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DrawerService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DrawerService>;
}

export declare const MESSAGES: {
    '^Access is denied$': {
        gettext: "Access denied.";
    };
    '^Alarm created$': {
        gettext: "Alarm created";
    };
    '^Alarm updated$': {
        gettext: "Alarm updated";
    };
    '^API is not available with the new domain$': {
        gettext: "Could not activate custom domain. DNS setup is incorrect.";
    };
    '^Application with given name already exist$': {
        gettext: "Application with given name already exists.";
    };
    '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
        gettext: "This application is already assigned to tenant \"{{tenant}}\".";
        placeholders: {
            tenant: string;
        };
    };
    '^Apply software changes: (.+?)\\.?$': {
        gettext: "Apply software changes: {{ softwareChanges }}";
        placeholders: {
            softwareChanges: {
                capture: string;
                translate: {
                    'install "(.+?)" \\(version: (.+?)\\)': {
                        gettext: "install \"{{ softwareName }}\" (version: {{ softwareVersion }})";
                        placeholders: {
                            softwareName: string;
                            softwareVersion: string;
                        };
                    };
                    'install "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: "install \"{{ softwareName }}\"";
                        placeholders: {
                            softwareName: string;
                        };
                    };
                    'delete "(.+?)" \\(version: (.+?)\\)': {
                        gettext: "delete \"{{ softwareName }}\" (version: {{ softwareVersion }})";
                        placeholders: {
                            softwareName: string;
                            softwareVersion: string;
                        };
                    };
                    'delete "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: "delete \"{{ softwareName }}\"";
                        placeholders: {
                            softwareName: string;
                        };
                    };
                };
            };
        };
    };
    '^Assign device profile (.+?) to device (.+?)$': {
        gettext: "Assign device profile {{profileName}} to device {{deviceName}}";
        placeholders: {
            profileName: string;
            deviceName: string;
        };
    };
    '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
        gettext: "Application for tenant \"{{tenant}}\" with the following values ({{valuesList}}) already exists.";
        placeholders: {
            tenant: string;
            valuesList: string;
        };
    };
    '^Authentication failed! : User account is locked$': {
        gettext: "Authentication failed due to: user account is locked.";
    };
    '^Availability monitoring record$': {
        gettext: "Availability monitoring record";
    };
    '^Can not activate a certificate which is either expired or not yet valid$': {
        gettext: "Cannot activate a certificate which is either expired or not yet valid.";
    };
    '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
        gettext: "Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.";
        placeholders: {
            fingerprint: string;
        };
    };
    '^Cannot change password. : Provided token does not exist.$': {
        gettext: "Cannot change password: provided token is invalid.";
    };
    '^Cannot deploy module (.*)$': {
        gettext: "Cannot deploy module due to error: \"{{ errorMessage | translate }}\".";
        placeholders: {
            errorMessage: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$": {
        gettext: "Could not deploy module \"{{moduleName}}\". Compilation failed in expression \"{{expression}}\": incorrect syntax near \"{{incorrectExpression}}\" at line {{line}} column {{column}}.";
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: "Could not deploy module \"{{moduleName}}\". Compilation failed in expression \"{{expression}}\": incorrect syntax near \"{{incorrectExpression}}\" at line {{line}} column {{column}} near reserved keyword \"{{keyword}}\".";
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
            keyword: string;
        };
    };
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$": {
        gettext: "Could not deploy module \"{{moduleName}}\". Compilation failed in expression \"{{expression}}\": incorrect syntax near \"{{incorrectExpression}}\" at line {{line}} column {{column}}, check \"where\" clause.";
        placeholders: {
            moduleName: string;
            expression: string;
            incorrectExpression: string;
            line: string;
            column: string;
        };
    };
    "^Cannot deploy module (.+?)! : Deployment failed in module '(.+?)' in expression '(.+?)' : Exception compiling script '(.+?)' of dialect '(.+?)': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$": {
        gettext: "Could not deploy module \"{{moduleName}}\". Compilation failed in expression \"{{expression}}\": exception compiling script \"{{scriptName}}\" of dialect \"{{scriptDialect}}\": missing \"{{missingSyntax}}\" before statement \"{{affectedStatement}}\".";
        placeholders: {
            moduleName: string;
            expression: string;
            scriptName: string;
            scriptDialect: string;
            missingSyntax: string;
            affectedStatement: string;
        };
    };
    "^Cannot execute bulk operation on empty group. Group with id='(\\d+?)' doesn't have child assets.$": {
        gettext: "Could not execute bulk operation on an empty group. Group with ID \"{{groupId}}\" has no child assets.";
        placeholders: {
            groupId: string;
        };
    };
    "^Cannot execute bulk operation on empty group. DynamicGroup with id='(\\d+?)' doesn't have child assets$": {
        gettext: "Could not execute bulk operation on an empty group. Smart group with ID \"{{groupId}}\" has no child assets.";
        placeholders: {
            groupId: string;
        };
    };
    '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
        gettext: "Could not parse X.509 certificate: {{ failureReason | translate }}.";
        placeholders: {
            failureReason: string;
        };
    };
    '^Cannot reschedule bulk operation. All its operations are successful$': {
        gettext: "Cannot reschedule bulk operation. All its operations are already successful.";
    };
    '^Cannot reset user password : Cannot find user with such email.$': {
        gettext: "Cannot reset password for user with such email: email not found.";
    };
    '^Cannot update/delete application binary via this endpoint$': {
        gettext: "Cannot update/delete application binary via this endpoint";
    };
    "^Can't delete user because it is used by another managed object$": {
        gettext: "Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.";
    };
    '^Cep module created$': {
        gettext: "CEP module created";
    };
    '^Cep module updated$': {
        gettext: "CEP module updated";
    };
    '^Cep module deleted$': {
        gettext: "CEP module deleted";
    };
    '^Cep module "(.+?)" created$': {
        gettext: "CEP module \"{{name}}\" created";
        placeholders: {
            name: string;
        };
    };
    '^Cep module "(.+?)" updated$': {
        gettext: "CEP module \"{{name}}\" updated";
        placeholders: {
            name: string;
        };
    };
    '^Cep module "(.+?)" deleted$': {
        gettext: "CEP module \"{{name}}\" deleted";
        placeholders: {
            name: string;
        };
    };
    '^Command state is invalid: (.+)$': {
        gettext: "Command state is invalid: {{violations}}";
        placeholders: {
            violations: {
                capture: string;
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: "\"{{field}}\" must not be null";
                        placeholders: {
                            field: string;
                        };
                    };
                };
            };
        };
    };
    '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
        gettext: "Could not connect to endpoint \"{{endpointName}}\". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.";
        placeholders: {
            endpointName: string;
            keyType: string;
            fingerprint: string;
            host: string;
            port: string;
        };
    };
    '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
        gettext: "Could not access SSH server on endpoint \"{{endpointName}}\". Provided credentials for user \"{{userName}}\" are incorrect.";
        placeholders: {
            endpointName: string;
            userName: string;
        };
    };
    '^Could not save object remoteAccessUpdate: (.+)$': {
        gettext: string;
        placeholders: {
            errorMessages: {
                capture: string;
                translate: {
                    'Could not recognize host-key format': {
                        gettext: "Could not recognize \"Host key\" format";
                    };
                    'Could not recognize key-pair format': {
                        gettext: "Could not recognize the format of \"Public key\" or \"Private key\"";
                    };
                };
            };
        };
    };
    '^Could not update user. : Error persisting user (.+?)!$': {
        gettext: "Could not update user \"{{username}}\".";
        placeholders: {
            username: string;
        };
    };
    '^Create bulk operation$': {
        gettext: "Create bulk operation";
    };
    '^Create bulk operation: (.+)$': {
        gettext: "Create bulk operation: {{updatesList}}";
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: "status: \"{{ status | translate }}\"";
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: "general status: \"{{ generalStatus | translate }}\"";
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: "progress: \"{{ progress }}\"";
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: "note: \"{{ note }}\"";
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    '^Creation ramp must be greater than (\\d+?)$': {
        gettext: "Bulk operation delay must be greater than {{minSeconds}} seconds.";
        placeholders: {
            minSeconds: string;
        };
    };
    '^Created container$': {
        gettext: "Container created.";
    };
    '^Created pod: (.+)$': {
        gettext: "Pod \"{{imageName}}\" created.";
        placeholders: {
            imageName: string;
        };
    };
    '^Creating device on LoRa platform failed$': {
        gettext: "Could not create the device in the LoRa platform.";
    };
    '^CSV file contained empty dataset$': {
        gettext: "No entries found in uploaded CSV file.";
    };
    '^Cycle detected for route (.+?)!$': {
        gettext: "Cycle detected for route {{route}}.";
        placeholders: {
            route: string;
        };
    };
    '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
        gettext: "Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.";
    };
    '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
        gettext: "Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.";
    };
    '^Delete bulk operation$': {
        gettext: "Delete bulk operation";
    };
    '^Delete bulk operation: (.+)$': {
        gettext: "Delete bulk operation: {{updatesList}}";
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: "status: \"{{ status | translate }}\"";
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: "general status: \"{{ generalStatus | translate }}\"";
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: "progress: \"{{ progress }}\"";
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: "note: \"{{ note }}\"";
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    "^Device id '(.+?)' contains '(.+?)' character which is not permitted.$": {
        gettext: "ID \"{{deviceId}}\" contains invalid character: \"{{invalidCharacter}}\".";
        placeholders: {
            deviceId: string;
            invalidCharacter: string;
        };
    };
    "^Device name: '(.+?)', alarm text: '(.+?)'$": {
        gettext: "Device name: \"{{deviceName}}\", alarm text: \"{{alarmText | translate}}\"";
        placeholders: {
            deviceName: string;
            alarmText: string;
        };
    };
    '^Device (.+?) already registered to a tenant.$': {
        gettext: "Device {{ devEUI }} is already registered in your tenant or in another tenant in the platform.";
        placeholders: {
            devEUI: string;
        };
    };
    '^Device with external ID(s) (.+?) was replaced by device with external ID(s) (.+?)$': {
        gettext: "Device with external ID(s) {{ oldExtIds }} was replaced by device with external ID(s) {{ newExtIds }}.";
        placeholders: {
            oldExtIds: string;
            newExtIds: string;
        };
    };
    '^Display name$': {
        gettext: "Login alias";
    };
    '^Domain name in uploaded certificate differs from the one in use$': {
        gettext: "Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.";
    };
    '^Domain name is already in use by another tenant!$': {
        gettext: "Domain name is already used by another tenant.";
    };
    '^Duplicated connector for instanceUrl (.+?)!$': {
        gettext: "Target URL {{targetUrl}} already used by another connector.";
        placeholders: {
            targetUrl: string;
        };
    };
    '^Duplicated connector for name (.+?)!$': {
        gettext: "Connector name \"{{name}}\" already used by another connector.";
        placeholders: {
            name: string;
        };
    };
    '^Entry is outside of the target dir: (.+)$': {
        gettext: "File entry outside of the target directory: \"{{path}}\".";
        placeholders: {
            path: string;
        };
    };
    '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
        gettext: "Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.";
        placeholders: {
            minCharactersCount: string;
            maxCharactersCount: string;
        };
    };
    '^Error during password validation. : Your password has been used already. Choose another.$': {
        gettext: "This password has already been used earlier. Use a different one.";
    };
    "^Error in statement (.+?):(.+?)! : Incorrect syntax near '(.+?)' near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: "Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression \"{{expression}}\" near reserved keyword \"{{keyword}}\".";
        placeholders: {
            moduleName: string;
            statementNumber: string;
            expression: string;
            keyword: string;
        };
    };
    '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
        gettext: "External ID not found for type \"{{type}}\" and value \"{{value}}\".";
        placeholders: {
            type: string;
            value: string;
        };
    };
    '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
        gettext: "Could not find application by ID {{applicationId}}.";
        placeholders: {
            applicationId: string;
        };
    };
    '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
        gettext: "Unable to find option by given key: sigfox-agent/provider.token";
    };
    '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
        gettext: "Could not delete application assigned to other tenants.";
    };
    '^Failed to extract certificate from PKCS12$': {
        gettext: "Failed to extract certificate from PKCS12.";
    };
    '^Failed to update domain at the platform$': {
        gettext: "Failed to update domain at the platform.";
    };
    "^Finding device data from database failed : No managedObject for id '(.+?)'!$": {
        gettext: "Could not find managed object with ID \"{{deviceId}}\".";
        placeholders: {
            deviceId: string;
        };
    };
    '^Following mandatory fields should be included: (.+?)$': {
        gettext: "Following mandatory fields should be included: {{fields}}";
        placeholders: {
            fields: string;
        };
    };
    '^Global Role updated$': {
        gettext: "Global role updated";
    };
    '^Global Role (.+?) updated$': {
        gettext: "Global role \"{{name}}\" updated";
        placeholders: {
            name: string;
        };
    };
    '^Global Role (.+?) updated: (.+)$': {
        gettext: "Global role \"{{name}}\" updated: {{updatesList}}";
        placeholders: {
            name: string;
            updatesList: {
                capture: string;
                translate: {
                    'applications \\[([^\\]]+?)\\] added': {
                        gettext: "applications {{list}} added";
                        placeholders: {
                            list: string;
                        };
                    };
                    'applications \\[([^\\]]+?)\\] removed': {
                        gettext: "applications {{list}} removed";
                        placeholders: {
                            list: string;
                        };
                    };
                    'roles \\[([^\\]]+?)\\] added': {
                        gettext: "roles {{list}} added";
                        placeholders: {
                            list: string;
                        };
                    };
                    'roles \\[([^\\]]+?)\\] removed': {
                        gettext: "roles {{list}} removed";
                        placeholders: {
                            list: string;
                        };
                    };
                };
            };
        };
    };
    '^Global Roles$': {
        gettext: "Global roles";
    };
    '^Operation updated: (.+)$': {
        gettext: "Operation updated: {{updatesList}}";
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: "status: \"{{ status | translate }}\"";
                        placeholders: {
                            status: string;
                        };
                    };
                    "description='(.+?)'": {
                        gettext: "description: \"{{ description | translate }}\"";
                        placeholders: {
                            description: string;
                        };
                    };
                    "device name='(.+?)'": {
                        gettext: "device name: \"{{ deviceName }}\"";
                        placeholders: {
                            deviceName: string;
                        };
                    };
                    "failure reason='(.+?)'": {
                        gettext: "failure reason: \"{{ failureReason | translate }}\"";
                        placeholders: {
                            failureReason: string;
                        };
                    };
                };
            };
        };
    };
    '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
        gettext: "External ID \"{{value}}\" of the type \"{{type}}\" already exists.";
        placeholders: {
            type: string;
            value: string;
        };
    };
    '^Invalid credentials! : Bad credentials$': {
        gettext: "Invalid credentials.";
    };
    '^Invalid credentials! : No phone number provided$': {
        gettext: "Log into the management tenant first and enter your phone number.";
    };
    '^Inventory Role removed$': {
        gettext: "Inventory role removed";
    };
    '^Inventory Role (.+?) removed': {
        gettext: "Inventory role \"{{name}}\" deleted.";
        placeholders: {
            name: string;
        };
    };
    '^Inventory Role updated$': {
        gettext: "Inventory role updated";
    };
    '^Inventory Role (.+?) updated': {
        gettext: "Inventory role \"{{name}}\" updated.";
        placeholders: {
            name: string;
        };
    };
    '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
        gettext: "Connection refused";
    };
    '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
        gettext: "Read timed out";
    };
    '^Log file requested$': {
        gettext: "Log file requested.";
    };
    '^Managed object deleted$': {
        gettext: "Managed object deleted";
    };
    '^Managed object "(.+?)" deleted$': {
        gettext: "Managed object \"{{name}}\" deleted";
        placeholders: {
            name: string;
        };
    };
    '^Maximum file size exceeded$': {
        gettext: "Maximum file size exceeded.";
    };
    "^Message with ID (.+?) doesn't exist in smart rest template (.+?)$": {
        gettext: "Message with ID \"{{messageId}}\" doesn't exist in SmartREST template with ID \"{{templateId}}\"";
        placeholders: {
            messageId: string;
            templateId: string;
        };
    };
    "^name of Application cannot start with '(.+)' prefix.$": {
        gettext: "Application name must not start with \"{{ prefix }}\".";
        placeholders: {
            prefix: string;
        };
    };
    '^NewDeviceRequest for id = (.+?) already exists.$': {
        gettext: "Device registration request with ID {{id}} already exists.";
        placeholders: {
            id: string;
        };
    };
    '^NewDeviceRequest for device id (.+?) is in state BLOCKED, not PENDING_ACCEPTANCE.$': {
        gettext: "Device registration request with ID \"{{deviceId}}\" is in state \"Blocked\", not \"Pending acceptance\". Remove this registration request and start over.";
        placeholders: {
            deviceId: string;
        };
    };
    '^No communication with device since (.+?)$': {
        gettext: "No communication with device since {{timestamp | absoluteDate}}.";
        placeholders: {
            timestamp: string;
        };
    };
    '^No data received from device within required interval.$': {
        gettext: "No data received from device within required interval.";
    };
    '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
        gettext: "No LoRa provider settings are found. Please configure the connectivity settings.";
    };
    '^Not within any context!$': {
        gettext: "A problem occurred with microservice subscription.";
    };
    '^Maximum age cannot be bigger than 10 years.$': {
        gettext: "Maximum age cannot be bigger than 10 years.";
    };
    '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
        gettext: "Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.";
        placeholders: {
            maxLength: string;
        };
    };
    '^Microservice not available.*$': {
        gettext: "Microservice is not available.";
    };
    '^Operation created$': {
        gettext: "Operation created.";
    };
    '^Operation updated$': {
        gettext: "Operation updated.";
    };
    "^Operation created: status='(.+?)'.": {
        gettext: "Operation created: status: \"{{ status | translate }}\".";
        placeholders: {
            status: string;
        };
    };
    '^Option created$': {
        gettext: "Option created.";
    };
    '^Option "(.+?)" created$': {
        gettext: "Option \"{{option}}\" created.";
        placeholders: {
            option: string;
        };
    };
    '^Option deleted$': {
        gettext: "Option deleted.";
    };
    '^Option "(.+?)" deleted$': {
        gettext: "Option \"{{option}}\" deleted.";
        placeholders: {
            option: string;
        };
    };
    '^Owner field error. : Cannot introduce cyclic dependency.': {
        gettext: "Could not introduce cyclic ownership dependency.";
    };
    '^Password change is temporary blocked.$': {
        gettext: "Password change is temporarily blocked.";
    };
    '^Password cipher does not match': {
        gettext: "Password cipher does not match.";
    };
    '^Platform application cannot be added to, nor removed from any tenant.$': {
        gettext: "Platform application cannot be added to, nor removed from any tenant.";
    };
    '^Private key must be provided in KEY_PAIR credentials$': {
        gettext: "Private key must be provided when \"Public/private keys\" option is selected.";
    };
    '^Private key cipher does not match': {
        gettext: "Private key cipher does not match";
    };
    '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
        gettext: "Protocol \"{{protocol}}\" does not support \"{{credentialsType}}\" credentials type.";
        placeholders: {
            protocol: string;
            credentialsType: string;
        };
    };
    '^Provided security key does not match key stored for device (.+?).$': {
        gettext: "Provided security token does not match the security token stored for this device \"{{deviceId}}\".";
        placeholders: {
            deviceId: string;
        };
    };
    '^Provided security key does not match key stored for device (.+?).Reached maximum number of failed attempts while trying to register this device. Request will now be blocked and has to be removed manually to restart the process.$': {
        gettext: "The provided security token does not match the token stored for device \"{{deviceId}}\". You have reached the maximum number of failed attempts while trying to register this device. The request will now be blocked and must be removed manually to restart the process.";
        placeholders: {
            deviceId: string;
        };
    };
    '^pulling image "(.+)"$': {
        gettext: "Pulling image: \"{{imageName}}\".";
        placeholders: {
            imageName: string;
        };
    };
    '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
        gettext: "Real-time event processing is currently overloaded and may stop processing your events. Please contact support.";
    };
    '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
        gettext: "Could not find the resource with ID \"{{id}}\".";
        placeholders: {
            id: string;
        };
    };
    '^Retrieve configuration snapshot from device (.+?)': {
        gettext: "Retrieve configuration snapshot from device {{deviceName}}";
        placeholders: {
            deviceName: string;
        };
    };
    '^Retrieve (.+?) configuration snapshot from device (.+?)': {
        gettext: "Retrieve {{configurationType}} configuration snapshot from device {{deviceName}}";
        placeholders: {
            configurationType: string;
            deviceName: string;
        };
    };
    '^Scaled up replica set (.+) to (\\d+)$': {
        gettext: "Replica set \"{{replicaSetName}}\" scaled up to \"{{scaleNumber}}\".";
        placeholders: {
            replicaSetName: string;
            scaleNumber: string;
        };
    };
    '^Send configuration snapshot (.+?) of configuration type (.+?) to device (.+?)': {
        gettext: "Send configuration snapshot {{snapshotName}} of configuration type {{configurationType}} to device {{deviceName}}";
        placeholders: {
            snapshotName: string;
            configurationType: string;
            deviceName: string;
        };
    };
    '^Send configuration snapshot (.+?) to device (.+?)': {
        gettext: "Send configuration snapshot {{snapshotName}} to device {{deviceName}}";
        placeholders: {
            snapshotName: string;
            deviceName: string;
        };
    };
    '^Simulator state is invalid: (.+)$': {
        gettext: "Simulator state is invalid: {{violations}}";
        placeholders: {
            violations: {
                capture: string;
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: "\"{{field}}\" should not be null";
                        placeholders: {
                            field: string;
                        };
                    };
                    '(\\w+?) - must be less than or equal to (\\d+)': {
                        gettext: "\"{{field}}\" must be less than or equal to {{maxValue}}";
                        placeholders: {
                            field: string;
                            maxValue: string;
                        };
                    };
                    '(\\w+?) - should not contain null values': {
                        gettext: "\"{{field}}\" should not contain null values";
                        placeholders: {
                            field: string;
                        };
                    };
                };
            };
        };
    };
    "^Smart rest template (.+?) doesn't exist$": {
        gettext: "SmartREST template with ID \"{{templateId}}\" doesn't exist.";
        placeholders: {
            templateId: string;
        };
    };
    '^Smart rule created$': {
        gettext: "Smart rule created.";
    };
    '^Smart rule updated$': {
        gettext: "Smart rule updated.";
    };
    '^Smart rule enabled$': {
        gettext: "Smart rule activated.";
    };
    '^Smart rule disabled$': {
        gettext: "Smart rule deactivated.";
    };
    '^Smart rule deleted$': {
        gettext: "Smart rule deleted.";
    };
    '^Smart rule "(.+?)" created$': {
        gettext: "Smart rule \"{{name}}\" created.";
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" updated$': {
        gettext: "Smart rule \"{{name}}\" updated.";
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" enabled$': {
        gettext: "Smart rule \"{{name}}\" activated.";
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" disabled$': {
        gettext: "Smart rule \"{{name}}\" deactivated.";
        placeholders: {
            name: string;
        };
    };
    '^Smart rule "(.+?)" deleted$': {
        gettext: "Smart rule \"{{name}}\" deleted.";
        placeholders: {
            name: string;
        };
    };
    '^Started container$': {
        gettext: "Container started.";
    };
    '^Successfully assigned (.+) to (.+)$': {
        gettext: "\"{{imageName}}\" assigned to \"{{address}}\".";
        placeholders: {
            imageName: string;
            address: string;
        };
    };
    '^Successfully pulled image "(.+)"$': {
        gettext: "Image \"{{imageName}}\" pulled.";
        placeholders: {
            imageName: string;
        };
    };
    '^Tenant creation failed. : Tenant with given id already exists.$': {
        gettext: "Could not create a tenant. Tenant with given domain/URL already exists.";
    };
    '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
        gettext: "Could not use a reserved SQL keyword \"{{tenantId}}\" as a domain name.";
        placeholders: {
            tenantId: string;
        };
    };
    '^Tenant "(.+?)" activated$': {
        gettext: "Tenant \"{{tenant}}\" activated.";
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant (.+?) has sub-tenants, please remove them first!$': {
        gettext: "Could not remove tenant \"{{tenant}}\". Remove its subtenants first.";
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant activated$': {
        gettext: "Tenant activated.";
    };
    '^Tenant "(.+?)" created$': {
        gettext: "Tenant \"{{tenant}}\" created.";
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant created$': {
        gettext: "Tenant created.";
    };
    '^Tenant "(.+?)" deleted$': {
        gettext: "Tenant \"{{tenant}}\" deleted.";
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant deleted$': {
        gettext: "Tenant deleted.";
    };
    '^Tenant "(.+?)" suspended$': {
        gettext: "Tenant \"{{tenant}}\" suspended.";
        placeholders: {
            tenant: string;
        };
    };
    '^Tenant suspended$': {
        gettext: "Tenant suspended";
    };
    '^Tenant "(.+?)" updated: (.+?)$': {
        gettext: "Tenant \"{{tenant}}\" updated: {{properties}}.";
        placeholders: {
            tenant: string;
            properties: string;
        };
    };
    '^Tenant updated$': {
        gettext: "Tenant updated.";
    };
    '^Too Many Requests$': {
        gettext: "Too many requests. Try again later.";
    };
    "^User alias equals username '(.+)'$": {
        gettext: "Username and login alias must be different.";
    };
    '^User created$': {
        gettext: "User created";
    };
    '^User (.+?) created$': {
        gettext: "User \"{{name}}\" created";
        placeholders: {
            name: string;
        };
    };
    '^User deleted$': {
        gettext: "User deleted";
    };
    '^User (.+?) deleted$': {
        gettext: "User \"{{name}}\" deleted";
        placeholders: {
            name: string;
        };
    };
    '^(.+?) user login with OAuth internal mode failed$': {
        gettext: "\"{{name}}\" user login with OAI-Secure mode failed";
        placeholders: {
            name: string;
        };
    };
    '^User updated$': {
        gettext: "User updated";
    };
    '^User (.+?) updated: (.+)$': {
        gettext: "User \"{{name}}\" updated: {{updatesList}}";
        placeholders: {
            name: string;
            updatesList: {
                capture: string;
                translate: {
                    "delegatedBy='(.+?)'": {
                        gettext: "delegated by: \"{{delegate}}\"";
                        placeholders: {
                            delegate: string;
                        };
                    };
                    "owner='(.+?)'": {
                        gettext: "owner: \"{{owner}}\"";
                        placeholders: {
                            owner: string;
                        };
                    };
                    'inventory assignment \\[(.+?)\\] added': {
                        gettext: "inventory assignment [{{inventoryAssignment}}] added";
                        placeholders: {
                            inventoryAssignment: string;
                        };
                    };
                    'inventory assignment \\[(.+?)\\] removed': {
                        gettext: "inventory assignment [{{inventoryAssignment}}] removed";
                        placeholders: {
                            inventoryAssignment: string;
                        };
                    };
                    'applications \\[(.+?)\\] added$': {
                        gettext: "applications [{{applicationsList}}] added";
                        placeholders: {
                            applicationsList: string;
                        };
                    };
                    'applications \\[(.+?)\\] removed$': {
                        gettext: "applications [{{applicationsList}}] removed";
                        placeholders: {
                            applicationsList: string;
                        };
                    };
                    'global roles \\[(.+?)\\] added$': {
                        gettext: "global roles [{{globalRolesList}}] added";
                        placeholders: {
                            globalRolesList: string;
                        };
                    };
                    'global roles \\[(.+?)\\] removed$': {
                        gettext: "global roles [{{globalRolesList}}] removed";
                        placeholders: {
                            globalRolesList: string;
                        };
                    };
                };
            };
        };
    };
    "^User with username '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: "User \"{{username}}\" already exists.";
        placeholders: {
            username: string;
        };
    };
    "^User with username or alias '(.+)' already exists! : Duplicated: (.+)$": {
        gettext: "User with username or login alias \"{{usernameOrAlias}}\" already exists.";
        placeholders: {
            usernameOrAlias: string;
        };
    };
    "^User with email '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: "User with email \"{{email}}\" already exists.";
        placeholders: {
            email: string;
        };
    };
    '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
        gettext: "Unable to get tenant option: \"{{option}}\".";
        placeholders: {
            option: string;
        };
    };
    '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
        gettext: "Unable to get system option: \"{{option}}\".";
        placeholders: {
            option: string;
        };
    };
    '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
        gettext: "The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.";
    };
    '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
        gettext: "The selected name is too long. Please try a shorter one.";
    };
    '^You have reached devices limit. No more devices can be registered.$': {
        gettext: "You reached devices limit. No more devices can be registered.";
    };
    '^(.+) succeeded for volume "(.+)"': {
        gettext: "Operation \"{{operation}}\" succeeded for volume \"{{volume}}\".";
        placeholders: {
            operation: string;
            volume: string;
        };
    };
    "^Exception on tenant (.+) in statement '(.+)': Invocation exception when invoking method '(.+)' of class '(.+)' passing parameters \\[(.+)\\] for statement '(.+)': (.+) : (.+)$": {
        gettext: "Exception on tenant {{tenantId}} in statement \"{{moduleName}}\": Invocation exception when invoking method \"{{methodName}}\" of class \"{{classPath}}\" passing parameters [{{parameters}}] for statement \"{{statement}}\": {{exceptionType}} : {{exceptionMessage}}.";
        placeholders: {
            tenantId: string;
            moduleName: string;
            methodName: string;
            classPath: string;
            parameters: string;
            statement: string;
            exceptionType: string;
            exceptionMessage: string;
        };
    };
    '^No nodes are available that match all of the predicates: (.+).$': {
        gettext: "No nodes are available that match all of the predicates: [{{predicates}}].";
        placeholders: {
            predicates: string;
        };
    };
    '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: "Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).";
        placeholders: {
            requestMethod: string;
            uri: string;
            protocol: string;
        };
    };
    '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: "Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).";
        placeholders: {
            requestMethod: string;
            uri: string;
            protocol: string;
        };
    };
    '^Error syncing pod$': {
        gettext: "Pod synchronization error.";
    };
    '^Failed create pod sandbox.$': {
        gettext: "Pod sandbox creation failed.";
    };
    '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
        gettext: "Exception on tenant {{tenantId}} in statement \"{{statement}}\": HTTP status code: {{httpStatusCode}} : {{message | translate}}";
        placeholders: {
            tenantId: string;
            statement: string;
            httpStatusCode: string;
            message: string;
        };
    };
    "^User '(.+)' is managed by a remote identity management service defined by an administrator, direct update is forbidden$": {
        gettext: "User \"{{userName}}\" is managed by a remote identity management service defined by an administrator, direct update is forbidden.";
        placeholders: {
            userName: string;
        };
    };
    '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
        gettext: "Added new child device to \"{{parentDeviceName}}\" (ID: {{parentDeviceId}}).";
        placeholders: {
            parentDeviceName: string;
            parentDeviceId: string;
        };
    };
    '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
        gettext: "Updated child device of \"{{parentDeviceName}}\" (ID: {{parentDeviceId}}).";
        placeholders: {
            parentDeviceName: string;
            parentDeviceId: string;
        };
    };
    '^Added child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: "Added child device \"{{name}}\" (ID: {{id}}).";
        placeholders: {
            name: string;
            id: string;
        };
    };
    '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: "Removed child device \"{{name}}\" (ID: {{id}}).";
        placeholders: {
            name: string;
            id: string;
        };
    };
    '^Change value of "(.+)" to (.+) (.+).$': {
        gettext: "Change value of \"{{name}}\" to {{value}}{{unit}}.";
        placeholders: {
            name: string;
            value: string;
            unit: string;
        };
    };
    '^Change value of "(.+)" to (.+).$': {
        gettext: "Change value of \"{{name}}\" to {{value}}.";
        placeholders: {
            name: string;
            value: string;
        };
    };
    '^Change status of "(.+)" to "(.+)".$': {
        gettext: "Change status of \"{{name}}\" to \"{{label}}\".";
        placeholders: {
            name: string;
            label: string;
        };
    };
    '^Send message "(.+)".$': {
        gettext: "Send message \"{{str}}\".";
        placeholders: {
            str: string;
        };
    };
    '^Close relay (.+).$': {
        gettext: "Close relay {{number}}.";
        placeholders: {
            number: string;
        };
    };
    '^Open relay (.+).$': {
        gettext: "Open relay {{number}}.";
        placeholders: {
            number: string;
        };
    };
    '^Change trace status to (.+).$': {
        gettext: "Change trace status to {{state | translate}}.";
        placeholders: {
            state: string;
        };
    };
    '^Change relay status to (.+).$': {
        gettext: "Change relay status to {{status | translate}}.";
        placeholders: {
            status: string;
        };
    };
    '^Closing relay (.+).$': {
        gettext: "Closing relay {{number}}.";
        placeholders: {
            number: string;
        };
    };
    '^Opening relay (.+).$': {
        gettext: "Opening relay {{number}}.";
        placeholders: {
            number: string;
        };
    };
    '^Update bulk operation$': {
        gettext: "Update bulk operation";
    };
    '^Update bulk operation: (.+)$': {
        gettext: "Update bulk operation: {{updatesList}}";
        placeholders: {
            updatesList: {
                capture: string;
                translate: {
                    "status='(.+?)'": {
                        gettext: "status: \"{{ status | translate }}\"";
                        placeholders: {
                            status: string;
                        };
                    };
                    "generalStatus='(.+?)'": {
                        gettext: "general status: \"{{ generalStatus | translate }}\"";
                        placeholders: {
                            generalStatus: string;
                        };
                    };
                    "progress='(.+?)'": {
                        gettext: "progress: \"{{ progress }}\"";
                        placeholders: {
                            progress: string;
                        };
                    };
                    'note=(.+?)': {
                        gettext: "note: \"{{ note }}\"";
                        placeholders: {
                            note: string;
                        };
                    };
                };
            };
        };
    };
    '^Update firmware to: "?(.+?)"? \\(version: (.+)\\)\\.?$': {
        gettext: "Update firmware to: \"{{ name }}\" (version: {{ version }})";
        placeholders: {
            name: string;
            version: string;
        };
    };
    '^Update firmware to: "?(.+?)"?\\.?$': {
        gettext: "Update firmware to: \"{{ name }}\"";
        placeholders: {
            name: string;
        };
    };
    '^Update configuration to (.+).$': {
        gettext: "Update configuration to: {{ name }}.";
        placeholders: {
            name: string;
        };
    };
    '^Apply device profile: (.+).?$': {
        gettext: "Apply device profile: {{ name }}";
        placeholders: {
            name: string;
        };
    };
    '^Execute generic command: (.+).?$': {
        gettext: "Execute generic command: {{command}}";
        placeholders: {
            command: string;
        };
    };
    '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
        gettext: "Could not reactivate the application as it is not hosted locally.";
    };
    '^Failed to refresh application. : Cannot refresh application without active version id.$': {
        gettext: "Could not reactivate the application as it has no active version.";
    };
    '^Scaled down replica set (.+) to (\\d+)$': {
        gettext: "Replica set \"{{replicaSetName}}\" scaled down to \"{{scaleNumber}}\".";
        placeholders: {
            replicaSetName: string;
            scaleNumber: string;
        };
    };
    '^Deleted pod: (.+)$': {
        gettext: "Pod \"{{imageName}}\" deleted.";
        placeholders: {
            imageName: string;
        };
    };
    '^Container image "(.+)" already present on machine$': {
        gettext: "Container image \"{{imageName}}\" already exists.";
        placeholders: {
            imageName: string;
        };
    };
    '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
        gettext: "This login mode was already set by another administrator. Refresh the page to update the data.";
    };
    '^Application deleted$': {
        gettext: "Application deleted";
    };
    '^Microservice application "(.+?)" deleted for tenant "(.+?)"$': {
        gettext: "Microservice application \"{{appName}}\" deleted for tenant \"{{tenant}}\"";
        placeholders: {
            appName: string;
            tenant: string;
        };
    };
    '^Hosted application "(.+?)" deleted for tenant "(.+?)"$': {
        gettext: "Hosted application \"{{appName}}\" deleted for tenant \"{{tenant}}\"";
        placeholders: {
            appName: string;
            tenant: string;
        };
    };
    '^External application "(.+?)" deleted for tenant "(.+?)"$': {
        gettext: "External application \"{{appName}}\" deleted for tenant \"{{tenant}}\"";
        placeholders: {
            appName: string;
            tenant: string;
        };
    };
    '^Application activated$': {
        gettext: "Application activated";
    };
    '^Microservice application "(.+?)" activated: version \\[(.+?)\\] added, activeVersionId \\[(.+?)\\] added$': {
        gettext: "Microservice application \"{{appName}}\" activated: version \"{{version}}\" added, activeVersionId \"{{activeVersionId}}\" added";
        placeholders: {
            appName: string;
            version: string;
            activeVersionId: string;
        };
    };
    '^Hosted application "(.+?)" activated: version \\[(.+?)\\] added, activeVersionId \\[(.+?)\\] added$': {
        gettext: "Hosted application \"{{appName}}\" activated: version \"{{version}}\" added, activeVersionId \"{{activeVersionId}}\" added";
        placeholders: {
            appName: string;
            version: string;
            activeVersionId: string;
        };
    };
    '^External application "(.+?)" activated: version \\[(.+?)\\] added, activeVersionId \\[(.+?)\\] added$': {
        gettext: "External application \"{{appName}}\" activated: version \"{{version}}\" added, activeVersionId \"{{activeVersionId}}\" added";
        placeholders: {
            appName: string;
            version: string;
            activeVersionId: string;
        };
    };
    '^(.+?) user logged in to the platform with OAuth internal login mode$': {
        gettext: "\"{{name}}\" user logged in to the platform with OAI-Secure login mode";
        placeholders: {
            name: string;
        };
    };
    "^Scaling application '(.+?)' from (.+?) to (.+?) instances$": {
        gettext: "Scaling application \"{{appName}}\" from {{from}} to {{to}} instances";
        placeholders: {
            appName: string;
            from: string;
            to: string;
        };
    };
    '^User logout$': {
        gettext: "User logout";
    };
    '^(.+?) user logout$': {
        gettext: "\"{{name}}\" user logout";
        placeholders: {
            name: string;
        };
    };
    '^Authentication with id: (.+?) configuration updated.$': {
        gettext: "Authentication configuration with ID \"{{id}}\" updated.";
        placeholders: {
            id: string;
        };
    };
    '^Authentication configuration with id: (.+?) added.$': {
        gettext: "Authentication configuration with ID \"{{id}}\" added.";
        placeholders: {
            id: string;
        };
    };
    '^Configuration type: basic.$': {
        gettext: "Configuration type: Basic Auth.";
    };
    '^Configuration type: oauth2_internal.$': {
        gettext: "Configuration type: OAI-Secure.";
    };
    '^Configuration type: oauth2.$': {
        gettext: "Configuration type: Single sign-on.";
    };
    '^Device put into maintenance state$': {
        gettext: "Device put into maintenance state";
    };
    '^device with id: (.+?) is put into maintenance state$': {
        gettext: "Device with ID \"{{deviceId}}\" is put into maintenance state";
        placeholders: {
            deviceId: string;
        };
    };
    '^Connector updated$': {
        gettext: "Connector updated";
    };
    '^Connector (.+?) updated: filters [(.+?)] added$': {
        gettext: "Connector \"{{name}}\" updated: filters [{{filters}}] added";
        placeholders: {
            name: string;
            filters: string;
        };
    };
    '^Connector deleted$': {
        gettext: "Connector deleted";
    };
    '^Connector (.+?) deleted$': {
        gettext: "Connector \"{{name}}\" deleted";
        placeholders: {
            name: string;
        };
    };
    '^Connector created$': {
        gettext: "Connector created";
    };
    '^Connector (.+?) created: (.+?) added, (.+?)$': {
        gettext: "Connector \"{{name}}\" created: {{configuration}} added, {{baseProperties}}";
        placeholders: {
            name: string;
            configuration: string;
            baseProperties: string;
        };
    };
    '^Connector (.+?) updated: (.+?) added, (.+?) removed$': {
        gettext: "Connector \"{{name}}\" updated: {{newConfig}} added, {{oldConfig}} removed";
        placeholders: {
            name: string;
            newConfig: string;
            oldConfig: string;
        };
    };
    '^Connector (.+?) updated: (.+?) removed, (.+?) added$': {
        gettext: "Connector \"{{name}}\" updated: {{newConfig}} added, {{oldConfig}} removed";
        placeholders: {
            name: string;
            oldConfig: string;
            newConfig: string;
        };
    };
    '^Can read all data of the asset and manage all inventory data, but cannot perform operations. Can also acknowledge and clear alarms. Can create and updates dashboards.$': {
        gettext: "Can read all data of the asset and manage all inventory data, but cannot perform operations. Can also acknowledge and clear alarms. Can create and updates dashboards.";
    };
    '^Operations: All$': {
        gettext: "Operations: All";
    };
    '^Can remotely manage the assets by sending operations to the device. This includes for example remote configuration, software update, etc.$': {
        gettext: "Can remotely manage the assets by sending operations to the device. This includes remote configuration, software update and more.";
    };
    '^Operations: Restart Device$': {
        gettext: "Operations: Restart Device";
    };
    '^Can restart devices.$': {
        gettext: "Can restart devices.";
    };
    '^Reader$': {
        gettext: "Reader";
    };
    '^Can read all data of the asset.$': {
        gettext: "Can read all data of the asset.";
    };
    '^Enables administrative permissions. The first user created for the tenant receives this role$': {
        gettext: "Enables administrative permissions. The first user created for the tenant receives this role.";
    };
    '^Can access all devices and their data but has no management permission in the tenant$': {
        gettext: "Can access all devices and their data but has no management permission in the tenant.";
    };
    '^CEP Manager$': {
        gettext: "CEP Manager";
    };
    '^Has full access to all deployed CEP modules and SmartRules$': {
        gettext: "Has full access to all deployed CEP modules and smart rules.";
    };
    '^Devicemanagement User$': {
        gettext: "Device Management User";
    };
    '^Gives access to bulk operations and device management application. This does not include access to any device data.$': {
        gettext: "Gives access to bulk operations and Device Management application. This does not include access to any device data.";
    };
    '^A role marker for device users. After registration, a device automatically has this role$': {
        gettext: "A role marker for device users. After registration, a device automatically has this role.";
    };
    '^Global Manager$': {
        gettext: "Global Manager";
    };
    '^Can read and write all data from all devices$': {
        gettext: "Can read and write all data from all devices.";
    };
    '^Global Reader$': {
        gettext: "Global Reader";
    };
    '^Can read all data from all devices$': {
        gettext: "Can read all data from all devices.";
    };
    '^Cockpit User$': {
        gettext: "Cockpit User";
    };
    '^User to work in Cockpit application. This does not include the access to any device data.$': {
        gettext: "User to work in Cockpit application. This does not include the access to any device data.";
    };
    '^Global User Manager$': {
        gettext: "Global User Manager";
    };
    '^Can access and modify the full user hierarchy$': {
        gettext: "Can access and edit the full user hierarchy.";
    };
    '^Can read all data \\(including users, in contrast to "Global Reader"\\)$': {
        gettext: "Can read all data (including users, in contrast to \"Global Reader\").";
    };
    '^Shared User Manager$': {
        gettext: "Shared User Manager";
    };
    '^Can create new user as his own sub-users and manage this$': {
        gettext: "Can create new own sub-users and manage them.";
    };
    '^Tenant Manager$': {
        gettext: "Tenant Manager";
    };
    '^Can manage tenant wide configurations like applications, tenant options and retention rules$': {
        gettext: "Can manage tenant wide configurations like applications, tenant options and retention rules.";
    };
    '^DATAHUB_ADMINISTRATOR$': {
        gettext: "DataHub Administrator";
    };
    '^Can conduct administrative tasks and manage offloading pipelines$': {
        gettext: "Can conduct administrative tasks and manage offloading pipelines.";
    };
    '^DATAHUB_MANAGER$': {
        gettext: "DataHub Manager";
    };
    '^Can manage offloading pipelines$': {
        gettext: "Can manage offloading pipelines.";
    };
    '^DATAHUB_READER$': {
        gettext: "DataHub Reader";
    };
    '^Can execute SQL queries against the data in the data lake$': {
        gettext: "Can execute SQL queries against the data in the data lake.";
    };
    '^User "(.+?)" password was updated by user "(.+?)"$': {
        gettext: "\"{{ targetUserName }}\" user's password was updated by \"{{ userName }}\" user";
        placeholders: {
            targetUserName: string;
            userName: string;
        };
    };
    '^User password update$': {
        gettext: "User password update";
    };
    '^User "(.+?)" password updated$': {
        gettext: "\"{{ userName }}\" user changed own password";
        placeholders: {
            userName: string;
        };
    };
    '^LWM2M device type$': {
        gettext: "LWM2M device type";
    };
    '^LWM2M server URI$': {
        gettext: "LWM2M server URI";
    };
    '^coaps://<LWM2M-server-domain>:<coaps-port>$': {
        gettext: "coaps://<LWM2M-server-domain>:<coaps-port>";
    };
    '^Endpoint client ID$': {
        gettext: "Endpoint client ID";
    };
    '^Server public key$': {
        gettext: "Server public key";
    };
    '^Generate bootstrap server config$': {
        gettext: "Generate bootstrap server config";
    };
    '^LWM2M bootstrap short server ID$': {
        gettext: "LWM2M bootstrap short server ID";
    };
    '^LWM2M short server ID$': {
        gettext: "LWM2M short server ID";
    };
    '^Registration lifetime$': {
        gettext: "Registration lifetime";
    };
    '^in seconds$': {
        gettext: "in seconds";
    };
    '^Security instance offset$': {
        gettext: "Security instance offset";
    };
    '^Default minimum period$': {
        gettext: "Default minimum period";
    };
    '^Default maximum period$': {
        gettext: "Default maximum period";
    };
    '^Binding mode$': {
        gettext: "Binding mode";
    };
    '^applicable for LWM2M 1\\.0$': {
        gettext: "applicable for LWM2M 1.0";
    };
    '^Awake time registration parameter$': {
        gettext: "Awake time registration parameter";
    };
    '^in milliseconds, 0 means device is always online$': {
        gettext: "in milliseconds, 0 means device is always online";
    };
    '^Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available$': {
        gettext: "Use common timestamp resources 5518 and 6050 or object specific timestamp for object 6 reported by the device if available";
    };
    '^Notification storing when disabled or offline$': {
        gettext: "Notification storing when disabled or offline";
    };
    '^Disable timeout$': {
        gettext: "Disable timeout";
    };
    '^LWM2M request timeout$': {
        gettext: "LWM2M request timeout";
    };
    '^in milliseconds$': {
        gettext: "in milliseconds";
    };
    '^Binary delivery encoding$': {
        gettext: "Binary delivery encoding";
    };
    '^Firmware update delivery method$': {
        gettext: "Firmware update delivery method";
    };
    '^Firmware update supported device protocol$': {
        gettext: "Firmware update supported device protocol";
    };
    '^Firmware update reset mechanism$': {
        gettext: "Firmware update reset mechanism";
    };
    '^Firmware update URL$': {
        gettext: "Firmware update URL";
    };
    '^Failed to find operation data in the internal memory store\\. Try again!$': {
        gettext: "Failed to find operation data in the internal memory store. Try again.";
    };
    '^Security mode$': {
        gettext: "Security mode";
    };
    '^Bootstrap PSK ID$': {
        gettext: "Bootstrap PSK ID";
    };
    '^Bootstrap pre-shared key$': {
        gettext: "Bootstrap pre-shared key";
    };
    '^LWM2M PSK ID$': {
        gettext: "LWM2M PSK ID";
    };
    '^LWM2M pre-shared key$': {
        gettext: "LWM2M pre-shared key";
    };
    '^LWM2M bulk device upload operation$': {
        gettext: "LWM2M bulk device upload operation";
    };
    '^This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices\\. The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
        gettext: "This operation is only triggered by the agent when user uploads a CSV file with all required information to register new LWM2M devices. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.";
    };
    '^Write$': {
        gettext: "Write";
    };
    '^Execute$': {
        gettext: "Execute";
    };
    '^Execute with parameters$': {
        gettext: "Execute with parameters";
    };
    '^Execute with Parameters$': {
        gettext: "Execute with parameters";
    };
    '^Delete Instance$': {
        gettext: "Delete instance";
    };
    '^Create Instance$': {
        gettext: "Create instance";
    };
    '^Read Object$': {
        gettext: "Read object";
    };
    '^Read Instance$': {
        gettext: "Read instance";
    };
    '^LWM2M bulk device removal operation$': {
        gettext: "LWM2M bulk device removal operation";
    };
    '^This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from C8Y\\.The source of the operation is the LWM2M device connector\\. Users are not able to trigger this operation using the shell command\\.$': {
        gettext: "This operation is only triggered by the agent when user uploads a CSV file with a list of endpoint IDs to delete from the platform. The source of the operation is the LWM2M device connector. Users are not able to trigger this operation using the shell command.";
    };
    '^Could not find device$': {
        gettext: "Could not find device";
    };
    '^Exception occurred while removing device (.+?)$': {
        gettext: "Exception occurred while removing device: {{ exceptionMessage }}";
        placeholders: {
            exceptionMessage: string;
        };
    };
    '^This command can be used to migrate LWM2M devices which are created in a non-standard way\\. It can take comma-separated device managed object IDs as parameters\\. If the IDs are specified then the migration will be done only for those devices\\. If the command is sent without any parameters then the agent will look up for possible Lwm2m devices that are not created in a standard way and try to migrate them\\. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices$': {
        gettext: "This command can be used to migrate LWM2M devices which are created in a non-standard way. It can take comma-separated device managed object IDs as parameters. If the IDs are specified then the migration will be done only for those devices. If the command is sent without any parameters then the agent will look up for possible LWM2M devices that are not created in a standard way and try to migrate them. Usage: migrateLwm2mDevices 1122,3344 or migrateLwm2mDevices";
    };
    '^Unable to migrate devices$': {
        gettext: "Unable to migrate devices";
    };
    '^Error while processing report$': {
        gettext: "Error while processing report";
    };
    '^Expected 1 endpointId argument$': {
        gettext: "Expected 1 endpointId argument";
    };
    '^LWM2M device registration$': {
        gettext: "LWM2M device registration";
    };
    '^The required and optional properties to register and setup LWM2M Devices$': {
        gettext: "The required and optional properties to register and setup LWM2M devices";
    };
    '^Bootstrap$': {
        gettext: "Bootstrap";
    };
    '^Advanced$': {
        gettext: "Advanced";
    };
    '^Bulk LWM2M device registration$': {
        gettext: "Bulk LWM2M device registration";
    };
    '^This command returns a list of shell commands with description that can be created for the Lwm2m device connector\\.$': {
        gettext: "This command returns a list of shell commands with description that can be created for the LWM2M device connector.";
    };
    '^The following operations are supported:': {
        gettext: "The following operations are supported:";
    };
    '^PSK template$': {
        gettext: "PSK template";
    };
    '^A bulk registration CSV template showing all mandatory fields$': {
        gettext: "A bulk registration CSV template showing all mandatory fields";
    };
    '^Mandatory fields template$': {
        gettext: "Mandatory fields template";
    };
    '^General template$': {
        gettext: "General template";
    };
    '^A bulk registration CSV template for NO_SEC devices with all optional fields$': {
        gettext: "A bulk registration CSV template for NO_SEC devices with all optional fields";
    };
    '^A general bulk registration CSV template showing all possible fields$': {
        gettext: "A general bulk registration CSV template showing all possible fields";
    };
    '^A bulk registration CSV template for PSK devices with all optional fields$': {
        gettext: "A bulk registration CSV template for PSK devices with all optional fields";
    };
    '^NO_SEC template$': {
        gettext: "NO_SEC template";
    };
    '^Authentication to the Loriot platform failed with status code (.+?). Check if the credentials are correct or if Session ID is expired.$': {
        gettext: "Authentication to the LORIOT platform failed with status code {{ statusCode }}. Check if the credentials are correct or if session ID is expired.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Authentication to the Loriot platform failed with status code (.+?). Check if the base URL, credentials are correct and the application with the given ID exists.$': {
        gettext: "Authentication to the LORIOT platform failed with status code {{ statusCode }}. Check if the base URL, credentials are correct and the application with the given ID exists.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Application output creation failed due to status code (.+?)$': {
        gettext: "Application output creation failed due to status code {{ statusCode }}.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Application output update failed due to status code (.+?)$': {
        gettext: "Application output update failed due to status code {{ statusCode }}.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Error creating the device due to status code (.+?). Check if the application Id, devEui, appEui and appKey are in the correct format or the device limit has been exceeded or has been registered with another account in the Loriot provider$': {
        gettext: "Error creating the device due to status code {{ statusCode }}. Check if the application name, Device EUI, Application EUI and Application key are in the correct format or the device limit has been exceeded or has been registered with another account in the LORIOT provider.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Error retrieving application with given ID: (.+?) with status code 400. Check if the applicationId provided is in the correct format$': {
        gettext: "Error retrieving application with given ID: {{ applicationId }} with status code 400. Check if the selected application is correct";
        placeholders: {
            applicationId: string;
        };
    };
    "^LNS connection name can't be null or blank.$": {
        gettext: "LNS connection name can't be empty.";
    };
    '^Unexpected error occurred while accessing the cached LNS connections map with key (.+?)$': {
        gettext: "Unexpected error occurred while accessing the cached LNS connections map with key \"{{ connectionName }}\".";
        placeholders: {
            connectionName: string;
        };
    };
    "^LNS connection named (.+?) doesn't exist.$": {
        gettext: "LNS connection named \"{{ connectionName }}\" doesn't exist.";
        placeholders: {
            connectionName: string;
        };
    };
    '^LNS connection named (.+?) already exists.$': {
        gettext: "LNS connection named \"{{ connectionName }}\" already exists.";
        placeholders: {
            connectionName: string;
        };
    };
    "^New LNS connection can't be null.$": {
        gettext: "New LNS connection can't be empty.";
    };
    "^LNS connection to update can't be null.$": {
        gettext: "LNS connection to update can't be empty.";
    };
    "^The name of the LNS connection to update can't be null.$": {
        gettext: "The name of the LNS connection to update can't be empty.";
    };
    '^Can not delete the LNS connection with name "(.+?)" as it\'s associated with (.+?) device(s).$': {
        gettext: "Could not delete the LNS connection with the name \"{{ connectionName }}\" as it's associated with {{ numberOfDevices }} device(s).";
        placeholders: {
            connectionName: string;
            numberOfDevices: string;
        };
    };
    '^Can not update the LNS connection with name "(.+?)" as it\'s associated with (.+?) device(s).$': {
        gettext: "Could not update the LNS connection with the name \"{{ connectionName }}\" as it's associated with {{ numberOfDevices }} device(s).";
        placeholders: {
            connectionName: string;
            numberOfDevices: string;
        };
    };
    '^Authentication to the Actility platform failed with status code (.+?). Check if the credentials are correct.$': {
        gettext: "Authentication to the Actility platform failed with status code {{ statusCode }}. Check if the credentials are correct.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Authentication to the Actility platform failed with status code (.+?). Check if the profile Id is correct.$': {
        gettext: "Authentication to the Actility platform failed with status code {{ statusCode }}. Check if the Profile ID is correct.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Authentication to the Actility platform failed. Check if the base URL (.+?) is correct.$': {
        gettext: "Authentication to the Actility platform failed. Check if the base URL {{ baseUrl }} is correct.";
        placeholders: {
            baseUrl: string;
        };
    };
    '^Authentication to the Sigfox platform failed. Check if the base URL (.+) is correct.$': {
        gettext: "Authentication to the Sigfox platform failed. Check if the base URL {{ baseUrl }} is correct.";
        placeholders: {
            baseUrl: string;
        };
    };
    '^Authentication to the Sigfox platform failed. Check if the Parent group Id and/or the credentials are correct.$': {
        gettext: "Authentication to the Sigfox platform failed. Check if the Parent group ID and/or the credentials are correct.";
    };
    '^Authentication to the Loriot platform failed with status code (.+?). Session Id might have expired.$': {
        gettext: "Authentication to the LORIOT platform failed with status code {{ statusCode }}. Session ID might have expired.";
        placeholders: {
            statusCode: string;
        };
    };
    '^Authentication to the Actility platform failed with status code (.+?). Check if the base URL and/or the credentials are correct.$': {
        gettext: "Authentication to the Actility platform failed with status code {{ statusCode }}. Check if the base URL and/or the credentials are correct.";
        placeholders: {
            statusCode: string;
        };
    };
};

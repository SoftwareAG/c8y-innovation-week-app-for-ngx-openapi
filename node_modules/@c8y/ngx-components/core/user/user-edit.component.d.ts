import { EventEmitter, OnInit } from '@angular/core';
import { IUser, TenantLoginOptionsService, TenantService, UserService } from '@c8y/client';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AlertService } from '../alert/alert.service';
import { NewPassword } from '../authentication/password.model';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { TranslateService } from '../i18n/translate.service';
import { GainsightService } from '../product-experience/gainsight.service';
import * as i0 from "@angular/core";
export interface User extends IUser {
    phone: string;
    sendPasswordResetEmail: boolean;
    newsletter?: boolean;
}
export declare class UserEditComponent implements OnInit {
    state: AppStateService;
    translate: TranslateService;
    private bsModalService;
    private alert;
    private userService;
    private tenantLoginOptionsService;
    private tenantService;
    private userPreferencesService;
    private gainsightService;
    loading: boolean;
    set user(u: User);
    get user(): User;
    showProductUsageSetting: boolean;
    isUsageTrackingEnabled: boolean;
    isGainsightEngagementsEnabled: boolean;
    onUser: EventEmitter<User>;
    onProductExperience: EventEmitter<boolean>;
    onGainsightEngagements: EventEmitter<boolean>;
    onCancel: EventEmitter<void>;
    userHasActiveTotp: boolean;
    userCanSetupTotp: boolean;
    isPhoneRequired: boolean;
    userIsExternal: boolean;
    isTfaEnabled: boolean;
    private _user;
    constructor(state: AppStateService, translate: TranslateService, bsModalService: BsModalService, alert: AlertService, userService: UserService, tenantLoginOptionsService: TenantLoginOptionsService, tenantService: TenantService, userPreferencesService: UserPreferencesService, gainsightService: GainsightService);
    ngOnInit(): Promise<void>;
    onEnablingProductUsageTracking(isUsageTrackingEnabled: boolean): Promise<void>;
    setupTotp(): void;
    cancel(): void;
    save(): Promise<void>;
    onNewPasswordChanged(newPassword: NewPassword): void;
    private initializeTotpSettings;
    private canUserSetupTotp;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserEditComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UserEditComponent, "c8y-user-edit", never, { "loading": "loading"; "user": "user"; "showProductUsageSetting": "showProductUsageSetting"; "isUsageTrackingEnabled": "isUsageTrackingEnabled"; "isGainsightEngagementsEnabled": "isGainsightEngagementsEnabled"; }, { "onUser": "onUser"; "onProductExperience": "onProductExperience"; "onGainsightEngagements": "onGainsightEngagements"; "onCancel": "onCancel"; }, never, never, false, never>;
}

import { InjectionToken } from '@angular/core';
import { GenericHookType, HookOptions } from '../common/extension-hooks';
import { DynamicProviderConfig } from './model/dynamic-provider-config.model';
/**
 * @deprecated Consider using the `hookDynamicProviderConfig` function instead.
 */
export declare const HOOK_DYNAMIC_PROVIDER_CONFIG: InjectionToken<unknown>;
/**
 * You can either provide a single `DynamicProviderConfig` as parameter:
 * ```typescript
 *  hookDynamicProviderConfig(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDynamicProviderConfig([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DynamicProviderConfig>`
 * ```typescript
 *  export class MyDynamicProviderConfigFactory implements ExtensionFactory<DynamicProviderConfig> {...}
 *  ...
 *  hookDynamicProviderConfig(MyDynamicProviderConfigFactory)
 * ```
 * A typed alternative to `HOOK_DYNAMIC_PROVIDER_CONFIG`.
 * @param config The `DynamicProviderConfig`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export declare function hookDynamicProviderConfig(config: GenericHookType<DynamicProviderConfig>, options?: Partial<HookOptions>): import("@angular/core").ValueProvider | import("@angular/core").ClassProvider | import("@angular/core").ExistingProvider;

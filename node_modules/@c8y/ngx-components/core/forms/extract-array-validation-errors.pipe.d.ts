import { PipeTransform } from '@angular/core';
import { ValidationErrors } from '@angular/forms';
import { ArrayValidationErrors } from './validate-array-elements';
import * as i0 from "@angular/core";
/**
 * This pipe should be used in pair with {name of method} function - it allows to distribute
 * errors for each position in array, from a object prepared by {name of method}
 *
 * @Example:
 *
 * TS:
 * errors = {
 *  "INNER_ARRAY_ERROR_minlength": {
 *      isArrayError: true, originalKey: 'minlength', entries: [
 *        {index: 0, errorData: {requiredLength: 5, actualLength: 4}},
 *        {index: 2, errorData: {requiredLength: 5, actualLength: 3}},
 *      ]
 *    },
 *  "minlength": {requiredLength: 5, actualLength: 3}}}
 * }
 *
 * HTML:
 * <small *ngFor="let error of errors | extractArrayValidationErrors:index | keyvalue">
 * {{error.key | humanizeValidationMessage | translate: errors.value}}
 * </small>
 *
 */
export declare class ExtractArrayValidationErrorsPipe implements PipeTransform {
    transform(validationErrors: ArrayValidationErrors | ValidationErrors | null, index: number): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExtractArrayValidationErrorsPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<ExtractArrayValidationErrorsPipe, "extractArrayValidationErrors", false>;
}

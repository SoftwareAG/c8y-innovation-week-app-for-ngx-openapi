import { PipeTransform } from '@angular/core';
import { ValidationErrors } from '@angular/forms';
import { ArrayValidationErrors } from './validate-array-elements';
import * as i0 from "@angular/core";
/**
 * This pipe should be used in case when there might be generic Array validators, that could populate error object
 * with errors that are directly related to array elements. Such errors should be handled separately, but there still
 * might be errors that applies to whole array. This allows to filter out entry-specific messages from error object.
 *
 * @Example:
 *
 * TS:
 * errors = {
 *  "INNER_ARRAY_ERROR_minlength": {
 *      isArrayError: true, originalKey: 'minlength', entries: [
 *        {index: 0, errorData: {requiredLength: 5, actualLength: 4}},
 *        {index: 2, errorData: {requiredLength: 5, actualLength: 3}},
 *      ]
 *    },
 *  "minlength": {requiredLength: 5, actualLength: 3}}}
 * }
 *
 * HTML:
 * <small *ngFor="let error of errors | filterNonArrayValidationErrors | keyvalue">
 * {{error.key | humanizeValidationMessage | translate: errors.value}}
 * </small>
 *
 * Above code renders only these error messages that are not generated by Array entries
 *
 */
export declare class FilterNonArrayValidationErrorsPipe implements PipeTransform {
    transform(validationErrors: ArrayValidationErrors | ValidationErrors): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterNonArrayValidationErrorsPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<FilterNonArrayValidationErrorsPipe, "filterNonArrayValidationErrors", false>;
}

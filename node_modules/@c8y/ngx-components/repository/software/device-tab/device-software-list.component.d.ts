import { AfterContentInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { IManagedObject, IResultList } from '@c8y/client';
import { DeviceSoftware, DeviceSoftwareChange, FilterCriteria } from '@c8y/ngx-components/repository/shared';
import { Observable } from 'rxjs';
import { DeviceSoftwareService } from './device-software.service';
import * as i0 from "@angular/core";
export declare class DeviceSoftwareListComponent implements OnInit, AfterContentInit, OnDestroy {
    private deviceSoftwareService;
    PRODUCT_EXPERIENCE: {
        SOFTWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_SOFTWARE_MODAL: string;
                DEVICE_SOFTWARE_CHANGES: string;
                DEVICE_SOFTWARE_LIST: string;
            };
            ACTIONS: {
                APPLY_SOFTWARE_CHANGES: string;
                CLEAR_SOFTWARE_CHANGES: string;
                OPEN_INSTALL_SOFTWARE: string;
                OPEN_UPDATE_SOFTWARE: string;
                DELETE_SOFTWARE: string;
            };
            RESULTS: {
                ADD_SOFTWARE: string;
                ADD_SOFTWARE_VERSION: string;
                EDIT_SOFTWARE: string;
            };
        };
        FIRMWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_FIRMWARE_MODAL: string;
                ADD_FIRMWAR_PATCH_MODAL: string;
                FIRMWARE_DEVICE_TAB: string;
                DEVICE_FIRMWARE_LIST: string;
            };
            ACTIONS: {
                FILTER_FIRMWARE_LIST: string;
                OPEN_INSTALL_FIRMWARE_DIALOG: string;
                OPEN_REPLACE_FIRMWARE_DIALOG: string;
                OPEN_INSTALL_FIRMWARE_PATCH_DIALOG: string;
            };
            RESULTS: {
                ADD_FIRMWARE: string;
                ADD_FIRMWARE_VERSION: string;
                ADD_FIRMWARE_PATCH: string;
                EDIT_FIRMWARE: string;
                CREATE_FIRMWARE_UPDATE_OPERATION: string;
            };
        };
        SHARED: {
            COMPONENTS: {
                REPOSITORY_SELECT_MODAL: string;
                SELECT_CONFIGURATION_MODAL: string;
            };
        };
    };
    set softwareList(softwareList: DeviceSoftware[]);
    device: IManagedObject;
    deviceSoftwareChanges: DeviceSoftwareChange[];
    filterCriteria$: Observable<FilterCriteria>;
    update: EventEmitter<DeviceSoftware>;
    remove: EventEmitter<DeviceSoftware>;
    onListEmpty: EventEmitter<boolean>;
    softwareItems$: Observable<IResultList<DeviceSoftware>>;
    showUpdate: boolean;
    showRemove: boolean;
    emptyList: boolean;
    noSearchResults: boolean;
    alreadyInstalledMessage: "This software is already installed on the device";
    supportsSoftwareOperations: boolean;
    private readonly operationTypes;
    private legacySoftwareList$;
    private destroyed$;
    constructor(deviceSoftwareService: DeviceSoftwareService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    isSoftwareGoingToBeChanged(software: DeviceSoftware): boolean;
    ngOnDestroy(): void;
    private notifyListEmpty;
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceSoftwareListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeviceSoftwareListComponent, "c8y-device-software-list", never, { "softwareList": "softwareList"; "device": "device"; "deviceSoftwareChanges": "deviceSoftwareChanges"; "filterCriteria$": "filterCriteria$"; }, { "update": "update"; "remove": "remove"; "onListEmpty": "onListEmpty"; }, never, [".c8y-empty-state:not(.c8y-no-results-state)", ".c8y-no-results-state"], false, never>;
}

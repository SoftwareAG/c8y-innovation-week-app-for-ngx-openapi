import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { IManagedObject, IOperation } from '@c8y/client';
import { ISelectModalObject, IUpdateItemEvent } from '@c8y/ngx-components';
import { DeviceSoftware, DeviceSoftwareChange, FilterCriteria, RepositoryService } from '@c8y/ngx-components/repository/shared';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class InstalledSoftwareComponent implements OnDestroy, OnInit {
    private repository;
    private bsModal;
    PRODUCT_EXPERIENCE: {
        SOFTWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_SOFTWARE_MODAL: string;
                DEVICE_SOFTWARE_CHANGES: string;
                DEVICE_SOFTWARE_LIST: string;
            };
            ACTIONS: {
                APPLY_SOFTWARE_CHANGES: string;
                CLEAR_SOFTWARE_CHANGES: string;
                OPEN_INSTALL_SOFTWARE: string;
                OPEN_UPDATE_SOFTWARE: string;
                DELETE_SOFTWARE: string;
            };
            RESULTS: {
                ADD_SOFTWARE: string;
                ADD_SOFTWARE_VERSION: string;
                EDIT_SOFTWARE: string;
            };
        };
        FIRMWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_FIRMWARE_MODAL: string;
                ADD_FIRMWAR_PATCH_MODAL: string;
                FIRMWARE_DEVICE_TAB: string;
                DEVICE_FIRMWARE_LIST: string;
            };
            ACTIONS: {
                FILTER_FIRMWARE_LIST: string;
                OPEN_INSTALL_FIRMWARE_DIALOG: string;
                OPEN_REPLACE_FIRMWARE_DIALOG: string;
                OPEN_INSTALL_FIRMWARE_PATCH_DIALOG: string;
            };
            RESULTS: {
                ADD_FIRMWARE: string;
                ADD_FIRMWARE_VERSION: string;
                ADD_FIRMWARE_PATCH: string;
                EDIT_FIRMWARE: string;
                CREATE_FIRMWARE_UPDATE_OPERATION: string;
            };
        };
        SHARED: {
            COMPONENTS: {
                REPOSITORY_SELECT_MODAL: string;
                SELECT_CONFIGURATION_MODAL: string;
            };
        };
    };
    device: IManagedObject;
    softwareList: DeviceSoftware[];
    deviceSoftwareChanges: DeviceSoftwareChange[];
    deviceSoftwareChangesOperation: IOperation;
    deviceSoftwareChangesInProgress: boolean;
    typesQuery: object;
    changes: EventEmitter<DeviceSoftwareChange[]>;
    showSoftwareChanges: EventEmitter<void>;
    alreadyInstalledWarningTemplate: TemplateRef<any>;
    alreadyInstalledMessage: "{{ name }} (v. {{ version }}) is already installed on this device";
    loadingTemplate: TemplateRef<any>;
    softwareTypeTemplate: TemplateRef<any>;
    showFilter: boolean;
    supportsSoftwareOperations: boolean;
    textFilter$: BehaviorSubject<string>;
    softwareTypeFilter$: BehaviorSubject<string>;
    filterCriteria$: Observable<FilterCriteria>;
    private readonly operationTypes;
    private queriesUtil;
    private modalSearch;
    private destroyed$;
    constructor(repository: RepositoryService, bsModal: BsModalService);
    ngOnInit(): void;
    installSoftware(): void;
    updateSoftware(softwareToUpdate: any): void;
    removeSoftware(softwareToRemove: any): void;
    getInstallableSoftwareListWithVersions$(searchTerm$: BehaviorSubject<FilterCriteria>): Observable<IManagedObject[]>;
    getSingleSoftwareWithVersions$(software: DeviceSoftware): Observable<IManagedObject[]>;
    attachVersions(softwareList: IManagedObject[]): IManagedObject[];
    displaySoftwareSelectModal(initialStateOverrides: any): {
        resultEmitter: EventEmitter<import("@c8y/ngx-components/repository/shared").SelectedRepositoryBinary[]>;
        choiceEmitter: EventEmitter<ISelectModalObject>;
        updateInstallableList$: Subject<IUpdateItemEvent<any>>;
    };
    search(filterCriteria: FilterCriteria): void;
    emitSoftwareInstall(items: DeviceSoftware[]): void;
    emitSoftwareRemoval(items: DeviceSoftware[]): void;
    ngOnDestroy(): void;
    private isSoftwareInstalledOnDevicePipe;
    static ɵfac: i0.ɵɵFactoryDeclaration<InstalledSoftwareComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InstalledSoftwareComponent, "c8y-installed-software", never, { "device": "device"; "softwareList": "softwareList"; "deviceSoftwareChanges": "deviceSoftwareChanges"; "deviceSoftwareChangesOperation": "deviceSoftwareChangesOperation"; "deviceSoftwareChangesInProgress": "deviceSoftwareChangesInProgress"; "typesQuery": "typesQuery"; }, { "changes": "changes"; "showSoftwareChanges": "showSoftwareChanges"; }, never, never, false, never>;
}

import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { DeviceSoftwareChange } from '@c8y/ngx-components/repository/shared';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class DeviceSoftwareChangesComponent implements OnChanges {
    PRODUCT_EXPERIENCE: {
        SOFTWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_SOFTWARE_MODAL: string;
                DEVICE_SOFTWARE_CHANGES: string;
                DEVICE_SOFTWARE_LIST: string;
            };
            ACTIONS: {
                APPLY_SOFTWARE_CHANGES: string;
                CLEAR_SOFTWARE_CHANGES: string;
                OPEN_INSTALL_SOFTWARE: string;
                OPEN_UPDATE_SOFTWARE: string;
                DELETE_SOFTWARE: string;
            };
            RESULTS: {
                ADD_SOFTWARE: string;
                ADD_SOFTWARE_VERSION: string;
                EDIT_SOFTWARE: string;
            };
        };
        FIRMWARE: {
            EVENTS: {
                REPOSITORY: string;
                DEVICE_TAB: string;
            };
            COMPONENTS: {
                ADD_FIRMWARE_MODAL: string;
                ADD_FIRMWAR_PATCH_MODAL: string;
                FIRMWARE_DEVICE_TAB: string;
                DEVICE_FIRMWARE_LIST: string;
            };
            ACTIONS: {
                FILTER_FIRMWARE_LIST: string;
                OPEN_INSTALL_FIRMWARE_DIALOG: string;
                OPEN_REPLACE_FIRMWARE_DIALOG: string;
                OPEN_INSTALL_FIRMWARE_PATCH_DIALOG: string;
            };
            RESULTS: {
                ADD_FIRMWARE: string;
                ADD_FIRMWARE_VERSION: string;
                ADD_FIRMWARE_PATCH: string;
                EDIT_FIRMWARE: string;
                CREATE_FIRMWARE_UPDATE_OPERATION: string;
            };
        };
        SHARED: {
            COMPONENTS: {
                REPOSITORY_SELECT_MODAL: string;
                SELECT_CONFIGURATION_MODAL: string;
            };
        };
    };
    changes: DeviceSoftwareChange[];
    changesInProgress: boolean;
    clear: EventEmitter<void>;
    drop: EventEmitter<DeviceSoftwareChange>;
    apply: EventEmitter<void>;
    hideSoftwareChanges: EventEmitter<void>;
    get applyButtonLabel(): "Applying changes…" | "Apply changes";
    changes$: BehaviorSubject<DeviceSoftwareChange[]>;
    installations$: import("rxjs").Observable<DeviceSoftwareChange[]>;
    removals$: import("rxjs").Observable<DeviceSoftwareChange[]>;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DeviceSoftwareChangesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DeviceSoftwareChangesComponent, "c8y-device-software-changes", never, { "changes": "changes"; "changesInProgress": "changesInProgress"; }, { "clear": "clear"; "drop": "drop"; "apply": "apply"; "hideSoftwareChanges": "hideSoftwareChanges"; }, never, never, false, never>;
}

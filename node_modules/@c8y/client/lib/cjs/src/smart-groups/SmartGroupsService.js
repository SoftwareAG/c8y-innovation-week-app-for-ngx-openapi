"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartGroupsService = void 0;
const application_1 = require("../application");
const Service_1 = require("../core/Service");
class SmartGroupsService extends Service_1.Service {
    constructor(client) {
        super(client);
        this.baseUrl = 'inventory';
        this.listUrl = 'managedObjects';
        this.SMART_GROUP_TYPE = 'c8y_DynamicGroup';
        this.SMART_GROUP_FRAGMENT_TYPE = 'c8y_IsDynamicGroup';
        this.DEVICE_GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
        this.DEVICE_GROUP_TYPE = 'c8y_DeviceGroup';
        this.DEVICE_SUBGROUP_TYPE = 'c8y_DeviceSubgroup';
        this.COLUMNS_CONFIG_FRAGMENT = 'c8y_DeviceColumnsConfig';
        this.FILTER_CONFIG_FRAGMENT = 'c8y_DeviceFilterConfig';
        this.QUERY_STRING_FRAGMENT = 'c8y_DeviceQueryString';
        this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME = 'smartgroup';
        this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH = 'service/smartgroup';
        this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH = `${this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH}/smartgroups`;
        this.applicationService = new application_1.ApplicationService(client);
    }
    /**
     * Gets the details of managed object
     *
     * @param {IdReference} entityOrId Entity or Id of the ManagedObject.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const id: string = '1';
     *    const filter: any = { withChildren: false };
     *
     *    (async () => {
     *      const {data, res} = await smartGroupsService.detail(id, filter);
     *   })();
     * ```
     */
    async detail(entityOrId, filter = {}) {
        return super.detail(entityOrId, filter);
    }
    /**
     * Creates a smart group managed object with columns configuration.
     *
     * @param {object} smartGroup Dynamic group managed object.
     * @param {object} deviceQueryString Columns configuration query string to filter the new group.
     * @param {object} configurableColumns Configurable columns definitions.
     * @param {object} filterConfig Columns filter configuration for the new group.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const smartGroup = { name: 'newName', type: 'c8y_DynamicGroup', c8y_IsDynamicGroup: {} };
     *    const deviceQueryString = 'c8y_DeviceQueryString: "$filter=(name eq 'test*') $orderby=c8y_Hardware.model asc';
     *    const configurableColumns = [
     *        {headerName: 'Status', active: false, key: 'status'},
     *        {headerName: 'Name', active: true, key: 'name', filter: { externalFilterQuery: { name: { names: ['test*'] } } }},
     *        {headerName: 'Model', active: true, key: 'model'}
     *    ];
     *
     *    (async () => {
     *      await smartGroupsService.create({ smartGroup, deviceQueryString, configurableColumns });
     *   })();
     *
     *    Note: filterConfig has been removed as a default property to the input object.
     *    Now it is part of the configurable columns properties as it is shown above.
     *    You can still pass it as an optional parameter.
     *    ( const filterConfig = [{ name: { names: ['test*'] } }] )
     * ```
     */
    async create(obj) {
        const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();
        const entity = {
            ...obj.smartGroup,
            [this.QUERY_STRING_FRAGMENT]: obj.deviceQueryString,
            [this.COLUMNS_CONFIG_FRAGMENT]: obj.configurableColumns,
            ...(obj.filterConfig && { [this.FILTER_CONFIG_FRAGMENT]: obj.filterConfig })
        };
        return isInstalled ? this.createSmartGroupV2(entity) : super.create(entity);
    }
    /**
     * Updates smart group managed object with given id.
     *
     * @param {Partial<IManagedObject>} mo Partial managed object of the smart group.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const smartGroup = { id: '1', name: 'newName' };
     *
     *    (async () => {
     *      await smartGroupsService.update(smartGroup);
     *   })();
     * ```
     */
    async update(mo, filter = {}) {
        const { id } = mo;
        const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();
        const { data: groupMo } = await this.detail(id, { withChildren: false });
        return isInstalled && this.isSmartGroupV2(groupMo)
            ? this.updateSmartGroupV2(mo, filter)
            : super.update(mo);
    }
    /**
     * Updates smart group v2 managed object with given id.
     *
     * @param {Partial<IManagedObject>} mo Partial managed object of the smart group v2.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const smartGroupV2 = { id: '1', name: 'newName' };
     *
     *    (async () => {
     *      await smartGroupsService.updateSmartGroupV2(smartGroupV2);
     *   })();
     * ```
     */
    async updateSmartGroupV2(mo, filter = {}) {
        const { id, ...partialMo } = mo;
        const method = 'PUT';
        const body = JSON.stringify(this.onBeforeUpdate(partialMo));
        const headers = { 'content-type': 'application/json', accept: 'application/json' };
        const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;
        const res = await this.fetch(url, { method, body, headers, params: { ...filter } });
        const data = await res.json();
        return { res, data };
    }
    /**
     * Removes managed object with given id.
     *
     * @param {IManagedObject} group Managed object of the group.
     * @param {object} params Additional query params.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *   const group = { id: '1' } as IManagedObject;
     *   const params: any = {
     *     withChildren: false
     *   }
     *
     *    (async () => {
     *      await smartGroupsService.delete(group, params);
     *   })();
     * ```
     */
    async delete(entityOrId, params = {}) {
        const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();
        const data = (await this.detail(entityOrId, { withChildren: false })).data;
        return isInstalled && this.isSmartGroupV2(data)
            ? await this.removeSmartGroupV2(data)
            : await super.delete(data, params);
    }
    /**
     * Checks if the smart groups v2 microservice is installed.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await smartGroupsService.isSmartGroupsV2MicroserviceInstalled();
     *   })();
     * ```
     */
    isSmartGroupsV2MicroserviceInstalled() {
        return this.applicationService.isAvailable({
            name: this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME
        });
    }
    /**
     * Checks whether a given managed object is a smart group
     *
     * @param {IManagedObject} mo Managed object to check.
     *
     * @returns boolean
     *
     * @example
     * ```typescript
     *
     *    const mo: IManagedObject = {id: 1, type: "c8y_DeviceGroup", c8y_IsDeviceGroup: {}} as IManagedObject;
     *
     *    (() => {
     *      const isSmartGroup = smartGroupsService.isSmartGroup(mo);
     *   })();
     * ```
     */
    isSmartGroup(mo) {
        const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);
        const isSmartGroupType = mo && mo.type === this.SMART_GROUP_TYPE;
        return hasSmartGroupFragmentType || isSmartGroupType;
    }
    /**
     * Checks whether a given managed object is a smart group v2
     *
     * @param {IManagedObject} mo Managed object to check.
     *
     * @returns boolean
     *
     * @example
     * ```typescript
     *
     *    const mo: IManagedObject = {id: 1, type: "c8y_DeviceGroup", c8y_IsDeviceGroup: {}} as IManagedObject;
     *
     *    (() => {
     *      const isSmartGroup = smartGroupsService.isSmartGroupV2(mo);
     *   })();
     * ```
     */
    isSmartGroupV2(mo) {
        const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);
        const hasDeviceGroupFragmentType = mo.hasOwnProperty(this.DEVICE_GROUP_FRAGMENT_TYPE);
        const isGroupOrSubgroup = (mo && mo.type === this.DEVICE_GROUP_TYPE) || mo.type === this.DEVICE_SUBGROUP_TYPE;
        return hasSmartGroupFragmentType && hasDeviceGroupFragmentType && isGroupOrSubgroup;
    }
    /**
     * Removes smart group v2 managed object with given id.
     *
     * @param {IdReference} entityOrId entity or Id of the ManagedObject.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @example
     * ```typescript
     *
     *    const id: string = '1';
     *
     *    (async () => {
     *      await smartGroupsService.removeSmartGroupV2(id);
     *   })();
     * ```
     */
    async removeSmartGroupV2(entityOrId) {
        let id;
        if (typeof entityOrId === 'object' && entityOrId.id) {
            id = entityOrId.id;
        }
        else {
            id = entityOrId;
        }
        const method = 'DELETE';
        const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;
        const res = await this.client.fetch(url, { method });
        return { res, data: null };
    }
    getUrl(url = '') {
        const partialUrl = url.replace(/^\/+/, '');
        const baseUrl = this.baseUrl.replace(/\/+$/, '');
        if (url.includes(this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH)) {
            return partialUrl;
        }
        else {
            return `${baseUrl}/${partialUrl}`;
        }
    }
    async createSmartGroupV2(entity) {
        const method = 'POST';
        const body = JSON.stringify(entity);
        const headers = { 'content-type': 'application/json', accept: 'application/json' };
        const url = this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH;
        const res = await this.fetch(url, { method, body, headers });
        const data = await res.json();
        return { res, data };
    }
}
exports.SmartGroupsService = SmartGroupsService;
//# sourceMappingURL=SmartGroupsService.js.map
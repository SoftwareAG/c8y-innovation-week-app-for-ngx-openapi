"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlarmService = void 0;
const core_1 = require("../core");
/**
 * This class allows for managing alarms.
 */
class AlarmService extends core_1.Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'alarm';
        this.listUrl = 'alarms';
        this.propertyName = 'alarms';
        this.channel = '/alarms/*';
    }
    /**
     * Gets the details of selected alarms.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const alarmId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await alarmService.detail(alarmId);
     *    })();
     * ```
     */
    async detail(entityOrId) {
        return super.detail(entityOrId);
    }
    /**
     * Creates a new alarm.
     *
     * @param {IAlarm} entity Alarm object with mandantory fragments.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const mandantoryObject: IAlarm = {
     *    severity: Severity.CRITICAL,
     *    source: device,
     *    text: 'I am an Alarm!',
     *    time: '2018-05-02T10:08:00Z',
     *    type: 'device-type-here',
     *  };
     *
     *  (async () => {
     *    const {data, res} = await alarmService.create(mandantoryObject);
     *  })();
     * ```
     */
    async create(entity) {
        return super.create(entity);
    }
    /**
     * Updates alarm data.
     *
     * @param {Partial<IAlarm>} entity Alarm is partially updatable.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const partialUpdateObject: Partial<IAlarm> = {
     *    severity: Severity.MINOR,
     *    source: device,
     *    text: 'Changed Alarm!'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await alarmService.update(partialUpdateObject);
     *  })();
     * ```
     */
    async update(entity) {
        return super.update(entity);
    }
    /**
     * Gets the list of alarms filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying alarms.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     severity: Severity.MAJOR,
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await alarmService.list(filter);
     *   })();
     * ```
     */
    async list(filter = {}) {
        return super.list(filter);
    }
}
exports.AlarmService = AlarmService;
//# sourceMappingURL=AlarmService.js.map